{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/test/testcases.py lines 1523-1528)": "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n",
    "Location 2 (/root/hy/projects/django/django/core/servers/basehttp.py lines 169-177)": "\ndef handle(self):\n    from django.db import connections\n    try:\n        self.close_connection = True\n        self.handle_one_request()\n        while not self.close_connection:\n            self.handle_one_request()\n        try:\n            self.connection.shutdown(socket.SHUT_WR)\n        except (AttributeError, OSError):\n            pass\n    finally:\n        # Close database connections when the request handler thread completes\n        connections.close_all()\n",
    "Location 3 (/root/hy/projects/django/django/core/servers/basehttp.py lines 116-118)": "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/test/testcases.py lines 1523-1528)": [
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        from django.db import connections\n        connections.close_all()\n        self.join()\n",
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n",
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n",
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n",
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n",
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n",
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n",
      "\n    def terminate(self):\n        if hasattr(self, 'httpd'):\n            # Stop the WSGI server\n            self.httpd.shutdown()\n            self.httpd.server_close()\n        # Ensure database connections are closed when terminating\n        connections.close_all()\n        self.join()\n"
    ],
    "Location 2 (/root/hy/projects/django/django/core/servers/basehttp.py lines 169-177)": [
      "\n    def handle(self):\n        from django.db import connections\n        try:\n            self.close_connection = True\n            self.handle_one_request()\n            while not self.close_connection:\n                self.handle_one_request()\n            try:\n                self.connection.shutdown(socket.SHUT_WR)\n            except (AttributeError, OSError):\n                pass\n        finally:\n            # Close database connections when the request handler thread completes\n            connections.close_all()\n",
      "\ndef handle(self):\n    from django.db import connections\n    try:\n        self.close_connection = True\n        self.handle_one_request()\n        while not self.close_connection:\n            self.handle_one_request()\n        try:\n            self.connection.shutdown(socket.SHUT_WR)\n        except (AttributeError, OSError):\n            pass\n    finally:\n        # Close database connections when the request handler thread completes\n        connections.close_all()\n",
      "\n    def handle(self):\n        from django.db import connections\n        try:\n            self.close_connection = True\n            self.handle_one_request()\n            while not self.close_connection:\n                self.handle_one_request()\n            try:\n                self.connection.shutdown(socket.SHUT_WR)\n            except (AttributeError, OSError):\n                pass\n        finally:\n            # Close database connections when the request handler thread completes\n            connections.close_all()\n",
      "\n    def handle(self):\n        from django.db import connections\n        try:\n            self.close_connection = True\n            self.handle_one_request()\n            while not self.close_connection:\n                self.handle_one_request()\n            try:\n                self.connection.shutdown(socket.SHUT_WR)\n            except (AttributeError, OSError):\n                pass\n        finally:\n            # Close database connections when the request handler thread completes\n            connections.close_all()\n",
      "\n    def handle(self):\n        from django.db import connections\n        try:\n            self.close_connection = True\n            self.handle_one_request()\n            while not self.close_connection:\n                self.handle_one_request()\n            try:\n                self.connection.shutdown(socket.SHUT_WR)\n            except (AttributeError, OSError):\n                pass\n        finally:\n            # Close database connections when the request handler thread completes\n            connections.close_all()\n",
      "\n    def handle(self):\n        from django.db import connections\n        try:\n            self.close_connection = True\n            self.handle_one_request()\n            while not self.close_connection:\n                self.handle_one_request()\n            try:\n                self.connection.shutdown(socket.SHUT_WR)\n            except (AttributeError, OSError):\n                pass\n        finally:\n            # Close database connections when the request handler thread completes\n            connections.close_all()\n",
      "\ndef handle(self):\n    from django.db import connections\n    try:\n        self.close_connection = True\n        self.handle_one_request()\n        while not self.close_connection:\n            self.handle_one_request()\n        try:\n            self.connection.shutdown(socket.SHUT_WR)\n        except (AttributeError, OSError):\n            pass\n    finally:\n        # Close database connections when the request handler thread completes\n        connections.close_all()\n",
      "\n    def handle(self):\n        from django.db import connections\n        try:\n            self.close_connection = True\n            self.handle_one_request()\n            while not self.close_connection:\n                self.handle_one_request()\n            try:\n                self.connection.shutdown(socket.SHUT_WR)\n            except (AttributeError, OSError):\n                pass\n        finally:\n            # Close database connections when the request handler thread completes\n            connections.close_all()\n"
    ],
    "Location 3 (/root/hy/projects/django/django/core/servers/basehttp.py lines 116-118)": [
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n",
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n",
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n",
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n",
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n",
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n",
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n",
      "\n    def close(self):\n        from django.db import connections\n        self.get_stdin()._read_limited()\n        super().close()\n        # Close database connections after handling each request\n        connections.close_all()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..4b688e8cbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,15 +170,21 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n+\n     def handle(self):\n-        self.close_connection = True\n-        self.handle_one_request()\n-        while not self.close_connection:\n-            self.handle_one_request()\n+        from django.db import connections\n         try:\n-            self.connection.shutdown(socket.SHUT_WR)\n-        except (AttributeError, OSError):\n-            pass\n+            self.close_connection = True\n+            self.handle_one_request()\n+            while not self.close_connection:\n+                self.handle_one_request()\n+            try:\n+                self.connection.shutdown(socket.SHUT_WR)\n+            except (AttributeError, OSError):\n+                pass\n+        finally:\n+            # Close database connections when the request handler thread completes\n+            connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_0": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..c3c72422e7 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,7 +170,10 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n-    def handle(self):\n+\n+def handle(self):\n+    from django.db import connections\n+    try:\n         self.close_connection = True\n         self.handle_one_request()\n         while not self.close_connection:\n@@ -175,6 +182,9 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n             self.connection.shutdown(socket.SHUT_WR)\n         except (AttributeError, OSError):\n             pass\n+    finally:\n+        # Close database connections when the request handler thread completes\n+        connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_1": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..4b688e8cbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,15 +170,21 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n+\n     def handle(self):\n-        self.close_connection = True\n-        self.handle_one_request()\n-        while not self.close_connection:\n-            self.handle_one_request()\n+        from django.db import connections\n         try:\n-            self.connection.shutdown(socket.SHUT_WR)\n-        except (AttributeError, OSError):\n-            pass\n+            self.close_connection = True\n+            self.handle_one_request()\n+            while not self.close_connection:\n+                self.handle_one_request()\n+            try:\n+                self.connection.shutdown(socket.SHUT_WR)\n+            except (AttributeError, OSError):\n+                pass\n+        finally:\n+            # Close database connections when the request handler thread completes\n+            connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..a1ab2d9ac1 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,15 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        from django.db import connections\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_2": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..c3c72422e7 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,7 +170,10 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n-    def handle(self):\n+\n+def handle(self):\n+    from django.db import connections\n+    try:\n         self.close_connection = True\n         self.handle_one_request()\n         while not self.close_connection:\n@@ -175,6 +182,9 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n             self.connection.shutdown(socket.SHUT_WR)\n         except (AttributeError, OSError):\n             pass\n+    finally:\n+        # Close database connections when the request handler thread completes\n+        connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_3": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..4b688e8cbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,15 +170,21 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n+\n     def handle(self):\n-        self.close_connection = True\n-        self.handle_one_request()\n-        while not self.close_connection:\n-            self.handle_one_request()\n+        from django.db import connections\n         try:\n-            self.connection.shutdown(socket.SHUT_WR)\n-        except (AttributeError, OSError):\n-            pass\n+            self.close_connection = True\n+            self.handle_one_request()\n+            while not self.close_connection:\n+                self.handle_one_request()\n+            try:\n+                self.connection.shutdown(socket.SHUT_WR)\n+            except (AttributeError, OSError):\n+                pass\n+        finally:\n+            # Close database connections when the request handler thread completes\n+            connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_4": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..4b688e8cbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,15 +170,21 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n+\n     def handle(self):\n-        self.close_connection = True\n-        self.handle_one_request()\n-        while not self.close_connection:\n-            self.handle_one_request()\n+        from django.db import connections\n         try:\n-            self.connection.shutdown(socket.SHUT_WR)\n-        except (AttributeError, OSError):\n-            pass\n+            self.close_connection = True\n+            self.handle_one_request()\n+            while not self.close_connection:\n+                self.handle_one_request()\n+            try:\n+                self.connection.shutdown(socket.SHUT_WR)\n+            except (AttributeError, OSError):\n+                pass\n+        finally:\n+            # Close database connections when the request handler thread completes\n+            connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_5": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..4b688e8cbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,15 +170,21 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n+\n     def handle(self):\n-        self.close_connection = True\n-        self.handle_one_request()\n-        while not self.close_connection:\n-            self.handle_one_request()\n+        from django.db import connections\n         try:\n-            self.connection.shutdown(socket.SHUT_WR)\n-        except (AttributeError, OSError):\n-            pass\n+            self.close_connection = True\n+            self.handle_one_request()\n+            while not self.close_connection:\n+                self.handle_one_request()\n+            try:\n+                self.connection.shutdown(socket.SHUT_WR)\n+            except (AttributeError, OSError):\n+                pass\n+        finally:\n+            # Close database connections when the request handler thread completes\n+            connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_6": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..4b688e8cbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,15 +170,21 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n+\n     def handle(self):\n-        self.close_connection = True\n-        self.handle_one_request()\n-        while not self.close_connection:\n-            self.handle_one_request()\n+        from django.db import connections\n         try:\n-            self.connection.shutdown(socket.SHUT_WR)\n-        except (AttributeError, OSError):\n-            pass\n+            self.close_connection = True\n+            self.handle_one_request()\n+            while not self.close_connection:\n+                self.handle_one_request()\n+            try:\n+                self.connection.shutdown(socket.SHUT_WR)\n+            except (AttributeError, OSError):\n+                pass\n+        finally:\n+            # Close database connections when the request handler thread completes\n+            connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_7": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..c3c72422e7 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,7 +170,10 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n-    def handle(self):\n+\n+def handle(self):\n+    from django.db import connections\n+    try:\n         self.close_connection = True\n         self.handle_one_request()\n         while not self.close_connection:\n@@ -175,6 +182,9 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n             self.connection.shutdown(socket.SHUT_WR)\n         except (AttributeError, OSError):\n             pass\n+    finally:\n+        # Close database connections when the request handler thread completes\n+        connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n",
    "variant_8": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..4b688e8cbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -113,9 +113,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n \n+\n     def close(self):\n+        from django.db import connections\n         self.get_stdin()._read_limited()\n         super().close()\n+        # Close database connections after handling each request\n+        connections.close_all()\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -166,15 +170,21 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n         return super().get_environ()\n \n+\n     def handle(self):\n-        self.close_connection = True\n-        self.handle_one_request()\n-        while not self.close_connection:\n-            self.handle_one_request()\n+        from django.db import connections\n         try:\n-            self.connection.shutdown(socket.SHUT_WR)\n-        except (AttributeError, OSError):\n-            pass\n+            self.close_connection = True\n+            self.handle_one_request()\n+            while not self.close_connection:\n+                self.handle_one_request()\n+            try:\n+                self.connection.shutdown(socket.SHUT_WR)\n+            except (AttributeError, OSError):\n+                pass\n+        finally:\n+            # Close database connections when the request handler thread completes\n+            connections.close_all()\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..ec450fbebc 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1520,11 +1520,14 @@ class LiveServerThread(threading.Thread):\n             allow_reuse_address=False,\n         )\n \n+\n     def terminate(self):\n         if hasattr(self, 'httpd'):\n             # Stop the WSGI server\n             self.httpd.shutdown()\n             self.httpd.server_close()\n+        # Ensure database connections are closed when terminating\n+        connections.close_all()\n         self.join()\n \n \n"
  }
}