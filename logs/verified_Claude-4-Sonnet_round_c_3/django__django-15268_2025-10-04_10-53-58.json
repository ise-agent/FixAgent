{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 470-529)": "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and\n                self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
    "Location 2 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 532-541)": "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
    "Location 3 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 543-551)": "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_serialized(self):\n        return self.serializer_factory(self.option_value).serialize()\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            (),\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            schema_editor.alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 470-529)": [
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and\n                self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and \n            self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and\n            self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and \n            self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and\n                self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and\n                self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and \n            self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name)\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and \n            self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def references_field(self, model_name, name, app_label):\n        return (\n            self.references_model(model_name, app_label) and\n            (\n                not self.option_value or\n                any((name in fields) for fields in self.option_value)\n            )\n        )\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 532-541)": [
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n",
      "\nclass AlterUniqueTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of unique_together to the target one.\n    Input value of unique_together must be a set of tuples.\n    \"\"\"\n    option_name = 'unique_together'\n\n    def __init__(self, name, unique_together):\n        super().__init__(name, unique_together)\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 543-551)": [
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_normalized(self):\n        return set(normalize_together(self.option_value))\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value_normalized},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value_normalized))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(AlterModelOptions):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        if option_value:\n            option_value = set(normalize_together(option_value))\n        setattr(self, self.option_name, option_value)\n        super().__init__(name, **{self.option_name: option_value})\n\n    @cached_property\n    def option_value(self):\n        return getattr(self, self.option_name)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and\n            self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (\n            self.option_name, self.name,\n            len(self.option_value or '')\n        )\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_normalized(self):\n        return normalize_together(self.option_value)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value_normalized},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value_normalized))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_normalized(self):\n        return normalize_together(self.option_value)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value_normalized},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (\n            self.option_name, self.name,\n            len(self.option_value_normalized or '')\n        )\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_serialized(self):\n        return self.serializer_factory(self.option_value).serialize()\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if (isinstance(operation, self.__class__) and \n            self.name_lower == operation.name_lower):\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value))\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_serialized(self):\n        return self.serializer_factory(self.option_value).serialize()[0]\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_normalized(self):\n        return normalize_together(self.option_value)\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        model_state = state.models[app_label, self.name_lower]\n        model_state.options[self.option_name] = self.option_value_normalized\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            schema_editor.alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (\n            self.option_name, self.name,\n            len(self.option_value or '')\n        )\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n",
      "\nclass AlterTogetherOptionOperation(ModelOptionOperation):\n    option_name = None\n\n    def __init__(self, name, option_value):\n        self.option_value = option_value\n        super().__init__(name)\n\n    @cached_property\n    def option_value_serialized(self):\n        return self.serializer_factory(self.option_value).serialize()\n\n    def deconstruct(self):\n        kwargs = {\n            'name': self.name,\n            self.option_name: self.option_value,\n        }\n        return (\n            self.__class__.__qualname__,\n            [],\n            kwargs\n        )\n\n    def state_forwards(self, app_label, state):\n        state.alter_model_options(\n            app_label,\n            self.name_lower,\n            {self.option_name: self.option_value},\n        )\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.name)\n            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n            alter_together(\n                new_model,\n                getattr(old_model._meta, self.option_name, set()),\n                getattr(new_model._meta, self.option_name, set()),\n            )\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n            return [operation]\n        return super().reduce(operation, app_label)\n\n    def describe(self):\n        return \"Alter %s for %s (%s constraint(s))\" % (\n            self.option_name, self.name,\n            len(self.option_value or [])\n        )\n\n    @property\n    def migration_name_fragment(self):\n        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..50b2d92694 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+                self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..c39d036ee7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+                self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,59 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_serialized(self):\n+        return self.serializer_factory(self.option_value).serialize()\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            (),\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            schema_editor.alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..66049452f9 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+                self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,60 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_normalized(self):\n+        return set(normalize_together(self.option_value))\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value_normalized},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value_normalized))\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..91f9e4f2ba 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and \n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,66 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(AlterModelOptions):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        if option_value:\n+            option_value = set(normalize_together(option_value))\n+        setattr(self, self.option_name, option_value)\n+        super().__init__(name, **{self.option_name: option_value})\n+\n+    @cached_property\n+    def option_value(self):\n+        return getattr(self, self.option_name)\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (\n+            self.option_name, self.name,\n+            len(self.option_value or '')\n+        )\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..01762991b7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,60 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_normalized(self):\n+        return normalize_together(self.option_value)\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value_normalized},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value_normalized))\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..5b8a8aae7e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and \n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,63 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_normalized(self):\n+        return normalize_together(self.option_value)\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value_normalized},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (\n+            self.option_name, self.name,\n+            len(self.option_value_normalized or '')\n+        )\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..dedea024d4 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+                self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,61 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_serialized(self):\n+        return self.serializer_factory(self.option_value).serialize()\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and \n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value))\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..30c6efd0ae 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+                self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,56 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_serialized(self):\n+        return self.serializer_factory(self.option_value).serialize()[0]\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..579f5df1bf 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and \n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,59 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_normalized(self):\n+        return normalize_together(self.option_value)\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        model_state = state.models[app_label, self.name_lower]\n+        model_state.options[self.option_name] = self.option_value_normalized\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            schema_editor.alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (\n+            self.option_name, self.name,\n+            len(self.option_value or '')\n+        )\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..eecc1f833b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -467,6 +467,7 @@ class AlterModelTable(ModelOptionOperation):\n         return 'alter_%s_table' % self.name_lower\n \n \n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \n@@ -512,6 +513,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and \n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def references_field(self, model_name, name, app_label):\n         return (\n             self.references_model(model_name, app_label) and\n@@ -529,6 +536,7 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n@@ -540,15 +548,63 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-    option_name = \"index_together\"\n+class AlterTogetherOptionOperation(ModelOptionOperation):\n+    option_name = None\n+\n+    def __init__(self, name, option_value):\n+        self.option_value = option_value\n+        super().__init__(name)\n+\n+    @cached_property\n+    def option_value_serialized(self):\n+        return self.serializer_factory(self.option_value).serialize()\n \n-    def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            self.option_name: self.option_value,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label,\n+            self.name_lower,\n+            {self.option_name: self.option_value},\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(\n+                new_model,\n+                getattr(old_model._meta, self.option_name, set()),\n+                getattr(new_model._meta, self.option_name, set()),\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+    def describe(self):\n+        return \"Alter %s for %s (%s constraint(s))\" % (\n+            self.option_name, self.name,\n+            len(self.option_value or [])\n+        )\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n"
  }
}