{
  "zero_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 58-59)": "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
    "Location 2 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 55-60)": "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
    "Location 3 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 62-62)": "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Wrap output in a pandas container.\n\n    If the output is a one or two dimensional array, the output will be a\n    pandas Series or DataFrame, respectively. If the output is a sparse\n    matrix, the output will be a DataFrame with sparse values.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns the column names. The\n        callable is useful if the column names require some computation.\n        If `columns` is a callable that raises an error, `columns` will have\n        the same semantics as `None`. If `None` and `data_to_wrap` is already a\n        dataframe, then the column names are not changed. If `None` and\n        `data_to_wrap` is **not** a dataframe, then columns are given the default\n        names.\n    index : array-like, default=None\n        Index for data. `index` is ignored if `data_to_wrap` is already a\n        DataFrame.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped array.\n\n    Raises\n    ------\n    ImportError\n        Raised when pandas is not installed.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # Validate index length compatibility before creating DataFrame\n    if index is not None and len(index) != len(data_to_wrap):\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
    "Location 4 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 130-134)": "\n    if index is not None and hasattr(data_to_wrap, \"index\"):\n        # Only assign index if lengths match to avoid ValueError\n        if len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
    "Location 5 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 10-15)": "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the DataFrame.\n    index : array-like, optional\n        Index for the DataFrame. If provided, must have the same length as\n        the number of rows in data_to_wrap.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if hasattr(data_to_wrap, \"iloc\"):\n        # `data_to_wrap` is a pandas DataFrame\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # `data_to_wrap` is a NumPy ndarray\n    # Validate index length if provided\n    if index is not None and len(index) != len(data_to_wrap):\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 58-59)": [
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n        if index is not None:\n            # Only assign index if it matches the data length\n            if len(index) == len(data_to_wrap):\n                data_to_wrap.index = index\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n        if index is not None:\n            # Only set index if it matches the DataFrame length\n            if len(index) == len(data_to_wrap):\n                data_to_wrap.index = index\n"
    ],
    "Location 2 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 55-60)": [
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n"
    ],
    "Location 3 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 62-62)": [
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Wrap output in a pandas container.\n\n    If the output is a one or two dimensional ndarray, then the output returned\n    is a pandas DataFrame. If the output is a sparse matrix, then the output\n    returned is a sparse pandas Series or DataFrame.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, sparse matrix}\n        Data to be wrapped as pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns the column names. The\n        number of names must match the number of columns in `data_to_wrap`.\n        If `None`, then no column names are set.\n    index : array-like, default=None\n        The row labels to use for the resulting pandas container. By default,\n        a RangeIndex is used.\n\n    Returns\n    -------\n    container\n        Returns a pandas DataFrame or Series.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Sparse output is not supported.\")\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # Check index compatibility before creating DataFrame\n    if index is not None and len(index) != len(data_to_wrap):\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n",
      "\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n"
    ],
    "Location 4 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 130-134)": [
      "\n    if index is not None and hasattr(data_to_wrap, \"index\"):\n        # Only set index if lengths match to avoid ValueError\n        if len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
      "\n    if hasattr(data_to_wrap, \"index\"):\n        # Validate index length matches data length before assignment\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
      "\n    if hasattr(data_to_wrap, \"index\"):\n        # Check if index length matches data length before assignment\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
      "\n    if hasattr(data_to_wrap, \"index\"):\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
      "\n    if hasattr(data_to_wrap, \"index\"):\n        # Check if index length matches data length before assignment\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
      "\n    if hasattr(data_to_wrap, \"index\"):\n        # Validate index length matches data length before assignment\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
      "\n    if hasattr(data_to_wrap, \"index\"):\n        # Validate index length matches data before assignment\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n",
      "\n    if hasattr(data_to_wrap, \"index\"):\n        # Only preserve index if dimensions match to avoid ValueError\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n"
    ],
    "Location 5 (/root/hy/projects/scikit-learn/sklearn/utils/_set_output.py lines 10-15)": [
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the DataFrame.\n    index : array-like, default=None\n        Index for the DataFrame. If provided, must have the same length as\n        data_to_wrap rows. If length mismatch occurs, default index is used.\n    \"\"\"\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the DataFrame.\n    index : array-like, optional\n        Index for the DataFrame. If provided, must have the same length as the\n        number of rows in data_to_wrap.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `dataframe`.\n    \"\"\"\n    try:\n        pd = check_pandas_support(\"Setting output container to 'pandas'\")\n    except ImportError:\n        raise ValueError(\"Pandas output container requires pandas to be installed.\")\n\n    if hasattr(data_to_wrap, \"iloc\"):\n        # `data_to_wrap` is a dataframe\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # `data_to_wrap` is a ndarray\n    # Validate index length if provided\n    if index is not None and len(index) != data_to_wrap.shape[0]:\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the dataframe.\n    index : array-like, default=None\n        Index for the dataframe. If None, default index is used.\n        If provided, must have the same length as the number of rows in data_to_wrap.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if hasattr(data_to_wrap, \"iloc\"):\n        # `data_to_wrap` is a pandas DataFrame\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # `data_to_wrap` is a NumPy ndarray\n    # Validate index length before creating DataFrame\n    if index is not None and len(index) != len(data_to_wrap):\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the DataFrame.\n    index : array-like, default=None\n        Index for the DataFrame. If provided, must have the same length as\n        the number of rows in data_to_wrap.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if hasattr(data_to_wrap, \"iloc\"):\n        # `data_to_wrap` is a pandas DataFrame\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # `data_to_wrap` is a NumPy ndarray\n    # Validate index length before creating DataFrame\n    if index is not None and len(index) != data_to_wrap.shape[0]:\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names or None.\n    index : array-like, default=None\n        Index for the dataframe or None.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if hasattr(data_to_wrap, \"iloc\"):\n        pd = check_pandas_support(\"Setting output container to 'pandas'\")\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n    # Validate index length before creating DataFrame\n    if index is not None and len(index) != data_to_wrap.shape[0]:\n        index = None\n    return pd.DataFrame(data_to_wrap, columns=columns, index=index)\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the DataFrame.\n    index : array-like, optional\n        Index for the DataFrame. If provided, its length must match the number\n        of rows in data_to_wrap.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if hasattr(data_to_wrap, \"iloc\"):\n        # `data_to_wrap` is a pandas DataFrame\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # `data_to_wrap` is a NumPy array\n    # Validate index length before creating DataFrame\n    if index is not None and len(index) != data_to_wrap.shape[0]:\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the DataFrame.\n    index : array-like, default=None\n        Index for the DataFrame. If None, default index will be used.\n        If provided, must have the same length as the number of rows in data_to_wrap.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    try:\n        pd = check_pandas_support(\"_wrap_in_pandas_container\")\n    except ImportError:\n        return data_to_wrap\n\n    if hasattr(data_to_wrap, \"iloc\"):\n        # `data_to_wrap` is a dataframe\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    # `data_to_wrap` is a ndarray\n    # Check if index length matches data length before creating DataFrame\n    if index is not None and len(index) != len(data_to_wrap):\n        index = None\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n    columns : array-like\n        Column names for the DataFrame.\n    index : array-like, optional\n        Index for the DataFrame. If provided, its length must match the number\n        of rows in `data_to_wrap`.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    pd = check_pandas_support(\"_wrap_in_pandas_container\")\n    \n    if hasattr(data_to_wrap, \"iloc\"):\n        # data_to_wrap is a DataFrame\n        data_to_wrap.columns = columns\n        if index is not None and len(index) == len(data_to_wrap):\n            data_to_wrap.index = index\n        return data_to_wrap\n    \n    # data_to_wrap is not a DataFrame, create new one\n    if index is not None and len(index) != len(data_to_wrap):\n        index = None\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..901390849 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,14 +53,17 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    return pd.DataFrame(data_to_wrap, index=index if index is not None and len(index) == len(data_to_wrap) else None, columns=columns)\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,9 +131,15 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+\n+    # Check if transformed data has same number of rows as original input\n+    original_index = getattr(original_input, \"index\", None)\n+    if original_index is not None and hasattr(data_to_wrap, '__len__') and len(original_index) != len(data_to_wrap):\n+        original_index = None\n+    \n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_0": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..cf3803daf 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,42 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the DataFrame.\n+    index : array-like, optional\n+        Index for the DataFrame. If provided, must have the same length as\n+        the number of rows in data_to_wrap.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n+    \"\"\"\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n+    if hasattr(data_to_wrap, \"iloc\"):\n+        # `data_to_wrap` is a pandas DataFrame\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+\n+    # `data_to_wrap` is a NumPy ndarray\n+    # Validate index length if provided\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n+    \n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,13 +89,80 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+        return data_to_wrap\n+\n+\n+def _wrap_in_pandas_container(\n+    data_to_wrap,\n+    *,\n+    columns,\n+    index=None,\n+):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    If the output is a one or two dimensional array, the output will be a\n+    pandas Series or DataFrame, respectively. If the output is a sparse\n+    matrix, the output will be a DataFrame with sparse values.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns the column names. The\n+        callable is useful if the column names require some computation.\n+        If `columns` is a callable that raises an error, `columns` will have\n+        the same semantics as `None`. If `None` and `data_to_wrap` is already a\n+        dataframe, then the column names are not changed. If `None` and\n+        `data_to_wrap` is **not** a dataframe, then columns are given the default\n+        names.\n+    index : array-like, default=None\n+        Index for data. `index` is ignored if `data_to_wrap` is already a\n+        DataFrame.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped array.\n+\n+    Raises\n+    ------\n+    ImportError\n+        Raised when pandas is not installed.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n \n+    # Validate index length compatibility before creating DataFrame\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n+    \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -127,11 +231,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if index is not None and hasattr(data_to_wrap, \"index\"):\n+        # Only assign index if lengths match to avoid ValueError\n+        if len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_1": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..28ce1e2d5 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,22 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the DataFrame.\n+    index : array-like, default=None\n+        Index for the DataFrame. If provided, must have the same length as\n+        data_to_wrap rows. If length mismatch occurs, default index is used.\n+    \"\"\"\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,14 +69,26 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,11 +156,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if index is not None and hasattr(data_to_wrap, \"index\"):\n+        # Only set index if lengths match to avoid ValueError\n+        if len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_2": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..aa75cada3 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,45 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the DataFrame.\n+    index : array-like, optional\n+        Index for the DataFrame. If provided, must have the same length as the\n+        number of rows in data_to_wrap.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `dataframe`.\n+    \"\"\"\n+    try:\n+        pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+    except ImportError:\n+        raise ValueError(\"Pandas output container requires pandas to be installed.\")\n+\n+    if hasattr(data_to_wrap, \"iloc\"):\n+        # `data_to_wrap` is a dataframe\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+\n+    # `data_to_wrap` is a ndarray\n+    # Validate index length if provided\n+    if index is not None and len(index) != data_to_wrap.shape[0]:\n+        index = None\n+    \n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,14 +92,26 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,11 +179,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if hasattr(data_to_wrap, \"index\"):\n+        # Validate index length matches data length before assignment\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_3": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..81c951044 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,42 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the dataframe.\n+    index : array-like, default=None\n+        Index for the dataframe. If None, default index is used.\n+        If provided, must have the same length as the number of rows in data_to_wrap.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n+    \"\"\"\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n+    if hasattr(data_to_wrap, \"iloc\"):\n+        # `data_to_wrap` is a pandas DataFrame\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+\n+    # `data_to_wrap` is a NumPy ndarray\n+    # Validate index length before creating DataFrame\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n+    \n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,13 +89,65 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+        return data_to_wrap\n+\n+\n+def _wrap_in_pandas_container(\n+    data_to_wrap,\n+    *,\n+    columns,\n+    index=None,\n+):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    If the output is a one or two dimensional ndarray, then the output returned\n+    is a pandas DataFrame. If the output is a sparse matrix, then the output\n+    returned is a sparse pandas Series or DataFrame.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, sparse matrix}\n+        Data to be wrapped as pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns the column names. The\n+        number of names must match the number of columns in `data_to_wrap`.\n+        If `None`, then no column names are set.\n+    index : array-like, default=None\n+        The row labels to use for the resulting pandas container. By default,\n+        a RangeIndex is used.\n+\n+    Returns\n+    -------\n+    container\n+        Returns a pandas DataFrame or Series.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Sparse output is not supported.\")\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n \n+    # Check index compatibility before creating DataFrame\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n+    \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -127,11 +216,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if hasattr(data_to_wrap, \"index\"):\n+        # Check if index length matches data length before assignment\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_4": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..5b2482816 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,42 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the DataFrame.\n+    index : array-like, default=None\n+        Index for the DataFrame. If provided, must have the same length as\n+        the number of rows in data_to_wrap.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n+    \"\"\"\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n+    if hasattr(data_to_wrap, \"iloc\"):\n+        # `data_to_wrap` is a pandas DataFrame\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+\n+    # `data_to_wrap` is a NumPy ndarray\n+    # Validate index length before creating DataFrame\n+    if index is not None and len(index) != data_to_wrap.shape[0]:\n+        index = None\n+    \n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,14 +89,26 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,11 +176,10 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if hasattr(data_to_wrap, \"index\"):\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_5": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..fe2b158ea 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,41 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names or None.\n+    index : array-like, default=None\n+        Index for the dataframe or None.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if hasattr(data_to_wrap, \"iloc\"):\n+        pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+    # Validate index length before creating DataFrame\n+    if index is not None and len(index) != data_to_wrap.shape[0]:\n+        index = None\n+    return pd.DataFrame(data_to_wrap, columns=columns, index=index)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,14 +88,24 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+            if len(index) == len(data_to_wrap):\n+                data_to_wrap.index = index\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,11 +173,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if hasattr(data_to_wrap, \"index\"):\n+        # Check if index length matches data length before assignment\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_6": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..fe2caaaa0 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,42 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the DataFrame.\n+    index : array-like, optional\n+        Index for the DataFrame. If provided, its length must match the number\n+        of rows in data_to_wrap.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n+    \"\"\"\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n+    if hasattr(data_to_wrap, \"iloc\"):\n+        # `data_to_wrap` is a pandas DataFrame\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+\n+    # `data_to_wrap` is a NumPy array\n+    # Validate index length before creating DataFrame\n+    if index is not None and len(index) != data_to_wrap.shape[0]:\n+        index = None\n+    \n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,14 +89,26 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,11 +176,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if hasattr(data_to_wrap, \"index\"):\n+        # Validate index length matches data length before assignment\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_7": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..c683cb4cc 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,44 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the DataFrame.\n+    index : array-like, default=None\n+        Index for the DataFrame. If None, default index will be used.\n+        If provided, must have the same length as the number of rows in data_to_wrap.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n+    \"\"\"\n+    try:\n+        pd = check_pandas_support(\"_wrap_in_pandas_container\")\n+    except ImportError:\n+        return data_to_wrap\n+\n+    if hasattr(data_to_wrap, \"iloc\"):\n+        # `data_to_wrap` is a dataframe\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+\n+    # `data_to_wrap` is a ndarray\n+    # Check if index length matches data length before creating DataFrame\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,14 +91,26 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,11 +178,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if hasattr(data_to_wrap, \"index\"):\n+        # Validate index length matches data before assignment\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n",
    "variant_8": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..da55fa9c0 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,40 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped as pandas dataframe.\n+    columns : array-like\n+        Column names for the DataFrame.\n+    index : array-like, optional\n+        Index for the DataFrame. If provided, its length must match the number\n+        of rows in `data_to_wrap`.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n+    \"\"\"\n+    pd = check_pandas_support(\"_wrap_in_pandas_container\")\n+    \n+    if hasattr(data_to_wrap, \"iloc\"):\n+        # data_to_wrap is a DataFrame\n+        data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n+    \n+    # data_to_wrap is not a DataFrame, create new one\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \"\"\"Create a Pandas DataFrame.\n+\n+    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n+    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n+    `columns` and `index`.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,14 +87,24 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+            if len(index) == len(data_to_wrap):\n+                data_to_wrap.index = index\n+        return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+\n+    if isinstance(data_to_wrap, pd.DataFrame):\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n+        return data_to_wrap\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,11 +172,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n-    return _wrap_in_pandas_container(\n-        data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n-    )\n+\n+    if hasattr(data_to_wrap, \"index\"):\n+        # Only preserve index if dimensions match to avoid ValueError\n+        if index is not None and len(index) == len(data_to_wrap):\n+            data_to_wrap.index = index\n \n \n def _wrap_method_output(f, method):\n"
  }
}