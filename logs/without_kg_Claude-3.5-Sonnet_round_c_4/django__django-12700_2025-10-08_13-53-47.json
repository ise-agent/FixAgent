{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/views/debug.py lines 91-94)": "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
    "Location 2 (/root/hy/projects_4/django/django/views/debug.py lines 85-86)": "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/views/debug.py lines 91-94)": [
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing\n        dictionaries, recursively cleanse the sensitive keys within those\n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting('', v) for v in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting('', v) for v in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/views/debug.py lines 85-86)": [
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing dictionaries,\n        recursively cleanse the sensitive keys within those nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing dictionaries,\n        recursively cleanse the sensitive keys within those nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing dictionaries,\n        recursively cleanse the sensitive keys within those nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or other iterable containing \n        dictionaries, recursively cleanse the sensitive keys within those \n        nested structures.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, item) for item in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        return cleansed\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..0d2a5f4641 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -82,14 +82,20 @@ class SafeExceptionReporterFilter:\n \n     def cleanse_setting(self, key, value):\n         \"\"\"\n+\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, or tuple, recursively cleanse the keys in that structure.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n+\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting('', item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting('', item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n",
    "variant_0": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..c509a412a8 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,65 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n",
    "variant_1": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..c509a412a8 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,65 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n",
    "variant_2": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..c509a412a8 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,65 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n",
    "variant_3": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..148b146a8d 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,65 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing\n+        dictionaries, recursively cleanse the sensitive keys within those\n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n",
    "variant_4": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..996fc2c28c 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,64 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing dictionaries,\n+        recursively cleanse the sensitive keys within those nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n",
    "variant_5": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..c509a412a8 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,65 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n",
    "variant_6": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..996fc2c28c 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,64 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing dictionaries,\n+        recursively cleanse the sensitive keys within those nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n",
    "variant_7": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..d8bcb245ff 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,59 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing dictionaries,\n+        recursively cleanse the sensitive keys within those nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting('', v) for v in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting('', v) for v in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_8": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..c509a412a8 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,21 +80,65 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n+        return cleansed\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+\n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary, list, tuple, or other iterable containing \n+        dictionaries, recursively cleanse the sensitive keys within those \n+        nested structures.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, item) for item in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n \n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n"
  }
}