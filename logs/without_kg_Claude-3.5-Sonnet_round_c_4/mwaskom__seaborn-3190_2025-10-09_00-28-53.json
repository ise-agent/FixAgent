{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/seaborn/seaborn/_core/scales.py lines 350-351)": "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/seaborn/seaborn/_core/scales.py lines 350-351)": [
      "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n",
      "\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n\n        new._pipeline = [\n            axis.convert_units,\n            forward,\n",
      "\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n\n        new._pipeline = [\n            axis.convert_units,\n            forward,\n",
      "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        # Handle boolean data by converting to numeric\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a) if isinstance(a, (bool, np.bool_)) else a\n            b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n        b = b_val - a\n",
      "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            a = forward(vmin)\n            b_val = forward(vmax)\n            # Handle boolean data by converting to numeric\n            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n            b = b_val - a\n\n            def normalize(x):\n                return (x - a) / b\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..c84e623e 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -347,8 +347,14 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n+\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_0": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..e911297f 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,14 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +356,15 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_1": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..64062fa8 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,14 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +356,18 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_2": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..c661f2b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,17 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +359,22 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n+\n+        new._pipeline = [\n+            axis.convert_units,\n+            forward,\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_3": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..c661f2b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,17 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +359,22 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n+\n+        new._pipeline = [\n+            axis.convert_units,\n+            forward,\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_4": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..64062fa8 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,14 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +356,18 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_5": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..c2e9dc3c 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -347,8 +347,15 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+\n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        # Handle boolean data by converting to numeric\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+            b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+        b = b_val - a\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_6": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..e911297f 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,14 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +356,15 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_7": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..e911297f 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,14 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +356,15 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_8": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..e911297f 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,14 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -348,7 +356,15 @@ class ContinuousBase(Scale):\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            # Handle boolean data by converting to numeric\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a) if isinstance(a, (bool, np.bool_)) else a\n+                b_val = float(b_val) if isinstance(b_val, (bool, np.bool_)) else b_val\n+            b = b_val - a\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n"
  }
}