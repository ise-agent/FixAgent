{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/pylint/pylint/lint/expand_modules.py lines 93-96)": "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
    "Location 2 (/root/hy/projects_4/pylint/pylint/lint/expand_modules.py lines 134-137)": "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
    "Location 3 (/root/hy/projects_4/pylint/pylint/lint/expand_modules.py lines 138-141)": "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/pylint/pylint/lint/expand_modules.py lines 93-96)": [
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - treat as regular directory\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    # Directory without __init__.py - not a package\n                    filepath = something\n            else:\n                filepath = something\n"
    ],
    "Location 2 (/root/hy/projects_4/pylint/pylint/lint/expand_modules.py lines 134-137)": [
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n",
      "\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n            and os.path.exists(filepath)\n        )\n"
    ],
    "Location 3 (/root/hy/projects_4/pylint/pylint/lint/expand_modules.py lines 138-141)": [
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n",
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist, otherwise use directory of filepath\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n",
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist, otherwise use filepath\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n",
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n",
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n",
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n",
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n",
      "\n        if has_init or is_namespace or is_directory:\n            # Use directory path when __init__.py doesn't exist, otherwise use dirname of filepath\n            search_dir = os.path.dirname(filepath) if has_init else filepath\n            for subfilepath in modutils.get_module_files(\n                search_dir, ignore_list, list_all=is_namespace\n            ):\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d012c585a 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - process individual files\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_0": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d46456f04 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_1": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d46456f04 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_2": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..ea2e3c5a2 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist, otherwise use directory of filepath\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_3": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..09ad2aa9f 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist, otherwise use filepath\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_4": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d46456f04 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_5": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d46456f04 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_6": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d46456f04 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_7": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d46456f04 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - treat as regular directory\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n",
    "variant_8": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..c138e95a2 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    # Directory without __init__.py - not a package\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -131,13 +137,18 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n+            and os.path.exists(filepath)\n         )\n+\n         if has_init or is_namespace or is_directory:\n+            # Use directory path when __init__.py doesn't exist, otherwise use dirname of filepath\n+            search_dir = os.path.dirname(filepath) if has_init else filepath\n             for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n+                search_dir, ignore_list, list_all=is_namespace\n             ):\n                 if filepath == subfilepath:\n                     continue\n"
  }
}