{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/utils/html.py lines 62-77)": "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows specifying a custom JSON encoder class,\n    defaulting to DjangoJSONEncoder when not provided.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
    "Location 2 (/root/hy/projects_4/django/django/template/defaultfilters.py lines 84-90)": "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id and custom JSON encoder).\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/utils/html.py lines 62-77)": [
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n    JSON serialization.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The 'encoder' parameter allows specifying a custom JSON encoder class.\n    If not provided, DjangoJSONEncoder is used by default.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n    JSON serialization.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows specifying a custom JSON encoder class.\n    If not provided, DjangoJSONEncoder is used by default.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows specifying a custom JSON encoder class.\n    Defaults to DjangoJSONEncoder if not provided.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows specifying a custom JSON encoder class.\n    If not provided, defaults to DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows customization of the JSON encoder used. If not\n    provided, defaults to DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows customizing JSON serialization. If not provided,\n    defaults to DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/template/defaultfilters.py lines 84-90)": [
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id and custom encoder).\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n",
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id and custom encoder).\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n",
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id and optional custom JSON encoder).\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n",
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id). Optionally accepts a custom JSON encoder.\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n",
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id and optional encoder).\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n",
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id).\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n",
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id). Optionally accepts a custom JSON encoder.\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n",
      "\n@register.filter(is_safe=True)\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id).\n    \"\"\"\n    return _json_script(value, element_id, encoder)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..858243ee12 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,15 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id). The 'encoder' parameter allows customization\n+    of JSON serialization.\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..98718ff9ef 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The 'encoder' parameter allows customization of JSON serialization. If not\n+    provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_0": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..4a81fe1f08 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id and custom JSON encoder).\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..f5a42ca908 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows specifying a custom JSON encoder class,\n+    defaulting to DjangoJSONEncoder when not provided.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_1": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..cb4163270f 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id and custom encoder).\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..0e8c3df81f 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n+    JSON serialization.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_2": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..cb4163270f 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id and custom encoder).\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..119dc2bcd8 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The 'encoder' parameter allows specifying a custom JSON encoder class.\n+    If not provided, DjangoJSONEncoder is used by default.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_3": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..a55871504c 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id and optional custom JSON encoder).\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..0e8c3df81f 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n+    JSON serialization.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_4": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..11e96e419a 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id). Optionally accepts a custom JSON encoder.\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..b07bc97971 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows specifying a custom JSON encoder class.\n+    If not provided, DjangoJSONEncoder is used by default.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_5": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..b677191b6a 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id and optional encoder).\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..20fed477f1 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows specifying a custom JSON encoder class.\n+    Defaults to DjangoJSONEncoder if not provided.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_6": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..74b2e16908 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n     tag (with an optional id).\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..d67b6d44ee 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows specifying a custom JSON encoder class.\n+    If not provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_7": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..11e96e419a 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n-    tag (with an optional id).\n+    tag (with an optional id). Optionally accepts a custom JSON encoder.\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..d6540a6ba7 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows customization of the JSON encoder used. If not\n+    provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "variant_8": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 46334791c6..74b2e16908 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -81,13 +81,14 @@ def escapejs_filter(value):\n     return escapejs(value)\n \n \n+\n @register.filter(is_safe=True)\n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n     tag (with an optional id).\n     \"\"\"\n-    return _json_script(value, element_id)\n+    return _json_script(value, element_id, encoder)\n \n \n @register.filter(is_safe=True)\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..7101fd6efa 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows customizing JSON serialization. If not provided,\n+    defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n"
  }
}