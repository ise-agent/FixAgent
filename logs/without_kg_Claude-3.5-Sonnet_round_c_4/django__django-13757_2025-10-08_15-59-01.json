{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/fields/json.py lines 366-377)": "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return 'NOT JSON_EXISTS(%s, \\'$.%s\\')' % (lhs, key_name), lhs_params\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return 'JSON_TYPE(%s, \\'$.%s\\') IS NULL' % (lhs, key_name), lhs_params\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/fields/json.py lines 366-377)": [
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return \"NOT JSON_EXISTS(%s, '$.%s')\" % (lhs, key_name), lhs_params\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return \"JSON_TYPE(%s, '$.%s') IS NULL\" % (lhs, key_name), lhs_params\n",
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that key doesn't exist (negation of HasKey)\n        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n        json_path = compile_json_path([key_name])\n        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, lhs_params + [json_path]\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that key doesn't exist (negation of HasKey)\n        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n        json_path = compile_json_path([key_name], include_root=False)\n        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, lhs_params + [json_path]\n",
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n        json_path = compile_json_path([key_name], include_root=False)\n        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, tuple(lhs_params) + (json_path,)\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n        json_path = compile_json_path([key_name])\n        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, tuple(lhs_params) + (json_path,)\n",
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n        json_path = compile_json_path([key_name], include_root=False)\n        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, tuple(lhs_params) + (json_path,)\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n        json_path = compile_json_path([key_name])\n        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, tuple(lhs_params) + (json_path,)\n",
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return 'NOT JSON_EXISTS(%s, \\'$.%s\\')' % (lhs, key_name), lhs_params\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return 'JSON_TYPE(%s, ?) IS NULL' % lhs, lhs_params + ['$.%s' % key_name]\n",
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (not just that it's null)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return \"NOT JSON_EXISTS(%s, '$.%s')\" % (lhs, key_name), lhs_params\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (not just that it's null)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return \"JSON_TYPE(%s, '$.%s') IS NULL\" % (lhs, key_name), lhs_params\n",
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        json_path = compile_json_path([self.lhs.key_name])\n        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, lhs_params + [json_path]\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        json_path = compile_json_path([self.lhs.key_name], include_root=False)\n        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, lhs_params + [json_path]\n",
      "\nclass KeyTransformIsNull(lookups.IsNull):\n    # key__isnull=False is the same as has_key='key'\n    def as_oracle(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return 'NOT JSON_EXISTS(%s, \\'$.%s\\')' % (lhs, key_name), lhs_params\n\n    def as_sqlite(self, compiler, connection):\n        if not self.rhs:\n            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        key_name = self.lhs.key_name\n        return 'JSON_TYPE(%s, \\'$.%s\\') IS NULL' % (lhs, key_name), lhs_params\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..593d35b463 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,54 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        # Process JSON path from the left-hand side.\n+        if isinstance(self.lhs, KeyTransform):\n+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)\n+            lhs_json_path = compile_json_path(lhs_key_transforms)\n+        else:\n+            lhs, lhs_params = self.process_lhs(compiler, connection)\n+            lhs_json_path = '$'\n+        \n+        # Create the JSON path for the key\n+        rhs_key_transforms = [self.lhs.key_name]\n+        json_path = '%s%s' % (\n+            lhs_json_path,\n+            compile_json_path(rhs_key_transforms, include_root=False),\n+        )\n+        \n+        # Use NOT JSON_EXISTS to check key doesn't exist\n+        sql = \"NOT JSON_EXISTS(%s, '%s')\" % (lhs, json_path)\n+        return sql, lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        # Process JSON path from the left-hand side.\n+        if isinstance(self.lhs, KeyTransform):\n+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)\n+            lhs_json_path = compile_json_path(lhs_key_transforms)\n+        else:\n+            lhs, lhs_params = self.process_lhs(compiler, connection)\n+            lhs_json_path = '$'\n+        \n+        # Create the JSON path for the key\n+        rhs_key_transforms = [self.lhs.key_name]\n+        json_path = '%s%s' % (\n+            lhs_json_path,\n+            compile_json_path(rhs_key_transforms, include_root=False),\n+        )\n+        \n+        # Use JSON_TYPE(...) IS NULL to check key doesn't exist\n+        sql = \"JSON_TYPE(%s, %s) IS NULL\" % (lhs, '%s')\n+        return sql, tuple(lhs_params) + (json_path,)\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_0": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..464b1d6d54 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return 'NOT JSON_EXISTS(%s, \\'$.%s\\')' % (lhs, key_name), lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return 'JSON_TYPE(%s, \\'$.%s\\') IS NULL' % (lhs, key_name), lhs_params\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_1": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..779dc01369 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return \"NOT JSON_EXISTS(%s, '$.%s')\" % (lhs, key_name), lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return \"JSON_TYPE(%s, '$.%s') IS NULL\" % (lhs, key_name), lhs_params\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_2": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..2fcc4ab7bb 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that key doesn't exist (negation of HasKey)\n+        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path([key_name])\n+        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, lhs_params + [json_path]\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that key doesn't exist (negation of HasKey)\n+        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path([key_name], include_root=False)\n+        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, lhs_params + [json_path]\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_3": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..e87d5de99a 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n+        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path([key_name], include_root=False)\n+        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, tuple(lhs_params) + (json_path,)\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n+        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path([key_name])\n+        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, tuple(lhs_params) + (json_path,)\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_4": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..456b0fdd8c 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path([key_name], include_root=False)\n+        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, tuple(lhs_params) + (json_path,)\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params, key_name = self.lhs.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path([key_name])\n+        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, tuple(lhs_params) + (json_path,)\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_5": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..6a5c67d6a1 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return 'NOT JSON_EXISTS(%s, \\'$.%s\\')' % (lhs, key_name), lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (logical negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return 'JSON_TYPE(%s, ?) IS NULL' % lhs, lhs_params + ['$.%s' % key_name]\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_6": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..f6c06df66f 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (not just that it's null)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return \"NOT JSON_EXISTS(%s, '$.%s')\" % (lhs, key_name), lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (not just that it's null)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return \"JSON_TYPE(%s, '$.%s') IS NULL\" % (lhs, key_name), lhs_params\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_7": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..5490c16dd8 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        json_path = compile_json_path([self.lhs.key_name])\n+        return 'NOT JSON_EXISTS(%s, %%s)' % lhs, lhs_params + [json_path]\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        json_path = compile_json_path([self.lhs.key_name], include_root=False)\n+        return 'JSON_TYPE(%s, %%s) IS NULL' % lhs, lhs_params + [json_path]\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n",
    "variant_8": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..464b1d6d54 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -363,18 +363,24 @@ class CaseInsensitiveMixin:\n         return rhs, rhs_params\n \n \n+\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return 'NOT JSON_EXISTS(%s, \\'$.%s\\')' % (lhs, key_name), lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n-\n+        # For isnull=True, check that the key doesn't exist (negation of HasKey)\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        key_name = self.lhs.key_name\n+        return 'JSON_TYPE(%s, \\'$.%s\\') IS NULL' % (lhs, key_name), lhs_params\n \n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n"
  }
}