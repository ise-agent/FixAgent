{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 864-867)": "\ndef reduce(self, operation, app_label):\n    if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n        return []\n    # Check if previous operation is AlterIndexTogether that creates equivalent index\n    if isinstance(operation, AlterIndexTogether) and operation.model_name_lower == self.model_name_lower:\n        # Get the index_together tuples from the operation\n        index_together = operation.option_value or []\n        # Check if any tuple matches our index fields\n        our_fields = tuple(self.index.fields)\n        for together_fields in index_together:\n            if tuple(together_fields) == our_fields:\n                # This AddIndex is equivalent to one in the AlterIndexTogether\n                # Return just this AddIndex to eliminate the deprecated operation\n                return [self]\n    return super().reduce(operation, app_label)\n",
    "Location 2 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 639-648)": "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to any in our index_together\n            for fields in self.option_value:\n                if (hasattr(operation.index, 'fields') and \n                    tuple(operation.index.fields) == tuple(fields)):\n                    # The AddIndex is equivalent to one of our index_together entries\n                    # Let it take precedence by being eliminated\n                    return [operation]\n        return super().reduce(operation, app_label)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 864-867)": [
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Handle AlterIndexTogether -> AddIndex reduction\n        if hasattr(operation, 'option_name') and operation.option_name == 'index_together':\n            # Get the index_together value from the AlterIndexTogether operation\n            index_together = operation.option_value or []\n            # Check if any index_together tuple matches our index fields\n            for index_fields in index_together:\n                if (isinstance(index_fields, (list, tuple)) and \n                    list(index_fields) == list(self.index.fields)):\n                    # This AddIndex is equivalent to one in the AlterIndexTogether\n                    # Keep this AddIndex and eliminate the AlterIndexTogether\n                    return [self]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Handle AlterIndexTogether -> AddIndex reduction\n        if isinstance(operation, AlterIndexTogether):\n            # Check if the AlterIndexTogether creates an index equivalent to this AddIndex\n            if hasattr(operation, 'index_together') and operation.index_together:\n                for index_fields in operation.index_together:\n                    # Convert field names to match AddIndex field format\n                    if (isinstance(index_fields, (list, tuple)) and \n                        list(index_fields) == list(self.index.fields)):\n                        # The AlterIndexTogether creates an equivalent index\n                        # Return just this AddIndex to eliminate the deprecated operation\n                        return [self]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Handle AlterIndexTogether -> AddIndex reduction\n        if isinstance(operation, AlterIndexTogether):\n            # Get the index_together tuples from the operation\n            index_together = getattr(operation, 'index_together', None)\n            if index_together:\n                # Check if any index_together tuple matches this AddIndex's fields\n                for index_tuple in index_together:\n                    if (len(index_tuple) == len(self.index.fields) and \n                        set(index_tuple) == set(self.index.fields)):\n                        # Found equivalent index - eliminate the AlterIndexTogether\n                        return [self]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Handle reduction with AlterIndexTogether\n        if isinstance(operation, AlterIndexTogether):\n            # Check if this AddIndex creates an equivalent index to one in AlterIndexTogether\n            if operation.option_value:  # If index_together is being set (not removed)\n                for index_fields in operation.option_value:\n                    # Convert tuple to list for comparison and normalize field names\n                    index_fields_list = list(index_fields)\n                    # Compare field names (handle both string fields and expressions)\n                    our_fields = []\n                    for field in self.index.fields:\n                        if hasattr(field, 'name'):\n                            our_fields.append(field.name)\n                        else:\n                            our_fields.append(field)\n                    \n                    if index_fields_list == our_fields:\n                        # This AddIndex is equivalent to one in AlterIndexTogether\n                        # Return just this operation to eliminate the deprecated AlterIndexTogether\n                        return [self]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Check if previous operation is AlterIndexTogether that creates equivalent index\n        if isinstance(operation, AlterIndexTogether):\n            # Get the index_together tuples from the operation\n            index_together = getattr(operation, 'index_together', None)\n            if index_together and self.model_name.lower() == operation.model_name.lower():\n                # Check if any index_together tuple matches this AddIndex's fields\n                index_fields = tuple(self.index.fields)\n                for together_fields in index_together:\n                    if tuple(together_fields) == index_fields:\n                        # This AddIndex creates the same index as AlterIndexTogether\n                        # Return just this AddIndex to eliminate the deprecated operation\n                        return [self]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Check if previous operation is AlterIndexTogether that creates equivalent index\n        if isinstance(operation, AlterIndexTogether) and operation.model_name_lower == self.model_name_lower:\n            # Get the index_together tuples from the previous operation\n            index_together = operation.option_value or []\n            # Check if any index_together tuple matches this AddIndex's fields\n            for together_fields in index_together:\n                if list(together_fields) == self.index.fields:\n                    # Found equivalent index - eliminate the AlterIndexTogether\n                    return [self]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Handle AlterIndexTogether -> AddIndex reduction\n        if isinstance(operation, AlterIndexTogether):\n            # Check if the AlterIndexTogether creates an index equivalent to this AddIndex\n            if hasattr(self.index, 'fields') and operation.index_together:\n                # Convert index fields to a comparable format\n                index_fields = tuple(self.index.fields)\n                # Check if any index_together tuple matches our index fields\n                for together_fields in operation.index_together:\n                    if tuple(together_fields) == index_fields:\n                        # The AlterIndexTogether creates an equivalent index, so eliminate it\n                        return [self]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n            return []\n        # Handle AlterIndexTogether -> AddIndex transitions\n        if isinstance(operation, AlterIndexTogether):\n            # Check if the AlterIndexTogether creates an equivalent index\n            if hasattr(operation, 'index_together') and operation.index_together:\n                for index_fields in operation.index_together:\n                    # Compare field sets (order-independent)\n                    if set(self.index.fields) == set(index_fields):\n                        # This AddIndex replaces the equivalent index_together\n                        return [self]\n        return super().reduce(operation, app_label)\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 639-648)": [
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to one in our index_together\n            if self.index_together:\n                for fields_tuple in self.index_together:\n                    if (hasattr(operation.index, 'fields') and \n                        tuple(operation.index.fields) == tuple(fields_tuple)):\n                        # The AddIndex creates an equivalent index, so we can be eliminated\n                        return [operation]\n        return super().reduce(operation, app_label)\n",
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to one in our index_together\n            if hasattr(operation.index, 'fields') and operation.index.fields:\n                index_fields = tuple(operation.index.fields)\n                # Check if this field combination exists in our index_together\n                if self.option_value and index_fields in self.option_value:\n                    # The AddIndex makes this AlterIndexTogether redundant for this field combination\n                    remaining_together = set(self.option_value) - {index_fields}\n                    if not remaining_together:\n                        # All index_together combinations are covered by AddIndex operations\n                        return [operation]\n                    else:\n                        # Create a new AlterIndexTogether with remaining combinations\n                        return [self.__class__(self.name, remaining_together), operation]\n        return super().reduce(operation, app_label)\n",
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to one in index_together\n            if hasattr(operation.index, 'fields') and operation.index.fields:\n                index_fields = tuple(operation.index.fields)\n                # Check if this field combination exists in our index_together\n                if self.option_value and index_fields in self.option_value:\n                    # The AddIndex supersedes this AlterIndexTogether for this field combination\n                    # Remove this field combination from index_together\n                    remaining_together = set(self.option_value) - {index_fields}\n                    if not remaining_together:\n                        # If no combinations remain, this operation can be eliminated\n                        return [operation]\n                    else:\n                        # Create a new AlterIndexTogether with remaining combinations\n                        return [\n                            self.__class__(self.name, remaining_together),\n                            operation\n                        ]\n        return super().reduce(operation, app_label)\n",
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to any in index_together\n            if hasattr(operation.index, 'fields') and operation.index.fields:\n                index_fields = tuple(operation.index.fields)\n                # Convert index_together to normalized format for comparison\n                if self.option_value:\n                    for together_fields in self.option_value:\n                        if tuple(together_fields) == index_fields:\n                            # The AddIndex creates an equivalent index, so this operation can be eliminated\n                            return [operation]\n        return super().reduce(operation, app_label)\n",
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to one in index_together\n            if hasattr(operation.index, 'fields') and operation.index.fields:\n                index_fields = tuple(operation.index.fields)\n                # Convert index_together to normalized form for comparison\n                index_together = normalize_together(self.option_value or [])\n                if index_fields in index_together:\n                    # The AddIndex creates an equivalent index, so we can be eliminated\n                    return [operation]\n        return super().reduce(operation, app_label)\n",
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to what this operation creates\n            if hasattr(operation.index, 'fields') and self.option_value:\n                for index_together_fields in self.option_value:\n                    if (tuple(operation.index.fields) == tuple(index_together_fields) and\n                        not operation.index.expressions and\n                        not operation.index.condition and\n                        not operation.index.include):\n                        # The AddIndex creates an equivalent index, so this operation can be eliminated\n                        return [operation]\n        return super().reduce(operation, app_label)\n",
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to one in index_together\n            if hasattr(operation.index, 'fields') and operation.index.fields:\n                index_fields = tuple(operation.index.fields)\n                # Convert index_together to normalized format for comparison\n                if self.option_value:\n                    normalized_together = normalize_together(self.option_value)\n                    if index_fields in normalized_together:\n                        # The AddIndex creates an equivalent index, so this AlterIndexTogether\n                        # can be eliminated in favor of the modern AddIndex\n                        return [operation]\n        return super().reduce(operation, app_label)\n",
      "\nclass AlterIndexTogether(AlterTogetherOptionOperation):\n    \"\"\"\n    Change the value of index_together to the target one.\n    Input value of index_together must be a set of tuples.\n    \"\"\"\n\n    option_name = \"index_together\"\n\n    def __init__(self, name, index_together):\n        super().__init__(name, index_together)\n\n    def reduce(self, operation, app_label):\n        if isinstance(operation, AddIndex):\n            # Check if the AddIndex creates an equivalent index to any in our index_together\n            for field_tuple in self.index_together:\n                if (hasattr(operation.index, 'fields') and \n                    tuple(operation.index.fields) == field_tuple):\n                    # The AddIndex creates an equivalent index, so we can be eliminated\n                    return [operation]\n        return super().reduce(operation, app_label)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..ccd6fddcb8 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,17 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        # Handle AlterIndexTogether -> AddIndex reduction\n+        if isinstance(operation, AddIndex) and operation.model_name_lower == self.name_lower:\n+            # Check if the AddIndex creates an equivalent index to any in index_together\n+            for index_together_fields in self.option_value or []:\n+                if tuple(operation.index.fields) == tuple(index_together_fields):\n+                    # The AddIndex is equivalent to one of our index_together entries\n+                    # Allow ourselves to be eliminated by returning the AddIndex\n+                    return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +873,18 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Handle AlterIndexTogether -> AddIndex reduction\n+        if isinstance(operation, AlterIndexTogether) and operation.name_lower == self.model_name_lower:\n+            # Check if this AddIndex creates an equivalent index to any in index_together\n+            for index_together_fields in operation.option_value or []:\n+                if tuple(self.index.fields) == tuple(index_together_fields):\n+                    # This AddIndex is equivalent to one of the index_together entries\n+                    # Return [self] to eliminate the AlterIndexTogether operation\n+                    return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..bad2a37a52 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,17 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to any in our index_together\n+            for fields in self.option_value:\n+                if (hasattr(operation.index, 'fields') and \n+                    tuple(operation.index.fields) == tuple(fields)):\n+                    # The AddIndex is equivalent to one of our index_together entries\n+                    # Let it take precedence by being eliminated\n+                    return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,10 +873,22 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n-    def reduce(self, operation, app_label):\n-        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n-            return []\n-        return super().reduce(operation, app_label)\n+\n+def reduce(self, operation, app_label):\n+    if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n+        return []\n+    # Check if previous operation is AlterIndexTogether that creates equivalent index\n+    if isinstance(operation, AlterIndexTogether) and operation.model_name_lower == self.model_name_lower:\n+        # Get the index_together tuples from the operation\n+        index_together = operation.option_value or []\n+        # Check if any tuple matches our index fields\n+        our_fields = tuple(self.index.fields)\n+        for together_fields in index_together:\n+            if tuple(together_fields) == our_fields:\n+                # This AddIndex is equivalent to one in the AlterIndexTogether\n+                # Return just this AddIndex to eliminate the deprecated operation\n+                return [self]\n+    return super().reduce(operation, app_label)\n \n \n class RemoveIndex(IndexOperation):\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..b2f269e347 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,17 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to one in our index_together\n+            if self.index_together:\n+                for fields_tuple in self.index_together:\n+                    if (hasattr(operation.index, 'fields') and \n+                        tuple(operation.index.fields) == tuple(fields_tuple)):\n+                        # The AddIndex creates an equivalent index, so we can be eliminated\n+                        return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +873,21 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Handle AlterIndexTogether -> AddIndex reduction\n+        if hasattr(operation, 'option_name') and operation.option_name == 'index_together':\n+            # Get the index_together value from the AlterIndexTogether operation\n+            index_together = operation.option_value or []\n+            # Check if any index_together tuple matches our index fields\n+            for index_fields in index_together:\n+                if (isinstance(index_fields, (list, tuple)) and \n+                    list(index_fields) == list(self.index.fields)):\n+                    # This AddIndex is equivalent to one in the AlterIndexTogether\n+                    # Keep this AddIndex and eliminate the AlterIndexTogether\n+                    return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..76cab9483a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,23 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to one in our index_together\n+            if hasattr(operation.index, 'fields') and operation.index.fields:\n+                index_fields = tuple(operation.index.fields)\n+                # Check if this field combination exists in our index_together\n+                if self.option_value and index_fields in self.option_value:\n+                    # The AddIndex makes this AlterIndexTogether redundant for this field combination\n+                    remaining_together = set(self.option_value) - {index_fields}\n+                    if not remaining_together:\n+                        # All index_together combinations are covered by AddIndex operations\n+                        return [operation]\n+                    else:\n+                        # Create a new AlterIndexTogether with remaining combinations\n+                        return [self.__class__(self.name, remaining_together), operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +879,21 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Handle AlterIndexTogether -> AddIndex reduction\n+        if isinstance(operation, AlterIndexTogether):\n+            # Check if the AlterIndexTogether creates an index equivalent to this AddIndex\n+            if hasattr(operation, 'index_together') and operation.index_together:\n+                for index_fields in operation.index_together:\n+                    # Convert field names to match AddIndex field format\n+                    if (isinstance(index_fields, (list, tuple)) and \n+                        list(index_fields) == list(self.index.fields)):\n+                        # The AlterIndexTogether creates an equivalent index\n+                        # Return just this AddIndex to eliminate the deprecated operation\n+                        return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..70601cb11c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,27 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to one in index_together\n+            if hasattr(operation.index, 'fields') and operation.index.fields:\n+                index_fields = tuple(operation.index.fields)\n+                # Check if this field combination exists in our index_together\n+                if self.option_value and index_fields in self.option_value:\n+                    # The AddIndex supersedes this AlterIndexTogether for this field combination\n+                    # Remove this field combination from index_together\n+                    remaining_together = set(self.option_value) - {index_fields}\n+                    if not remaining_together:\n+                        # If no combinations remain, this operation can be eliminated\n+                        return [operation]\n+                    else:\n+                        # Create a new AlterIndexTogether with remaining combinations\n+                        return [\n+                            self.__class__(self.name, remaining_together),\n+                            operation\n+                        ]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +883,21 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Handle AlterIndexTogether -> AddIndex reduction\n+        if isinstance(operation, AlterIndexTogether):\n+            # Get the index_together tuples from the operation\n+            index_together = getattr(operation, 'index_together', None)\n+            if index_together:\n+                # Check if any index_together tuple matches this AddIndex's fields\n+                for index_tuple in index_together:\n+                    if (len(index_tuple) == len(self.index.fields) and \n+                        set(index_tuple) == set(self.index.fields)):\n+                        # Found equivalent index - eliminate the AlterIndexTogether\n+                        return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..fa9ab599e7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,19 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to any in index_together\n+            if hasattr(operation.index, 'fields') and operation.index.fields:\n+                index_fields = tuple(operation.index.fields)\n+                # Convert index_together to normalized format for comparison\n+                if self.option_value:\n+                    for together_fields in self.option_value:\n+                        if tuple(together_fields) == index_fields:\n+                            # The AddIndex creates an equivalent index, so this operation can be eliminated\n+                            return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +875,29 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Handle reduction with AlterIndexTogether\n+        if isinstance(operation, AlterIndexTogether):\n+            # Check if this AddIndex creates an equivalent index to one in AlterIndexTogether\n+            if operation.option_value:  # If index_together is being set (not removed)\n+                for index_fields in operation.option_value:\n+                    # Convert tuple to list for comparison and normalize field names\n+                    index_fields_list = list(index_fields)\n+                    # Compare field names (handle both string fields and expressions)\n+                    our_fields = []\n+                    for field in self.index.fields:\n+                        if hasattr(field, 'name'):\n+                            our_fields.append(field.name)\n+                        else:\n+                            our_fields.append(field)\n+                    \n+                    if index_fields_list == our_fields:\n+                        # This AddIndex is equivalent to one in AlterIndexTogether\n+                        # Return just this operation to eliminate the deprecated AlterIndexTogether\n+                        return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..bde9504089 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,18 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to one in index_together\n+            if hasattr(operation.index, 'fields') and operation.index.fields:\n+                index_fields = tuple(operation.index.fields)\n+                # Convert index_together to normalized form for comparison\n+                index_together = normalize_together(self.option_value or [])\n+                if index_fields in index_together:\n+                    # The AddIndex creates an equivalent index, so we can be eliminated\n+                    return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +874,22 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Check if previous operation is AlterIndexTogether that creates equivalent index\n+        if isinstance(operation, AlterIndexTogether):\n+            # Get the index_together tuples from the operation\n+            index_together = getattr(operation, 'index_together', None)\n+            if index_together and self.model_name.lower() == operation.model_name.lower():\n+                # Check if any index_together tuple matches this AddIndex's fields\n+                index_fields = tuple(self.index.fields)\n+                for together_fields in index_together:\n+                    if tuple(together_fields) == index_fields:\n+                        # This AddIndex creates the same index as AlterIndexTogether\n+                        # Return just this AddIndex to eliminate the deprecated operation\n+                        return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..c4e81d7127 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,19 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to what this operation creates\n+            if hasattr(operation.index, 'fields') and self.option_value:\n+                for index_together_fields in self.option_value:\n+                    if (tuple(operation.index.fields) == tuple(index_together_fields) and\n+                        not operation.index.expressions and\n+                        not operation.index.condition and\n+                        not operation.index.include):\n+                        # The AddIndex creates an equivalent index, so this operation can be eliminated\n+                        return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +875,19 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Check if previous operation is AlterIndexTogether that creates equivalent index\n+        if isinstance(operation, AlterIndexTogether) and operation.model_name_lower == self.model_name_lower:\n+            # Get the index_together tuples from the previous operation\n+            index_together = operation.option_value or []\n+            # Check if any index_together tuple matches this AddIndex's fields\n+            for together_fields in index_together:\n+                if list(together_fields) == self.index.fields:\n+                    # Found equivalent index - eliminate the AlterIndexTogether\n+                    return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..eb4989c4b5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,20 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to one in index_together\n+            if hasattr(operation.index, 'fields') and operation.index.fields:\n+                index_fields = tuple(operation.index.fields)\n+                # Convert index_together to normalized format for comparison\n+                if self.option_value:\n+                    normalized_together = normalize_together(self.option_value)\n+                    if index_fields in normalized_together:\n+                        # The AddIndex creates an equivalent index, so this AlterIndexTogether\n+                        # can be eliminated in favor of the modern AddIndex\n+                        return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +876,21 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Handle AlterIndexTogether -> AddIndex reduction\n+        if isinstance(operation, AlterIndexTogether):\n+            # Check if the AlterIndexTogether creates an index equivalent to this AddIndex\n+            if hasattr(self.index, 'fields') and operation.index_together:\n+                # Convert index fields to a comparable format\n+                index_fields = tuple(self.index.fields)\n+                # Check if any index_together tuple matches our index fields\n+                for together_fields in operation.index_together:\n+                    if tuple(together_fields) == index_fields:\n+                        # The AlterIndexTogether creates an equivalent index, so eliminate it\n+                        return [self]\n         return super().reduce(operation, app_label)\n \n \n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b89b6b511b..ee72035c33 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,6 +636,7 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n+\n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of index_together to the target one.\n@@ -647,6 +648,16 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AddIndex):\n+            # Check if the AddIndex creates an equivalent index to any in our index_together\n+            for field_tuple in self.index_together:\n+                if (hasattr(operation.index, 'fields') and \n+                    tuple(operation.index.fields) == field_tuple):\n+                    # The AddIndex creates an equivalent index, so we can be eliminated\n+                    return [operation]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n@@ -861,9 +872,19 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n             return []\n+        # Handle AlterIndexTogether -> AddIndex transitions\n+        if isinstance(operation, AlterIndexTogether):\n+            # Check if the AlterIndexTogether creates an equivalent index\n+            if hasattr(operation, 'index_together') and operation.index_together:\n+                for index_fields in operation.index_together:\n+                    # Compare field sets (order-independent)\n+                    if set(self.index.fields) == set(index_fields):\n+                        # This AddIndex replaces the equivalent index_together\n+                        return [self]\n         return super().reduce(operation, app_label)\n \n \n"
  }
}