{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/matplotlib/legend.py lines 306-346)": "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,     # enable draggable legend support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
    "Location 2 (/root/hy/projects_4/matplotlib/lib/matplotlib/legend.py lines 540-543)": "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Handle draggable parameter\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n",
    "Location 3 (/root/hy/projects_4/matplotlib/lib/matplotlib/legend.py lines 347-375)": "\n    def __init__(\n        self,\n        parent,\n        handles,\n        labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers\n        markerfirst=True,    # left/right ordering of legend marker and label\n        reverse=False,       # True to reverse the order of the legend items\n        scatterpoints=None,  # number of points in the legend for scatter plots\n        scatteryoffsets=None,\n        markerscalex=None,   # relative size of legend markers in x-direction\n        markerscaley=None,   # relative size of legend markers in y-direction\n        markevery=None,      # which markers to plot\n\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n\n        labelcolor=None,     # color of the legend texts\n        numpoints=None,      # number of points in the legend line\n        scatterpoints=None,  # number of points in the legend for scatter plots\n\n        scatteryoffsets=None,\n\n        markerscale=None,    # relative size of legend markers vs original\n        markerfirst=True,    # controls ordering (left-to-right) of legend marker and label\n        reverse=False,       # True to reverse the order of the legend items\n\n        frameon=None,        # draw frame\n        fancybox=None,       # type of frame\n        shadow=None,         # draw shadow\n        framealpha=None,     # alpha transparency of the legend background\n        facecolor=None,      # legend background color\n        edgecolor=None,      # legend edge color\n        mode=None,           # horizontal distribution of columns ('expand')\n        bbox_to_anchor=None, # bbox to which the legend will be anchored\n        bbox_transform=None, # transform for the bbox\n        loc=None,\n        prop=None,\n        fontsize=None,\n        labelcolor=None,\n        numpoints=None,\n        scatterpoints=None,\n        scatteryoffsets=None,\n        markerscale=None,\n        markerfirst=True,\n        reverse=False,\n        frameon=None,\n        fancybox=None,\n        shadow=None,\n        framealpha=None,\n        facecolor=None,\n        edgecolor=None,\n        mode=None,\n        bbox_to_anchor=None,\n        bbox_transform=None,\n        ncols=1,\n        columnspacing=None,\n        borderpad=None,\n        handlelength=None,\n        handleheight=None,\n        handletextpad=None,\n        borderaxespad=None,\n        columnspacing=None,\n\n        ncols=1,           # number of columns\n        columnspacing=None,  # spacing between columns\n        borderpad=None,      # whitespace inside the legend border\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between legend handle and text\n        borderaxespad=None,  # pad between axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # enable/disable mouse dragging\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/matplotlib/legend.py lines 306-346)": [
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # enable/disable mouse dragging\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # enable/disable mouse dragging\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable draggable legend\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # enable/disable mouse dragging\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n"
    ],
    "Location 2 (/root/hy/projects_4/matplotlib/lib/matplotlib/legend.py lines 540-543)": [
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Handle draggable parameter\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Handle draggable parameter\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Handle draggable parameter\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color\n        if draggable:\n            self.set_draggable(draggable)\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        \n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Handle draggable parameter\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Handle draggable parameter\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Handle draggable parameter\n        if draggable:\n            self.set_draggable(draggable)\n\n        # set the text color\n"
    ],
    "Location 3 (/root/hy/projects_4/matplotlib/lib/matplotlib/legend.py lines 347-375)": [
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. If True, the\n            legend will be made draggable using the default settings. For more\n            control over dragging behavior, use the `set_draggable` method\n            after legend creation.\n\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. See\n            `set_draggable` for more details.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging of the legend\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. If True, the legend\n            can be moved interactively. See `set_draggable` for more control over\n            draggable behavior.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable/disable mouse dragging\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. If True, \n            enables mouse dragging support for the legend. See \n            `set_draggable` for additional configuration options.\n        \n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. See\n            `set_draggable` for more details.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. See\n            `set_draggable` for more details.\n        \n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. See\n            `set_draggable` for details.\n            \n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n    def __init__(\n        self,\n        parent,\n        handles,\n        labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of points in the legend line\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        columnspacing=None,  # spacing between columns\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        mode=None,\n\n        fancybox=None,        # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,          # True, False, or dict with shadow properties\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        facecolor=None,       # legend background color\n        edgecolor=None,       # legend edge color\n        framealpha=None,      # alpha of the legend background\n        ncols=1,              # number of columns\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable draggable legend support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse. See\n            `set_draggable` for more details.\n\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..afc129f9f7 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -303,6 +303,7 @@ class Legend(Artist):\n \n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n+\n     def __init__(\n         self, parent, handles, labels,\n         loc=None,\n@@ -341,9 +342,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable/disable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +363,8 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,10 +542,14 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n+\n         self._draggable = None\n \n         # set the text color\n-\n+        \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_0": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..297ecdb973 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,93 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,     # enable draggable legend support\n+        *,\n+        ncol=1  # synonym for ncols (backward compatibility)\n+    ):\n+\n+    def __init__(\n+        self,\n+        parent,\n+        handles,\n+        labels,\n+        loc=None,\n+        numpoints=None,      # number of points in the legend line\n+        markerscale=None,    # relative size of legend markers\n+        markerfirst=True,    # left/right ordering of legend marker and label\n+        reverse=False,       # True to reverse the order of the legend items\n+        scatterpoints=None,  # number of points in the legend for scatter plots\n+        scatteryoffsets=None,\n+        markerscalex=None,   # relative size of legend markers in x-direction\n+        markerscaley=None,   # relative size of legend markers in y-direction\n+        markevery=None,      # which markers to plot\n+\n+        prop=None,           # properties for the legend texts\n+        fontsize=None,       # keyword to set font size directly\n+\n+        labelcolor=None,     # color of the legend texts\n+        numpoints=None,      # number of points in the legend line\n+        scatterpoints=None,  # number of points in the legend for scatter plots\n+\n+        scatteryoffsets=None,\n+\n+        markerscale=None,    # relative size of legend markers vs original\n+        markerfirst=True,    # controls ordering (left-to-right) of legend marker and label\n+        reverse=False,       # True to reverse the order of the legend items\n+\n+        frameon=None,        # draw frame\n+        fancybox=None,       # type of frame\n+        shadow=None,         # draw shadow\n+        framealpha=None,     # alpha transparency of the legend background\n+        facecolor=None,      # legend background color\n+        edgecolor=None,      # legend edge color\n+        mode=None,           # horizontal distribution of columns ('expand')\n+        bbox_to_anchor=None, # bbox to which the legend will be anchored\n+        bbox_transform=None, # transform for the bbox\n+        loc=None,\n+        prop=None,\n+        fontsize=None,\n+        labelcolor=None,\n+        numpoints=None,\n+        scatterpoints=None,\n+        scatteryoffsets=None,\n+        markerscale=None,\n+        markerfirst=True,\n+        reverse=False,\n+        frameon=None,\n+        fancybox=None,\n+        shadow=None,\n+        framealpha=None,\n+        facecolor=None,\n+        edgecolor=None,\n+        mode=None,\n+        bbox_to_anchor=None,\n+        bbox_transform=None,\n+        ncols=1,\n+        columnspacing=None,\n+        borderpad=None,\n+        handlelength=None,\n+        handleheight=None,\n+        handletextpad=None,\n+        borderaxespad=None,\n+        columnspacing=None,\n+\n+        ncols=1,           # number of columns\n+        columnspacing=None,  # spacing between columns\n+        borderpad=None,      # whitespace inside the legend border\n+        handlelength=None,   # length of the legend handles\n+        handleheight=None,   # height of the legend handles\n+        handletextpad=None,  # pad between legend handle and text\n+        borderaxespad=None,  # pad between axes and legend border\n+        columnspacing=None,  # spacing between columns\n+\n+        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n+        bbox_transform=None,  # transform for the bbox\n+        frameon=None,         # draw frame\n+        handler_map=None,\n+        title_fontproperties=None,  # properties for the legend title\n+        alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # enable/disable mouse dragging\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -360,6 +450,9 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n+\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +629,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n-        # set the text color\n+        # Handle draggable parameter\n+        if draggable:\n+            self.set_draggable(draggable)\n \n+        # set the text color\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_1": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..d4414d743d 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,12 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. If True, the\n+            legend will be made draggable using the default settings. For more\n+            control over dragging behavior, use the `set_draggable` method\n+            after legend creation.\n+\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +547,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n-        # set the text color\n+        # Handle draggable parameter\n+        if draggable:\n+            self.set_draggable(draggable)\n \n+        # set the text color\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_2": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..bfe24859a4 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # enable/disable mouse dragging\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,9 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. See\n+            `set_draggable` for more details.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +544,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n-        # set the text color\n+        # Handle draggable parameter\n+        if draggable:\n+            self.set_draggable(draggable)\n \n+        # set the text color\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_3": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..3780e50fa7 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,18 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # enable mouse dragging support\n+        *,\n+        ncol=1  # synonym for ncols (backward compatibility)\n+    ):\n+\n+        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n+        bbox_transform=None,  # transform for the bbox\n+        frameon=None,         # draw frame\n+        handler_map=None,\n+        title_fontproperties=None,  # properties for the legend title\n+        alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging of the legend\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -360,6 +375,10 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. If True, the legend\n+            can be moved interactively. See `set_draggable` for more control over\n+            draggable behavior.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +555,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n-        # set the text color\n+        # Handle draggable parameter\n+        if draggable:\n+            self.set_draggable(draggable)\n \n+        # set the text color\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_4": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..55e83f3c10 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,18 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # enable mouse dragging support\n+        *,\n+        ncol=1  # synonym for ncols (backward compatibility)\n+    ):\n+\n+        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n+        bbox_transform=None,  # transform for the bbox\n+        frameon=None,         # draw frame\n+        handler_map=None,\n+        title_fontproperties=None,  # properties for the legend title\n+        alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable/disable mouse dragging\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -360,6 +375,11 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. If True, \n+            enables mouse dragging support for the legend. See \n+            `set_draggable` for additional configuration options.\n+        \n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +556,14 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n         # set the text color\n-\n+        if draggable:\n+            self.set_draggable(draggable)\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_5": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..a0605c7012 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # enable/disable mouse dragging\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,9 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. See\n+            `set_draggable` for more details.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +544,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(draggable)\n \n         # set the text color\n-\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_6": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..42122be45a 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,10 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. See\n+            `set_draggable` for more details.\n+        \n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +545,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n-        # set the text color\n+        # Handle draggable parameter\n+        if draggable:\n+            self.set_draggable(draggable)\n \n+        # set the text color\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_7": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..05ffd09b7a 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable draggable legend\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,10 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. See\n+            `set_draggable` for details.\n+            \n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +545,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n-        # set the text color\n+        # Handle draggable parameter\n+        if draggable:\n+            self.set_draggable(draggable)\n \n+        # set the text color\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n",
    "variant_8": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..d141dfb425 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,51 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # enable/disable mouse dragging\n+        *,\n+        ncol=1  # synonym for ncols (backward compatibility)\n+    ):\n+\n+    def __init__(\n+        self,\n+        parent,\n+        handles,\n+        labels,\n+        loc=None,\n+        numpoints=None,      # number of points in the legend line\n+        markerscale=None,    # relative size of legend markers vs. original\n+        markerfirst=True,    # left/right ordering of legend marker and label\n+        scatterpoints=None,  # number of points in the legend line\n+        scatteryoffsets=None,\n+        prop=None,           # properties for the legend texts\n+        fontsize=None,       # keyword to set font size directly\n+        labelcolor=None,     # keyword to set the text color\n+\n+        # spacing & pad defined as a fraction of the font-size\n+        borderpad=None,      # whitespace inside the legend border\n+        columnspacing=None,  # spacing between columns\n+        handlelength=None,   # length of the legend handles\n+        handleheight=None,   # height of the legend handles\n+        handletextpad=None,  # pad between legend handle and text\n+        borderaxespad=None,  # pad between the axes and legend border\n+        mode=None,\n+\n+        fancybox=None,        # True: fancy box, False: rounded box, None: rcParam\n+        shadow=None,          # True, False, or dict with shadow properties\n+        title=None,           # legend title\n+        title_fontsize=None,  # legend title font size\n+        facecolor=None,       # legend background color\n+        edgecolor=None,       # legend edge color\n+        framealpha=None,      # alpha of the legend background\n+        ncols=1,              # number of columns\n+\n+        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n+        bbox_transform=None,  # transform for the bbox\n+        frameon=None,         # draw frame\n+        handler_map=None,\n+        title_fontproperties=None,  # properties for the legend title\n+        alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable draggable legend support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -360,6 +408,10 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse. See\n+            `set_draggable` for more details.\n+\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,11 +588,16 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n-        # set the text color\n+        # Handle draggable parameter\n+        if draggable:\n+            self.set_draggable(draggable)\n \n+        # set the text color\n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n"
  }
}