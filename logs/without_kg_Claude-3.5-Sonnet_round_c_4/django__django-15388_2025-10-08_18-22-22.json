{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/template/autoreload.py lines 22-22)": "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
    "Location 2 (/root/hy/projects_4/django/django/template/autoreload.py lines 27-31)": "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering and sorting them.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
    "Location 3 (/root/hy/projects_4/django/django/template/autoreload.py lines 43-46)": "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
    "Location 4 (/root/hy/projects_4/django/django/utils/autoreload.py lines 54-56)": "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    return Path(django.__file__).parent in Path(path).parents\n",
    "Location 5 (/root/hy/projects_4/django/django/template/autoreload.py lines 12-32)": "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/template/autoreload.py lines 22-22)": [
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir)\n            for dir in backend.engine.dirs\n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir)\n            for dir in backend.engine.dirs\n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/template/autoreload.py lines 27-31)": [
      "\ndef get_template_directories():\n    # Iterate through each template backend and find all template directories.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering and deduplicating them.\n    # This prevents the autoreloader from having to check the same\n    # directories multiple times, as well as checking directories\n    # that cannot contain templates files.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering and converting to paths.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\n        items.update(\n            cwd / to_path(dir)\n            for dir in backend.engine.dirs\n            if not is_django_path(dir)\n        )\n",
      "\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django directories.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find any template_loader\n    # with a 'get_dirs' method. Collect the directories, filtering out Django\n    # directories (like BASE_DIR) to avoid recursive watching.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n"
    ],
    "Location 3 (/root/hy/projects_4/django/django/template/autoreload.py lines 43-46)": [
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n",
      "\n@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\ndef watch_for_template_changes(sender, **kwargs):\n    for directory in get_template_directories():\n        sender.watch_dir(directory, '**/*')\n"
    ],
    "Location 4 (/root/hy/projects_4/django/django/utils/autoreload.py lines 54-56)": [
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    try:\n        return Path(django.__file__).parent in Path(path).parents\n    except (OSError, ValueError):\n        return False\n",
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    return Path(django.__file__).parent in Path(path).resolve().parents\n",
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    try:\n        return Path(django.__file__).parent in Path(path).parents\n    except (OSError, ValueError):\n        return False\n",
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    return Path(django.__file__).parent in Path(path).resolve().parents\n",
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    return Path(django.__file__).parent in Path(path).parents or Path(path) == Path(django.__file__).parent\n",
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    return Path(django.__file__).parent in Path(path).resolve().parents\n",
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    try:\n        return Path(django.__file__).parent in Path(path).parents\n    except (OSError, ValueError):\n        return False\n",
      "\ndef is_django_path(path):\n    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n    return Path(django.__file__).parent in Path(path).resolve().parents\n"
    ],
    "Location 5 (/root/hy/projects_4/django/django/template/autoreload.py lines 12-32)": [
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir)\n            for dir in backend.engine.dirs\n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n",
      "\ndef get_template_directories():\n    # Iterate through each template backend and find\n    # any template_loader that has a 'get_dirs' method.\n    # Collect the directories, filtering out Django templates.\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n\n        items.update(\n            cwd / to_path(dir) \n            for dir in backend.engine.dirs \n            if not is_django_path(dir)\n        )\n\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update(\n                cwd / to_path(directory)\n                for directory in loader.get_dirs()\n                if not is_django_path(directory)\n            )\n    return items\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..8561b71f37 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,11 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -30,6 +35,12 @@ def get_template_directories():\n                 if not is_django_path(directory)\n             )\n     return items\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n \n \n def reset_loaders():\n@@ -40,6 +51,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..15465b278c 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,6 +51,7 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n     return Path(django.__file__).parent in Path(path).parents\n",
    "variant_0": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..f273b29c4c 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,11 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -30,6 +35,52 @@ def get_template_directories():\n                 if not is_django_path(directory)\n             )\n     return items\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+def get_template_directories():\n+    # Iterate through each template backend and find\n+    # any template_loader that has a 'get_dirs' method.\n+    # Collect the directories, filtering and sorting them.\n+    cwd = Path.cwd()\n+    items = set()\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+    return items\n \n \n def reset_loaders():\n@@ -40,6 +91,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..15465b278c 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,6 +51,7 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n     return Path(django.__file__).parent in Path(path).parents\n",
    "variant_1": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..46506124ae 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,26 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -31,6 +51,35 @@ def get_template_directories():\n             )\n     return items\n \n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+def get_template_directories():\n+    # Iterate through each template backend and find all template directories.\n+    cwd = Path.cwd()\n+    items = set()\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+    return items\n+\n \n def reset_loaders():\n     for backend in engines.all():\n@@ -40,6 +89,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..68a01bd92d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,13 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    try:\n+        return Path(django.__file__).parent in Path(path).parents\n+    except (OSError, ValueError):\n+        return False\n \n \n def check_errors(fn):\n",
    "variant_2": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..f1e60d0717 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,11 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -30,6 +35,32 @@ def get_template_directories():\n                 if not is_django_path(directory)\n             )\n     return items\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n \n \n def reset_loaders():\n@@ -40,6 +71,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..05dc693fcf 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,10 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    return Path(django.__file__).parent in Path(path).resolve().parents\n \n \n def check_errors(fn):\n",
    "variant_3": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..eb4bbd86b4 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,11 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -30,6 +35,55 @@ def get_template_directories():\n                 if not is_django_path(directory)\n             )\n     return items\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+def get_template_directories():\n+    # Iterate through each template backend and find\n+    # any template_loader that has a 'get_dirs' method.\n+    # Collect the directories, filtering and deduplicating them.\n+    # This prevents the autoreloader from having to check the same\n+    # directories multiple times, as well as checking directories\n+    # that cannot contain templates files.\n+    cwd = Path.cwd()\n+    items = set()\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+    return items\n \n \n def reset_loaders():\n@@ -40,6 +94,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..68a01bd92d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,13 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    try:\n+        return Path(django.__file__).parent in Path(path).parents\n+    except (OSError, ValueError):\n+        return False\n \n \n def check_errors(fn):\n",
    "variant_4": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..e1f49a2fac 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,11 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -30,6 +35,52 @@ def get_template_directories():\n                 if not is_django_path(directory)\n             )\n     return items\n+        items.update(\n+            cwd / to_path(dir)\n+            for dir in backend.engine.dirs\n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+def get_template_directories():\n+    # Iterate through each template backend and find\n+    # any template_loader that has a 'get_dirs' method.\n+    # Collect the directories, filtering and converting to paths.\n+    cwd = Path.cwd()\n+    items = set()\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+    return items\n \n \n def reset_loaders():\n@@ -40,6 +91,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..05dc693fcf 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,10 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    return Path(django.__file__).parent in Path(path).resolve().parents\n \n \n def check_errors(fn):\n",
    "variant_5": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..b0f8f5942b 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,26 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -31,6 +51,17 @@ def get_template_directories():\n             )\n     return items\n \n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+        items.update(\n+            cwd / to_path(dir)\n+            for dir in backend.engine.dirs\n+            if not is_django_path(dir)\n+        )\n+    return items\n+\n \n def reset_loaders():\n     for backend in engines.all():\n@@ -40,6 +71,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..35e7dcb0b1 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,10 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    return Path(django.__file__).parent in Path(path).parents or Path(path) == Path(django.__file__).parent\n \n \n def check_errors(fn):\n",
    "variant_6": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..f1e60d0717 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,11 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -30,6 +35,32 @@ def get_template_directories():\n                 if not is_django_path(directory)\n             )\n     return items\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n \n \n def reset_loaders():\n@@ -40,6 +71,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..05dc693fcf 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,10 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    return Path(django.__file__).parent in Path(path).resolve().parents\n \n \n def check_errors(fn):\n",
    "variant_7": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..ce762a14ce 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,11 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir)\n+            for dir in backend.engine.dirs\n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -30,6 +35,52 @@ def get_template_directories():\n                 if not is_django_path(directory)\n             )\n     return items\n+        items.update(\n+            cwd / to_path(dir)\n+            for dir in backend.engine.dirs\n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+def get_template_directories():\n+    # Iterate through each template backend and find\n+    # any template_loader that has a 'get_dirs' method.\n+    # Collect the directories, filtering out Django directories.\n+    cwd = Path.cwd()\n+    items = set()\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+    return items\n \n \n def reset_loaders():\n@@ -40,6 +91,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..68a01bd92d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,13 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    try:\n+        return Path(django.__file__).parent in Path(path).parents\n+    except (OSError, ValueError):\n+        return False\n \n \n def check_errors(fn):\n",
    "variant_8": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..fd965dcf3f 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -9,6 +9,7 @@ from django.utils.autoreload import (\n )\n \n \n+\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -19,7 +20,26 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, 'get_dirs'):\n@@ -31,6 +51,37 @@ def get_template_directories():\n             )\n     return items\n \n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+\n+def get_template_directories():\n+    # Iterate through each template backend and find any template_loader\n+    # with a 'get_dirs' method. Collect the directories, filtering out Django\n+    # directories (like BASE_DIR) to avoid recursive watching.\n+    cwd = Path.cwd()\n+    items = set()\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+\n+        items.update(\n+            cwd / to_path(dir) \n+            for dir in backend.engine.dirs \n+            if not is_django_path(dir)\n+        )\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                cwd / to_path(directory)\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+    return items\n+\n \n def reset_loaders():\n     for backend in engines.all():\n@@ -40,6 +91,7 @@ def reset_loaders():\n             loader.reset()\n \n \n+\n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..05dc693fcf 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -51,9 +51,10 @@ def is_django_module(module):\n     return module.__name__.startswith('django.')\n \n \n+\n def is_django_path(path):\n     \"\"\"Return True if the given file path is nested under Django.\"\"\"\n-    return Path(django.__file__).parent in Path(path).parents\n+    return Path(django.__file__).parent in Path(path).resolve().parents\n \n \n def check_errors(fn):\n"
  }
}