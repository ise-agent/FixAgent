{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/viewcode.py lines 181-187)": "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/ext/viewcode.py lines 59-60)": "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/viewcode.py lines 181-187)": [
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n",
      "\ndef collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n    highlighter = app.builder.highlighter  # type: ignore\n    urito = app.builder.get_relative_uri\n"
    ],
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/ext/viewcode.py lines 59-60)": [
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n",
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n",
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n",
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n",
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n",
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n",
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n",
      "\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    if not hasattr(env, '_viewcode_modules'):\n        env._viewcode_modules = {}  # type: ignore\n    if app.builder.name == \"singlehtml\":\n        return\n    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n        return\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..27b16bf99 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -56,6 +56,7 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:\n         env._viewcode_modules = {}  # type: ignore\n     if app.builder.name == \"singlehtml\":\n         return\n+\n     if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n         return\n \n@@ -178,13 +179,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_0": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_1": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_2": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_3": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_4": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_5": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_6": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_7": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n",
    "variant_8": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..465114ed8 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -50,6 +50,13 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str\n         return None\n \n \n+def doctree_read(app: Sphinx, doctree: Node) -> None:\n+    env = app.builder.env\n+    if not hasattr(env, '_viewcode_modules'):\n+        env._viewcode_modules = {}  # type: ignore\n+    if app.builder.name == \"singlehtml\":\n+        return\n+\n def doctree_read(app: Sphinx, doctree: Node) -> None:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n@@ -178,13 +185,15 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     return True\n \n \n+\n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n-\n     modnames = set(env._viewcode_modules)  # type: ignore\n \n     for modname, entry in status_iterator(\n"
  }
}