{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/autodoc/__init__.py lines 112-117)": "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Support comma-separated class names like \"list,dict,tuple\"\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        return arg\n",
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/ext/autodoc/__init__.py lines 685-685)": "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/autodoc/__init__.py lines 112-117)": [
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Handle both single class name and comma-separated list\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        else:\n            return arg\n",
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Support comma-separated class names like \"list,set,tuple\"\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        else:\n            return arg\n",
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Handle both single class name and comma-separated class names\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        else:\n            return arg\n",
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Support comma-separated class names like \"list,set,tuple\"\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        return arg\n",
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Support comma-separated class names like exclude_members_option\n        return {x.strip() for x in arg.split(',') if x.strip()}\n",
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Handle both single class name and comma-separated list\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        else:\n            return arg\n",
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Support comma-separated class names like \"list,set,tuple\"\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        return arg\n",
      "\ndef inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n    if arg in (None, True):\n        return 'object'\n    elif arg is False:\n        return EMPTY\n    else:\n        # Handle both single class names and comma-separated lists\n        if isinstance(arg, str):\n            return {x.strip() for x in arg.split(',') if x.strip()}\n        else:\n            return arg\n"
    ],
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/ext/autodoc/__init__.py lines 685-685)": [
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n",
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n",
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n",
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n",
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n",
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n",
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n",
      "\n                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..6fa8e13c1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,13 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n     else:\n-        return arg\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,7 +683,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..63efc99d8 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,11 +109,17 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n+        # Support comma-separated class names like \"list,dict,tuple\"\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n         return arg\n \n \n@@ -682,7 +688,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..62f7b62d0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,19 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n-        return arg\n+        # Handle both single class name and comma-separated list\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n+        else:\n+            return arg\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,7 +689,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..bfcce48b6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,19 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n-        return arg\n+        # Support comma-separated class names like \"list,set,tuple\"\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n+        else:\n+            return arg\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,7 +689,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..fbf550daf 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,19 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n-        return arg\n+        # Handle both single class name and comma-separated class names\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n+        else:\n+            return arg\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,7 +689,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..9f00636b2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,11 +109,17 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n+        # Support comma-separated class names like \"list,set,tuple\"\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n         return arg\n \n \n@@ -682,7 +688,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..0b8e04fd4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,16 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n-        return arg\n+        # Support comma-separated class names like exclude_members_option\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,7 +686,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..62f7b62d0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,19 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n-        return arg\n+        # Handle both single class name and comma-separated list\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n+        else:\n+            return arg\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,7 +689,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..9f00636b2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,11 +109,17 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n+        # Support comma-separated class names like \"list,set,tuple\"\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n         return arg\n \n \n@@ -682,7 +688,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..2910bce55 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,19 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return EMPTY\n     else:\n-        return arg\n+        # Handle both single class names and comma-separated lists\n+        if isinstance(arg, str):\n+            return {x.strip() for x in arg.split(',') if x.strip()}\n+        else:\n+            return arg\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,7 +689,8 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+\n+                    if cls.__name__ in self.options.inherited_members and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n"
  }
}