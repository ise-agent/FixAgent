{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/matplotlib/axis.py lines 1240-1248)": "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
    "Location 2 (/root/hy/projects_4/matplotlib/lib/matplotlib/axis.py lines 1179-1196)": "\n    def _set_lim(self, v0, v1, *, emit=True, auto):\n        \"\"\"\n        Set view limits.\n\n        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n        ``set_zlim`` methods.\n\n        Parameters\n        ----------\n        v0, v1 : float\n            The view limits.  (Passing *v0* as a (low, high) pair is not\n            supported; normalization must occur in the Axes setters.)\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on, False\n            turns off, None leaves unchanged.\n        \"\"\"\n",
    "Location 3 (/root/hy/projects_4/matplotlib/lib/matplotlib/axes/_base.py lines 3640-3660)": "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or both *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/matplotlib/axis.py lines 1240-1248)": [
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n            # Call all of the other axes that are shared with this one\n            for other in self._get_shared_axes():\n                if other is not self.axes:\n                    other._axis_map[name]._set_lim(\n                        v0, v1, emit=True, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n"
    ],
    "Location 2 (/root/hy/projects_4/matplotlib/lib/matplotlib/axis.py lines 1179-1196)": [
      "\n    def _set_lim(self, v0, v1, *, emit=True, auto):\n        \"\"\"\n        Set view limits.\n\n        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n        ``set_zlim`` methods.\n\n        Parameters\n        ----------\n        v0, v1 : float\n            The view limits.  (Passing *v0* as a (low, high) pair is not\n            supported; normalization must occur in the Axes setters.)\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on, False\n            turns off, None leaves unchanged.\n        \"\"\"\n",
      "\n    def _set_lim(self, v0, v1, *, emit=True, auto):\n        \"\"\"\n        Set view limits.\n\n        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n        ``set_zlim`` methods.\n\n        Parameters\n        ----------\n        v0, v1 : float\n            The view limits.  (Passing *v0* as a (low, high) pair is not\n            supported; normalization must occur in the Axes setters.)\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on, False\n            turns off, None leaves unchanged.\n        \"\"\"\n",
      "\n    def _set_lim(self, v0, v1, *, emit=True, auto):\n        \"\"\"\n        Set view limits.\n\n        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n        ``set_zlim`` methods.\n\n        Parameters\n        ----------\n        v0, v1 : float\n            The view limits.  (Passing *v0* as a (low, high) pair is not\n            supported; normalization must occur in the Axes setters.)\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on, False\n            turns off, None leaves unchanged.\n        \"\"\"\n",
      "\n    def _set_lim(self, v0, v1, *, emit=True, auto):\n        \"\"\"\n        Set view limits.\n\n        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n        ``set_zlim`` methods.\n\n        Parameters\n        ----------\n        v0, v1 : float\n            The view limits.  (Passing *v0* as a (low, high) pair is not\n            supported; normalization must occur in the Axes setters.)\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on, False\n            turns off, None leaves unchanged.\n        \"\"\"\n",
      "\ndef _set_lim(self, v0, v1, *, emit=True, auto):\n    \"\"\"\n    Set view limits.\n\n    This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n    ``set_zlim`` methods.\n\n    Parameters\n    ----------\n    v0, v1 : float\n        The view limits.  (Passing *v0* as a (low, high) pair is not\n        supported; normalization must occur in the Axes setters.)\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the x-axis. True turns on, False\n        turns off, None leaves unchanged.\n    \"\"\"\n",
      "\n    def _set_lim(self, v0, v1, *, emit=True, auto):\n        \"\"\"\n        Set view limits.\n\n        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n        ``set_zlim`` methods.\n\n        Parameters\n        ----------\n        v0, v1 : float\n            The view limits.  (Passing *v0* as a (low, high) pair is not\n            supported; normalization must occur in the Axes setters.)\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on, False\n            turns off, None leaves unchanged.\n        \"\"\"\n",
      "\n    def _set_lim(self, v0, v1, *, emit=True, auto):\n        \"\"\"\n        Set view limits.\n\n        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n        ``set_zlim`` methods.\n\n        Parameters\n        ----------\n        v0, v1 : float\n            The view limits.  (Passing *v0* as a (low, high) pair is not\n            supported; normalization must occur in the Axes setters.)\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on, False\n            turns off, None leaves unchanged.\n        \"\"\"\n",
      "\ndef _set_lim(self, v0, v1, *, emit=True, auto):\n    \"\"\"\n    Set view limits.\n\n    This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n    ``set_zlim`` methods.\n\n    Parameters\n    ----------\n    v0, v1 : float\n        The view limits.  (Passing *v0* as a (low, high) pair is not\n        supported; normalization must occur in the Axes setters.)\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the x-axis. True turns on, False\n        turns off, None leaves unchanged.\n    \"\"\"\n"
    ],
    "Location 3 (/root/hy/projects_4/matplotlib/lib/matplotlib/axes/_base.py lines 3640-3660)": [
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n            .. ACCEPTS: (bottom: float, top: float)\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_ylim : Set the y-axis view limits.\n        axis : Set x and y limits and scaling.\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n",
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_ylim : Set the y-axis view limits.\n        invert_xaxis : Invert the x-axis.\n        xaxis_inverted : Test whether the x-axis is inverted.\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n",
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or both *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n",
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. *True* turns on,\n            *False* turns off, *None* leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unspecified, in which case the existing value\n        is preserved.  That is, the call ``set_xlim(right=right_lim)`` will\n        set the right limit while preserving the current left limit.\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n",
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n            .. ACCEPTS: (bottom: float, top: float)\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n",
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n            .. ACCEPTS: (bottom: float, top: float)\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n",
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n",
      "\n    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                 xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The left and right xlims may also be passed as the tuple\n            (*left*, *right*) as the first positional argument (or as\n            the *left* keyword argument).\n\n            .. ACCEPTS: (bottom: float, top: float)\n\n        right : float, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, default: True\n            Whether to notify observers of limit change.\n\n        auto : bool or None, default: False\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged.\n\n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively, and it is an\n            error to pass both *xmin* and *left* or *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_ylim : Set the y-axis view limits.\n        invert_xaxis : Invert the x-axis.\n        xaxis_inverted : Test whether the x-axis is inverted.\n\n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n            right = xmax\n        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n\n    get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n    set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n    get_xticks = _axis_method_wrapper(\"xaxis\", \"get_ticklocs\")\n    set_xticks = _axis_method_wrapper(\"xaxis\", \"set_ticks\")\n    get_xmajorticklabels = _axis_method_wrapper(\"xaxis\", \"get_majorticklabels\")\n    get_xminorticklabels = _axis_method_wrapper(\"xaxis\", \"get_minorticklabels\")\n    get_xticklabels = _axis_method_wrapper(\"xaxis\", \"get_ticklabels\")\n    set_xticklabels = _axis_method_wrapper(\n        \"xaxis\", \"set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes.set_xticks\"})\n\n    def get_ylabel(self):\n        \"\"\"\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..453c258bcf 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3637,6 +3637,7 @@ class _AxesBase(martist.Artist):\n             left, right = left\n         if xmin is not None:\n             if left is not None:\n+\n                 raise TypeError(\"Cannot pass both 'left' and 'xmin'\")\n             left = xmin\n         if xmax is not None:\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..b7dbd218f4 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,8 +1238,8 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n-            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n@@ -1246,6 +1247,10 @@ class Axis(martist.Artist):\n                         v0, v1, emit=False, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n+        \n+        # Always emit callbacks for limit changes, regardless of emit parameter\n+        # This ensures shared axes also trigger their callbacks\n+        self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_0": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..bddfbd345b 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3631,6 +3631,75 @@ class _AxesBase(martist.Artist):\n         following so 5000 years ago is on the left of the plot and the\n         present is on the right.\n \n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or both *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_xbound, get_xbound\n+        invert_xaxis, xaxis_inverted\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n         >>> set_xlim(5000, 0)\n         \"\"\"\n         if right is None and np.iterable(left):\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..f74a44c9ee 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_1": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..cbee045259 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3631,6 +3631,77 @@ class _AxesBase(martist.Artist):\n         following so 5000 years ago is on the left of the plot and the\n         present is on the right.\n \n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+            .. ACCEPTS: (bottom: float, top: float)\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_ylim : Set the y-axis view limits.\n+        axis : Set x and y limits and scaling.\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n         >>> set_xlim(5000, 0)\n         \"\"\"\n         if right is None and np.iterable(left):\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..f74a44c9ee 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_2": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..22cd691181 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3631,6 +3631,76 @@ class _AxesBase(martist.Artist):\n         following so 5000 years ago is on the left of the plot and the\n         present is on the right.\n \n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_ylim : Set the y-axis view limits.\n+        invert_xaxis : Invert the x-axis.\n+        xaxis_inverted : Test whether the x-axis is inverted.\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n         >>> set_xlim(5000, 0)\n         \"\"\"\n         if right is None and np.iterable(left):\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..f74a44c9ee 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_3": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..bddfbd345b 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3631,6 +3631,75 @@ class _AxesBase(martist.Artist):\n         following so 5000 years ago is on the left of the plot and the\n         present is on the right.\n \n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or both *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_xbound, get_xbound\n+        invert_xaxis, xaxis_inverted\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n         >>> set_xlim(5000, 0)\n         \"\"\"\n         if right is None and np.iterable(left):\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..f74a44c9ee 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_4": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..d6e946db91 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3631,6 +3631,75 @@ class _AxesBase(martist.Artist):\n         following so 5000 years ago is on the left of the plot and the\n         present is on the right.\n \n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. *True* turns on,\n+            *False* turns off, *None* leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_xbound, get_xbound\n+        invert_xaxis, xaxis_inverted\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unspecified, in which case the existing value\n+        is preserved.  That is, the call ``set_xlim(right=right_lim)`` will\n+        set the right limit while preserving the current left limit.\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n         >>> set_xlim(5000, 0)\n         \"\"\"\n         if right is None and np.iterable(left):\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..f74a44c9ee 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_5": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..03fa342733 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3567,6 +3567,77 @@ class _AxesBase(martist.Artist):\n                 raise ValueError(\"Axis limits cannot be NaN or Inf\")\n             return converted_limit\n \n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+            .. ACCEPTS: (bottom: float, top: float)\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_xbound, get_xbound\n+        invert_xaxis, xaxis_inverted\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n     def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                  xmin=None, xmax=None):\n         \"\"\"\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..572e27b188 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,24 +1176,25 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n-    def _set_lim(self, v0, v1, *, emit=True, auto):\n-        \"\"\"\n-        Set view limits.\n \n-        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n-        ``set_zlim`` methods.\n+def _set_lim(self, v0, v1, *, emit=True, auto):\n+    \"\"\"\n+    Set view limits.\n \n-        Parameters\n-        ----------\n-        v0, v1 : float\n-            The view limits.  (Passing *v0* as a (low, high) pair is not\n-            supported; normalization must occur in the Axes setters.)\n-        emit : bool, default: True\n-            Whether to notify observers of limit change.\n-        auto : bool or None, default: False\n-            Whether to turn on autoscaling of the x-axis. True turns on, False\n-            turns off, None leaves unchanged.\n-        \"\"\"\n+    This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n+    ``set_zlim`` methods.\n+\n+    Parameters\n+    ----------\n+    v0, v1 : float\n+        The view limits.  (Passing *v0* as a (low, high) pair is not\n+        supported; normalization must occur in the Axes setters.)\n+    emit : bool, default: True\n+        Whether to notify observers of limit change.\n+    auto : bool or None, default: False\n+        Whether to turn on autoscaling of the x-axis. True turns on, False\n+        turns off, None leaves unchanged.\n+    \"\"\"\n         name = self._get_axis_name()\n \n         self.axes._process_unit_info([(name, (v0, v1))], convert=False)\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_6": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..03fa342733 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3567,6 +3567,77 @@ class _AxesBase(martist.Artist):\n                 raise ValueError(\"Axis limits cannot be NaN or Inf\")\n             return converted_limit\n \n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+            .. ACCEPTS: (bottom: float, top: float)\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_xbound, get_xbound\n+        invert_xaxis, xaxis_inverted\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n     def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n                  xmin=None, xmax=None):\n         \"\"\"\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..f74a44c9ee 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_7": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..e5d5a7803f 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3631,6 +3631,75 @@ class _AxesBase(martist.Artist):\n         following so 5000 years ago is on the left of the plot and the\n         present is on the right.\n \n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_xbound, get_xbound\n+        invert_xaxis, xaxis_inverted\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n         >>> set_xlim(5000, 0)\n         \"\"\"\n         if right is None and np.iterable(left):\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..f74a44c9ee 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,6 +1176,7 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n+\n     def _set_lim(self, v0, v1, *, emit=True, auto):\n         \"\"\"\n         Set view limits.\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n",
    "variant_8": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..a758f60e1f 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3631,6 +3631,78 @@ class _AxesBase(martist.Artist):\n         following so 5000 years ago is on the left of the plot and the\n         present is on the right.\n \n+        >>> set_xlim(5000, 0)\n+        \"\"\"\n+        if right is None and np.iterable(left):\n+            left, right = left\n+        if xmin is not None:\n+            if left is not None:\n+\n+    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n+                 xmin=None, xmax=None):\n+        \"\"\"\n+        Set the x-axis view limits.\n+\n+        Parameters\n+        ----------\n+        left : float, optional\n+            The left xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+            The left and right xlims may also be passed as the tuple\n+            (*left*, *right*) as the first positional argument (or as\n+            the *left* keyword argument).\n+\n+            .. ACCEPTS: (bottom: float, top: float)\n+\n+        right : float, optional\n+            The right xlim in data coordinates. Passing *None* leaves the\n+            limit unchanged.\n+\n+        emit : bool, default: True\n+            Whether to notify observers of limit change.\n+\n+        auto : bool or None, default: False\n+            Whether to turn on autoscaling of the x-axis. True turns on,\n+            False turns off, None leaves unchanged.\n+\n+        xmin, xmax : float, optional\n+            They are equivalent to left and right respectively, and it is an\n+            error to pass both *xmin* and *left* or *xmax* and *right*.\n+\n+        Returns\n+        -------\n+        left, right : (float, float)\n+            The new x-axis limits in data coordinates.\n+\n+        See Also\n+        --------\n+        get_xlim\n+        set_ylim : Set the y-axis view limits.\n+        invert_xaxis : Invert the x-axis.\n+        xaxis_inverted : Test whether the x-axis is inverted.\n+\n+        Notes\n+        -----\n+        The *left* value may be greater than the *right* value, in which\n+        case the x-axis values will decrease from left to right.\n+\n+        Examples\n+        --------\n+        >>> set_xlim(left, right)\n+        >>> set_xlim((left, right))\n+        >>> left, right = set_xlim(left, right)\n+\n+        One limit may be left unchanged.\n+\n+        >>> set_xlim(right=right_lim)\n+\n+        Limits may be passed in reverse order to flip the direction of\n+        the x-axis. For example, suppose *x* represents the number of\n+        years before present. The x-axis limits might be set like the\n+        following so 5000 years ago is on the left of the plot and the\n+        present is on the right.\n+\n         >>> set_xlim(5000, 0)\n         \"\"\"\n         if right is None and np.iterable(left):\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..572e27b188 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1176,24 +1176,25 @@ class Axis(martist.Artist):\n         # attribute, and the derived code below will check for that\n         # and use it if it's available (else just use 0..1)\n \n-    def _set_lim(self, v0, v1, *, emit=True, auto):\n-        \"\"\"\n-        Set view limits.\n \n-        This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n-        ``set_zlim`` methods.\n+def _set_lim(self, v0, v1, *, emit=True, auto):\n+    \"\"\"\n+    Set view limits.\n \n-        Parameters\n-        ----------\n-        v0, v1 : float\n-            The view limits.  (Passing *v0* as a (low, high) pair is not\n-            supported; normalization must occur in the Axes setters.)\n-        emit : bool, default: True\n-            Whether to notify observers of limit change.\n-        auto : bool or None, default: False\n-            Whether to turn on autoscaling of the x-axis. True turns on, False\n-            turns off, None leaves unchanged.\n-        \"\"\"\n+    This method is a helper for the Axes ``set_xlim``, ``set_ylim``, and\n+    ``set_zlim`` methods.\n+\n+    Parameters\n+    ----------\n+    v0, v1 : float\n+        The view limits.  (Passing *v0* as a (low, high) pair is not\n+        supported; normalization must occur in the Axes setters.)\n+    emit : bool, default: True\n+        Whether to notify observers of limit change.\n+    auto : bool or None, default: False\n+        Whether to turn on autoscaling of the x-axis. True turns on, False\n+        turns off, None leaves unchanged.\n+    \"\"\"\n         name = self._get_axis_name()\n \n         self.axes._process_unit_info([(name, (v0, v1))], convert=False)\n@@ -1237,13 +1238,14 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n+                        v0, v1, emit=True, auto=auto)\n                     if other.figure != self.figure:\n                         other.figure.canvas.draw_idle()\n \n"
  }
}