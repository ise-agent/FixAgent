{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/_code/code.py lines 537-542)": "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/python_api.py lines 716-718)": "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
    "Location 3 (/root/hy/projects_4/pytest/src/_pytest/_code/code.py lines 421-424)": "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n",
    "Location 4 (/root/hy/projects_4/pytest/src/_pytest/_code/code.py lines 452-466)": "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n",
    "Location 5 (/root/hy/projects_4/pytest/src/_pytest/python_api.py lines 709-728)": "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/_code/code.py lines 537-542)": [
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n"
    ],
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/python_api.py lines 716-718)": [
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n"
    ],
    "Location 3 (/root/hy/projects_4/pytest/src/_pytest/_code/code.py lines 421-424)": [
      "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n",
      "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n",
      "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n",
      "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n",
      "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n",
      "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n",
      "\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n",
      "\n    @property\n    def value(self):\n        \"\"\"the exception value\"\"\"\n        return self._excinfo[1]\n"
    ],
    "Location 4 (/root/hy/projects_4/pytest/src/_pytest/_code/code.py lines 452-466)": [
      "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n",
      "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n",
      "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n",
      "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n",
      "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n",
      "\ndef exconly(self, tryshort=False):\n    \"\"\" return the exception as a string\n\n        when 'tryshort' resolves to True, and the exception is a\n        _pytest._code._AssertionError, only the actual exception part of\n        the exception representation is returned (so 'AssertionError: ' is\n        removed from the beginning)\n    \"\"\"\n    lines = format_exception_only(self.type, self.value)\n    text = \"\".join(lines)\n    text = text.rstrip()\n    if tryshort:\n        if text.startswith(self._striptext):\n            text = text[len(self._striptext) :]\n    return text\n",
      "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n",
      "\n    def exconly(self, tryshort=False):\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n"
    ],
    "Location 5 (/root/hy/projects_4/pytest/src/_pytest/python_api.py lines 709-728)": [
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..d0dcf66a0 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,4 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+        return suppress_exception\n",
    "variant_0": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_1": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_2": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_3": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_4": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_5": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_6": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..4cd01ae0d 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,21 +450,22 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n-    def exconly(self, tryshort=False):\n-        \"\"\" return the exception as a string\n \n-            when 'tryshort' resolves to True, and the exception is a\n-            _pytest._code._AssertionError, only the actual exception part of\n-            the exception representation is returned (so 'AssertionError: ' is\n-            removed from the beginning)\n-        \"\"\"\n-        lines = format_exception_only(self.type, self.value)\n-        text = \"\".join(lines)\n-        text = text.rstrip()\n-        if tryshort:\n-            if text.startswith(self._striptext):\n-                text = text[len(self._striptext) :]\n-        return text\n+def exconly(self, tryshort=False):\n+    \"\"\" return the exception as a string\n+\n+        when 'tryshort' resolves to True, and the exception is a\n+        _pytest._code._AssertionError, only the actual exception part of\n+        the exception representation is returned (so 'AssertionError: ' is\n+        removed from the beginning)\n+    \"\"\"\n+    lines = format_exception_only(self.type, self.value)\n+    text = \"\".join(lines)\n+    text = text.rstrip()\n+    if tryshort:\n+        if text.startswith(self._striptext):\n+            text = text[len(self._striptext) :]\n+    return text\n \n     def errisinstance(self, exc):\n         \"\"\" return True if the exception is an instance of exc \"\"\"\n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_7": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..57c73e3a7 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,10 +418,11 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n-    @property\n-    def value(self):\n-        \"\"\"the exception value\"\"\"\n-        return self._excinfo[1]\n+\n+    def __str__(self):\n+        if self._excinfo is None:\n+            return repr(self)\n+        return str(self.value)\n \n     @property\n     def tb(self):\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n",
    "variant_8": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..e143140b4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -418,6 +418,7 @@ class ExceptionInfo:\n         \"\"\"the exception class\"\"\"\n         return self._excinfo[0]\n \n+\n     @property\n     def value(self):\n         \"\"\"the exception value\"\"\"\n@@ -449,6 +450,7 @@ class ExceptionInfo:\n             return \"<ExceptionInfo for raises contextmanager>\"\n         return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n \n+\n     def exconly(self, tryshort=False):\n         \"\"\" return the exception as a string\n \n@@ -534,12 +536,11 @@ class ExceptionInfo:\n         )\n         return fmt.repr_excinfo(self)\n \n+\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\ndiff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e5d2a6423 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,5 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+            self.excinfo.match(self.match_expr)\n+        return suppress_exception\n"
  }
}