{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 63-63)": "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
    "Location 2 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 70-71)": "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n",
    "Location 3 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 77-78)": "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n    _new_re = rf\"NO({sep}NO)+\"\n",
    "Location 4 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 35-35)": "\n>>> _line_type(\"read serr 3\")\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 63-63)": [
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n"
    ],
    "Location 2 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 70-71)": [
      "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n",
      "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n",
      "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n",
      "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n",
      "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n",
      "\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n"
    ],
    "Location 3 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 77-78)": [
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n    _new_re = rf\"NO({sep}NO)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n    _new_re = rf\"NO({sep}NO)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n    _new_re = rf\"NO({sep}NO)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\ndef _line_type(line, delimiter=None):\n    \"\"\"\n    Interpret a QDP file line type, returning either ``comment``,\n    ``command``, or ``data,N`` where N is the number of columns in the\n    line.\n\n    Parameters\n    ----------\n    line : str\n        a single line of the file\n\n    Returns\n    -------\n    type : str\n        Line type: ``comment``, ``command``, or ``data,N`` where N is the\n        number of columns in the line.\n\n    Examples\n    --------\n    >>> _line_type(\"READ SERR 3\")\n    'command'\n    >>> _line_type(\"C        \")\n    'comment'\n    >>> _line_type(\"38599.0 14.38 -0.07 33.66 -0.24\")\n    'data,5'\n    \"\"\"\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re)\n    line = line.strip()\n    if not line:\n        return \"comment\"\n    match = _line_type_re.match(line)\n\n    if match is None:\n        raise ValueError(f\"Unrecognized QDP line: {line}\")\n    for type_, val in match.groupdict().items():\n        if val is None:\n            continue\n        if type_ == \"data\":\n            return f\"data,{len(val.split(sep=delimiter))}\"\n        else:\n            return type_\n",
      "\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n"
    ],
    "Location 4 (/root/hy/projects_4/astropy/astropy/io/ascii/qdp.py lines 35-35)": [
      "\n>>> _line_type(\"read serr 3\")\n",
      "\n>>> _line_type(\"read serr 3\")\n",
      "\n>>> _line_type(\"read serr 3\")\n",
      "\n    >>> _line_type(\"read serr 3\")\n",
      "\n    >>> _line_type(\"read serr 3\")\n",
      "\n>>> _line_type(\"read serr 3\")\n",
      "\n>>> _line_type(\"read serr 3\")\n",
      "\n    >>> _line_type(\"read serr 3\")\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..15f0cb0d33 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+    >>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,13 +61,15 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n         sep = r\"\\s+\"\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n     _line_type_re = re.compile(_type_re)\n     line = line.strip()\n@@ -74,6 +77,7 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n+\n     if match is None:\n         raise ValueError(f\"Unrecognized QDP line: {line}\")\n     for type_, val in match.groupdict().items():\n",
    "variant_0": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..ae5c57a991 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+>>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,17 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -74,8 +85,9 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n",
    "variant_1": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..ae5c57a991 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+>>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,17 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -74,8 +85,9 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n",
    "variant_2": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..f894872dfc 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+>>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,22 +61,24 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n         sep = r\"\\s+\"\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n-    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n",
    "variant_3": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..23a797b783 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+>>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,17 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -74,8 +85,8 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n",
    "variant_4": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..bb9a44699b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+    >>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,17 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -74,8 +85,9 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n",
    "variant_5": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..64d79ddbd8 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+    >>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,17 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -74,8 +85,8 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n",
    "variant_6": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..23a797b783 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+>>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,17 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -74,8 +85,8 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n",
    "variant_7": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..ed7de433e2 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+>>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,59 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n+    _line_type_re = re.compile(_type_re)\n+    line = line.strip()\n+    if not line:\n+        return \"comment\"\n+    match = _line_type_re.match(line)\n+\n+\n+def _line_type(line, delimiter=None):\n+    \"\"\"\n+    Interpret a QDP file line type, returning either ``comment``,\n+    ``command``, or ``data,N`` where N is the number of columns in the\n+    line.\n+\n+    Parameters\n+    ----------\n+    line : str\n+        a single line of the file\n+\n+    Returns\n+    -------\n+    type : str\n+        Line type: ``comment``, ``command``, or ``data,N`` where N is the\n+        number of columns in the line.\n+\n+    Examples\n+    --------\n+    >>> _line_type(\"READ SERR 3\")\n+    'command'\n+    >>> _line_type(\"C        \")\n+    'comment'\n+    >>> _line_type(\"38599.0 14.38 -0.07 33.66 -0.24\")\n+    'data,5'\n+    \"\"\"\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -83,6 +136,13 @@ def _line_type(line, delimiter=None):\n             return f\"data,{len(val.split(sep=delimiter))}\"\n         else:\n             return type_\n+    for type_, val in match.groupdict().items():\n+        if val is None:\n+            continue\n+        if type_ == \"data\":\n+            return f\"data,{len(val.split(sep=delimiter))}\"\n+        else:\n+            return type_\n \n \n def _get_type_from_list_of_lines(lines, delimiter=None):\n",
    "variant_8": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..64d79ddbd8 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -32,7 +32,8 @@ def _line_type(line, delimiter=None):\n \n     Examples\n     --------\n-    >>> _line_type(\"READ SERR 3\")\n+\n+    >>> _line_type(\"read serr 3\")\n     'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n@@ -60,7 +61,17 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"\\s+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -74,8 +85,8 @@ def _line_type(line, delimiter=None):\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n-    if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n"
  }
}