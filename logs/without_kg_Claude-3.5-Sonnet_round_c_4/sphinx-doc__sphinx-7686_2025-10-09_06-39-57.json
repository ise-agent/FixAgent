{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/autosummary/generate.py lines 248-249)": "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_value = safe_getattr(obj, member_name)\n                    if getattr(member_value, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # If we can't determine the module, include it to be safe\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/ext/autosummary/generate.py lines 261-262)": "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            filtered_members = []\n            for name in dir(obj):\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__module__:\n                        filtered_members.append(name)\n                except (ImportError, AttributeError):\n                    # If we can't get the attribute or its module, include it\n                    filtered_members.append(name)\n            ns['members'] = filtered_members\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/autosummary/generate.py lines 248-249)": [
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting, similar to get_members()\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and\n                           (getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__ or\n                            safe_getattr(obj, name, None) is None)]\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = getattr(obj, member_name)\n                    # Include member if it's defined in this module\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = []\n            for member_name in all_members:\n                try:\n                    member_value = safe_getattr(obj, member_name)\n                    if getattr(member_value, '__module__', None) == obj.__name__:\n                        ns['members'].append(member_name)\n                except (AttributeError, ImportError):\n                    # If we can't get the member or its module, skip it\n                    pass\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = getattr(obj, member_name)\n                    # Include member if it's defined in this module\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (ImportError, AttributeError):\n                    # If we can't access the member, include it to be safe\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (ImportError, AttributeError):\n                    # Include members that can't be imported/accessed\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n"
    ],
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/ext/autosummary/generate.py lines 261-262)": [
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            filtered_members = []\n            for name in dir(obj):\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__module__:\n                        filtered_members.append(name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be introspected\n                    filtered_members.append(name)\n            ns['members'] = filtered_members\n",
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            filtered_members = []\n            for name in dir(obj):\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__module__:\n                        filtered_members.append(name)\n                except (ImportError, AttributeError):\n                    # Include members that can't be imported or don't have __module__\n                    filtered_members.append(name)\n            ns['members'] = filtered_members\n",
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = []\n            for member_name in all_members:\n                try:\n                    value = safe_getattr(obj, member_name)\n                    if getattr(value, '__module__', None) == obj.__module__:\n                        ns['members'].append(member_name)\n                except AttributeError:\n                    # Include members that can't be safely accessed\n                    ns['members'].append(member_name)\n",
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            filtered_members = []\n            for name in dir(obj):\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__module__:\n                        filtered_members.append(name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected to be safe\n                    filtered_members.append(name)\n            ns['members'] = filtered_members\n",
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = []\n            for member_name in all_members:\n                try:\n                    member_value = safe_getattr(obj, member_name)\n                    # Include member if it's defined in this class (not imported)\n                    if getattr(member_value, '__module__', None) == obj.__module__:\n                        ns['members'].append(member_name)\n                except AttributeError:\n                    # If we can't get the member, include it to be safe\n                    ns['members'].append(member_name)\n",
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = []\n            for name in all_members:\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__module__:\n                        ns['members'].append(name)\n                except AttributeError:\n                    # Include members that can't be accessed but are in dir()\n                    ns['members'].append(name)\n",
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [member for member in all_members\n                           if getattr(getattr(obj, member, None), '__module__', None) == obj.__module__]\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n",
      "\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting, similar to get_members()\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = []\n            for member_name in all_members:\n                try:\n                    member_value = safe_getattr(obj, member_name)\n                    # Include if it's defined in this class or doesn't have __module__\n                    if (getattr(member_value, '__module__', None) == obj.__module__ or\n                        getattr(member_value, '__module__', None) is None):\n                        ns['members'].append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members we can't inspect\n                    ns['members'].append(member_name)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..9f5d1d1a9 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        filtered_members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # Apply same filtering logic as get_members(): include if imported=True OR member belongs to this module\n+            if imported_members or getattr(value, '__module__', None) == obj.__name__:\n+                filtered_members.append(name)\n+        ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +269,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        filtered_members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # Apply same filtering logic as get_members(): include if imported=True OR member belongs to this module\n+            if imported_members or getattr(value, '__module__', None) == obj.__name__:\n+                filtered_members.append(name)\n+        ns['members'] = filtered_members\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_0": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..d32f1ea5e 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_value = safe_getattr(obj, member_name)\n+                    if getattr(member_value, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # If we can't determine the module, include it to be safe\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +273,22 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            filtered_members = []\n+            for name in dir(obj):\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__module__:\n+                        filtered_members.append(name)\n+                except (ImportError, AttributeError):\n+                    # If we can't get the attribute or its module, include it\n+                    filtered_members.append(name)\n+            ns['members'] = filtered_members\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_1": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..514bb9f57 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,17 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and\n+                           (getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__ or\n+                            safe_getattr(obj, name, None) is None)]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +267,22 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            filtered_members = []\n+            for name in dir(obj):\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__module__:\n+                        filtered_members.append(name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be introspected\n+                    filtered_members.append(name)\n+            ns['members'] = filtered_members\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_2": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..c006ce347 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +273,22 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            filtered_members = []\n+            for name in dir(obj):\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__module__:\n+                        filtered_members.append(name)\n+                except (ImportError, AttributeError):\n+                    # Include members that can't be imported or don't have __module__\n+                    filtered_members.append(name)\n+            ns['members'] = filtered_members\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_3": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..5997682c8 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +273,22 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = []\n+            for member_name in all_members:\n+                try:\n+                    value = safe_getattr(obj, member_name)\n+                    if getattr(value, '__module__', None) == obj.__module__:\n+                        ns['members'].append(member_name)\n+                except AttributeError:\n+                    # Include members that can't be safely accessed\n+                    ns['members'].append(member_name)\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_4": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..be3ed5ee1 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,24 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = getattr(obj, member_name)\n+                    # Include member if it's defined in this module\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +274,22 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            filtered_members = []\n+            for name in dir(obj):\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__module__:\n+                        filtered_members.append(name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected to be safe\n+                    filtered_members.append(name)\n+            ns['members'] = filtered_members\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_5": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..d8dc69ba6 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,22 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = []\n+            for member_name in all_members:\n+                try:\n+                    member_value = safe_getattr(obj, member_name)\n+                    if getattr(member_value, '__module__', None) == obj.__name__:\n+                        ns['members'].append(member_name)\n+                except (AttributeError, ImportError):\n+                    # If we can't get the member or its module, skip it\n+                    pass\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +272,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = []\n+            for member_name in all_members:\n+                try:\n+                    member_value = safe_getattr(obj, member_name)\n+                    # Include member if it's defined in this class (not imported)\n+                    if getattr(member_value, '__module__', None) == obj.__module__:\n+                        ns['members'].append(member_name)\n+                except AttributeError:\n+                    # If we can't get the member, include it to be safe\n+                    ns['members'].append(member_name)\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_6": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..5db2a968a 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,24 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = getattr(obj, member_name)\n+                    # Include member if it's defined in this module\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +274,22 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = []\n+            for name in all_members:\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__module__:\n+                        ns['members'].append(name)\n+                except AttributeError:\n+                    # Include members that can't be accessed but are in dir()\n+                    ns['members'].append(name)\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_7": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..d4caebc42 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (ImportError, AttributeError):\n+                    # If we can't access the member, include it to be safe\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +273,21 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [member for member in all_members\n+                           if getattr(getattr(obj, member, None), '__module__', None) == obj.__module__]\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+            get_members(obj, {'method'}, ['__init__'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_members(obj, {'attribute', 'property'})\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_8": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..9c1cbb2a7 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (ImportError, AttributeError):\n+                    # Include members that can't be imported/accessed\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +273,24 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting, similar to get_members()\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = []\n+            for member_name in all_members:\n+                try:\n+                    member_value = safe_getattr(obj, member_name)\n+                    # Include if it's defined in this class or doesn't have __module__\n+                    if (getattr(member_value, '__module__', None) == obj.__module__ or\n+                        getattr(member_value, '__module__', None) is None):\n+                        ns['members'].append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members we can't inspect\n+                    ns['members'].append(member_name)\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n"
  }
}