{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/sql/query.py lines 1125-1134)": "\ndef check_filterable(self, expression):\n    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n    # Only check filterable attribute for query expressions, not model instances\n    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n        raise NotSupportedError(\n            expression.__class__.__name__ + ' is disallowed in the filter '\n            'clause.'\n        )\n    if hasattr(expression, 'get_source_expressions'):\n        for expr in expression.get_source_expressions():\n            self.check_filterable(expr)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/sql/query.py lines 1125-1134)": [
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        # Only check filterable attribute for query expressions, not model instances\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        # Only check filterable attribute for query expressions, not model instances\n        from django.db.models.expressions import BaseExpression\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        # Only check filterable attribute for query expressions, not model instances\n        from django.db.models.expressions import BaseExpression\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\ndef check_filterable(self, expression):\n    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n    # Only check filterable attribute for query expressions, not model instances\n    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n        raise NotSupportedError(\n            expression.__class__.__name__ + ' is disallowed in the filter '\n            'clause.'\n        )\n    if hasattr(expression, 'get_source_expressions'):\n        for expr in expression.get_source_expressions():\n            self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        # Only check filterable attribute for query expressions, not model instances\n        from django.db.models.expressions import BaseExpression\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        # Only check filterable attribute for query expressions, not model instances\n        if hasattr(expression, '_meta'):\n            # This is a Django model instance, always allow it in filters\n            return\n        if not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        # Only check filterable attribute for query expressions, not model instances\n        from django.db.models.expressions import BaseExpression\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        # Only check filterable attribute for query expressions, not model instances\n        from django.db.models.expressions import BaseExpression\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..6ed94e8b7a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,9 +1122,11 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute for query expressions, not model instances\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n",
    "variant_0": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..1097d09356 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,16 +1122,18 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n-    def check_filterable(self, expression):\n-        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n-        if hasattr(expression, 'get_source_expressions'):\n-            for expr in expression.get_source_expressions():\n-                self.check_filterable(expr)\n+\n+def check_filterable(self, expression):\n+    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+    # Only check filterable attribute for query expressions, not model instances\n+    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n+        raise NotSupportedError(\n+            expression.__class__.__name__ + ' is disallowed in the filter '\n+            'clause.'\n+        )\n+    if hasattr(expression, 'get_source_expressions'):\n+        for expr in expression.get_source_expressions():\n+            self.check_filterable(expr)\n \n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n",
    "variant_1": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..6ed94e8b7a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,9 +1122,11 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute for query expressions, not model instances\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n",
    "variant_2": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..5dc7c33aa4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,9 +1122,12 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute for query expressions, not model instances\n+        from django.db.models.expressions import BaseExpression\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n",
    "variant_3": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..5dc7c33aa4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,9 +1122,12 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute for query expressions, not model instances\n+        from django.db.models.expressions import BaseExpression\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n",
    "variant_4": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..1097d09356 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,16 +1122,18 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n-    def check_filterable(self, expression):\n-        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n-        if hasattr(expression, 'get_source_expressions'):\n-            for expr in expression.get_source_expressions():\n-                self.check_filterable(expr)\n+\n+def check_filterable(self, expression):\n+    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+    # Only check filterable attribute for query expressions, not model instances\n+    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n+        raise NotSupportedError(\n+            expression.__class__.__name__ + ' is disallowed in the filter '\n+            'clause.'\n+        )\n+    if hasattr(expression, 'get_source_expressions'):\n+        for expr in expression.get_source_expressions():\n+            self.check_filterable(expr)\n \n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n",
    "variant_5": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..5dc7c33aa4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,9 +1122,12 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute for query expressions, not model instances\n+        from django.db.models.expressions import BaseExpression\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n",
    "variant_6": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..ac6330d2c7 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,8 +1122,13 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        # Only check filterable attribute for query expressions, not model instances\n+        if hasattr(expression, '_meta'):\n+            # This is a Django model instance, always allow it in filters\n+            return\n         if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n",
    "variant_7": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..5dc7c33aa4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,9 +1122,12 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute for query expressions, not model instances\n+        from django.db.models.expressions import BaseExpression\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n",
    "variant_8": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..5dc7c33aa4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,9 +1122,12 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute for query expressions, not model instances\n+        from django.db.models.expressions import BaseExpression\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n"
  }
}