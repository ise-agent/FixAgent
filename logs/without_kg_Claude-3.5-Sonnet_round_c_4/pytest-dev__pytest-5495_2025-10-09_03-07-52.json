{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 268-285)": "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 260-266)": "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        if isinstance(sequence, bytes):\n            return repr(chr(sequence[index]))\n        else:\n            return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n",
    "Location 3 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 84-86)": "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
    "Location 4 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 129-135)": "\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _diff_text(left.decode('latin-1', 'replace'), right.decode('latin-1', 'replace'), verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
    "Location 5 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 256-286)": "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            return repr(bytes([element]))\n        else:\n            return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_repr = _format_sequence_element(left, i)\n            right_repr = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_repr, right_repr)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 268-285)": [
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = \"b'{}'\".format(chr(left[len_right]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = \"b'{}'\".format(chr(right[len_left]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = repr(bytes([left[len_right]]))\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = repr(bytes([right[len_left]]))\n            else:\n                extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n"
    ],
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 260-266)": [
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        if isinstance(sequence, bytes):\n            return repr(chr(sequence[index]))\n        else:\n            return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_element(seq, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        element = seq[index]\n        if isinstance(seq, bytes):\n            return repr(chr(element))\n        return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes) and isinstance(right, bytes):\n                explanation += [\n                    \"At index {} diff: {} != {}\".format(\n                        i, _format_element(left, i), _format_element(right, i)\n                    )\n                ]\n            else:\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n                ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_element(left, len_right) if isinstance(left, bytes) else saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_element(right, len_left) if isinstance(right, bytes) else saferepr(right[len_left])\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            return repr(chr(element))\n        return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            return repr(chr(element))\n        return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        if isinstance(sequence, bytes):\n            return f\"b'{chr(sequence[index])}'\" if 32 <= sequence[index] <= 126 else f\"b'\\\\x{sequence[index]:02x}'\"\n        return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_element(seq, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        if isinstance(seq, bytes):\n            return repr(chr(seq[index]))\n        else:\n            return saferepr(seq[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_repr = _format_element(left, i)\n            right_repr = _format_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_repr, right_repr)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_element(right, len_left)\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        if isinstance(sequence, bytes):\n            return repr(chr(sequence[index]))\n        else:\n            return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_repr = _format_sequence_element(left, i)\n            right_repr = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_repr, right_repr)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        if isinstance(sequence, bytes):\n            return repr(chr(sequence[index]))\n        else:\n            return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes) and isinstance(right, bytes):\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(\n                        i, chr(left[i]), chr(right[i])\n                    )\n                ]\n            else:\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n                ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n"
    ],
    "Location 3 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 84-86)": [
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n"
    ],
    "Location 4 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 129-135)": [
      "\n    verbose = config.getoption(\"verbose\")\n    explanation = None\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _compare_eq_bytes(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _compare_eq_bytes(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _diff_text(left.decode('latin1', 'replace'), right.decode('latin1', 'replace'), verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _compare_eq_bytes(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _compare_eq_bytes(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _diff_text(left.decode('latin-1', 'replace'), right.decode('latin-1', 'replace'), verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _diff_text(left.decode('latin1', 'replace'), right.decode('latin1', 'replace'), verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            elif isinstance(left, bytes) and isinstance(right, bytes):\n                explanation = _compare_eq_bytes(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n"
    ],
    "Location 5 (/root/hy/projects_4/pytest/src/_pytest/assertion/util.py lines 256-286)": [
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            # For bytes, show as character representation\n            return repr(chr(element)) if 32 <= element <= 126 else repr(element)\n        return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes) and isinstance(right, bytes):\n                left_char = chr(left[i]) if 32 <= left[i] <= 126 else repr(left[i])\n                right_char = chr(right[i]) if 32 <= right[i] <= 126 else repr(right[i])\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(i, left_char, right_char)\n                ]\n            else:\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n                ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format a sequence element appropriately for display.\"\"\"\n        if isinstance(sequence, (bytes, bytearray)):\n            # For bytes/bytearray, show the character representation\n            return repr(bytes([sequence[index]]))\n        else:\n            return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            return repr(chr(element)) if 32 <= element <= 126 else repr(element)\n        return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        if isinstance(sequence, bytes):\n            return repr(chr(sequence[index]))\n        else:\n            return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes) and isinstance(right, bytes):\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(\n                        i, chr(left[i]), chr(right[i])\n                    )\n                ]\n            else:\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n                ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            return repr(chr(element))\n        else:\n            return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes) and isinstance(right, bytes):\n                explanation += [\n                    \"At index {} diff: {} != {}\".format(\n                        i, _format_sequence_element(left, i), _format_sequence_element(right, i)\n                    )\n                ]\n            else:\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n                ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for display.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            return repr(bytes([element]))\n        else:\n            return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            left_elem = _format_sequence_element(left, i)\n            right_elem = _format_sequence_element(right, i)\n            explanation += [\n                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        element = sequence[index]\n        if isinstance(sequence, bytes):\n            return repr(chr(element))\n        return saferepr(element)\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes) and isinstance(right, bytes):\n                left_elem = repr(chr(left[i]))\n                right_elem = repr(chr(right[i]))\n            else:\n                left_elem = saferepr(left[i])\n                right_elem = saferepr(right[i])\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_elem, right_elem)\n            ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    \n    def _format_sequence_element(sequence, index):\n        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n        if isinstance(sequence, bytes):\n            return repr(chr(sequence[index]))\n        else:\n            return saferepr(sequence[index])\n    \n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes) and isinstance(right, bytes):\n                explanation += [\n                    \"At index {} diff: {} != {}\".format(\n                        i, _format_sequence_element(left, i), _format_sequence_element(right, i)\n                    )\n                ]\n            else:\n                explanation += [\n                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n                ]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = _format_sequence_element(left, len_right)\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = _format_sequence_element(right, len_left)\n\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..89442b6e1 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,10 +81,10 @@ def _format_lines(lines):\n     return result\n \n \n+\n def issequence(x):\n     return isinstance(x, Sequence) and not isinstance(x, str)\n \n-\n def istext(x):\n     return isinstance(x, str)\n \n@@ -126,6 +126,7 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n+\n                 explanation = _diff_text(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n@@ -253,26 +254,55 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                left_elem = \"b'{}'\".format(chr(left[i]))\n+                right_elem = \"b'{}'\".format(chr(right[i]))\n+                explanation += [\n+                    \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = \"b'{}'\".format(chr(left[len_right]))\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = \"b'{}'\".format(chr(right[len_left]))\n+            else:\n+                extra = saferepr(right[len_left])\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+            if isinstance(right, bytes):\n+                extra = \"b'{}'\".format(chr(right[len_left]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_0": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..389c1b410 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -124,9 +124,14 @@ def assertrepr_compare(config, op, left, right):\n     verbose = config.getoption(\"verbose\")\n     explanation = None\n     try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _diff_text(left.decode('latin-1', 'replace'), right.decode('latin-1', 'replace'), verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,14 +258,26 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for display.\"\"\"\n+        element = sequence[index]\n+        if isinstance(sequence, bytes):\n+            return repr(bytes([element]))\n+        else:\n+            return saferepr(element)\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            left_repr = _format_sequence_element(left, i)\n+            right_repr = _format_sequence_element(right, i)\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {} != {}\".format(i, left_repr, right_repr)\n             ]\n             break\n     len_diff = len_left - len_right\n@@ -268,11 +285,42 @@ def _compare_eq_sequence(left, right, verbose=0):\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_1": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..e10752914 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -121,12 +121,20 @@ def assertrepr_compare(config, op, left, right):\n \n     summary = \"{} {} {}\".format(left_repr, op, right_repr)\n \n+    verbose = config.getoption(\"verbose\")\n+    explanation = None\n+    try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n     verbose = config.getoption(\"verbose\")\n     explanation = None\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _compare_eq_bytes(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,26 +261,74 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for display.\"\"\"\n+        element = sequence[index]\n+        if isinstance(sequence, bytes):\n+            # For bytes, show as character representation\n+            return repr(chr(element)) if 32 <= element <= 126 else repr(element)\n+        return saferepr(element)\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                left_char = chr(left[i]) if 32 <= left[i] <= 126 else repr(left[i])\n+                right_char = chr(right[i]) if 32 <= right[i] <= 126 else repr(right[i])\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left_char, right_char)\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_2": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..cdd9a47c4 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -123,10 +123,16 @@ def assertrepr_compare(config, op, left, right):\n \n     verbose = config.getoption(\"verbose\")\n     explanation = None\n+    try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _compare_eq_bytes(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,14 +259,26 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format a sequence element appropriately for display.\"\"\"\n+        if isinstance(sequence, (bytes, bytearray)):\n+            # For bytes/bytearray, show the character representation\n+            return repr(bytes([sequence[index]]))\n+        else:\n+            return saferepr(sequence[index])\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            left_elem = _format_sequence_element(left, i)\n+            right_elem = _format_sequence_element(right, i)\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n             ]\n             break\n     len_diff = len_left - len_right\n@@ -268,11 +286,47 @@ def _compare_eq_sequence(left, right, verbose=0):\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            extra = _format_element(left, len_right) if isinstance(left, bytes) else saferepr(left[len_right])\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_element(right, len_left) if isinstance(right, bytes) else saferepr(right[len_left])\n+\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_3": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..0e6c98d02 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -124,9 +124,14 @@ def assertrepr_compare(config, op, left, right):\n     verbose = config.getoption(\"verbose\")\n     explanation = None\n     try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _diff_text(left.decode('latin1', 'replace'), right.decode('latin1', 'replace'), verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,14 +258,25 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for display.\"\"\"\n+        element = sequence[index]\n+        if isinstance(sequence, bytes):\n+            return repr(chr(element)) if 32 <= element <= 126 else repr(element)\n+        return saferepr(element)\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            left_elem = _format_sequence_element(left, i)\n+            right_elem = _format_sequence_element(right, i)\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n             ]\n             break\n     len_diff = len_left - len_right\n@@ -268,11 +284,33 @@ def _compare_eq_sequence(left, right, verbose=0):\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_4": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..4a887efa3 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -123,10 +123,16 @@ def assertrepr_compare(config, op, left, right):\n \n     verbose = config.getoption(\"verbose\")\n     explanation = None\n+    try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _compare_eq_bytes(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,26 +259,73 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n+        if isinstance(sequence, bytes):\n+            return repr(chr(sequence[index]))\n+        else:\n+            return saferepr(sequence[index])\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(\n+                        i, chr(left[i]), chr(right[i])\n+                    )\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_5": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..dd0eb349e 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -123,10 +123,16 @@ def assertrepr_compare(config, op, left, right):\n \n     verbose = config.getoption(\"verbose\")\n     explanation = None\n+    try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _compare_eq_bytes(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,26 +259,64 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n+        element = sequence[index]\n+        if isinstance(sequence, bytes):\n+            return repr(chr(element))\n+        else:\n+            return saferepr(element)\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation += [\n+                    \"At index {} diff: {} != {}\".format(\n+                        i, _format_sequence_element(left, i), _format_sequence_element(right, i)\n+                    )\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+                extra = \"b'{}'\".format(chr(left[len_right]))\n+            else:\n+                extra = saferepr(left[len_right])\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            if isinstance(right, bytes):\n+                extra = \"b'{}'\".format(chr(right[len_left]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_6": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..883bf3318 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -124,9 +124,14 @@ def assertrepr_compare(config, op, left, right):\n     verbose = config.getoption(\"verbose\")\n     explanation = None\n     try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _diff_text(left.decode('latin-1', 'replace'), right.decode('latin-1', 'replace'), verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,14 +258,26 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for display.\"\"\"\n+        element = sequence[index]\n+        if isinstance(sequence, bytes):\n+            return repr(bytes([element]))\n+        else:\n+            return saferepr(element)\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            left_elem = _format_sequence_element(left, i)\n+            right_elem = _format_sequence_element(right, i)\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {} != {}\".format(i, left_elem, right_elem)\n             ]\n             break\n     len_diff = len_left - len_right\n@@ -268,11 +285,42 @@ def _compare_eq_sequence(left, right, verbose=0):\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_element(right, len_left)\n+\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_7": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..29385941b 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -124,9 +124,14 @@ def assertrepr_compare(config, op, left, right):\n     verbose = config.getoption(\"verbose\")\n     explanation = None\n     try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _diff_text(left.decode('latin1', 'replace'), right.decode('latin1', 'replace'), verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,14 +258,29 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n+        element = sequence[index]\n+        if isinstance(sequence, bytes):\n+            return repr(chr(element))\n+        return saferepr(element)\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                left_elem = repr(chr(left[i]))\n+                right_elem = repr(chr(right[i]))\n+            else:\n+                left_elem = saferepr(left[i])\n+                right_elem = saferepr(right[i])\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_elem, right_elem)\n             ]\n             break\n     len_diff = len_left - len_right\n@@ -268,11 +288,42 @@ def _compare_eq_sequence(left, right, verbose=0):\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_8": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..a0b8e7da7 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -123,10 +123,16 @@ def assertrepr_compare(config, op, left, right):\n \n     verbose = config.getoption(\"verbose\")\n     explanation = None\n+    try:\n+        if op == \"==\":\n+            if istext(left) and istext(right):\n+\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n                 explanation = _diff_text(left, right, verbose)\n+            elif isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation = _compare_eq_bytes(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n                     explanation = _compare_eq_sequence(left, right, verbose)\n@@ -253,26 +259,78 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+    \n+    def _format_sequence_element(sequence, index):\n+        \"\"\"Format sequence element appropriately for byte strings vs other sequences.\"\"\"\n+        if isinstance(sequence, bytes):\n+            return repr(chr(sequence[index]))\n+        else:\n+            return saferepr(sequence[index])\n+    \n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation += [\n+                    \"At index {} diff: {} != {}\".format(\n+                        i, _format_sequence_element(left, i), _format_sequence_element(right, i)\n+                    )\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            extra = _format_sequence_element(left, len_right)\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            extra = _format_sequence_element(right, len_left)\n+\n+        if len_diff == 1:\n+            explanation += [\n+                \"{} contains one more item: {}\".format(dir_with_more, extra)\n+            ]\n+        else:\n+            explanation += [\n+                \"%s contains %d more items, first extra item: %s\"\n+                % (dir_with_more, len_diff, extra)\n+            ]\n+    return explanation\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            extra = _format_sequence_element(left, len_right)\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            extra = _format_sequence_element(right, len_left)\n+\n+\n+    if len_diff:\n+        if len_diff > 0:\n+            dir_with_more = \"Left\"\n+            if isinstance(left, bytes):\n+                extra = repr(bytes([left[len_right]]))\n+            else:\n+                extra = saferepr(left[len_right])\n+        else:\n+            len_diff = 0 - len_diff\n+            dir_with_more = \"Right\"\n+            if isinstance(right, bytes):\n+                extra = repr(bytes([right[len_left]]))\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n"
  }
}