{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/matplotlib/offsetbox.py lines 1503-1515)": "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
    "Location 2 (/root/hy/projects_4/matplotlib/lib/matplotlib/offsetbox.py lines 1535-1544)": "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
    "Location 3 (/root/hy/projects_4/matplotlib/lib/matplotlib/offsetbox.py lines 1580-1582)": "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/matplotlib/offsetbox.py lines 1503-1515)": [
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n"
    ],
    "Location 2 (/root/hy/projects_4/matplotlib/lib/matplotlib/offsetbox.py lines 1535-1544)": [
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n"
    ],
    "Location 3 (/root/hy/projects_4/matplotlib/lib/matplotlib/offsetbox.py lines 1580-1582)": [
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n",
      "\n    def finalize_offset(self):\n        pass\n\n    def __getstate__(self):\n        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n        state = self.__dict__.copy()\n        # Remove non-picklable attributes\n        state.pop('canvas', None)\n        state.pop('cids', None)\n        state.pop('background', None)\n        state.pop('_c1', None)\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n        self.__dict__.update(state)\n        # Reinitialize canvas and callbacks from ref_artist\n        self.canvas = self.ref_artist.figure.canvas\n        self._use_blit = self._use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n        ]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..b7ab14149c 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,6 +1500,7 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n+\n     def __init__(self, ref_artist, use_blit=False):\n         self.ref_artist = ref_artist\n         if not ref_artist.pickable():\n@@ -1532,6 +1533,7 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n+\n             if self._use_blit:\n                 self.ref_artist.set_animated(True)\n                 self.canvas.draw()\n@@ -1577,9 +1579,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_0": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_1": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_2": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_3": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_4": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_5": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_6": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_7": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n",
    "variant_8": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3e793b2073 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,18 +1500,26 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n         self.canvas = self.ref_artist.figure.canvas\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n         self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n         ]\n \n     def on_motion(self, evt):\n@@ -1532,16 +1540,27 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n-                self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n-                self.ref_artist.draw(\n-                    self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+\n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n             self.save_offset()\n \n     def on_release(self, event):\n@@ -1577,9 +1596,30 @@ class DraggableBase:\n     def update_offset(self, dx, dy):\n         pass\n \n+\n     def finalize_offset(self):\n         pass\n \n+    def __getstate__(self):\n+        \"\"\"Exclude non-picklable canvas and callback attributes during pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        state.pop('background', None)\n+        state.pop('_c1', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore canvas and callback connections after unpickling.\"\"\"\n+        self.__dict__.update(state)\n+        # Reinitialize canvas and callbacks from ref_artist\n+        self.canvas = self.ref_artist.figure.canvas\n+        self._use_blit = self._use_blit and self.canvas.supports_blit\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable('pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable('button_release_event', self.on_release),\n+        ]\n \n class DraggableOffsetBox(DraggableBase):\n     def __init__(self, ref_artist, offsetbox, use_blit=False):\n"
  }
}