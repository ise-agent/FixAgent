{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/tmpdir.py lines 151-159)": "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username for directory creation\n            # Replace backslashes (domain separators) and other illegal chars with underscores\n            user = re.sub(r'[<>:\"|?*\\\\]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/tmpdir.py lines 114-118)": "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010). Sanitizes the username to be\n    safe for directory names by replacing illegal characters.\"\"\"\n    try:\n        user = getpass.getuser()\n        # Sanitize username for directory creation\n        # Replace backslashes and other illegal characters with underscores\n        illegal_chars = r'[<>:\"|?*\\\\]'\n        sanitized_user = re.sub(illegal_chars, '_', user)\n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/tmpdir.py lines 151-159)": [
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user is None:\n            return None\n        \n        # Sanitize username for directory creation\n        # Replace backslashes (common in domain usernames) and other illegal chars\n        illegal_chars = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|']\n        sanitized_user = user\n        for char in illegal_chars:\n            sanitized_user = sanitized_user.replace(char, '_')\n        \n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user is None:\n            return None\n        \n        # Sanitize username for directory creation\n        # Replace backslashes (common in domain usernames like DOMAIN\\user)\n        # and other illegal directory characters with underscores\n        illegal_chars = '<>:\"|?*\\\\'\n        sanitized_user = user\n        for char in illegal_chars:\n            sanitized_user = sanitized_user.replace(char, '_')\n        \n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user is None:\n            return None\n        \n        # Sanitize username for directory creation\n        # Replace backslashes (common in domain usernames like \"domain\\user\")\n        # and other illegal directory characters with underscores\n        illegal_chars = r'[<>:\"|?*\\\\]'\n        sanitized_user = re.sub(illegal_chars, '_', user)\n        \n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        user = getpass.getuser()\n        if user is None:\n            return None\n        \n        # Sanitize username for directory creation\n        # Replace backslashes (common in domain usernames like \"domain\\user\")\n        # and other illegal directory characters with underscores\n        illegal_chars = r'[<>:\"|?*\\\\]'\n        sanitized_user = re.sub(illegal_chars, '_', user)\n        \n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        user = getpass.getuser()\n        if user is None:\n            return None\n        # Sanitize username for directory creation by replacing illegal characters\n        # Handle domain usernames (e.g., \"contoso\\john_doe\" -> \"contoso_john_doe\")\n        # and other illegal directory characters\n        illegal_chars = r'[<>:\"|?*\\\\]'\n        sanitized_user = re.sub(illegal_chars, '_', user)\n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    \n    try:\n        user = getpass.getuser()\n        if user is None:\n            return None\n        \n        # Sanitize username for use in directory names\n        # Replace backslashes (common in domain usernames like \"domain\\user\")\n        # and other illegal directory characters with underscores\n        illegal_chars = r'[\\\\/<>:\"|?*]'\n        sanitized_user = re.sub(illegal_chars, '_', user)\n        \n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        # Sanitize username for directory creation by replacing illegal characters\n        # Handle domain usernames like \"contoso\\john_doe\" by taking only the username part\n        if '\\\\' in user:\n            user = user.split('\\\\')[-1]\n        # Replace any remaining illegal characters with underscores\n        illegal_chars = '<>:\"|?*'\n        for char in illegal_chars:\n            user = user.replace(char, '_')\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username for directory creation\n            # Replace backslashes (common in domain usernames) and other illegal chars\n            user = re.sub(r'[<>:\"|?*\\\\]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n"
    ],
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/tmpdir.py lines 114-118)": [
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for use in directory names\n    by replacing illegal characters with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory name usage\n        # Replace backslashes (common in domain usernames) and other illegal chars\n        illegal_chars = r'[<>:\"/\\\\|?*]'\n        sanitized = re.sub(illegal_chars, '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for use in directory names\n    by replacing illegal characters with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory creation\n        # Replace illegal characters (including backslashes from domain usernames)\n        illegal_chars = r'[<>:\"/\\\\|?*]'\n        sanitized = re.sub(illegal_chars, '_', username)\n        return sanitized\n    except ImportError:\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for use in directory names\n    by replacing potentially problematic characters.\n    \"\"\"\n    try:\n        user = getpass.getuser()\n        # Sanitize username for directory creation:\n        # - Replace backslashes (common in domain usernames like \"domain\\user\")\n        # - Replace other characters that might be problematic in directory names\n        user = re.sub(r'[<>:\"|?*\\\\]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for use in directory names\n    by replacing illegal characters with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory name usage\n        # Replace backslashes (common in domain usernames) and other illegal chars\n        illegal_chars = r'[<>:\"|?*\\\\/]'\n        sanitized = re.sub(illegal_chars, '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for directory names by\n    replacing illegal characters with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory creation by replacing illegal characters\n        # Common illegal characters in filenames: \\ / : * ? \" < > |\n        # For domain usernames like \"contoso\\john_doe\", we replace \\ with _\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for use in directory names\n    by replacing illegal characters with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory creation\n        # Replace backslashes (common in domain usernames) and other illegal chars\n        illegal_chars = r'[<>:\"|?*\\\\]'\n        sanitized = re.sub(illegal_chars, '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for use in directory names\n    by replacing backslashes and other illegal characters with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory names by replacing illegal characters\n        # Common illegal characters: \\ / : * ? \" < > |\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for use in directory names\n    by replacing illegal characters with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for use in directory names\n        # Replace illegal characters with underscores\n        # Common illegal characters: \\ / : * ? \" < > |\n        illegal_chars = r'[\\\\/:*?\"<>|]'\n        sanitized = re.sub(illegal_chars, '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..5c6741e12 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,6 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n             user = get_user() or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n@@ -148,13 +149,22 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        if username is None:\n+            return None\n+        \n+        # Sanitize username for directory usage by replacing illegal characters\n+        # Common illegal characters for directory names: \\ / : * ? \" < > |\n+        # Replace backslashes and other illegal chars with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_0": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..5040de47e 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,20 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010). Sanitizes the username to be\n+    safe for directory names by replacing illegal characters.\"\"\"\n+    try:\n+        user = getpass.getuser()\n+        # Sanitize username for directory creation\n+        # Replace backslashes and other illegal characters with underscores\n+        illegal_chars = r'[<>:\"|?*\\\\]'\n+        sanitized_user = re.sub(illegal_chars, '_', user)\n+        return sanitized_user\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +157,17 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username for directory creation\n+            # Replace backslashes (domain separators) and other illegal chars with underscores\n+            user = re.sub(r'[<>:\"|?*\\\\]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_1": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..a3e4c4f19 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for use in directory names\n+    by replacing illegal characters with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory name usage\n+        # Replace backslashes (common in domain usernames) and other illegal chars\n+        illegal_chars = r'[<>:\"/\\\\|?*]'\n+        sanitized = re.sub(illegal_chars, '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +160,25 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user is None:\n+            return None\n+        \n+        # Sanitize username for directory creation\n+        # Replace backslashes (common in domain usernames) and other illegal chars\n+        illegal_chars = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|']\n+        sanitized_user = user\n+        for char in illegal_chars:\n+            sanitized_user = sanitized_user.replace(char, '_')\n+        \n+        return sanitized_user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_2": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..cd0da812c 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for use in directory names\n+    by replacing illegal characters with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory creation\n+        # Replace illegal characters (including backslashes from domain usernames)\n+        illegal_chars = r'[<>:\"/\\\\|?*]'\n+        sanitized = re.sub(illegal_chars, '_', username)\n+        return sanitized\n+    except ImportError:\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +160,26 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user is None:\n+            return None\n+        \n+        # Sanitize username for directory creation\n+        # Replace backslashes (common in domain usernames like DOMAIN\\user)\n+        # and other illegal directory characters with underscores\n+        illegal_chars = '<>:\"|?*\\\\'\n+        sanitized_user = user\n+        for char in illegal_chars:\n+            sanitized_user = sanitized_user.replace(char, '_')\n+        \n+        return sanitized_user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_3": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..652bc250f 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for use in directory names\n+    by replacing potentially problematic characters.\n+    \"\"\"\n+    try:\n+        user = getpass.getuser()\n+        # Sanitize username for directory creation:\n+        # - Replace backslashes (common in domain usernames like \"domain\\user\")\n+        # - Replace other characters that might be problematic in directory names\n+        user = re.sub(r'[<>:\"|?*\\\\]', '_', user)\n+        return user\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +160,24 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user is None:\n+            return None\n+        \n+        # Sanitize username for directory creation\n+        # Replace backslashes (common in domain usernames like \"domain\\user\")\n+        # and other illegal directory characters with underscores\n+        illegal_chars = r'[<>:\"|?*\\\\]'\n+        sanitized_user = re.sub(illegal_chars, '_', user)\n+        \n+        return sanitized_user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_4": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..fd1b367cf 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for use in directory names\n+    by replacing illegal characters with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory name usage\n+        # Replace backslashes (common in domain usernames) and other illegal chars\n+        illegal_chars = r'[<>:\"|?*\\\\/]'\n+        sanitized = re.sub(illegal_chars, '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +160,22 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user is None:\n+            return None\n+        \n+        # Sanitize username for directory creation\n+        # Replace backslashes (common in domain usernames like \"domain\\user\")\n+        # and other illegal directory characters with underscores\n+        illegal_chars = r'[<>:\"|?*\\\\]'\n+        sanitized_user = re.sub(illegal_chars, '_', user)\n+        \n+        return sanitized_user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_5": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..87031802f 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for directory names by\n+    replacing illegal characters with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory creation by replacing illegal characters\n+        # Common illegal characters in filenames: \\ / : * ? \" < > |\n+        # For domain usernames like \"contoso\\john_doe\", we replace \\ with _\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +160,20 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user is None:\n+            return None\n+        # Sanitize username for directory creation by replacing illegal characters\n+        # Handle domain usernames (e.g., \"contoso\\john_doe\" -> \"contoso_john_doe\")\n+        # and other illegal directory characters\n+        illegal_chars = r'[<>:\"|?*\\\\]'\n+        sanitized_user = re.sub(illegal_chars, '_', user)\n+        return sanitized_user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_6": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..1d8b5e4f0 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for use in directory names\n+    by replacing illegal characters with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory creation\n+        # Replace backslashes (common in domain usernames) and other illegal chars\n+        illegal_chars = r'[<>:\"|?*\\\\]'\n+        sanitized = re.sub(illegal_chars, '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +160,23 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n+    \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user is None:\n+            return None\n+        \n+        # Sanitize username for use in directory names\n+        # Replace backslashes (common in domain usernames like \"domain\\user\")\n+        # and other illegal directory characters with underscores\n+        illegal_chars = r'[\\\\/<>:\"|?*]'\n+        sanitized_user = re.sub(illegal_chars, '_', user)\n+        \n+        return sanitized_user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_7": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..487b6259f 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,22 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for use in directory names\n+    by replacing backslashes and other illegal characters with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory names by replacing illegal characters\n+        # Common illegal characters: \\ / : * ? \" < > |\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +159,23 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        # Sanitize username for directory creation by replacing illegal characters\n+        # Handle domain usernames like \"contoso\\john_doe\" by taking only the username part\n+        if '\\\\' in user:\n+            user = user.split('\\\\')[-1]\n+        # Replace any remaining illegal characters with underscores\n+        illegal_chars = '<>:\"|?*'\n+        for char in illegal_chars:\n+            user = user.replace(char, '_')\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_8": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..04072a6b6 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,24 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for use in directory names\n+    by replacing illegal characters with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for use in directory names\n+        # Replace illegal characters with underscores\n+        # Common illegal characters: \\ / : * ? \" < > |\n+        illegal_chars = r'[\\\\/:*?\"<>|]'\n+        sanitized = re.sub(illegal_chars, '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +161,17 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username for directory creation\n+            # Replace backslashes (common in domain usernames) and other illegal chars\n+            user = re.sub(r'[<>:\"|?*\\\\]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n"
  }
}