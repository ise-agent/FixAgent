{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 736-736)": "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
    "Location 2 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 865-872)": "\n        if self._feature_names_in is not None:\n            # Only check feature names if they were recorded during fit\n            X = self._check_feature_names(X, reset=False)\n        return self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
    "Location 3 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 651-663)": "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
    "Location 4 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 392-395)": "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
    "Location 5 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 809-815)": "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 736-736)": [
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n"
    ],
    "Location 2 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 865-872)": [
      "\n        if hasattr(self, \"_sklearn_output_config\"):\n            # pandas output is enabled\n            self._validate_features(X, reset=not fitted)\n            self._check_n_features(X, reset=not fitted)\n            self._validate_transformers()\n            self._validate_column_callables(X)\n            self._validate_remainder(X)\n\n            fit_params_steps = self._check_fit_params(**fit_params)\n            result = self._fit_transform(X, y, _fit_transform_one, fitted=True, **fit_params_steps)\n        else:\n            result = self.fit(X, y, **fit_params).transform(X)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        if self._feature_names_in is not None:\n            # Only feature names seen in fit\n            indices = _get_column_indices(X, self._feature_names_in)\n            X = _safe_indexing(X, indices, axis=1)\n\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n        # set name on X after _fit_transform for\n        # _check_n_features with auto generated names\n        self._validate_output(result)\n        self._record_output_indices(X)\n\n        return result\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n                result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n"
    ],
    "Location 3 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 651-663)": [
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n",
      "\n    def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n        \"\"\"\n        Private function to fit and/or transform on demand.\n\n        Return value (transformers and/or transformed X data) depends\n        on the passed function.\n        ``fitted=True`` ensures the fitted transformers are used.\n        \"\"\"\n        transformers = list(\n            self._iter(\n                fitted=fitted, replace_strings=True, column_as_strings=column_as_strings\n            )\n        )\n"
    ],
    "Location 4 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 392-395)": [
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n"
    ],
    "Location 5 (/root/hy/projects_4/scikit-learn/sklearn/compose/_column_transformer.py lines 809-815)": [
      "\n        Xs = self._fit_transform(\n            X,\n            None,\n            _transform_one,\n            fitted=True,\n            column_as_strings=fit_dataframe_and_transform_dataframe,\n        )\n",
      "\n        Xs = self._fit_transform(\n            X,\n            None,\n            _transform_one,\n            fitted=True,\n            column_as_strings=fit_dataframe_and_transform_dataframe,\n        )\n",
      "\n        Xs = self._fit_transform(\n            X,\n            None,\n            _transform_one,\n            fitted=True,\n            column_as_strings=fit_dataframe_and_transform_dataframe,\n        )\n",
      "\n        Xs = self._fit_transform(\n            X,\n            None,\n            _transform_one,\n            fitted=True,\n            column_as_strings=fit_dataframe_and_transform_dataframe,\n        )\n",
      "\n        Xs = self._fit_transform(\n            X,\n            None,\n            _transform_one,\n            fitted=True,\n            column_as_strings=fit_dataframe_and_transform_dataframe,\n        )\n",
      "\n        Xs = self._fit_transform(\n            X,\n            None,\n            _transform_one,\n            fitted=True,\n            column_as_strings=fit_dataframe_and_transform_dataframe,\n        )\n",
      "\n        Xs = self._fit_transform(\n            X,\n            None,\n            _transform_one,\n            fitted=True,\n            column_as_strings=fit_dataframe_and_transform_dataframe,\n        )\n",
      "\n        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..3195faadd 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,6 +389,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n+\n                 elif trans == \"drop\":\n                     continue\n                 elif _is_empty_column_selection(columns):\n@@ -648,6 +649,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +735,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +809,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,6 +866,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n",
    "variant_0": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..ebe1918b8 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,13 +806,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n-        Xs = self._fit_transform(\n-            X,\n-            None,\n-            _transform_one,\n-            fitted=True,\n-            column_as_strings=fit_dataframe_and_transform_dataframe,\n-        )\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n         self._validate_output(Xs)\n \n         if not Xs:\n@@ -862,14 +857,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        if self._feature_names_in is not None:\n+            # Only check feature names if they were recorded during fit\n+            X = self._check_feature_names(X, reset=False)\n+        return self._fit_transform(X, y, _fit_transform_one, fitted=True)\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_1": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..f24250302 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +806,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,14 +863,19 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        if hasattr(self, \"_sklearn_output_config\"):\n+            # pandas output is enabled\n+            self._validate_features(X, reset=not fitted)\n+            self._check_n_features(X, reset=not fitted)\n+            self._validate_transformers()\n+            self._validate_column_callables(X)\n+            self._validate_remainder(X)\n+\n+            fit_params_steps = self._check_fit_params(**fit_params)\n+            result = self._fit_transform(X, y, _fit_transform_one, fitted=True, **fit_params_steps)\n+        else:\n+            result = self.fit(X, y, **fit_params).transform(X)\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_2": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..67e1c9451 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +806,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,14 +863,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_3": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..67e1c9451 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +806,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,14 +863,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_4": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..a456a6d0e 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +806,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,14 +863,19 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        if self._feature_names_in is not None:\n+            # Only feature names seen in fit\n+            indices = _get_column_indices(X, self._feature_names_in)\n+            X = _safe_indexing(X, indices, axis=1)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n+        # set name on X after _fit_transform for\n+        # _check_n_features with auto generated names\n+        self._validate_output(result)\n+        self._record_output_indices(X)\n+\n+        return result\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_5": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..67e1c9451 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +806,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,14 +863,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_6": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..67e1c9451 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +806,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,14 +863,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_7": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..67e1c9451 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,6 +806,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n+\n         Xs = self._fit_transform(\n             X,\n             None,\n@@ -862,14 +863,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n                 return output\n \n             return np.hstack(Xs)\n",
    "variant_8": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..bde7ee1aa 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -389,10 +389,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                         check_inverse=False,\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n-                elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -648,6 +646,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             return None\n         return \"(%d of %d) Processing %s\" % (idx, total, name)\n \n+\n     def _fit_transform(self, X, y, func, fitted=False, column_as_strings=False):\n         \"\"\"\n         Private function to fit and/or transform on demand.\n@@ -733,7 +732,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -806,13 +806,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             # check that n_features_in_ is consistent\n             self._check_n_features(X, reset=False)\n \n-        Xs = self._fit_transform(\n-            X,\n-            None,\n-            _transform_one,\n-            fitted=True,\n-            column_as_strings=fit_dataframe_and_transform_dataframe,\n-        )\n+\n+        result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n         self._validate_output(Xs)\n \n         if not Xs:\n@@ -862,14 +857,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+\n+                result = self._fit_transform(X, y, _fit_transform_one, fitted=True)\n                 return output\n \n             return np.hstack(Xs)\n"
  }
}