{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/environment/adapters/indexentries.py lines 103-116)": "\ndef keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n    key, (void, void, category_key) = entry\n    if category_key:\n        # using specified category key to sort\n        key = category_key\n    lckey = unicodedata.normalize('NFD', key.lower())\n    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n        lckey = lckey[1:]\n    if lckey[0:1].isalpha() or lckey.startswith('_'):\n        lckey = chr(127) + lckey\n    else:\n        # All symbols should sort together at the beginning\n        lckey = chr(126) + lckey\n    # ensure a determinstic order *within* letters by also sorting on\n    # the entry itself\n    return (lckey, entry[0])\n",
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/environment/adapters/indexentries.py lines 158-176)": "\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, keyfunc3)]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/environment/adapters/indexentries.py lines 103-116)": [
      "\ndef keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n    key, (void, void, category_key) = entry\n    if category_key:\n        # using specified category key to sort\n        key = category_key\n    lckey = unicodedata.normalize('NFD', key.lower())\n    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n        lckey = lckey[1:]\n    if lckey[0:1].isalpha() or lckey.startswith('_'):\n        lckey = chr(127) + lckey\n    else:\n        # All symbols should sort together at the beginning\n        lckey = chr(126) + lckey\n    # ensure a determinstic order *within* letters by also sorting on\n    # the entry itself\n    return (lckey, entry[0])\n",
      "\ndef keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n    key, (void, void, category_key) = entry\n    if category_key:\n        # using specified category key to sort\n        key = category_key\n    lckey = unicodedata.normalize('NFD', key.lower())\n    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n        lckey = lckey[1:]\n    if lckey[0:1].isalpha() or lckey.startswith('_'):\n        lckey = chr(127) + lckey\n    else:\n        # All symbols should sort together at the beginning\n        lckey = chr(126) + lckey\n    # ensure a determinstic order *within* letters by also sorting on\n    # the entry itself\n    return (lckey, entry[0])\n",
      "\ndef keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n    key, (void, void, category_key) = entry\n    if category_key:\n        # using specified category key to sort\n        key = category_key\n    lckey = unicodedata.normalize('NFD', key.lower())\n    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n        lckey = lckey[1:]\n    if lckey[0:1].isalpha() or lckey.startswith('_'):\n        lckey = chr(127) + lckey\n    else:\n        # All symbols should sort together at the beginning\n        lckey = chr(126) + lckey\n    # ensure a determinstic order *within* letters by also sorting on\n    # the entry itself\n    return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # All symbols should sort together at the beginning\n                lckey = chr(126) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # All symbols should sort together at the beginning\n                lckey = chr(126) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\ndef keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n    key, (void, void, category_key) = entry\n    if category_key:\n        # using specified category key to sort\n        key = category_key\n    lckey = unicodedata.normalize('NFD', key.lower())\n    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n        lckey = lckey[1:]\n    if lckey[0:1].isalpha() or lckey.startswith('_'):\n        lckey = chr(127) + lckey\n    else:\n        # All symbols should sort together at the beginning\n        lckey = chr(126) + lckey\n    # ensure a determinstic order *within* letters by also sorting on\n    # the entry itself\n    return (lckey, entry[0])\n",
      "\ndef keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n    key, (void, void, category_key) = entry\n    if category_key:\n        # using specified category key to sort\n        key = category_key\n    lckey = unicodedata.normalize('NFD', key.lower())\n    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n        lckey = lckey[1:]\n    if lckey[0:1].isalpha() or lckey.startswith('_'):\n        lckey = chr(127) + lckey\n    else:\n        # All symbols should sort together at the beginning\n        lckey = chr(126) + lckey\n    # ensure a determinstic order *within* letters by also sorting on\n    # the entry itself\n    return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # All symbols should sort together at the beginning\n                lckey = chr(126) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n"
    ],
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/environment/adapters/indexentries.py lines 158-176)": [
      "\n        def keyfunc(entry: Tuple[str, List]) -> str:\n            key, (void, void, category) = entry\n            if category:\n                # if the user specified a category, sort by that\n                key = category\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # All symbols should sort together at the beginning\n                lckey = chr(126) + lckey  # Use chr(126) to sort before chr(127)\n            # ensure a deterministic order *within* letters by also sorting on\n            # the entry itself\n            return lckey + '\\x00' + entry[0]\n",
      "\n        def keyfunc(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            # if there are subitems, sort them too\n            if v[1]:\n                v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                              key=keyfunc2)\n            # now calculate the key\n            if v[2] is None:\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n\n        def lckeyfunc(item: Tuple[str, List]) -> str:\n            k, v = item\n            # now calculate the key\n            lckey = unicodedata.normalize('NFD', k.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # All symbols should sort together at the beginning\n                lckey = chr(126) + lckey\n            return lckey\n\n        newlist = sorted(new.items(), key=lckeyfunc)\n\n        if not genindex:\n            # letters only\n            return [(key_, list(group)) for (key_, group) in groupby(newlist, keyfunc)]\n\n        # if we have a general index, we collect all the symbols together\n        def symbolkeyfunc(item: Tuple[str, List]) -> str:\n            k, v = item\n            if v[2] is None:\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    return _('Symbols')\n            else:\n                return v[2]\n\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, symbolkeyfunc)]\n\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            return key\n\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, keyfunc3)]\n",
      "\n        def keyfunc(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            # convert the sub-entries dicts to a list of (heading, entries) items\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n\n        def keyfunc(entry: Tuple[str, List]) -> str:\n            # now calculate the key\n            lckey = unicodedata.normalize('NFD', entry[0].lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # All symbols should sort together at the beginning\n                lckey = chr(126) + lckey\n            return lckey\n\n        # sort the entries\n        newlist = sorted(new.items(), key=keyfunc)\n        if environment.config.index_common_prefix:\n            # remove common prefixes\n            commonprefix = os.path.commonprefix([item[0] for item in newlist])\n            if commonprefix:\n                newlist = [(k[len(commonprefix):], v) for k, v in newlist]\n\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            return key\n\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, keyfunc3)]\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # All symbols should sort together at the beginning\n                key = chr(126) + key\n            return key\n\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, keyfunc3)]\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # All symbols should sort together at the beginning\n                key = chr(126) + key\n            return key\n\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, keyfunc3)]\n",
      "\n        def keyfunc(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            # convert the sub-entries dicts to lists for sorting\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc0)\n            # now calculate the key\n            if v[2] is None:\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # All symbols should sort together at the beginning\n                key = chr(126) + key\n            return key\n\n        newlist = sorted(new.items(), key=keyfunc2)\n        if not newlist:\n            return []\n\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # All symbols should sort together at the beginning\n                key = chr(126) + key\n            return key\n\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, keyfunc3)]\n",
      "\n        def keyfunc(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            # convert the dict to a list of tuples\n            v[1] = sorted((si, se) for (si, (se, void, void)) in v[1].items())\n            # now calculate the key\n            letter = k[0].upper()\n            if letter.isalpha() or letter == '_':\n                return letter\n            else:\n                # get all other symbols under one heading\n                return _('Symbols')\n\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # All symbols should sort together at the beginning\n                key = chr(126) + key\n            return key\n\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # All symbols should sort together at the beginning\n                key = chr(126) + key\n            return key\n\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n        return [(key_, list(group))\n                for (key_, group) in groupby(newlist, keyfunc3)]\n",
      "\n        def keyfunc(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            # convert the sub-entries dicts into a list of (heading, entries) items\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..49351f7d2 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,7 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,6 +111,9 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # All symbols should sort together at the beginning\n+                lckey = chr(126) + lckey  # Use chr(126) to sort before chr(127)\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -155,6 +159,7 @@ class IndexEntries:\n             return key\n \n         # group the entries by letter\n+\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n             k, v = item\n",
    "variant_0": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..2bc24e0cc 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,20 +100,23 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n-        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n-            key, (void, void, category_key) = entry\n-            if category_key:\n-                # using specified category key to sort\n-                key = category_key\n-            lckey = unicodedata.normalize('NFD', key.lower())\n-            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n-            # the entry itself\n-            return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+\n+def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+    key, (void, void, category_key) = entry\n+    if category_key:\n+        # using specified category key to sort\n+        key = category_key\n+    lckey = unicodedata.normalize('NFD', key.lower())\n+    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+        lckey = lckey[1:]\n+    if lckey[0:1].isalpha() or lckey.startswith('_'):\n+        lckey = chr(127) + lckey\n+    else:\n+        # All symbols should sort together at the beginning\n+        lckey = chr(126) + lckey\n+    # ensure a determinstic order *within* letters by also sorting on\n+    # the entry itself\n+    return (lckey, entry[0])\n \n         if group_entries:\n             # fixup entries: transform\n@@ -155,6 +158,7 @@ class IndexEntries:\n             return key\n \n         # group the entries by letter\n+\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n             k, v = item\n",
    "variant_1": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..1a27861e3 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,20 +100,23 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n-        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n-            key, (void, void, category_key) = entry\n-            if category_key:\n-                # using specified category key to sort\n-                key = category_key\n-            lckey = unicodedata.normalize('NFD', key.lower())\n-            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n-            # the entry itself\n-            return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+\n+def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+    key, (void, void, category_key) = entry\n+    if category_key:\n+        # using specified category key to sort\n+        key = category_key\n+    lckey = unicodedata.normalize('NFD', key.lower())\n+    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+        lckey = lckey[1:]\n+    if lckey[0:1].isalpha() or lckey.startswith('_'):\n+        lckey = chr(127) + lckey\n+    else:\n+        # All symbols should sort together at the beginning\n+        lckey = chr(126) + lckey\n+    # ensure a determinstic order *within* letters by also sorting on\n+    # the entry itself\n+    return (lckey, entry[0])\n \n         if group_entries:\n             # fixup entries: transform\n@@ -155,22 +158,20 @@ class IndexEntries:\n             return key\n \n         # group the entries by letter\n-        def keyfunc3(item: Tuple[str, List]) -> str:\n-            # hack: mutating the subitems dicts to a list in the keyfunc\n-            k, v = item\n-            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n-                          key=keyfunc2)\n-            if v[2] is None:\n-                # now calculate the key\n-                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                    k = k[1:]\n-                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n-                    return letter\n-                else:\n-                    # get all other symbols under one heading\n-                    return _('Symbols')\n+\n+        def keyfunc(entry: Tuple[str, List]) -> str:\n+            key, (void, void, category) = entry\n+            if category:\n+                # if the user specified a category, sort by that\n+                key = category\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n             else:\n-                return v[2]\n-        return [(key_, list(group))\n-                for (key_, group) in groupby(newlist, keyfunc3)]\n+                # All symbols should sort together at the beginning\n+                lckey = chr(126) + lckey  # Use chr(126) to sort before chr(127)\n+            # ensure a deterministic order *within* letters by also sorting on\n+            # the entry itself\n+            return lckey + '\\x00' + entry[0]\n",
    "variant_2": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..12d81918e 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,20 +100,23 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n-        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n-            key, (void, void, category_key) = entry\n-            if category_key:\n-                # using specified category key to sort\n-                key = category_key\n-            lckey = unicodedata.normalize('NFD', key.lower())\n-            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n-            # the entry itself\n-            return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+\n+def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+    key, (void, void, category_key) = entry\n+    if category_key:\n+        # using specified category key to sort\n+        key = category_key\n+    lckey = unicodedata.normalize('NFD', key.lower())\n+    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+        lckey = lckey[1:]\n+    if lckey[0:1].isalpha() or lckey.startswith('_'):\n+        lckey = chr(127) + lckey\n+    else:\n+        # All symbols should sort together at the beginning\n+        lckey = chr(126) + lckey\n+    # ensure a determinstic order *within* letters by also sorting on\n+    # the entry itself\n+    return (lckey, entry[0])\n \n         if group_entries:\n             # fixup entries: transform\n@@ -154,6 +157,69 @@ class IndexEntries:\n                 key = chr(127) + key\n             return key\n \n+        # group the entries by letter\n+\n+        def keyfunc(item: Tuple[str, List]) -> str:\n+            # hack: mutating the subitems dicts to a list in the keyfunc\n+            k, v = item\n+            # if there are subitems, sort them too\n+            if v[1]:\n+                v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n+                              key=keyfunc2)\n+            # now calculate the key\n+            if v[2] is None:\n+                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n+                if letter.isalpha() or letter == '_':\n+                    return letter\n+                else:\n+                    # get all other symbols under one heading\n+                    return _('Symbols')\n+            else:\n+                return v[2]\n+\n+        def lckeyfunc(item: Tuple[str, List]) -> str:\n+            k, v = item\n+            # now calculate the key\n+            lckey = unicodedata.normalize('NFD', k.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # All symbols should sort together at the beginning\n+                lckey = chr(126) + lckey\n+            return lckey\n+\n+        newlist = sorted(new.items(), key=lckeyfunc)\n+\n+        if not genindex:\n+            # letters only\n+            return [(key_, list(group)) for (key_, group) in groupby(newlist, keyfunc)]\n+\n+        # if we have a general index, we collect all the symbols together\n+        def symbolkeyfunc(item: Tuple[str, List]) -> str:\n+            k, v = item\n+            if v[2] is None:\n+                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n+                if letter.isalpha() or letter == '_':\n+                    return letter\n+                else:\n+                    return _('Symbols')\n+            else:\n+                return v[2]\n+\n+        return [(key_, list(group))\n+                for (key_, group) in groupby(newlist, symbolkeyfunc)]\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            return key\n+\n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n",
    "variant_3": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..bf8b9031f 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,20 +100,23 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n-        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n-            key, (void, void, category_key) = entry\n-            if category_key:\n-                # using specified category key to sort\n-                key = category_key\n-            lckey = unicodedata.normalize('NFD', key.lower())\n-            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n-            # the entry itself\n-            return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+\n+def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+    key, (void, void, category_key) = entry\n+    if category_key:\n+        # using specified category key to sort\n+        key = category_key\n+    lckey = unicodedata.normalize('NFD', key.lower())\n+    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+        lckey = lckey[1:]\n+    if lckey[0:1].isalpha() or lckey.startswith('_'):\n+        lckey = chr(127) + lckey\n+    else:\n+        # All symbols should sort together at the beginning\n+        lckey = chr(126) + lckey\n+    # ensure a determinstic order *within* letters by also sorting on\n+    # the entry itself\n+    return (lckey, entry[0])\n \n         if group_entries:\n             # fixup entries: transform\n@@ -154,6 +157,54 @@ class IndexEntries:\n                 key = chr(127) + key\n             return key\n \n+        # group the entries by letter\n+\n+        def keyfunc(item: Tuple[str, List]) -> str:\n+            # hack: mutating the subitems dicts to a list in the keyfunc\n+            k, v = item\n+            # convert the sub-entries dicts to a list of (heading, entries) items\n+            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n+                          key=keyfunc2)\n+            if v[2] is None:\n+                # now calculate the key\n+                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n+                if letter.isalpha() or letter == '_':\n+                    return letter\n+                else:\n+                    # get all other symbols under one heading\n+                    return _('Symbols')\n+            else:\n+                return v[2]\n+\n+        def keyfunc(entry: Tuple[str, List]) -> str:\n+            # now calculate the key\n+            lckey = unicodedata.normalize('NFD', entry[0].lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # All symbols should sort together at the beginning\n+                lckey = chr(126) + lckey\n+            return lckey\n+\n+        # sort the entries\n+        newlist = sorted(new.items(), key=keyfunc)\n+        if environment.config.index_common_prefix:\n+            # remove common prefixes\n+            commonprefix = os.path.commonprefix([item[0] for item in newlist])\n+            if commonprefix:\n+                newlist = [(k[len(commonprefix):], v) for k, v in newlist]\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            return key\n+\n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n",
    "variant_4": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..b36144e03 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,7 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,10 +111,12 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # All symbols should sort together at the beginning\n+                lckey = chr(126) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n             # fixup entries: transform\n@@ -154,6 +157,20 @@ class IndexEntries:\n                 key = chr(127) + key\n             return key\n \n+        # group the entries by letter\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # All symbols should sort together at the beginning\n+                key = chr(126) + key\n+            return key\n+\n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n",
    "variant_5": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..b36144e03 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,7 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,10 +111,12 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # All symbols should sort together at the beginning\n+                lckey = chr(126) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n             # fixup entries: transform\n@@ -154,6 +157,20 @@ class IndexEntries:\n                 key = chr(127) + key\n             return key\n \n+        # group the entries by letter\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # All symbols should sort together at the beginning\n+                key = chr(126) + key\n+            return key\n+\n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n",
    "variant_6": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..cd090a131 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,20 +100,23 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n-        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n-            key, (void, void, category_key) = entry\n-            if category_key:\n-                # using specified category key to sort\n-                key = category_key\n-            lckey = unicodedata.normalize('NFD', key.lower())\n-            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n-            # the entry itself\n-            return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+\n+def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+    key, (void, void, category_key) = entry\n+    if category_key:\n+        # using specified category key to sort\n+        key = category_key\n+    lckey = unicodedata.normalize('NFD', key.lower())\n+    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+        lckey = lckey[1:]\n+    if lckey[0:1].isalpha() or lckey.startswith('_'):\n+        lckey = chr(127) + lckey\n+    else:\n+        # All symbols should sort together at the beginning\n+        lckey = chr(126) + lckey\n+    # ensure a determinstic order *within* letters by also sorting on\n+    # the entry itself\n+    return (lckey, entry[0])\n \n         if group_entries:\n             # fixup entries: transform\n@@ -154,6 +157,52 @@ class IndexEntries:\n                 key = chr(127) + key\n             return key\n \n+        # group the entries by letter\n+\n+        def keyfunc(item: Tuple[str, List]) -> str:\n+            # hack: mutating the subitems dicts to a list in the keyfunc\n+            k, v = item\n+            # convert the sub-entries dicts to lists for sorting\n+            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n+                          key=keyfunc0)\n+            # now calculate the key\n+            if v[2] is None:\n+                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n+                if letter.isalpha() or letter == '_':\n+                    return letter\n+                else:\n+                    # get all other symbols under one heading\n+                    return _('Symbols')\n+            else:\n+                return v[2]\n+\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # All symbols should sort together at the beginning\n+                key = chr(126) + key\n+            return key\n+\n+        newlist = sorted(new.items(), key=keyfunc2)\n+        if not newlist:\n+            return []\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # All symbols should sort together at the beginning\n+                key = chr(126) + key\n+            return key\n+\n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n",
    "variant_7": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..6cf79b897 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,20 +100,23 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n-        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n-            key, (void, void, category_key) = entry\n-            if category_key:\n-                # using specified category key to sort\n-                key = category_key\n-            lckey = unicodedata.normalize('NFD', key.lower())\n-            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n-            # the entry itself\n-            return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+\n+def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+    key, (void, void, category_key) = entry\n+    if category_key:\n+        # using specified category key to sort\n+        key = category_key\n+    lckey = unicodedata.normalize('NFD', key.lower())\n+    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+        lckey = lckey[1:]\n+    if lckey[0:1].isalpha() or lckey.startswith('_'):\n+        lckey = chr(127) + lckey\n+    else:\n+        # All symbols should sort together at the beginning\n+        lckey = chr(126) + lckey\n+    # ensure a determinstic order *within* letters by also sorting on\n+    # the entry itself\n+    return (lckey, entry[0])\n \n         if group_entries:\n             # fixup entries: transform\n@@ -154,6 +157,44 @@ class IndexEntries:\n                 key = chr(127) + key\n             return key\n \n+        # group the entries by letter\n+\n+        def keyfunc(item: Tuple[str, List]) -> str:\n+            # hack: mutating the subitems dicts to a list in the keyfunc\n+            k, v = item\n+            # convert the dict to a list of tuples\n+            v[1] = sorted((si, se) for (si, (se, void, void)) in v[1].items())\n+            # now calculate the key\n+            letter = k[0].upper()\n+            if letter.isalpha() or letter == '_':\n+                return letter\n+            else:\n+                # get all other symbols under one heading\n+                return _('Symbols')\n+\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # All symbols should sort together at the beginning\n+                key = chr(126) + key\n+            return key\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # All symbols should sort together at the beginning\n+                key = chr(126) + key\n+            return key\n+\n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n",
    "variant_8": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..31410b7cc 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,7 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,10 +111,12 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # All symbols should sort together at the beginning\n+                lckey = chr(126) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n             # fixup entries: transform\n@@ -155,15 +158,15 @@ class IndexEntries:\n             return key\n \n         # group the entries by letter\n-        def keyfunc3(item: Tuple[str, List]) -> str:\n+\n+        def keyfunc(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n             k, v = item\n+            # convert the sub-entries dicts into a list of (heading, entries) items\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n                 # now calculate the key\n-                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                    k = k[1:]\n                 letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                 if letter.isalpha() or letter == '_':\n                     return letter\n@@ -172,5 +175,3 @@ class IndexEntries:\n                     return _('Symbols')\n             else:\n                 return v[2]\n-        return [(key_, list(group))\n-                for (key_, group) in groupby(newlist, keyfunc3)]\n"
  }
}