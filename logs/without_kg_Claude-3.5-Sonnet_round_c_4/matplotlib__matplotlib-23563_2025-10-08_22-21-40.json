{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 221-225)": "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
    "Location 2 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 171-176)": "\ndef set_3d_properties(self, zs=0, zdir='z'):\n    xs = self.get_xdata()\n    ys = self.get_ydata()\n    try:\n        zs = np.broadcast_to(zs, len(xs))\n        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Ensure _verts3d exists even if broadcasting fails\n        self._verts3d = (xs, ys, np.zeros_like(xs))\n    self.stale = True\n",
    "Location 3 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 214-214)": "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
    "Location 4 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 169-169)": "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    # Ensure _verts3d is always properly initialized with broadcast arrays\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
    "Location 5 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 196-198)": "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    if len(args) == 1:\n        try:\n            self._verts3d = args[0]\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.asarray([]), np.asarray([]), np.asarray([]))\n    else:\n        try:\n            self._verts3d = args\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.asarray([]), np.asarray([]), np.asarray([]))\n    self.stale = True\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 221-225)": [
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        from . import proj3d\n        verts3d = proj3d.juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        verts3d = (xs, ys, np.zeros_like(xs))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    \n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        verts3d = (xs, ys, np.zeros_like(xs))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        from . import proj3d\n        verts3d = proj3d.juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        verts3d = (xs, ys, np.zeros_like(xs))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n",
      "\ndef line_2d_to_3d(line, zs=0, zdir='z'):\n    \"\"\"Convert a 2D line to 3D.\"\"\"\n    # Ensure _verts3d is initialized before class change\n    try:\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        zs = np.broadcast_to(zs, len(xs))\n        from . import proj3d\n        verts3d = proj3d.juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Fallback initialization if broadcasting fails\n        xs = line.get_xdata()\n        ys = line.get_ydata()\n        verts3d = (xs, ys, np.zeros_like(xs))\n    \n    line.__class__ = Line3D\n    line._verts3d = verts3d\n    line.stale = True\n"
    ],
    "Location 2 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 171-176)": [
      "\ndef set_3d_properties(self, zs=0, zdir='z'):\n    xs = self.get_xdata()\n    ys = self.get_ydata()\n    try:\n        zs = np.broadcast_to(zs, len(xs))\n        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Ensure _verts3d exists even if broadcasting fails\n        self._verts3d = (xs, ys, np.zeros_like(xs))\n    self.stale = True\n",
      "\ndef set_3d_properties(self, zs=0, zdir='z'):\n    xs = self.get_xdata()\n    ys = self.get_ydata()\n    try:\n        zs = np.broadcast_to(zs, len(xs))\n        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Ensure _verts3d exists even if broadcasting fails\n        self._verts3d = (xs, ys, np.zeros_like(xs))\n    self.stale = True\n",
      "\ndef set_3d_properties(self, zs=0, zdir='z'):\n    xs = self.get_xdata()\n    ys = self.get_ydata()\n    try:\n        zs = np.broadcast_to(zs, len(xs))\n        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Ensure _verts3d exists even if broadcasting fails\n        self._verts3d = (xs, ys, np.zeros_like(xs))\n    self.stale = True\n",
      "\ndef set_3d_properties(self, zs=0, zdir='z'):\n    xs = self.get_xdata()\n    ys = self.get_ydata()\n    try:\n        zs = np.broadcast_to(zs, len(xs))\n        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Ensure _verts3d exists even if broadcasting fails\n        self._verts3d = (xs, ys, np.zeros_like(xs))\n    self.stale = True\n",
      "\n    def set_3d_properties(self, zs=0, zdir='z'):\n        xs = self.get_xdata()\n        ys = self.get_ydata()\n        try:\n            zs = np.broadcast_to(zs, len(xs))\n            self._verts3d = juggle_axes(xs, ys, zs, zdir)\n        except Exception:\n            # Ensure _verts3d exists even if broadcasting fails\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        self.stale = True\n",
      "\ndef set_3d_properties(self, zs=0, zdir='z'):\n    xs = self.get_xdata()\n    ys = self.get_ydata()\n    try:\n        zs = np.broadcast_to(zs, len(xs))\n        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Ensure _verts3d exists even if broadcasting fails\n        self._verts3d = (xs, ys, np.zeros_like(xs))\n    self.stale = True\n",
      "\n    def set_3d_properties(self, zs=0, zdir='z'):\n        xs = self.get_xdata()\n        ys = self.get_ydata()\n        try:\n            zs = np.broadcast_to(zs, len(xs))\n            self._verts3d = juggle_axes(xs, ys, zs, zdir)\n        except Exception:\n            # Ensure _verts3d exists even if broadcasting fails\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        self.stale = True\n",
      "\ndef set_3d_properties(self, zs=0, zdir='z'):\n    xs = self.get_xdata()\n    ys = self.get_ydata()\n    try:\n        zs = np.broadcast_to(zs, len(xs))\n        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n    except Exception:\n        # Ensure _verts3d exists even if broadcasting fails\n        self._verts3d = (xs, ys, np.zeros_like(xs))\n    self.stale = True\n"
    ],
    "Location 3 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 214-214)": [
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n",
      "\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        if not hasattr(self, '_verts3d') or self._verts3d is None:\n            # Emergency fallback - reconstruct from 2D data\n            xs, ys = self.get_data()\n            self._verts3d = (xs, ys, np.zeros_like(xs))\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n        self.set_data(xs, ys)\n        super().draw(renderer)\n        self.stale = False\n"
    ],
    "Location 4 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 169-169)": [
      "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
      "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
      "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
      "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    # Ensure _verts3d is always properly initialized with validated data\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set even with mismatched inputs\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
      "\n    def __init__(self, xs, ys, zs, *args, **kwargs):\n        \"\"\"\n        Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n        \"\"\"\n        super().__init__([], [], *args, **kwargs)\n        # Ensure _verts3d is always properly initialized with valid arrays\n        try:\n            self._verts3d = np.broadcast_arrays(xs, ys, zs)\n        except Exception:\n            # Fallback to ensure _verts3d is always set even if broadcasting fails\n            self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
      "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
      "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n",
      "\ndef __init__(self, xs, ys, zs, *args, **kwargs):\n    \"\"\"\n    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n    \"\"\"\n    super().__init__([], [], *args, **kwargs)\n    try:\n        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n"
    ],
    "Location 5 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 196-198)": [
      "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    try:\n        if len(args) == 1:\n            self._verts3d = args[0]\n        else:\n            self._verts3d = args\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        if len(args) == 1:\n            try:\n                self._verts3d = tuple(args[0])\n            except (TypeError, ValueError):\n                self._verts3d = (np.array([]), np.array([]), np.array([]))\n        else:\n            self._verts3d = tuple(np.asarray(arg) for arg in args) if args else (np.array([]), np.array([]), np.array([]))\n    self.stale = True\n",
      "\n    def set_data_3d(self, *args):\n        \"\"\"\n        Set the x, y and z data\n\n        Parameters\n        ----------\n        x : array-like\n            The x-data to be plotted.\n        y : array-like\n            The y-data to be plotted.\n        z : array-like\n            The z-data to be plotted.\n\n        Notes\n        -----\n        Accepts x, y, z arguments or a single array-like (x, y, z)\n        \"\"\"\n        if len(args) == 1:\n            try:\n                self._verts3d = args[0]\n            except Exception:\n                # Fallback to ensure _verts3d is always set\n                self._verts3d = (np.array([]), np.array([]), np.array([]))\n        else:\n            try:\n                self._verts3d = args\n            except Exception:\n                # Fallback to ensure _verts3d is always set\n                self._verts3d = (np.array([]), np.array([]), np.array([]))\n        self.stale = True\n",
      "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    if len(args) == 1:\n        try:\n            self._verts3d = args[0]\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.array([]), np.array([]), np.array([]))\n    else:\n        try:\n            self._verts3d = args\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.array([]), np.array([]), np.array([]))\n    self.stale = True\n",
      "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    try:\n        if len(args) == 1:\n            self._verts3d = args[0]\n        else:\n            self._verts3d = args\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        if len(args) == 1:\n            self._verts3d = (np.asarray(args[0][0]), np.asarray(args[0][1]), np.asarray(args[0][2]))\n        else:\n            self._verts3d = (np.asarray(args[0]), np.asarray(args[1]), np.asarray(args[2]))\n    self.stale = True\n",
      "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    if len(args) == 1:\n        try:\n            self._verts3d = args[0]\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.array([]), np.array([]), np.array([]))\n    else:\n        try:\n            self._verts3d = args\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.array([]), np.array([]), np.array([]))\n    self.stale = True\n",
      "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    try:\n        if len(args) == 1:\n            self._verts3d = args[0]\n        else:\n            self._verts3d = args\n    except Exception:\n        # Fallback to ensure _verts3d is always set\n        if len(args) == 1 and hasattr(args[0], '__iter__'):\n            try:\n                self._verts3d = tuple(args[0])\n            except (TypeError, ValueError):\n                self._verts3d = (np.array([]), np.array([]), np.array([]))\n        else:\n            self._verts3d = tuple(np.asarray(arg) if arg is not None else np.array([]) for arg in args)\n    self.stale = True\n",
      "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    if len(args) == 1:\n        try:\n            self._verts3d = args[0]\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.asarray([]), np.asarray([]), np.asarray([]))\n    else:\n        try:\n            self._verts3d = args\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = tuple(np.asarray(arg) for arg in args) if args else (np.asarray([]), np.asarray([]), np.asarray([]))\n    self.stale = True\n",
      "\ndef set_data_3d(self, *args):\n    \"\"\"\n    Set the x, y and z data\n\n    Parameters\n    ----------\n    x : array-like\n        The x-data to be plotted.\n    y : array-like\n        The y-data to be plotted.\n    z : array-like\n        The z-data to be plotted.\n\n    Notes\n    -----\n    Accepts x, y, z arguments or a single array-like (x, y, z)\n    \"\"\"\n    if len(args) == 1:\n        try:\n            self._verts3d = args[0]\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.array([]), np.array([]), np.array([]))\n    else:\n        try:\n            self._verts3d = args\n        except Exception:\n            # Fallback to ensure _verts3d is always set\n            self._verts3d = (np.array([]), np.array([]), np.array([]))\n    self.stale = True\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..87e488046a 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,13 +166,19 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n+\n         self._verts3d = xs, ys, zs\n \n+\n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n         ys = self.get_ydata()\n-        zs = np.broadcast_to(zs, len(xs))\n-        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n+        try:\n+            zs = np.broadcast_to(zs, len(xs))\n+            self._verts3d = juggle_axes(xs, ys, zs, zdir)\n+        except Exception:\n+            # Ensure _verts3d exists even if broadcasting fails\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         self.stale = True\n \n     def set_data_3d(self, *args):\n@@ -193,9 +199,17 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n-            self._verts3d = args[0]\n+\n+        if len(args) == 1:\n+            try:\n+                self._verts3d = np.broadcast_arrays(*args[0])\n+            except Exception:\n+                self._verts3d = args[0]\n         else:\n-            self._verts3d = args\n+            try:\n+                self._verts3d = np.broadcast_arrays(*args)\n+            except Exception:\n+                self._verts3d = args\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,6 +225,11 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n@@ -218,11 +237,22 @@ class Line3D(lines.Line2D):\n         self.stale = False\n \n \n+\n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        verts3d = juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_0": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..6e8fef0c23 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,14 +166,30 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n \n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    # Ensure _verts3d is always properly initialized with broadcast arrays\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n+\n+def set_3d_properties(self, zs=0, zdir='z'):\n+    xs = self.get_xdata()\n+    ys = self.get_ydata()\n+    try:\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n-        self.stale = True\n+    except Exception:\n+        # Ensure _verts3d exists even if broadcasting fails\n+        self._verts3d = (xs, ys, np.zeros_like(xs))\n+    self.stale = True\n \n     def set_data_3d(self, *args):\n         \"\"\"\n@@ -193,9 +209,37 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    if len(args) == 1:\n+        try:\n             self._verts3d = args[0]\n-        else:\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.asarray([]), np.asarray([]), np.asarray([]))\n+    else:\n+        try:\n             self._verts3d = args\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.asarray([]), np.asarray([]), np.asarray([]))\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +255,40 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        verts3d = juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_1": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..6c6a58b07c 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,14 +166,29 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n \n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n+\n+def set_3d_properties(self, zs=0, zdir='z'):\n+    xs = self.get_xdata()\n+    ys = self.get_ydata()\n+    try:\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n-        self.stale = True\n+    except Exception:\n+        # Ensure _verts3d exists even if broadcasting fails\n+        self._verts3d = (xs, ys, np.zeros_like(xs))\n+    self.stale = True\n \n     def set_data_3d(self, *args):\n         \"\"\"\n@@ -193,9 +208,39 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    try:\n+        if len(args) == 1:\n             self._verts3d = args[0]\n         else:\n             self._verts3d = args\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        if len(args) == 1:\n+            try:\n+                self._verts3d = tuple(args[0])\n+            except (TypeError, ValueError):\n+                self._verts3d = (np.array([]), np.array([]), np.array([]))\n+        else:\n+            self._verts3d = tuple(np.asarray(arg) for arg in args) if args else (np.array([]), np.array([]), np.array([]))\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +256,40 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        verts3d = juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_2": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..f6da48c0cd 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,14 +166,29 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n \n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n+\n+def set_3d_properties(self, zs=0, zdir='z'):\n+    xs = self.get_xdata()\n+    ys = self.get_ydata()\n+    try:\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n-        self.stale = True\n+    except Exception:\n+        # Ensure _verts3d exists even if broadcasting fails\n+        self._verts3d = (xs, ys, np.zeros_like(xs))\n+    self.stale = True\n \n     def set_data_3d(self, *args):\n         \"\"\"\n@@ -193,9 +208,37 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n-            self._verts3d = args[0]\n+\n+    def set_data_3d(self, *args):\n+        \"\"\"\n+        Set the x, y and z data\n+\n+        Parameters\n+        ----------\n+        x : array-like\n+            The x-data to be plotted.\n+        y : array-like\n+            The y-data to be plotted.\n+        z : array-like\n+            The z-data to be plotted.\n+\n+        Notes\n+        -----\n+        Accepts x, y, z arguments or a single array-like (x, y, z)\n+        \"\"\"\n+        if len(args) == 1:\n+            try:\n+                self._verts3d = args[0]\n+            except Exception:\n+                # Fallback to ensure _verts3d is always set\n+                self._verts3d = (np.array([]), np.array([]), np.array([]))\n         else:\n-            self._verts3d = args\n+            try:\n+                self._verts3d = args\n+            except Exception:\n+                # Fallback to ensure _verts3d is always set\n+                self._verts3d = (np.array([]), np.array([]), np.array([]))\n+        self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +254,43 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        from . import proj3d\n+        verts3d = proj3d.juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        verts3d = (xs, ys, np.zeros_like(xs))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_3": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..f2221871b2 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,14 +166,29 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n \n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n+\n+def set_3d_properties(self, zs=0, zdir='z'):\n+    xs = self.get_xdata()\n+    ys = self.get_ydata()\n+    try:\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n-        self.stale = True\n+    except Exception:\n+        # Ensure _verts3d exists even if broadcasting fails\n+        self._verts3d = (xs, ys, np.zeros_like(xs))\n+    self.stale = True\n \n     def set_data_3d(self, *args):\n         \"\"\"\n@@ -193,9 +208,37 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    if len(args) == 1:\n+        try:\n             self._verts3d = args[0]\n-        else:\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.array([]), np.array([]), np.array([]))\n+    else:\n+        try:\n             self._verts3d = args\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.array([]), np.array([]), np.array([]))\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +254,40 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        verts3d = juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_4": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..96ba77d1d9 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,14 +166,30 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n \n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    # Ensure _verts3d is always properly initialized with validated data\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set even with mismatched inputs\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n+\n+def set_3d_properties(self, zs=0, zdir='z'):\n+    xs = self.get_xdata()\n+    ys = self.get_ydata()\n+    try:\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n-        self.stale = True\n+    except Exception:\n+        # Ensure _verts3d exists even if broadcasting fails\n+        self._verts3d = (xs, ys, np.zeros_like(xs))\n+    self.stale = True\n \n     def set_data_3d(self, *args):\n         \"\"\"\n@@ -193,9 +209,36 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    try:\n+        if len(args) == 1:\n             self._verts3d = args[0]\n         else:\n             self._verts3d = args\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        if len(args) == 1:\n+            self._verts3d = (np.asarray(args[0][0]), np.asarray(args[0][1]), np.asarray(args[0][2]))\n+        else:\n+            self._verts3d = (np.asarray(args[0]), np.asarray(args[1]), np.asarray(args[2]))\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +254,40 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        verts3d = juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_5": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..332d42643a 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,13 +166,29 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n+\n+    def __init__(self, xs, ys, zs, *args, **kwargs):\n+        \"\"\"\n+        Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+        \"\"\"\n+        super().__init__([], [], *args, **kwargs)\n+        # Ensure _verts3d is always properly initialized with valid arrays\n+        try:\n+            self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set even if broadcasting fails\n+            self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n \n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n         ys = self.get_ydata()\n-        zs = np.broadcast_to(zs, len(xs))\n-        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n+        try:\n+            zs = np.broadcast_to(zs, len(xs))\n+            self._verts3d = juggle_axes(xs, ys, zs, zdir)\n+        except Exception:\n+            # Ensure _verts3d exists even if broadcasting fails\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         self.stale = True\n \n     def set_data_3d(self, *args):\n@@ -193,9 +209,37 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    if len(args) == 1:\n+        try:\n             self._verts3d = args[0]\n-        else:\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.array([]), np.array([]), np.array([]))\n+    else:\n+        try:\n             self._verts3d = args\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.array([]), np.array([]), np.array([]))\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +255,41 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    \n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        verts3d = juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        verts3d = (line.get_xdata(), line.get_ydata(), np.zeros_like(line.get_xdata()))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_6": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..1bae9294b5 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,14 +166,29 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n \n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n+\n+def set_3d_properties(self, zs=0, zdir='z'):\n+    xs = self.get_xdata()\n+    ys = self.get_ydata()\n+    try:\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n-        self.stale = True\n+    except Exception:\n+        # Ensure _verts3d exists even if broadcasting fails\n+        self._verts3d = (xs, ys, np.zeros_like(xs))\n+    self.stale = True\n \n     def set_data_3d(self, *args):\n         \"\"\"\n@@ -193,9 +208,39 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    try:\n+        if len(args) == 1:\n             self._verts3d = args[0]\n         else:\n             self._verts3d = args\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        if len(args) == 1 and hasattr(args[0], '__iter__'):\n+            try:\n+                self._verts3d = tuple(args[0])\n+            except (TypeError, ValueError):\n+                self._verts3d = (np.array([]), np.array([]), np.array([]))\n+        else:\n+            self._verts3d = tuple(np.asarray(arg) if arg is not None else np.array([]) for arg in args)\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +256,42 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        verts3d = juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        verts3d = (xs, ys, np.zeros_like(xs))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_7": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..eb36b87f3c 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,13 +166,28 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n+\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n \n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n         ys = self.get_ydata()\n-        zs = np.broadcast_to(zs, len(xs))\n-        self._verts3d = juggle_axes(xs, ys, zs, zdir)\n+        try:\n+            zs = np.broadcast_to(zs, len(xs))\n+            self._verts3d = juggle_axes(xs, ys, zs, zdir)\n+        except Exception:\n+            # Ensure _verts3d exists even if broadcasting fails\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         self.stale = True\n \n     def set_data_3d(self, *args):\n@@ -193,9 +208,37 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    if len(args) == 1:\n+        try:\n             self._verts3d = args[0]\n-        else:\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.asarray([]), np.asarray([]), np.asarray([]))\n+    else:\n+        try:\n             self._verts3d = args\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = tuple(np.asarray(arg) for arg in args) if args else (np.asarray([]), np.asarray([]), np.asarray([]))\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +254,43 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        from . import proj3d\n+        verts3d = proj3d.juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        verts3d = (xs, ys, np.zeros_like(xs))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n",
    "variant_8": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..da58415bcc 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,14 +166,29 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n \n-    def set_3d_properties(self, zs=0, zdir='z'):\n-        xs = self.get_xdata()\n-        ys = self.get_ydata()\n+def __init__(self, xs, ys, zs, *args, **kwargs):\n+    \"\"\"\n+    Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n+    \"\"\"\n+    super().__init__([], [], *args, **kwargs)\n+    try:\n+        self._verts3d = np.broadcast_arrays(xs, ys, zs)\n+    except Exception:\n+        # Fallback to ensure _verts3d is always set\n+        self._verts3d = (np.asarray(xs), np.asarray(ys), np.asarray(zs))\n+\n+\n+def set_3d_properties(self, zs=0, zdir='z'):\n+    xs = self.get_xdata()\n+    ys = self.get_ydata()\n+    try:\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n-        self.stale = True\n+    except Exception:\n+        # Ensure _verts3d exists even if broadcasting fails\n+        self._verts3d = (xs, ys, np.zeros_like(xs))\n+    self.stale = True\n \n     def set_data_3d(self, *args):\n         \"\"\"\n@@ -193,9 +208,37 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n+\n+def set_data_3d(self, *args):\n+    \"\"\"\n+    Set the x, y and z data\n+\n+    Parameters\n+    ----------\n+    x : array-like\n+        The x-data to be plotted.\n+    y : array-like\n+        The y-data to be plotted.\n+    z : array-like\n+        The z-data to be plotted.\n+\n+    Notes\n+    -----\n+    Accepts x, y, z arguments or a single array-like (x, y, z)\n+    \"\"\"\n+    if len(args) == 1:\n+        try:\n             self._verts3d = args[0]\n-        else:\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.array([]), np.array([]), np.array([]))\n+    else:\n+        try:\n             self._verts3d = args\n+        except Exception:\n+            # Fallback to ensure _verts3d is always set\n+            self._verts3d = (np.array([]), np.array([]), np.array([]))\n+    self.stale = True\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -211,18 +254,43 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+\n+    @artist.allow_rasterization\n+    def draw(self, renderer):\n+        if not hasattr(self, '_verts3d') or self._verts3d is None:\n+            # Emergency fallback - reconstruct from 2D data\n+            xs, ys = self.get_data()\n+            self._verts3d = (xs, ys, np.zeros_like(xs))\n         xs3d, ys3d, zs3d = self._verts3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n         self.stale = False\n+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n+        self.set_data(xs, ys)\n+        super().draw(renderer)\n+        self.stale = False\n+\n \n \n def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n-\n+    # Ensure _verts3d is initialized before class change\n+    try:\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        zs = np.broadcast_to(zs, len(xs))\n+        from . import proj3d\n+        verts3d = proj3d.juggle_axes(xs, ys, zs, zdir)\n+    except Exception:\n+        # Fallback initialization if broadcasting fails\n+        xs = line.get_xdata()\n+        ys = line.get_ydata()\n+        verts3d = (xs, ys, np.zeros_like(xs))\n+    \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line._verts3d = verts3d\n+    line.stale = True\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n"
  }
}