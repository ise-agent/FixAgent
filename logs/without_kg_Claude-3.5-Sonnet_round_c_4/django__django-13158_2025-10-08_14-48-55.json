{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/query.py lines 999-1004)": "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
    "Location 2 (/root/hy/projects_4/django/django/db/models/query.py lines 1006-1013)": "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
    "Location 3 (/root/hy/projects_4/django/django/db/models/query.py lines 1015-1019)": "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/query.py lines 999-1004)": [
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n",
      "\n    def union(self, *other_qs, all=False):\n        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n        return self._combinator_query('union', *other_qs, all=all)\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/db/models/query.py lines 1006-1013)": [
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n",
      "\n    def intersection(self, *other_qs):\n        # If any query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        for other in other_qs:\n            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                return other\n        return self._combinator_query('intersection', *other_qs)\n"
    ],
    "Location 3 (/root/hy/projects_4/django/django/db/models/query.py lines 1015-1019)": [
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n",
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n",
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n",
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n",
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n",
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n",
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n",
      "\n    def difference(self, *other_qs):\n        # If the query is an EmptyQuerySet, return it.\n        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n            return self\n        return self._combinator_query('difference', *other_qs)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..00039e1bdb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not (isinstance(q, EmptyQuerySet) or q.query.is_empty())]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_0": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_1": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_2": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_3": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_4": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..53bfc437ee 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_5": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_6": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_7": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n",
    "variant_8": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..eb3d82588d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -996,25 +996,28 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n \n+\n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n+            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet) and not q.query.is_empty()]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n         return self._combinator_query('union', *other_qs, all=all)\n \n+\n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         for other in other_qs:\n-            if isinstance(other, EmptyQuerySet):\n+            if isinstance(other, EmptyQuerySet) or other.query.is_empty():\n                 return other\n         return self._combinator_query('intersection', *other_qs)\n \n+\n     def difference(self, *other_qs):\n         # If the query is an EmptyQuerySet, return it.\n-        if isinstance(self, EmptyQuerySet):\n+        if isinstance(self, EmptyQuerySet) or self.query.is_empty():\n             return self\n         return self._combinator_query('difference', *other_qs)\n \n"
  }
}