{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
    "Location 2 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 30-32)": "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": [
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both callable axis (method) and dictionary-like axis\n    if callable(ax.axis):\n        axis_dict = ax.axis()\n    else:\n        axis_dict = ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both dictionary-like axis objects and method-based axis objects\n    if callable(ax.axis):\n        axis_dict = ax.axis()\n    else:\n        axis_dict = ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both method-based and dictionary-based axis access\n    if callable(ax.axis):\n        axis_dict = ax.axis()\n    else:\n        axis_dict = ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both callable axis (method) and dict-like axis\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both method-based and dictionary-based axis access\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both method-based and dict-like axis access\n    if callable(ax.axis):\n        axis_dict = ax.axis()\n    else:\n        axis_dict = ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both method-based and dictionary-based axis access\n    if callable(ax.axis):\n        axis_dict = ax.axis()\n    else:\n        axis_dict = ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both dictionary-like axis objects and method-based axis objects\n    if callable(ax.axis):\n        axis_dict = ax.axis()\n    else:\n        axis_dict = ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n"
    ],
    "Location 2 (/root/hy/projects_4/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 30-32)": [
      "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n",
      "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n",
      "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n",
      "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n",
      "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n",
      "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n",
      "\n    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n    def toggle_label(self, b):\n        if callable(self.axis):\n            axis = self.axis()[self.orientation]\n        else:\n            axis = self.axis[self.orientation]\n        axis.toggle(ticklabels=b, label=b)\n",
      "\n@_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\ndef toggle_label(self, b):\n    if callable(self.axis):\n        axis = self.axis()[self.orientation]\n    else:\n        axis = self.axis[self.orientation]\n    axis.toggle(ticklabels=b, label=b)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..99888142eb 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,14 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    # Handle both dictionary-like axis and method-based axis (e.g., GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -27,8 +30,11 @@ class CbarAxesBase:\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        # Handle both dictionary-like axis and method-based axis (e.g., GeoAxes)\n+        axis_dict = self.axis() if callable(self.axis) else self.axis\n+        axis = axis_dict[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_0": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..732a271108 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,13 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +28,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_1": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..66a4f233fb 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,19 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both callable axis (method) and dictionary-like axis\n+    if callable(ax.axis):\n+        axis_dict = ax.axis()\n+    else:\n+        axis_dict = ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +34,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_2": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..195e0de919 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,19 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both dictionary-like axis objects and method-based axis objects\n+    if callable(ax.axis):\n+        axis_dict = ax.axis()\n+    else:\n+        axis_dict = ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +34,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_3": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..fc118cfa1f 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,19 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both method-based and dictionary-based axis access\n+    if callable(ax.axis):\n+        axis_dict = ax.axis()\n+    else:\n+        axis_dict = ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +34,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_4": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..01ccf8395c 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both callable axis (method) and dict-like axis\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +31,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_5": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c32abe6464 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both method-based and dictionary-based axis access\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +31,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_6": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..730e754fa6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,19 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both method-based and dict-like axis access\n+    if callable(ax.axis):\n+        axis_dict = ax.axis()\n+    else:\n+        axis_dict = ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +34,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_7": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..fc118cfa1f 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,19 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both method-based and dictionary-based axis access\n+    if callable(ax.axis):\n+        axis_dict = ax.axis()\n+    else:\n+        axis_dict = ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -26,9 +34,14 @@ class CbarAxesBase:\n         return self.figure.colorbar(\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n+    @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+\n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n     def toggle_label(self, b):\n-        axis = self.axis[self.orientation]\n+        if callable(self.axis):\n+            axis = self.axis()[self.orientation]\n+        else:\n+            axis = self.axis[self.orientation]\n         axis.toggle(ticklabels=b, label=b)\n \n \n",
    "variant_8": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..13ebc3e2f9 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,19 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both dictionary-like axis objects and method-based axis objects\n+    if callable(ax.axis):\n+        axis_dict = ax.axis()\n+    else:\n+        axis_dict = ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n@@ -27,9 +35,14 @@ class CbarAxesBase:\n             mappable, cax=self, location=self.orientation, **kwargs)\n \n     @_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n-    def toggle_label(self, b):\n+\n+@_api.deprecated(\"3.8\", alternative=\"ax.tick_params and colorbar.set_label\")\n+def toggle_label(self, b):\n+    if callable(self.axis):\n+        axis = self.axis()[self.orientation]\n+    else:\n         axis = self.axis[self.orientation]\n-        axis.toggle(ticklabels=b, label=b)\n+    axis.toggle(ticklabels=b, label=b)\n \n \n _cbaraxes_class_factory = cbook._make_class_factory(CbarAxesBase, \"Cbar{}\")\n"
  }
}