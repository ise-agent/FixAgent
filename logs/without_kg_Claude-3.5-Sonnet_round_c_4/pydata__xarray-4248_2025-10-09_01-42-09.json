{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/xarray/xarray/core/formatting.py lines 271-291)": "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Format name with units if available\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/xarray/xarray/core/formatting.py lines 271-291)": [
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Check for units in variable attributes and format name accordingly\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Check for units in variable attributes and format name accordingly\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Format name with units if available\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Check for units in variable attributes and format name accordingly\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = name\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Format name with units if available\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Check for units in variable attributes\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Check for units in variable attributes and format name accordingly\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Format name with units if available\n    units = var.attrs.get('units')\n    if units:\n        display_name = f\"{name}, in {units}\"\n    else:\n        display_name = str(name)\n    \n    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..ad994869 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Check for units in variable attributes and format name accordingly\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = name\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_0": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..bfe8a7f6 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Format name with units if available\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_1": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..5564a19f 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Check for units in variable attributes and format name accordingly\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_2": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..5564a19f 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Check for units in variable attributes and format name accordingly\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_3": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..bfe8a7f6 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Format name with units if available\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_4": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..ad994869 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Check for units in variable attributes and format name accordingly\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = name\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_5": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..bfe8a7f6 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Format name with units if available\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_6": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..d184995f 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Check for units in variable attributes\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_7": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..5564a19f 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Check for units in variable attributes and format name accordingly\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n",
    "variant_8": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..bfe8a7f6 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,15 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Format name with units if available\n+    units = var.attrs.get('units')\n+    if units:\n+        display_name = f\"{name}, in {units}\"\n+    else:\n+        display_name = str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {display_name} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n"
  }
}