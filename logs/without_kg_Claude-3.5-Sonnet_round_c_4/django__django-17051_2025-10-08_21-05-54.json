{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/query.py lines 1840-1840)": "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
    "Location 2 (/root/hy/projects_4/django/django/db/models/query.py lines 1841-1848)": "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
    "Location 3 (/root/hy/projects_4/django/django/db/models/query.py lines 1849-1857)": "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/query.py lines 1840-1840)": [
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/db/models/query.py lines 1841-1848)": [
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                    )\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n"
    ],
    "Location 3 (/root/hy/projects_4/django/django/db/models/query.py lines 1849-1857)": [
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n",
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n",
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n",
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n",
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n",
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n",
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n",
      "\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..028f11616f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,7 +1837,9 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,6 +1848,7 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n                 self._insert(\n                     item,\n",
    "variant_0": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..1f7469f688 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,13 +1837,20 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n@@ -1855,6 +1862,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_1": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..1f7469f688 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,13 +1837,20 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n@@ -1855,6 +1862,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_2": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..1f7469f688 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,13 +1837,20 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n@@ -1855,6 +1862,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_3": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..f30df00f45 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,7 +1837,11 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1855,6 +1859,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_4": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..5ffdb7677a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,7 +1837,10 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,6 +1849,7 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n                 self._insert(\n                     item,\n@@ -1854,6 +1858,7 @@ class QuerySet(AltersData):\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n                 )\n         return inserted_rows\n \n",
    "variant_5": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..1f7469f688 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,13 +1837,20 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n@@ -1855,6 +1862,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_6": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..f30df00f45 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,7 +1837,11 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1855,6 +1859,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_7": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..1f7469f688 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,13 +1837,20 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n@@ -1855,6 +1862,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_8": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..1f7469f688 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1837,13 +1837,20 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n@@ -1855,6 +1862,17 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n+\n+            else:\n+                self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if bulk_return and on_conflict == OnConflict.UPDATE else None,\n+                )\n         return inserted_rows\n \n     def _chain(self):\n"
  }
}