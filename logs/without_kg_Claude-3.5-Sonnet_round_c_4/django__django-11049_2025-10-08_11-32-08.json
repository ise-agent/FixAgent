{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/fields/__init__.py lines 1588-1591)": "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
    "Location 2 (/root/hy/projects_4/django/tests/model_fields/test_durationfield.py lines 75-79)": "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/fields/__init__.py lines 1588-1591)": [
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n"
    ],
    "Location 2 (/root/hy/projects_4/django/tests/model_fields/test_durationfield.py lines 75-79)": [
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_0": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_1": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_2": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_3": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_4": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_5": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_6": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_7": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_8": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..06950d99d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,10 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..9f5b96d92f 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,11 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n"
  }
}