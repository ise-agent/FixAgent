{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/builders/singlehtml.py lines 114-123)": "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers from all documents into a single structure\n    # under the master document while preserving the figtype hierarchy.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # Merge all documents: {'figure': {'id1': (1,), 'id2': (2,), 'id3': (3,)}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            if figtype not in new_fignumbers:\n                new_fignumbers[figtype] = {}\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/domains/std.py lines 1072-1079)": "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n        \n        Merges all document figure numbers under the master document while\n        maintaining the expected nested structure {docname: {figtype: {figure_id: number}}}.\n        \"\"\"\n        # Create the expected nested structure\n        new_fignumbers = {self.config.master_doc: {}}\n        \n        # Merge all figure numbers from all documents\n        for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n            for figtype, fignumbers in fignumbers_by_type.items():\n                if figtype not in new_fignumbers[self.config.master_doc]:\n                    new_fignumbers[self.config.master_doc][figtype] = {}\n                new_fignumbers[self.config.master_doc][figtype].update(fignumbers)\n        \n        return new_fignumbers\n",
    "Location 3 (/root/hy/projects_4/sphinx/sphinx/domains/std.py lines 850-860)": "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble TOC fignumbers to single document.\n        \n        For singlehtml, all documents are merged into a single document,\n        so we need to create a unified figure numbering structure under\n        the master document while maintaining the expected nested format:\n        {master_doc: {figtype: {figure_id: number_tuple}}}\n        \"\"\"\n        # Start with empty structure for master document\n        new_fignumbers = {self.config.master_doc: {}}\n        \n        # Merge all documents' figure numbers into the master document\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figure_dict in fignumbers.items():\n                # Initialize figtype in master doc if not present\n                if figtype not in new_fignumbers[self.config.master_doc]:\n                    new_fignumbers[self.config.master_doc][figtype] = {}\n                \n                # Merge all figures of this type into master document\n                new_fignumbers[self.config.master_doc][figtype].update(figure_dict)\n        \n        return new_fignumbers\n",
    "Location 4 (/root/hy/projects_4/sphinx/sphinx/builders/singlehtml.py lines 157-161)": "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers on anchors.\n        \n        For singlehtml, merge all documents into the master document while\n        maintaining the nested structure expected by get_fignumber.\n        \"\"\"\n        # Initialize the result with the master document\n        new_fignumbers = {}\n        master_doc = self.config.master_doc\n        new_fignumbers[master_doc] = {}\n        \n        # Collect all fignumbers from all documents and merge them\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                new_fignumbers[master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
    "Location 5 (/root/hy/projects_4/sphinx/sphinx/builders/singlehtml.py lines 104-108)": "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining proper structure.\n        #\n        # Note: Maintains the expected nested structure {docname: {figtype: {figure_id: number}}}\n        #       to ensure compatibility with get_fignumber() method.\n        #\n        # There are related codes in inline_all_toctres() and\n        # HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        \n        # Merge all documents' figure numbers under the master document\n        master_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        \n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in master_fignumbers:\n                    master_fignumbers[figtype] = {}\n                \n                for figure_id, number in fignums.items():\n                    # Create unique figure_id by prefixing with docname to avoid conflicts\n                    unique_id = \"%s/%s\" % (docname, figure_id)\n                    master_fignumbers[figtype][unique_id] = number\n\n        return {self.config.master_doc: master_fignumbers}\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/builders/singlehtml.py lines 114-123)": [
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber under master_doc.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # Merge all documents' figure numbers into a single structure\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining proper structure.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # Merge all documents' figure numbers into the master document\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers from all documents into a single structure\n    # under the master document while preserving the figtype hierarchy.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # Merge all documents' figure numbers while preserving figtype structure\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers from all documents into a single structure\n    # under the master document while preserving the figtype hierarchy.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # Merge all documents: {'figure': {'id1': (1,), 'id2': (2,), 'id3': (3,)}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers from all documents into a single structure\n    # under the master document while preserving the figtype hierarchy.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # Merge all documents' figure numbers into a single nested structure\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining proper structure.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # Merge all documents' fignumbers under master_doc while preserving figtype structure\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber under master_doc while\n        # maintaining the expected nested structure: {docname: {figtype: {id: number}}}\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # Merge all documents' figure numbers by figtype\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber while maintaining proper structure.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # Merge all documents' figure numbers into a single nested structure\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n"
    ],
    "Location 2 (/root/hy/projects_4/sphinx/sphinx/domains/std.py lines 1072-1079)": [
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to merge all documents under the master document.\n        \n        For singlehtml, all documents are merged into one, so we need to collect\n        all figure numbers from all documents and make them accessible under the\n        master document while preserving the nested structure expected by the\n        standard domain.\n        \"\"\"\n        # Initialize with master document structure\n        new_fignumbers = {self.config.master_doc: {}}\n        \n        # Collect all figure numbers from all documents\n        for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n            for figtype, fignumbers in fignumbers_by_type.items():\n                # Ensure figtype exists in master doc structure\n                if figtype not in new_fignumbers[self.config.master_doc]:\n                    new_fignumbers[self.config.master_doc][figtype] = {}\n                \n                # Merge all figure numbers under master doc\n                new_fignumbers[self.config.master_doc][figtype].update(fignumbers)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers for single HTML.\n        \n        Merges all toc_fignumbers from all documents under the master document\n        while maintaining the expected nested structure {docname: {figtype: {figure_id: number}}}.\n        \"\"\"\n        # Create the structure under master_doc\n        master_fignumbers = {self.config.master_doc: {}}\n        \n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figure_dict in fignumbers.items():\n                if figtype not in master_fignumbers[self.config.master_doc]:\n                    master_fignumbers[self.config.master_doc][figtype] = {}\n                \n                # Merge all figure numbers under the master doc\n                master_fignumbers[self.config.master_doc][figtype].update(figure_dict)\n        \n        return master_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n        \"\"\"Assemble toc_fignumbers to merge all documents under single docname.\n        \n        Returns a nested dictionary with structure:\n        {master_doc: {figtype: {figure_id: number_tuple}}}\n        \"\"\"\n        # new_fignumbers structure: {master_doc: {figtype: {figure_id: number_tuple}}}\n        new_fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n        master_doc = self.config.master_doc\n        \n        # Initialize the master document entry\n        new_fignumbers[master_doc] = {}\n        \n        # Iterate through all documents and their figure types\n        for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n            for figtype, fignumbers in fignumbers_by_type.items():\n                # Initialize figtype in master doc if not exists\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                \n                # Merge all figure numbers under the master document\n                new_fignumbers[master_doc][figtype].update(fignumbers)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n        \"\"\"Assemble toc_fignumbers to single document.\n        \n        For singlehtml builder, merge all documents' figure numbers under the master document\n        while maintaining the nested structure expected by the standard domain.\n        \"\"\"\n        # return merged toc_fignumbers for each docname\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n        \n        # Initialize master doc entry with nested structure\n        master_doc = self.config.master_doc\n        new_fignumbers[master_doc] = {}\n        \n        # Merge all documents' figure numbers under master doc\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                new_fignumbers[master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n        \n        Merges all documents into a single nested structure under the master document,\n        maintaining the expected {docname: {figtype: {figure_id: number_tuple}}} format.\n        \"\"\"\n        # Initialize the structure for the master document\n        new_fignumbers = {self.config.master_doc: {}}\n        \n        # Collect all figure types across all documents\n        all_figtypes = set()\n        for doc_fignumbers in self.env.toc_fignumbers.values():\n            all_figtypes.update(doc_fignumbers.keys())\n        \n        # Initialize each figure type in the master document\n        for figtype in all_figtypes:\n            new_fignumbers[self.config.master_doc][figtype] = {}\n        \n        # Merge all figure numbers from all documents into the master document\n        for docname, doc_fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in doc_fignumbers.items():\n                new_fignumbers[self.config.master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ......]]]]:\n        \"\"\"Assemble toc_fignumbers to merge all documents into single document.\n        \n        For singlehtml, all documents are merged into the master document,\n        so we need to merge all figure numbers under the master document\n        while preserving the figtype hierarchy.\n        \"\"\"\n        # Start with empty structure for master document\n        new_fignumbers = {self.config.master_doc: {}}\n        \n        # Merge all documents' figure numbers into master document\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                # Initialize figtype in master document if not present\n                if figtype not in new_fignumbers[self.config.master_doc]:\n                    new_fignumbers[self.config.master_doc][figtype] = {}\n                \n                # Merge all figures of this type into master document\n                new_fignumbers[self.config.master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n        \n        For singlehtml, all documents are merged into one, so we need to create\n        a structure where all figure numbers are accessible under the master document\n        while maintaining the expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n        \"\"\"\n        # Create the structure under master_doc\n        master_fignumbers = {}\n        \n        # Iterate through all documents and their figure types\n        for docname, figtype_dict in self.env.toc_fignumbers.items():\n            for figtype, figure_dict in figtype_dict.items():\n                # Initialize figtype in master_fignumbers if not present\n                if figtype not in master_fignumbers:\n                    master_fignumbers[figtype] = {}\n                \n                # Add all figures from this docname/figtype to the master\n                master_fignumbers[figtype].update(figure_dict)\n        \n        # Return the nested structure with all figures under master_doc\n        return {self.config.master_doc: master_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to all documents for singlehtml builder.\n        \n        Merges all figure numbers from all documents into a single structure\n        under the master document while maintaining the expected nested format:\n        {master_doc: {figtype: {figure_id: number_tuple}}}\n        \"\"\"\n        new_fignumbers = {}\n        master_doc = self.config.master_doc\n        new_fignumbers[master_doc] = {}\n        \n        for docname, fignumbers_of_doc in self.env.toc_fignumbers.items():\n            for figtype, fignumbers in fignumbers_of_doc.items():\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                new_fignumbers[master_doc][figtype].update(fignumbers)\n        \n        return new_fignumbers\n"
    ],
    "Location 3 (/root/hy/projects_4/sphinx/sphinx/domains/std.py lines 850-860)": [
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n        \"\"\"Assemble TOC fignumbers to merge all documents into one.\n        \n        For singlehtml builder, all documents are merged into the master document,\n        so we need to collect all figure numbers from all documents and organize\n        them under the master document while preserving the figtype structure.\n        \"\"\"\n        # Collect all figure numbers from all documents, organized by figtype\n        merged_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        \n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                if figtype not in merged_fignumbers:\n                    merged_fignumbers[figtype] = {}\n                merged_fignumbers[figtype].update(figures)\n        \n        # Return the merged structure under the master document\n        return {self.config.master_doc: merged_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble a mapping of figure numbers for the single HTML output.\n        \n        Returns a nested dictionary: {docname: {figtype: {figure_id: number_tuple}}}\n        For singlehtml, all figures are collected under the master document.\n        \"\"\"\n        # Initialize the result with master_doc as the key\n        new_fignumbers = {self.config.master_doc: {}}\n        \n        # Collect all figure numbers from all documents\n        for docname, fignumtypes in self.env.toc_fignumbers.items():\n            for figtype, fignumbers in fignumtypes.items():\n                # Initialize figtype dict if it doesn't exist\n                if figtype not in new_fignumbers[self.config.master_doc]:\n                    new_fignumbers[self.config.master_doc][figtype] = {}\n                \n                # Merge all figure numbers for this figtype\n                new_fignumbers[self.config.master_doc][figtype].update(fignumbers)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\\\n        \"\"\"Assemble a collection of figure numbers in the single HTML.\n\n        Overrides the default to merge all documents under the master document\n        while preserving the expected nested structure for cross-references.\n        \"\"\"\n        # Aggregate figure numbers from all documents under master_doc\n        master_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        \n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                if figtype not in master_fignumbers:\n                    master_fignumbers[figtype] = {}\n                master_fignumbers[figtype].update(figures)\n        \n        return {self.config.master_doc: master_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble TOC fignumbers to merge all documents into single document.\"\"\"\n        # Create a single master document structure that maintains the expected format\n        master_doc = self.config.master_doc\n        new_fignumbers = {master_doc: {}}\n        \n        # Merge all documents' fignumbers under the master document\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                new_fignumbers[master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        \"\"\"Assemble TOC fignumbers to merge all documents under master_doc.\n        \n        For singlehtml, all documents are merged into a single HTML file,\n        so we need to consolidate all figure numbers under the master document\n        while maintaining the expected nested structure.\n        \"\"\"\n        # Start with empty structure for master document\n        new_fignumbers = {self.config.master_doc: {}}\n        \n        # Merge all documents' fignumbers under master_doc\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                # Initialize figtype dict if not exists\n                if figtype not in new_fignumbers[self.config.master_doc]:\n                    new_fignumbers[self.config.master_doc][figtype] = {}\n                \n                # Merge all figures of this type\n                new_fignumbers[self.config.master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble a mapping of figure numbers.\n\n        Merge all per-document figure numbers into a single structure for the master document.\n        Returns: {master_doc: {figtype: {figure_id: number_tuple}}}\n        \"\"\"\n        # Start with the master document's structure\n        master_doc = self.config.master_doc\n        new_fignumbers = {}\n        \n        # Initialize the master document entry if it doesn't exist\n        if master_doc not in new_fignumbers:\n            new_fignumbers[master_doc] = {}\n        \n        # Merge all documents' figure numbers into the master document\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                \n                # Merge all figures of this type from this document\n                new_fignumbers[master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except (ValueError, KeyError, IndexError):\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                           location=node)\n            return contnode\n\n        try:\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble TOC fignumbers to merge all documents under the master document.\n        \n        For singlehtml builder, all documents are merged into one, so we need to\n        consolidate all figure numbers under the master document while maintaining\n        the expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n        \"\"\"\n        # Get the original toc_fignumbers structure\n        new_fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n        master_doc = self.config.master_doc\n        \n        # Initialize the master document entry\n        new_fignumbers[master_doc] = {}\n        \n        # Merge all documents' figure numbers under the master document\n        for docname, figtype_dict in self.env.toc_fignumbers.items():\n            for figtype, figure_dict in figtype_dict.items():\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                # Merge all figures of this type from all documents\n                new_fignumbers[master_doc][figtype].update(figure_dict)\n        \n        return new_fignumbers\n"
    ],
    "Location 4 (/root/hy/projects_4/sphinx/sphinx/builders/singlehtml.py lines 157-161)": [
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]:\n    \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n    \n    Merges all documents' figure numbers under the master document while\n    maintaining the expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n    \"\"\"\n    # Initialize with master document structure\n    fignumbers = {self.config.master_doc: {}}\n    \n    # Collect all figure types from all documents\n    all_figtypes = set()\n    for docname in self.env.toc_fignumbers:\n        all_figtypes.update(self.env.toc_fignumbers[docname].keys())\n    \n    # Initialize figure type dictionaries under master document\n    for figtype in all_figtypes:\n        fignumbers[self.config.master_doc][figtype] = {}\n    \n    # Merge all figure numbers from all documents\n    for docname in self.env.toc_fignumbers:\n        for figtype, figures in self.env.toc_fignumbers[docname].items():\n            fignumbers[self.config.master_doc][figtype].update(figures)\n    \n    return fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        \n        Merges all documents' figure numbers under the master document\n        while preserving the nested structure expected by get_fignumber.\n        \"\"\"\n        # Get figure numbers from all documents\n        merged_fignumbers = {}\n        master_doc = self.config.master_doc\n        \n        # Initialize the master document entry\n        merged_fignumbers[master_doc] = {}\n        \n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                if figtype not in merged_fignumbers[master_doc]:\n                    merged_fignumbers[master_doc][figtype] = {}\n                merged_fignumbers[master_doc][figtype].update(figures)\n        \n        return merged_fignumbers\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n    \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    \n    Returns a nested dict structure: {docname: {figtype: {figure_id: number_tuple}}}\n    For singlehtml, all figures are merged under the master document.\n    \"\"\"\n    # Initialize the structure for the master document\n    master_doc = self.config.master_doc\n    merged_fignumbers = {}\n    \n    # Merge all figure numbers from all documents under the master document\n    for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n        for figtype, fignumbers in fignumbers_by_type.items():\n            if figtype not in merged_fignumbers:\n                merged_fignumbers[figtype] = {}\n            merged_fignumbers[figtype].update(fignumbers)\n    \n    return {master_doc: merged_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        \n        Merges all documents into the master document while preserving the\n        expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n        \"\"\"\n        # Get the master document name\n        master_doc = self.config.master_doc\n        \n        # Initialize the result with master document\n        new_fignumbers = {master_doc: {}}\n        \n        # Collect all figure numbers from all documents\n        for docname, fignumbers in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumbers.items():\n                # Initialize figtype in master doc if not present\n                if figtype not in new_fignumbers[master_doc]:\n                    new_fignumbers[master_doc][figtype] = {}\n                \n                # Merge all figures of this type into master document\n                new_fignumbers[master_doc][figtype].update(figures)\n        \n        return new_fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        Figures in each document are supposed to be numbered continuously.\n        So we make to assign figure numbers to them.\n        \n        Returns a nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n        For singlehtml, all figures are merged under the master document.\n        \"\"\"\n        # Get the master document name\n        master_doc = self.config.master_doc\n        \n        # Initialize the result structure with master document\n        fignumbers = {master_doc: {}}\n        \n        # Collect all figure types used across all documents\n        all_figtypes = set()\n        for docname in self.env.all_docs:\n            if docname in self.env.toc_fignumbers:\n                all_figtypes.update(self.env.toc_fignumbers[docname].keys())\n        \n        # For each figure type, merge all figures from all documents\n        for figtype in all_figtypes:\n            fignumbers[master_doc][figtype] = {}\n            \n            # Collect figures from all documents for this type\n            for docname in self.env.all_docs:\n                if (docname in self.env.toc_fignumbers and \n                    figtype in self.env.toc_fignumbers[docname]):\n                    # Merge figures from this document into master document\n                    fignumbers[master_doc][figtype].update(\n                        self.env.toc_fignumbers[docname][figtype]\n                    )\n        \n        return fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        Merges all figure numbers into a single nested structure under the master document.\n        \"\"\"\n        fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n        master_doc = self.config.master_doc\n        \n        # Initialize the master document entry\n        fignumbers[master_doc] = {}\n        \n        # Collect all figure numbers from all documents\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, figure_ids in fignumlist.items():\n                if figtype not in fignumbers[master_doc]:\n                    fignumbers[master_doc][figtype] = {}\n                \n                # Merge figure IDs from this document\n                for figure_id, number_tuple in figure_ids.items():\n                    fignumbers[master_doc][figtype][figure_id] = number_tuple\n        \n        return fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] :\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers in single document.\n        \n        Merges all figure numbers from different documents into a single nested structure\n        under the master document, maintaining the expected format for get_fignumber.\n        \"\"\"\n        fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n        master_doc = self.config.master_doc\n        \n        # Initialize the master document entry\n        fignumbers[master_doc] = {}\n        \n        # Merge all figure numbers from all documents\n        for docname, fignumdict in self.env.toc_fignumbers.items():\n            for figtype, figures in fignumdict.items():\n                if figtype not in fignumbers[master_doc]:\n                    fignumbers[master_doc][figtype] = {}\n                fignumbers[master_doc][figtype].update(figures)\n        \n        return fignumbers\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        Merges all figure numbers from all documents into a single structure\n        under the master document while preserving the nested hierarchy.\n        \"\"\"\n        fignumbers = {}\n        master_doc = self.config.master_doc\n        \n        # Initialize master document structure\n        fignumbers[master_doc] = {}\n        \n        # Collect all figure numbers from all documents\n        for docname, figtype_dict in self.env.toc_fignumbers.items():\n            for figtype, figure_dict in figtype_dict.items():\n                # Initialize figtype if not exists\n                if figtype not in fignumbers[master_doc]:\n                    fignumbers[master_doc][figtype] = {}\n                \n                # Merge figure numbers for this figtype\n                fignumbers[master_doc][figtype].update(figure_dict)\n        \n        return fignumbers\n"
    ],
    "Location 5 (/root/hy/projects_4/sphinx/sphinx/builders/singlehtml.py lines 104-108)": [
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single document while preserving nested structure.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it merges all documents under master_doc\n        #       while maintaining the expected {docname: {figtype: {id: number}}} structure.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in new_fignumbers:\n                    new_fignumbers[figtype] = {}\n                for id, number in fignums.items():\n                    # Create unique id by prefixing with docname to avoid conflicts\n                    alias = \"%s/%s\" % (docname, id)\n                    new_fignumbers[figtype][alias] = number\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining nested structure.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in new_fignumbers:\n                    new_fignumbers[figtype] = {}\n                for id, fignum in fignums.items():\n                    alias = \"%s/%s\" % (docname, id)\n                    new_fignumbers[figtype][alias] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers from all documents into the master document\n        # while preserving the nested structure expected by get_fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in new_fignumbers:\n                    new_fignumbers[figtype] = {}\n                for figure_id, number in fignums.items():\n                    # Use docname/figure_id to avoid conflicts between documents\n                    alias = \"%s/%s\" % (docname, figure_id)\n                    new_fignumbers[figtype][alias] = number\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining nested structure.\n        #\n        # Note: This maintains the expected {docname: {figtype: {figure_id: number}}}\n        #       structure that the standard domain expects, while merging all documents\n        #       under the master document for singlehtml output.\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        \n        # Merge all figure numbers from all documents into a single nested structure\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in new_fignumbers:\n                    new_fignumbers[figtype] = {}\n                \n                for figure_id, number in fignums.items():\n                    # Create unique figure IDs by prefixing with docname to avoid conflicts\n                    unique_id = \"%s/%s\" % (docname, figure_id)\n                    new_fignumbers[figtype][unique_id] = number\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining nested structure.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in new_fignumbers:\n                    new_fignumbers[figtype] = {}\n                for figure_id, number in fignums.items():\n                    # Create unique figure_id by prefixing with docname to avoid conflicts\n                    alias = \"%s/%s\" % (docname, figure_id)\n                    new_fignumbers[figtype][alias] = number\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining proper structure.\n        #\n        # Note: Maintains the expected nested structure {docname: {figtype: {id: number}}}\n        #       to ensure compatibility with StandardDomain.get_fignumber().\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # Merge all documents' figure numbers under the master document\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in new_fignumbers:\n                    new_fignumbers[figtype] = {}\n                for figure_id, number in fignums.items():\n                    # Use docname/id as the key to avoid conflicts between documents\n                    alias = \"%s/%s\" % (docname, figure_id)\n                    new_fignumbers[figtype][alias] = number\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single document while preserving figtype structure.\n        #\n        # Note: Maintains the nested structure expected by get_fignumber():\n        #       {docname: {figtype: {figure_id: number_tuple}}}\n        #       All documents are merged under master_doc to avoid refid conflicts.\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        \n        # Merge all documents' figure numbers under master_doc\n        master_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        \n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in master_fignumbers:\n                    master_fignumbers[figtype] = {}\n                \n                for figure_id, number_tuple in fignums.items():\n                    # Create unique figure_id by prefixing with docname to avoid conflicts\n                    unique_id = \"%s/%s\" % (docname, figure_id)\n                    master_fignumbers[figtype][unique_id] = number_tuple\n\n        return {self.config.master_doc: master_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber while maintaining proper structure.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                if figtype not in new_fignumbers:\n                    new_fignumbers[figtype] = {}\n                for figure_id, number in fignums.items():\n                    # Create unique figure_id to avoid conflicts across documents\n                    alias = \"%s/%s\" % (docname, figure_id)\n                    new_fignumbers[figtype][alias] = number\n\n        return {self.config.master_doc: new_fignumbers}\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..b396f26cc 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -111,14 +112,14 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n+\n         new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n@@ -154,11 +155,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..fff7ebffe 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,6 +847,7 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n@@ -1069,6 +1070,7 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n",
    "variant_0": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..7566f2284 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,59 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber while maintaining proper structure.\n         #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n+        # Note: Maintains the expected nested structure {docname: {figtype: {figure_id: number}}}\n+        #       to ensure compatibility with get_fignumber() method.\n+        #\n+        # There are related codes in inline_all_toctres() and\n+        # HTMLTranslter#add_fignumber().\n+        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        \n+        # Merge all documents' figure numbers under the master document\n+        master_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        \n+        for docname, fignumlist in self.env.toc_fignumbers.items():\n+            for figtype, fignums in fignumlist.items():\n+                if figtype not in master_fignumbers:\n+                    master_fignumbers[figtype] = {}\n+                \n+                for figure_id, number in fignums.items():\n+                    # Create unique figure_id by prefixing with docname to avoid conflicts\n+                    unique_id = \"%s/%s\" % (docname, figure_id)\n+                    master_fignumbers[figtype][unique_id] = number\n+\n+        return {self.config.master_doc: master_fignumbers}\n         #       To avoid the problem, it replaces key of secnumbers to\n         #       tuple of docname and refid.\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers from all documents into a single structure\n+    # under the master document while preserving the figtype hierarchy.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # Merge all documents: {'figure': {'id1': (1,), 'id2': (2,), 'id3': (3,)}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            if figtype not in new_fignumbers:\n+                new_fignumbers[figtype] = {}\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +187,26 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers on anchors.\n+        \n+        For singlehtml, merge all documents into the master document while\n+        maintaining the nested structure expected by get_fignumber.\n+        \"\"\"\n+        # Initialize the result with the master document\n+        new_fignumbers = {}\n+        master_doc = self.config.master_doc\n+        new_fignumbers[master_doc] = {}\n+        \n+        # Collect all fignumbers from all documents and merge them\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                new_fignumbers[master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..9f51b78e2 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,29 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble TOC fignumbers to single document.\n+        \n+        For singlehtml, all documents are merged into a single document,\n+        so we need to create a unified figure numbering structure under\n+        the master document while maintaining the expected nested format:\n+        {master_doc: {figtype: {figure_id: number_tuple}}}\n+        \"\"\"\n+        # Start with empty structure for master document\n+        new_fignumbers = {self.config.master_doc: {}}\n+        \n+        # Merge all documents' figure numbers into the master document\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figure_dict in fignumbers.items():\n+                # Initialize figtype in master doc if not present\n+                if figtype not in new_fignumbers[self.config.master_doc]:\n+                    new_fignumbers[self.config.master_doc][figtype] = {}\n+                \n+                # Merge all figures of this type into master document\n+                new_fignumbers[self.config.master_doc][figtype].update(figure_dict)\n+        \n+        return new_fignumbers\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1081,24 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n+        \n+        Merges all document figure numbers under the master document while\n+        maintaining the expected nested structure {docname: {figtype: {figure_id: number}}}.\n+        \"\"\"\n+        # Create the expected nested structure\n+        new_fignumbers = {self.config.master_doc: {}}\n+        \n+        # Merge all figure numbers from all documents\n+        for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n+            for figtype, fignumbers in fignumbers_by_type.items():\n+                if figtype not in new_fignumbers[self.config.master_doc]:\n+                    new_fignumbers[self.config.master_doc][figtype] = {}\n+                new_fignumbers[self.config.master_doc][figtype].update(fignumbers)\n+        \n+        return new_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_1": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..1994b5ff3 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,9 +101,38 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        # Merge all fignumbers to single document while preserving nested structure.\n+        #\n+        # Note: current Sphinx has refid confliction in singlehtml mode.\n+        #       To avoid the problem, it merges all documents under master_doc\n+        #       while maintaining the expected {docname: {figtype: {id: number}}} structure.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+        for docname, fignumlist in self.env.toc_fignumbers.items():\n+            for figtype, fignums in fignumlist.items():\n+                if figtype not in new_fignumbers:\n+                    new_fignumbers[figtype] = {}\n+                for id, number in fignums.items():\n+                    # Create unique id by prefixing with docname to avoid conflicts\n+                    alias = \"%s/%s\" % (docname, id)\n+                    new_fignumbers[figtype][alias] = number\n+\n+        return {self.config.master_doc: new_fignumbers}\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber under master_doc.\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n@@ -112,13 +141,12 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n         new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+        # Merge all documents' figure numbers into a single structure\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n@@ -154,11 +182,31 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]:\n+    \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n+    \n+    Merges all documents' figure numbers under the master document while\n+    maintaining the expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n+    \"\"\"\n+    # Initialize with master document structure\n+    fignumbers = {self.config.master_doc: {}}\n+    \n+    # Collect all figure types from all documents\n+    all_figtypes = set()\n+    for docname in self.env.toc_fignumbers:\n+        all_figtypes.update(self.env.toc_fignumbers[docname].keys())\n+    \n+    # Initialize figure type dictionaries under master document\n+    for figtype in all_figtypes:\n+        fignumbers[self.config.master_doc][figtype] = {}\n+    \n+    # Merge all figure numbers from all documents\n+    for docname in self.env.toc_fignumbers:\n+        for figtype, figures in self.env.toc_fignumbers[docname].items():\n+            fignumbers[self.config.master_doc][figtype].update(figures)\n+    \n+    return fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..6282c145b 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,25 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n+        \"\"\"Assemble TOC fignumbers to merge all documents into one.\n+        \n+        For singlehtml builder, all documents are merged into the master document,\n+        so we need to collect all figure numbers from all documents and organize\n+        them under the master document while preserving the figtype structure.\n+        \"\"\"\n+        # Collect all figure numbers from all documents, organized by figtype\n+        merged_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        \n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                if figtype not in merged_fignumbers:\n+                    merged_fignumbers[figtype] = {}\n+                merged_fignumbers[figtype].update(figures)\n+        \n+        # Return the merged structure under the master document\n+        return {self.config.master_doc: merged_fignumbers}\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1077,29 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to merge all documents under the master document.\n+        \n+        For singlehtml, all documents are merged into one, so we need to collect\n+        all figure numbers from all documents and make them accessible under the\n+        master document while preserving the nested structure expected by the\n+        standard domain.\n+        \"\"\"\n+        # Initialize with master document structure\n+        new_fignumbers = {self.config.master_doc: {}}\n+        \n+        # Collect all figure numbers from all documents\n+        for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n+            for figtype, fignumbers in fignumbers_by_type.items():\n+                # Ensure figtype exists in master doc structure\n+                if figtype not in new_fignumbers[self.config.master_doc]:\n+                    new_fignumbers[self.config.master_doc][figtype] = {}\n+                \n+                # Merge all figure numbers under master doc\n+                new_fignumbers[self.config.master_doc][figtype].update(fignumbers)\n+        \n+        return new_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_2": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..baadb80dc 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,9 +101,10 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber while maintaining nested structure.\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n@@ -115,10 +116,36 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                if figtype not in new_fignumbers:\n+                    new_fignumbers[figtype] = {}\n+                for id, fignum in fignums.items():\n+                    alias = \"%s/%s\" % (docname, id)\n+                    new_fignumbers[figtype][alias] = fignum\n+\n+        return {self.config.master_doc: new_fignumbers}\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        # Merge all fignumbers to single fignumber while maintaining proper structure.\n+        #\n+        # Note: current Sphinx has refid confliction in singlehtml mode.\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        # Merge all documents' figure numbers into the master document\n+        for docname, fignumlist in self.env.toc_fignumbers.items():\n+            for figtype, fignums in fignumlist.items():\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n@@ -154,11 +181,27 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        \n+        Merges all documents' figure numbers under the master document\n+        while preserving the nested structure expected by get_fignumber.\n+        \"\"\"\n+        # Get figure numbers from all documents\n+        merged_fignumbers = {}\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize the master document entry\n+        merged_fignumbers[master_doc] = {}\n+        \n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                if figtype not in merged_fignumbers[master_doc]:\n+                    merged_fignumbers[master_doc][figtype] = {}\n+                merged_fignumbers[master_doc][figtype].update(figures)\n+        \n+        return merged_fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..fcdcb36e4 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,27 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble a mapping of figure numbers for the single HTML output.\n+        \n+        Returns a nested dictionary: {docname: {figtype: {figure_id: number_tuple}}}\n+        For singlehtml, all figures are collected under the master document.\n+        \"\"\"\n+        # Initialize the result with master_doc as the key\n+        new_fignumbers = {self.config.master_doc: {}}\n+        \n+        # Collect all figure numbers from all documents\n+        for docname, fignumtypes in self.env.toc_fignumbers.items():\n+            for figtype, fignumbers in fignumtypes.items():\n+                # Initialize figtype dict if it doesn't exist\n+                if figtype not in new_fignumbers[self.config.master_doc]:\n+                    new_fignumbers[self.config.master_doc][figtype] = {}\n+                \n+                # Merge all figure numbers for this figtype\n+                new_fignumbers[self.config.master_doc][figtype].update(fignumbers)\n+        \n+        return new_fignumbers\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1079,25 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers for single HTML.\n+        \n+        Merges all toc_fignumbers from all documents under the master document\n+        while maintaining the expected nested structure {docname: {figtype: {figure_id: number}}}.\n+        \"\"\"\n+        # Create the structure under master_doc\n+        master_fignumbers = {self.config.master_doc: {}}\n+        \n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figure_dict in fignumbers.items():\n+                if figtype not in master_fignumbers[self.config.master_doc]:\n+                    master_fignumbers[self.config.master_doc][figtype] = {}\n+                \n+                # Merge all figure numbers under the master doc\n+                master_fignumbers[self.config.master_doc][figtype].update(figure_dict)\n+        \n+        return master_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_3": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..a411ed732 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,9 +101,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers from all documents into the master document\n+        # while preserving the nested structure expected by get_fignumber.\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n@@ -115,12 +117,40 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                if figtype not in new_fignumbers:\n+                    new_fignumbers[figtype] = {}\n+                for figure_id, number in fignums.items():\n+                    # Use docname/figure_id to avoid conflicts between documents\n+                    alias = \"%s/%s\" % (docname, figure_id)\n+                    new_fignumbers[figtype][alias] = number\n \n         return {self.config.master_doc: new_fignumbers}\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers from all documents into a single structure\n+    # under the master document while preserving the figtype hierarchy.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # Merge all documents' figure numbers while preserving figtype structure\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +184,25 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+    \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    \n+    Returns a nested dict structure: {docname: {figtype: {figure_id: number_tuple}}}\n+    For singlehtml, all figures are merged under the master document.\n+    \"\"\"\n+    # Initialize the structure for the master document\n+    master_doc = self.config.master_doc\n+    merged_fignumbers = {}\n+    \n+    # Merge all figure numbers from all documents under the master document\n+    for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n+        for figtype, fignumbers in fignumbers_by_type.items():\n+            if figtype not in merged_fignumbers:\n+                merged_fignumbers[figtype] = {}\n+            merged_fignumbers[figtype].update(fignumbers)\n+    \n+    return {master_doc: merged_fignumbers}\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..ef4a2c01f 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,23 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\\\n+        \"\"\"Assemble a collection of figure numbers in the single HTML.\n+\n+        Overrides the default to merge all documents under the master document\n+        while preserving the expected nested structure for cross-references.\n+        \"\"\"\n+        # Aggregate figure numbers from all documents under master_doc\n+        master_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        \n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                if figtype not in master_fignumbers:\n+                    master_fignumbers[figtype] = {}\n+                master_fignumbers[figtype].update(figures)\n+        \n+        return {self.config.master_doc: master_fignumbers}\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1075,31 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n+        \"\"\"Assemble toc_fignumbers to merge all documents under single docname.\n+        \n+        Returns a nested dictionary with structure:\n+        {master_doc: {figtype: {figure_id: number_tuple}}}\n+        \"\"\"\n+        # new_fignumbers structure: {master_doc: {figtype: {figure_id: number_tuple}}}\n+        new_fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize the master document entry\n+        new_fignumbers[master_doc] = {}\n+        \n+        # Iterate through all documents and their figure types\n+        for docname, fignumbers_by_type in self.env.toc_fignumbers.items():\n+            for figtype, fignumbers in fignumbers_by_type.items():\n+                # Initialize figtype in master doc if not exists\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                \n+                # Merge all figure numbers under the master document\n+                new_fignumbers[master_doc][figtype].update(fignumbers)\n+        \n+        return new_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_4": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..8335bdd36 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,54 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber while maintaining nested structure.\n         #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n+        # Note: This maintains the expected {docname: {figtype: {figure_id: number}}}\n+        #       structure that the standard domain expects, while merging all documents\n+        #       under the master document for singlehtml output.\n+        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        \n+        # Merge all figure numbers from all documents into a single nested structure\n+        for docname, fignumlist in self.env.toc_fignumbers.items():\n+            for figtype, fignums in fignumlist.items():\n+                if figtype not in new_fignumbers:\n+                    new_fignumbers[figtype] = {}\n+                \n+                for figure_id, number in fignums.items():\n+                    # Create unique figure IDs by prefixing with docname to avoid conflicts\n+                    unique_id = \"%s/%s\" % (docname, figure_id)\n+                    new_fignumbers[figtype][unique_id] = number\n+\n+        return {self.config.master_doc: new_fignumbers}\n         #       To avoid the problem, it replaces key of secnumbers to\n         #       tuple of docname and refid.\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers from all documents into a single structure\n+    # under the master document while preserving the figtype hierarchy.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # Merge all documents: {'figure': {'id1': (1,), 'id2': (2,), 'id3': (3,)}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +182,30 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        \n+        Merges all documents into the master document while preserving the\n+        expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n+        \"\"\"\n+        # Get the master document name\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize the result with master document\n+        new_fignumbers = {master_doc: {}}\n+        \n+        # Collect all figure numbers from all documents\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                # Initialize figtype in master doc if not present\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                \n+                # Merge all figures of this type into master document\n+                new_fignumbers[master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..0d97d1550 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,21 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble TOC fignumbers to merge all documents into single document.\"\"\"\n+        # Create a single master document structure that maintains the expected format\n+        master_doc = self.config.master_doc\n+        new_fignumbers = {master_doc: {}}\n+        \n+        # Merge all documents' fignumbers under the master document\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                new_fignumbers[master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1073,28 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n+        \"\"\"Assemble toc_fignumbers to single document.\n+        \n+        For singlehtml builder, merge all documents' figure numbers under the master document\n+        while maintaining the nested structure expected by the standard domain.\n+        \"\"\"\n+        # return merged toc_fignumbers for each docname\n+        new_fignumbers = {}  # type: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]\n+        \n+        # Initialize master doc entry with nested structure\n+        master_doc = self.config.master_doc\n+        new_fignumbers[master_doc] = {}\n+        \n+        # Merge all documents' figure numbers under master doc\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                new_fignumbers[master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_5": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..1ceca34a1 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,9 +101,10 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber while maintaining nested structure.\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n@@ -115,12 +116,40 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                if figtype not in new_fignumbers:\n+                    new_fignumbers[figtype] = {}\n+                for figure_id, number in fignums.items():\n+                    # Create unique figure_id by prefixing with docname to avoid conflicts\n+                    alias = \"%s/%s\" % (docname, figure_id)\n+                    new_fignumbers[figtype][alias] = number\n \n         return {self.config.master_doc: new_fignumbers}\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers from all documents into a single structure\n+    # under the master document while preserving the figtype hierarchy.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # Merge all documents' figure numbers into a single nested structure\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +183,41 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        Figures in each document are supposed to be numbered continuously.\n+        So we make to assign figure numbers to them.\n+        \n+        Returns a nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n+        For singlehtml, all figures are merged under the master document.\n+        \"\"\"\n+        # Get the master document name\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize the result structure with master document\n+        fignumbers = {master_doc: {}}\n+        \n+        # Collect all figure types used across all documents\n+        all_figtypes = set()\n+        for docname in self.env.all_docs:\n+            if docname in self.env.toc_fignumbers:\n+                all_figtypes.update(self.env.toc_fignumbers[docname].keys())\n+        \n+        # For each figure type, merge all figures from all documents\n+        for figtype in all_figtypes:\n+            fignumbers[master_doc][figtype] = {}\n+            \n+            # Collect figures from all documents for this type\n+            for docname in self.env.all_docs:\n+                if (docname in self.env.toc_fignumbers and \n+                    figtype in self.env.toc_fignumbers[docname]):\n+                    # Merge figures from this document into master document\n+                    fignumbers[master_doc][figtype].update(\n+                        self.env.toc_fignumbers[docname][figtype]\n+                    )\n+        \n+        return fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..80d5b6a3f 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,28 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        \"\"\"Assemble TOC fignumbers to merge all documents under master_doc.\n+        \n+        For singlehtml, all documents are merged into a single HTML file,\n+        so we need to consolidate all figure numbers under the master document\n+        while maintaining the expected nested structure.\n+        \"\"\"\n+        # Start with empty structure for master document\n+        new_fignumbers = {self.config.master_doc: {}}\n+        \n+        # Merge all documents' fignumbers under master_doc\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                # Initialize figtype dict if not exists\n+                if figtype not in new_fignumbers[self.config.master_doc]:\n+                    new_fignumbers[self.config.master_doc][figtype] = {}\n+                \n+                # Merge all figures of this type\n+                new_fignumbers[self.config.master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1080,31 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n+        \n+        Merges all documents into a single nested structure under the master document,\n+        maintaining the expected {docname: {figtype: {figure_id: number_tuple}}} format.\n+        \"\"\"\n+        # Initialize the structure for the master document\n+        new_fignumbers = {self.config.master_doc: {}}\n+        \n+        # Collect all figure types across all documents\n+        all_figtypes = set()\n+        for doc_fignumbers in self.env.toc_fignumbers.values():\n+            all_figtypes.update(doc_fignumbers.keys())\n+        \n+        # Initialize each figure type in the master document\n+        for figtype in all_figtypes:\n+            new_fignumbers[self.config.master_doc][figtype] = {}\n+        \n+        # Merge all figure numbers from all documents into the master document\n+        for docname, doc_fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in doc_fignumbers.items():\n+                new_fignumbers[self.config.master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_6": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..aa48bc3e1 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,9 +101,37 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber while maintaining proper structure.\n+        #\n+        # Note: Maintains the expected nested structure {docname: {figtype: {id: number}}}\n+        #       to ensure compatibility with StandardDomain.get_fignumber().\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        # Merge all documents' figure numbers under the master document\n+        for docname, fignumlist in self.env.toc_fignumbers.items():\n+            for figtype, fignums in fignumlist.items():\n+                if figtype not in new_fignumbers:\n+                    new_fignumbers[figtype] = {}\n+                for figure_id, number in fignums.items():\n+                    # Use docname/id as the key to avoid conflicts between documents\n+                    alias = \"%s/%s\" % (docname, figure_id)\n+                    new_fignumbers[figtype][alias] = number\n+\n+        return {self.config.master_doc: new_fignumbers}\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        # Merge all fignumbers to single fignumber while maintaining proper structure.\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n@@ -112,13 +140,12 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n         new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+        # Merge all documents' fignumbers under master_doc while preserving figtype structure\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n@@ -154,11 +181,28 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        Merges all figure numbers into a single nested structure under the master document.\n+        \"\"\"\n+        fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize the master document entry\n+        fignumbers[master_doc] = {}\n+        \n+        # Collect all figure numbers from all documents\n+        for docname, fignumlist in self.env.toc_fignumbers.items():\n+            for figtype, figure_ids in fignumlist.items():\n+                if figtype not in fignumbers[master_doc]:\n+                    fignumbers[master_doc][figtype] = {}\n+                \n+                # Merge figure IDs from this document\n+                for figure_id, number_tuple in figure_ids.items():\n+                    fignumbers[master_doc][figtype][figure_id] = number_tuple\n+        \n+        return fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..3d8d3d0dd 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,31 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble a mapping of figure numbers.\n+\n+        Merge all per-document figure numbers into a single structure for the master document.\n+        Returns: {master_doc: {figtype: {figure_id: number_tuple}}}\n+        \"\"\"\n+        # Start with the master document's structure\n+        master_doc = self.config.master_doc\n+        new_fignumbers = {}\n+        \n+        # Initialize the master document entry if it doesn't exist\n+        if master_doc not in new_fignumbers:\n+            new_fignumbers[master_doc] = {}\n+        \n+        # Merge all documents' figure numbers into the master document\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                \n+                # Merge all figures of this type from this document\n+                new_fignumbers[master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1083,28 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ......]]]]:\n+        \"\"\"Assemble toc_fignumbers to merge all documents into single document.\n+        \n+        For singlehtml, all documents are merged into the master document,\n+        so we need to merge all figure numbers under the master document\n+        while preserving the figtype hierarchy.\n+        \"\"\"\n+        # Start with empty structure for master document\n+        new_fignumbers = {self.config.master_doc: {}}\n+        \n+        # Merge all documents' figure numbers into master document\n+        for docname, fignumbers in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumbers.items():\n+                # Initialize figtype in master document if not present\n+                if figtype not in new_fignumbers[self.config.master_doc]:\n+                    new_fignumbers[self.config.master_doc][figtype] = {}\n+                \n+                # Merge all figures of this type into master document\n+                new_fignumbers[self.config.master_doc][figtype].update(figures)\n+        \n+        return new_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_7": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..a3e605c8e 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,9 +101,40 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        # Merge all fignumbers to single document while preserving figtype structure.\n+        #\n+        # Note: Maintains the nested structure expected by get_fignumber():\n+        #       {docname: {figtype: {figure_id: number_tuple}}}\n+        #       All documents are merged under master_doc to avoid refid conflicts.\n+        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        \n+        # Merge all documents' figure numbers under master_doc\n+        master_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        \n+        for docname, fignumlist in self.env.toc_fignumbers.items():\n+            for figtype, fignums in fignumlist.items():\n+                if figtype not in master_fignumbers:\n+                    master_fignumbers[figtype] = {}\n+                \n+                for figure_id, number_tuple in fignums.items():\n+                    # Create unique figure_id by prefixing with docname to avoid conflicts\n+                    unique_id = \"%s/%s\" % (docname, figure_id)\n+                    master_fignumbers[figtype][unique_id] = number_tuple\n+\n+        return {self.config.master_doc: master_fignumbers}\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber under master_doc while\n+        # maintaining the expected nested structure: {docname: {figtype: {id: number}}}\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n@@ -112,13 +143,12 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n         new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+        # Merge all documents' figure numbers by figtype\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n@@ -154,11 +184,27 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] :\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers in single document.\n+        \n+        Merges all figure numbers from different documents into a single nested structure\n+        under the master document, maintaining the expected format for get_fignumber.\n+        \"\"\"\n+        fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize the master document entry\n+        fignumbers[master_doc] = {}\n+        \n+        # Merge all figure numbers from all documents\n+        for docname, fignumdict in self.env.toc_fignumbers.items():\n+            for figtype, figures in fignumdict.items():\n+                if figtype not in fignumbers[master_doc]:\n+                    fignumbers[master_doc][figtype] = {}\n+                fignumbers[master_doc][figtype].update(figures)\n+        \n+        return fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..30f79766d 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,17 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n+        except (ValueError, KeyError, IndexError):\n             logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                            location=node)\n             return contnode\n \n         try:\n-            if node['refexplicit']:\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1069,29 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers for singlehtml.\n+        \n+        For singlehtml, all documents are merged into one, so we need to create\n+        a structure where all figure numbers are accessible under the master document\n+        while maintaining the expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n+        \"\"\"\n+        # Create the structure under master_doc\n+        master_fignumbers = {}\n+        \n+        # Iterate through all documents and their figure types\n+        for docname, figtype_dict in self.env.toc_fignumbers.items():\n+            for figtype, figure_dict in figtype_dict.items():\n+                # Initialize figtype in master_fignumbers if not present\n+                if figtype not in master_fignumbers:\n+                    master_fignumbers[figtype] = {}\n+                \n+                # Add all figures from this docname/figtype to the master\n+                master_fignumbers[figtype].update(figure_dict)\n+        \n+        # Return the nested structure with all figures under master_doc\n+        return {self.config.master_doc: master_fignumbers}\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n",
    "variant_8": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..ead0c4574 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,9 +101,10 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+        # Merge all fignumbers to single fignumber while maintaining proper structure.\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n@@ -115,12 +116,39 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                if figtype not in new_fignumbers:\n+                    new_fignumbers[figtype] = {}\n+                for figure_id, number in fignums.items():\n+                    # Create unique figure_id to avoid conflicts across documents\n+                    alias = \"%s/%s\" % (docname, figure_id)\n+                    new_fignumbers[figtype][alias] = number\n \n         return {self.config.master_doc: new_fignumbers}\n+        #       To avoid the problem, it replaces key of secnumbers to\n+        #       tuple of docname and refid.\n+        #\n+        #       There are related codes in inline_all_toctres() and\n+        #       HTMLTranslter#add_fignumber().\n+\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber while maintaining proper structure.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # Merge all documents' figure numbers into a single nested structure\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +182,29 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+        Merges all figure numbers from all documents into a single structure\n+        under the master document while preserving the nested hierarchy.\n+        \"\"\"\n+        fignumbers = {}\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize master document structure\n+        fignumbers[master_doc] = {}\n+        \n+        # Collect all figure numbers from all documents\n+        for docname, figtype_dict in self.env.toc_fignumbers.items():\n+            for figtype, figure_dict in figtype_dict.items():\n+                # Initialize figtype if not exists\n+                if figtype not in fignumbers[master_doc]:\n+                    fignumbers[master_doc][figtype] = {}\n+                \n+                # Merge figure numbers for this figtype\n+                fignumbers[master_doc][figtype].update(figure_dict)\n+        \n+        return fignumbers\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..e29fac32b 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,17 +847,30 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n \n-        try:\n-            if node['refexplicit']:\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble TOC fignumbers to merge all documents under the master document.\n+        \n+        For singlehtml builder, all documents are merged into one, so we need to\n+        consolidate all figure numbers under the master document while maintaining\n+        the expected nested structure: {docname: {figtype: {figure_id: number_tuple}}}\n+        \"\"\"\n+        # Get the original toc_fignumbers structure\n+        new_fignumbers: Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]] = {}\n+        master_doc = self.config.master_doc\n+        \n+        # Initialize the master document entry\n+        new_fignumbers[master_doc] = {}\n+        \n+        # Merge all documents' figure numbers under the master document\n+        for docname, figtype_dict in self.env.toc_fignumbers.items():\n+            for figtype, figure_dict in figtype_dict.items():\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                # Merge all figures of this type from all documents\n+                new_fignumbers[master_doc][figtype].update(figure_dict)\n+        \n+        return new_fignumbers\n                 title = contnode.astext()\n             else:\n                 title = env.config.numfig_format.get(figtype, '')\n@@ -1069,14 +1082,25 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n-        else:\n-            try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n-                # target_node is found, but fignumber is not assigned.\n-                # Maybe it is defined in orphaned document.\n-                raise ValueError from exc\n+\n+    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]]:\n+        \"\"\"Assemble toc_fignumbers to all documents for singlehtml builder.\n+        \n+        Merges all figure numbers from all documents into a single structure\n+        under the master document while maintaining the expected nested format:\n+        {master_doc: {figtype: {figure_id: number_tuple}}}\n+        \"\"\"\n+        new_fignumbers = {}\n+        master_doc = self.config.master_doc\n+        new_fignumbers[master_doc] = {}\n+        \n+        for docname, fignumbers_of_doc in self.env.toc_fignumbers.items():\n+            for figtype, fignumbers in fignumbers_of_doc.items():\n+                if figtype not in new_fignumbers[master_doc]:\n+                    new_fignumbers[master_doc][figtype] = {}\n+                new_fignumbers[master_doc][figtype].update(fignumbers)\n+        \n+        return new_fignumbers\n \n     def get_full_qualified_name(self, node: Element) -> str:\n         if node.get('reftype') == 'option':\n"
  }
}