{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 897-899)": "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
    "Location 2 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 968-986)": "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            # Generate the auto-generated name that would be created for the old fields\n            old_auto_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Find the index with the new name in the from_state\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Create a temporary index object with the old auto-generated name\n            old_index = new_index.clone()\n            old_index.name = old_auto_name\n            \n            schema_editor.rename_index(model, new_index, old_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
    "Location 3 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 997-1005)": "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
    "Location 4 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 1007-1020)": "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 897-899)": [
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 968-986)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            # Find the current index with new_name and rename it back to auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            current_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Generate the auto-generated name that the original unnamed index would have\n            auto_generated_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Create a temporary index object with the auto-generated name\n            from django.db import models\n            restored_index = models.Index(fields=list(self.old_fields), name=auto_generated_name)\n            \n            schema_editor.rename_index(model, current_index, restored_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            # Generate the auto-generated name that would be created for the old fields\n            old_auto_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Find the index with the new name and rename it back\n            to_model_state = to_state.models[app_label, self.model_name_lower]\n            new_index = to_model_state.get_index_by_name(self.new_name)\n            \n            # Create a temporary index object with the auto-generated name\n            old_index = new_index.clone()\n            old_index.name = old_auto_name\n            \n            schema_editor.rename_index(model, new_index, old_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            # Find the current index with the new name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            current_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Generate what the auto-generated name would be\n            auto_generated_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Create a temporary index object with the auto-generated name\n            old_index = current_index.clone()\n            old_index.name = auto_generated_name\n            \n            schema_editor.rename_index(model, current_index, old_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            # Find the current index with the new name and rename it back to auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            old_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Generate what the auto-generated name would be for the old fields\n            auto_generated_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Create a temporary index object with the auto-generated name\n            from django.db.models import Index\n            new_index = Index(fields=list(self.old_fields), name=auto_generated_name)\n            \n            schema_editor.rename_index(model, old_index, new_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            # Find the index that currently has the new name\n            current_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Generate the auto-generated name that would be created for the old fields\n            auto_generated_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Create a temporary index object with the auto-generated name\n            from django.db import models\n            restored_index = models.Index(\n                fields=list(self.old_fields),\n                name=auto_generated_name\n            )\n            \n            schema_editor.rename_index(model, current_index, restored_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            # Generate the auto-generated name that would be created for the old fields\n            auto_generated_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Find the current index with the new name and rename it back\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            current_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Create a temporary index object with the auto-generated name\n            old_index = current_index.clone()\n            old_index.name = auto_generated_name\n            \n            schema_editor.rename_index(model, current_index, old_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            # Generate the auto-generated name that would be created for the old_fields\n            old_auto_name = schema_editor._create_index_name(\n                model._meta.db_table, self.old_fields, suffix=\"\"\n            )\n            \n            # Find the index with the new name and rename it back\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Create a temporary index object with the old auto-generated name\n            old_index = new_index.clone()\n            old_index.name = old_auto_name\n            \n            schema_editor.rename_index(model, new_index, old_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, we need to restore the original auto-generated name\n            # by finding the index with the new name and renaming it back to auto-generated name\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n                return\n            \n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            # Find the index that matches our old_fields\n            matching_index_name = None\n            for index in from_model_state.indexes:\n                if (\n                    index.fields == list(self.old_fields) and \n                    not index.name  # This was originally unnamed\n                ):\n                    # Generate the auto-generated name that would be created\n                    matching_index_name = schema_editor._create_index_name(\n                        model._meta.db_table, self.old_fields, suffix=\"\"\n                    )\n                    break\n            \n            if matching_index_name:\n                # Create a temporary index object with the auto-generated name\n                from django.db import models\n                old_index = models.Index(fields=self.old_fields, name=matching_index_name)\n                to_model_state = to_state.models[app_label, self.model_name_lower]\n                new_index = to_model_state.get_index_by_name(self.new_name)\n                schema_editor.rename_index(model, new_index, old_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n"
    ],
    "Location 3 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 997-1005)": [
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n",
      "\n    @property\n    def migration_name_fragment(self):\n        if self.old_name:\n            return \"rename_%s_%s\" % (self.old_name_lower, self.new_name_lower)\n        return \"rename_%s_%s_%s\" % (\n            self.model_name_lower,\n            \"_\".join(self.old_fields),\n            self.new_name_lower,\n        )\n"
    ],
    "Location 4 (/root/hy/projects_4/django/django/db/migrations/operations/models.py lines 1007-1020)": [
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n",
      "\n    def reduce(self, operation, app_label):\n        if (\n            isinstance(operation, RenameIndex)\n            and self.model_name_lower == operation.model_name_lower\n            and operation.old_name\n            and self.old_name\n            and self.new_name_lower == operation.old_name_lower\n        ):\n            return [\n                RenameIndex(\n                    self.model_name,\n                    new_name=operation.new_name,\n                    old_name=self.old_name,\n                    old_fields=self.old_fields,\n                )\n            ]\n        return super().reduce(operation, app_label)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..f15df669f7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,22 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Generate the auto-generated name that would be created for the old_fields\n+            old_auto_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Rename from new_name back to the auto-generated name\n+            schema_editor.rename_index(model, self.new_name, old_auto_name)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +997,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1007,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1018,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..541ee44243 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,29 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Generate the auto-generated name that would be created for the old fields\n+            old_auto_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Find the index with the new name in the from_state\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Create a temporary index object with the old auto-generated name\n+            old_index = new_index.clone()\n+            old_index.name = old_auto_name\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1004,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1014,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1025,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1043,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..165b332ac3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,29 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Find the current index with new_name and rename it back to auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            current_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Generate the auto-generated name that the original unnamed index would have\n+            auto_generated_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Create a temporary index object with the auto-generated name\n+            from django.db import models\n+            restored_index = models.Index(fields=list(self.old_fields), name=auto_generated_name)\n+            \n+            schema_editor.rename_index(model, current_index, restored_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1004,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1014,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1025,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1043,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..809648ebb7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,29 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Generate the auto-generated name that would be created for the old fields\n+            old_auto_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Find the index with the new name and rename it back\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            new_index = to_model_state.get_index_by_name(self.new_name)\n+            \n+            # Create a temporary index object with the auto-generated name\n+            old_index = new_index.clone()\n+            old_index.name = old_auto_name\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1004,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1014,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1025,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1043,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..9192ee1de7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,29 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Find the current index with the new name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            current_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Generate what the auto-generated name would be\n+            auto_generated_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Create a temporary index object with the auto-generated name\n+            old_index = current_index.clone()\n+            old_index.name = auto_generated_name\n+            \n+            schema_editor.rename_index(model, current_index, old_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1004,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1014,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1025,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1043,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..5e3fb1396b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,29 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Find the current index with the new name and rename it back to auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            old_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Generate what the auto-generated name would be for the old fields\n+            auto_generated_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Create a temporary index object with the auto-generated name\n+            from django.db.models import Index\n+            new_index = Index(fields=list(self.old_fields), name=auto_generated_name)\n+            \n+            schema_editor.rename_index(model, old_index, new_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1004,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1014,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1025,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1043,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..b1e7f4c479 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,32 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            # Find the index that currently has the new name\n+            current_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Generate the auto-generated name that would be created for the old fields\n+            auto_generated_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Create a temporary index object with the auto-generated name\n+            from django.db import models\n+            restored_index = models.Index(\n+                fields=list(self.old_fields),\n+                name=auto_generated_name\n+            )\n+            \n+            schema_editor.rename_index(model, current_index, restored_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1007,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1017,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1028,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1046,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..4714e95cb7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,29 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Generate the auto-generated name that would be created for the old fields\n+            auto_generated_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Find the current index with the new name and rename it back\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            current_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Create a temporary index object with the auto-generated name\n+            old_index = current_index.clone()\n+            old_index.name = auto_generated_name\n+            \n+            schema_editor.rename_index(model, current_index, old_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1004,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1014,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1025,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1043,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..4d8529d3d7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,29 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            # Generate the auto-generated name that would be created for the old_fields\n+            old_auto_name = schema_editor._create_index_name(\n+                model._meta.db_table, self.old_fields, suffix=\"\"\n+            )\n+            \n+            # Find the index with the new name and rename it back\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Create a temporary index object with the old auto-generated name\n+            old_index = new_index.clone()\n+            old_index.name = old_auto_name\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1004,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1014,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1025,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1043,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..3fbbb62ae3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,9 +966,36 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, we need to restore the original auto-generated name\n+            # by finding the index with the new name and renaming it back to auto-generated name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+            \n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            # Find the index that matches our old_fields\n+            matching_index_name = None\n+            for index in from_model_state.indexes:\n+                if (\n+                    index.fields == list(self.old_fields) and \n+                    not index.name  # This was originally unnamed\n+                ):\n+                    # Generate the auto-generated name that would be created\n+                    matching_index_name = schema_editor._create_index_name(\n+                        model._meta.db_table, self.old_fields, suffix=\"\"\n+                    )\n+                    break\n+            \n+            if matching_index_name:\n+                # Create a temporary index object with the auto-generated name\n+                from django.db import models\n+                old_index = models.Index(fields=self.old_fields, name=matching_index_name)\n+                to_model_state = to_state.models[app_label, self.model_name_lower]\n+                new_index = to_model_state.get_index_by_name(self.new_name)\n+                schema_editor.rename_index(model, new_index, old_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -983,7 +1011,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n@@ -994,6 +1021,7 @@ class RenameIndex(IndexOperation):\n             f\"{self.new_name}\"\n         )\n \n+\n     @property\n     def migration_name_fragment(self):\n         if self.old_name:\n@@ -1004,11 +1032,13 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n \n+\n     def reduce(self, operation, app_label):\n         if (\n             isinstance(operation, RenameIndex)\n             and self.model_name_lower == operation.model_name_lower\n             and operation.old_name\n+            and self.old_name\n             and self.new_name_lower == operation.old_name_lower\n         ):\n             return [\n@@ -1020,6 +1050,8 @@ class RenameIndex(IndexOperation):\n                 )\n             ]\n         return super().reduce(operation, app_label)\n+            ]\n+        return super().reduce(operation, app_label)\n \n \n class AddConstraint(IndexOperation):\n"
  }
}