{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/core/checks/model_checks.py lines 1-8)": "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
    "Location 2 (/root/hy/projects_4/django/django/core/checks/model_checks.py lines 10-22)": "\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    from django.db import router\n    \n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Group by both table name and target database\n            target_db = router.db_for_read(model) or 'default'\n            db_key = (model._meta.db_table, target_db)\n            db_table_models[db_key].append(model._meta.label)\n",
    "Location 3 (/root/hy/projects_4/django/django/core/checks/model_checks.py lines 38-47)": "\n    for db_table, model_db_pairs in db_table_models.items():\n        # Group models by database for this table name\n        db_models = defaultdict(list)\n        for model_label, target_db in model_db_pairs:\n            db_models[target_db].append(model_label)\n        \n        # Only report conflicts when multiple models target the same database\n        for target_db, model_labels in db_models.items():\n            if len(model_labels) > 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/core/checks/model_checks.py lines 1-8)": [
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/core/checks/model_checks.py lines 10-22)": [
      "\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    from django.db import router\n    \n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Get the target database for this model\n            target_db = router.db_for_read(model) or 'default'\n            # Group by both table name and target database\n            db_table_models[(model._meta.db_table, target_db)].append(model._meta.label)\n",
      "\nfrom django.db import router\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Get the target database for this model\n            target_db = router.db_for_read(model) or 'default'\n            # Group by both table name and target database\n            db_table_models[(model._meta.db_table, target_db)].append(model._meta.label)\n",
      "\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    from django.db import router\n    \n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Group models by both table name and target database\n            target_db = router.db_for_read(model) or 'default'\n            db_table_key = (model._meta.db_table, target_db)\n            db_table_models[db_table_key].append(model._meta.label)\n",
      "\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    from django.db import router\n    \n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Group by both table name and target database to avoid false conflicts\n            target_db = router.db_for_read(model) or 'default'\n            db_table_key = (model._meta.db_table, target_db)\n            db_table_models[db_table_key].append(model._meta.label)\n",
      "\nfrom django.db import router\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Group by both table name and target database\n            target_db = router.db_for_read(model)\n            db_table_models[(model._meta.db_table, target_db)].append(model._meta.label)\n",
      "\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    from django.db import router\n    \n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Group models by both table name and target database\n            target_db = router.db_for_read(model) or 'default'\n            db_table_key = (model._meta.db_table, target_db)\n            db_table_models[db_table_key].append(model._meta.label)\n",
      "\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    from django.db import router\n    \n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Group models by both table name and target database\n            target_db = router.db_for_read(model) or 'default'\n            db_table_key = (model._meta.db_table, target_db)\n            db_table_models[db_table_key].append(model._meta.label)\n",
      "\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    from django.db import router\n    \n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            # Group models by both table name and target database\n            target_db = router.db_for_read(model) or 'default'\n            db_table_key = (model._meta.db_table, target_db)\n            db_table_models[db_table_key].append(model._meta.label)\n"
    ],
    "Location 3 (/root/hy/projects_4/django/django/core/checks/model_checks.py lines 38-47)": [
      "\n    for db_table, model_db_pairs in db_table_models.items():\n        # Group models by database for this table name\n        db_grouped_models = defaultdict(list)\n        for model_label, target_db in model_db_pairs:\n            db_grouped_models[target_db].append(model_label)\n        \n        # Only flag error if multiple models use same table in same database\n        for target_db, model_labels in db_grouped_models.items():\n            if len(model_labels) > 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_table, db_models in db_table_models.items():\n        # Group models by database to only flag conflicts within the same database\n        models_by_db = defaultdict(list)\n        for model_label in db_models:\n            # Get the model class from the label\n            app_label, model_name = model_label.split('.')\n            model = apps.get_model(app_label, model_name)\n            # Determine which database this model uses\n            db_alias = router.db_for_read(model) or 'default'\n            models_by_db[db_alias].append(model_label)\n        \n        # Only report conflicts when multiple models use the same table in the same database\n        for db_alias, model_labels in models_by_db.items():\n            if len(model_labels) > 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    # Group models by both db_table and target database to avoid false conflicts\n    # in multi-database setups where different models use same table names\n    # across different databases\n    for db_table_and_db, model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            db_table, target_db = db_table_and_db\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models: %s.\"\n                    % (db_table, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    # Group models by both db_table and target database to avoid false conflicts\n    # in multi-database setups where different models use same table name\n    # but target different databases\n    from django.db import router\n    \n    for db_table_and_db, model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            db_table, target_db = db_table_and_db\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models: %s.\"\n                    % (db_table, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    # Group models by both db_table and target database\n    db_table_models = defaultdict(list)\n    for model in all_models:\n        if not inspect.isclass(model):\n            continue\n        if model._meta.managed and not model._meta.proxy:\n            # Determine which database this model targets\n            target_db = router.db_for_read(model) or 'default'\n            # Use compound key: (db_table, database)\n            key = (model._meta.db_table, target_db)\n            db_table_models[key].append(model._meta.label)\n        for model_index in model._meta.indexes:\n            indexes[model_index.name].append(model._meta.label)\n        for model_constraint in model._meta.constraints:\n            constraints[model_constraint.name].append(model._meta.label)\n    \n    # Check for db_table conflicts within the same database\n    for (db_table, database), model_labels in db_table_models.items():\n        if len(model_labels) > 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models: %s.\"\n                    % (db_table, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for db_table, model_db_pairs in db_table_models.items():\n        # Group by database to check for conflicts within the same database\n        db_groups = defaultdict(list)\n        for model_label, target_db in model_db_pairs:\n            db_groups[target_db].append(model_label)\n        \n        # Only report error if multiple models use same table in same database\n        for target_db, model_labels in db_groups.items():\n            if len(model_labels) > 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_table, db_models in db_table_models.items():\n        # Group models by database to only check conflicts within the same database\n        db_grouped_models = defaultdict(list)\n        for model_label in db_models:\n            # Get the model class from the label\n            app_label, model_name = model_label.split('.')\n            model_class = apps.get_model(app_label, model_name)\n            # Determine which database this model uses\n            target_db = router.db_for_read(model_class) or 'default'\n            db_grouped_models[target_db].append(model_label)\n        \n        # Only report conflicts for models targeting the same database\n        for target_db, model_labels in db_grouped_models.items():\n            if len(model_labels) > 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_table, model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models: %s.\"\n                    % (db_table, ', '.join(sorted(model_labels))),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..e6c8672f7a 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,6 +6,8 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n \n \n @register(Tags.models)\n@@ -19,7 +22,8 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_read(model)\n+            db_table_models[(model._meta.db_table, db_alias)].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +39,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_table, db_alias), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_0": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..da217056e3 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,10 +6,13 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    from django.db import router\n+    \n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Group by both table name and target database\n+            target_db = router.db_for_read(model) or 'default'\n+            db_key = (model._meta.db_table, target_db)\n+            db_table_models[db_key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +42,24 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_table, model_db_pairs in db_table_models.items():\n+        # Group models by database for this table name\n+        db_models = defaultdict(list)\n+        for model_label, target_db in model_db_pairs:\n+            db_models[target_db].append(model_label)\n+        \n+        # Only report conflicts when multiple models target the same database\n+        for target_db, model_labels in db_models.items():\n+            if len(model_labels) > 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_1": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..ddf95e7c6d 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,10 +6,13 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    from django.db import router\n+    \n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Get the target database for this model\n+            target_db = router.db_for_read(model) or 'default'\n+            # Group by both table name and target database\n+            db_table_models[(model._meta.db_table, target_db)].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +42,24 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_table, model_db_pairs in db_table_models.items():\n+        # Group models by database for this table name\n+        db_grouped_models = defaultdict(list)\n+        for model_label, target_db in model_db_pairs:\n+            db_grouped_models[target_db].append(model_label)\n+        \n+        # Only flag error if multiple models use same table in same database\n+        for target_db, model_labels in db_grouped_models.items():\n+            if len(model_labels) > 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_2": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..9b53e27748 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,7 +6,10 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n \n+from django.db import router\n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Get the target database for this model\n+            target_db = router.db_for_read(model) or 'default'\n+            # Group by both table name and target database\n+            db_table_models[(model._meta.db_table, target_db)].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +42,29 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_table, db_models in db_table_models.items():\n+        # Group models by database to only flag conflicts within the same database\n+        models_by_db = defaultdict(list)\n+        for model_label in db_models:\n+            # Get the model class from the label\n+            app_label, model_name = model_label.split('.')\n+            model = apps.get_model(app_label, model_name)\n+            # Determine which database this model uses\n+            db_alias = router.db_for_read(model) or 'default'\n+            models_by_db[db_alias].append(model_label)\n+        \n+        # Only report conflicts when multiple models use the same table in the same database\n+        for db_alias, model_labels in models_by_db.items():\n+            if len(model_labels) > 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_3": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..b083ea91b7 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,10 +6,13 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    from django.db import router\n+    \n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Group models by both table name and target database\n+            target_db = router.db_for_read(model) or 'default'\n+            db_table_key = (model._meta.db_table, target_db)\n+            db_table_models[db_table_key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +42,17 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    # Group models by both db_table and target database to avoid false conflicts\n+    # in multi-database setups where different models use same table names\n+    # across different databases\n+    for db_table_and_db, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n+            db_table, target_db = db_table_and_db\n             errors.append(\n                 Error(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_4": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..d9b758fe2e 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,10 +6,13 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    from django.db import router\n+    \n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Group by both table name and target database to avoid false conflicts\n+            target_db = router.db_for_read(model) or 'default'\n+            db_table_key = (model._meta.db_table, target_db)\n+            db_table_models[db_table_key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +42,19 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    # Group models by both db_table and target database to avoid false conflicts\n+    # in multi-database setups where different models use same table name\n+    # but target different databases\n+    from django.db import router\n+    \n+    for db_table_and_db, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n+            db_table, target_db = db_table_and_db\n             errors.append(\n                 Error(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_5": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..7b98be6abd 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,7 +6,10 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n \n+from django.db import router\n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n@@ -19,7 +23,9 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Group by both table name and target database\n+            target_db = router.db_for_read(model)\n+            db_table_models[(model._meta.db_table, target_db)].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +41,30 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n+\n+    # Group models by both db_table and target database\n+    db_table_models = defaultdict(list)\n+    for model in all_models:\n+        if not inspect.isclass(model):\n+            continue\n+        if model._meta.managed and not model._meta.proxy:\n+            # Determine which database this model targets\n+            target_db = router.db_for_read(model) or 'default'\n+            # Use compound key: (db_table, database)\n+            key = (model._meta.db_table, target_db)\n+            db_table_models[key].append(model._meta.label)\n+        for model_index in model._meta.indexes:\n+            indexes[model_index.name].append(model._meta.label)\n+        for model_constraint in model._meta.constraints:\n+            constraints[model_constraint.name].append(model._meta.label)\n+    \n+    # Check for db_table conflicts within the same database\n+    for (db_table, database), model_labels in db_table_models.items():\n+        if len(model_labels) > 1:\n             errors.append(\n                 Error(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_6": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..beb07bc91c 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,10 +6,13 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    from django.db import router\n+    \n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Group models by both table name and target database\n+            target_db = router.db_for_read(model) or 'default'\n+            db_table_key = (model._meta.db_table, target_db)\n+            db_table_models[db_table_key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +42,24 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_table, model_db_pairs in db_table_models.items():\n+        # Group by database to check for conflicts within the same database\n+        db_groups = defaultdict(list)\n+        for model_label, target_db in model_db_pairs:\n+            db_groups[target_db].append(model_label)\n+        \n+        # Only report error if multiple models use same table in same database\n+        for target_db, model_labels in db_groups.items():\n+            if len(model_labels) > 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_7": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..b1c8be978b 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,10 +6,13 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    from django.db import router\n+    \n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Group models by both table name and target database\n+            target_db = router.db_for_read(model) or 'default'\n+            db_table_key = (model._meta.db_table, target_db)\n+            db_table_models[db_table_key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +42,29 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_table, db_models in db_table_models.items():\n+        # Group models by database to only check conflicts within the same database\n+        db_grouped_models = defaultdict(list)\n+        for model_label in db_models:\n+            # Get the model class from the label\n+            app_label, model_name = model_label.split('.')\n+            model_class = apps.get_model(app_label, model_name)\n+            # Determine which database this model uses\n+            target_db = router.db_for_read(model_class) or 'default'\n+            db_grouped_models[target_db].append(model_label)\n+        \n+        # Only report conflicts for models targeting the same database\n+        for target_db, model_labels in db_grouped_models.items():\n+            if len(model_labels) > 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_8": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..0cf187aa22 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -5,10 +6,13 @@ from itertools import chain\n \n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    from django.db import router\n+    \n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +23,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Group models by both table name and target database\n+            target_db = router.db_for_read(model) or 'default'\n+            db_table_key = (model._meta.db_table, target_db)\n+            db_table_models[db_table_key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +42,14 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n+\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n+            model_labels = set(model_labels)\n             errors.append(\n                 Error(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, ', '.join(sorted(model_labels))),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n"
  }
}