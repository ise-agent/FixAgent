{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/flask/src/flask/config.py lines 232-237)": "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
    "Location 2 (/root/hy/projects_4/flask/src/flask/config.py lines 264-264)": "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
    "Location 3 (/root/hy/projects_4/flask/src/flask/config.py lines 238-260)": "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/flask/src/flask/config.py lines 232-237)": [
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n"
    ],
    "Location 2 (/root/hy/projects_4/flask/src/flask/config.py lines 264-264)": [
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\ndef from_file(\n    self,\n    filename: str,\n    load: t.Callable[[t.IO[t.Any]], t.Mapping],\n    silent: bool = False,\n    mode: str = 'r',\n) -> bool:\n    \"\"\"Update the values in the config from a file that is loaded\n    using the ``load`` parameter. The loaded data is passed to the\n    :meth:`from_mapping` method.\n\n    .. code-block:: python\n\n        import json\n        app.config.from_file(\"config.json\", load=json.load)\n\n        import tomllib\n        app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n        import toml\n        app.config.from_file(\"config.toml\", load=toml.load)\n\n    :param filename: The path to the data file. This can be an\n        absolute path or relative to the config root path.\n    :param load: A callable that takes a file handle and returns a\n        mapping of loaded data from the file.\n    :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n        implements a ``read`` method.\n    :param silent: Ignore the file if it doesn't exist.\n    :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n        Use 'rb' for binary mode when using loaders like tomllib.load.\n    :return: ``True`` if the file was loaded successfully.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    filename = os.path.join(self.root_path, filename)\n\n    try:\n        with open(filename, mode) as f:\n            obj = load(f)\n    except OSError as e:\n        if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n            return False\n\n        e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n        raise\n\n    return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n",
      "\ndef from_file(\n    self,\n    filename: str,\n    load: t.Callable[[t.IO[t.Any]], t.Mapping],\n    silent: bool = False,\n    mode: str = 'r',\n) -> bool:\n    \"\"\"Update the values in the config from a file that is loaded\n    using the ``load`` parameter. The loaded data is passed to the\n    :meth:`from_mapping` method.\n\n    .. code-block:: python\n\n        import json\n        app.config.from_file(\"config.json\", load=json.load)\n\n        import tomllib\n        app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n        import toml\n        app.config.from_file(\"config.toml\", load=toml.load)\n\n    :param filename: The path to the data file. This can be an\n        absolute path or relative to the config root path.\n    :param load: A callable that takes a file handle and returns a\n        mapping of loaded data from the file.\n    :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n        implements a ``read`` method.\n    :param silent: Ignore the file if it doesn't exist.\n    :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n        Use 'rb' for binary mode when using loaders like tomllib.load.\n    :return: ``True`` if the file was loaded successfully.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    filename = os.path.join(self.root_path, filename)\n\n    try:\n        with open(filename, mode) as f:\n            obj = load(f)\n    except OSError as e:\n        if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n            return False\n\n        e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n        raise\n\n    return self.from_mapping(obj)\n",
      "\ndef from_file(\n    self,\n    filename: str,\n    load: t.Callable[[t.IO[t.Any]], t.Mapping],\n    silent: bool = False,\n    mode: str = 'r',\n) -> bool:\n    \"\"\"Update the values in the config from a file that is loaded\n    using the ``load`` parameter. The loaded data is passed to the\n    :meth:`from_mapping` method.\n\n    .. code-block:: python\n\n        import json\n        app.config.from_file(\"config.json\", load=json.load)\n\n        import tomllib\n        app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n        import toml\n        app.config.from_file(\"config.toml\", load=toml.load)\n\n    :param filename: The path to the data file. This can be an\n        absolute path or relative to the config root path.\n    :param load: A callable that takes a file handle and returns a\n        mapping of loaded data from the file.\n    :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n        implements a ``read`` method.\n    :param silent: Ignore the file if it doesn't exist.\n    :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n        Use 'rb' for binary mode when using loaders like tomllib.load.\n    :return: ``True`` if the file was loaded successfully.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    filename = os.path.join(self.root_path, filename)\n\n    try:\n        with open(filename, mode) as f:\n            obj = load(f)\n    except OSError as e:\n        if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n            return False\n\n        e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n        raise\n\n    return self.from_mapping(obj)\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n"
    ],
    "Location 3 (/root/hy/projects_4/flask/src/flask/config.py lines 238-260)": [
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n",
      "\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = 'r',\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n            Use 'rb' for binary mode when using loaders like tomllib.load.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..a24d1d3e 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,12 +229,15 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n+\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n         :meth:`from_mapping` method.\n@@ -244,6 +247,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +260,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +269,8 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_0": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..31f682fb 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,110 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +343,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +356,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +365,16 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_1": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..31f682fb 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,110 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +343,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +356,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +365,16 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_2": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..3bc71dd5 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,61 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +294,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +307,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +316,65 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n+def from_file(\n+    self,\n+    filename: str,\n+    load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+    silent: bool = False,\n+    mode: str = 'r',\n+) -> bool:\n+    \"\"\"Update the values in the config from a file that is loaded\n+    using the ``load`` parameter. The loaded data is passed to the\n+    :meth:`from_mapping` method.\n+\n+    .. code-block:: python\n+\n+        import json\n+        app.config.from_file(\"config.json\", load=json.load)\n+\n+        import tomllib\n+        app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+        import toml\n+        app.config.from_file(\"config.toml\", load=toml.load)\n+\n+    :param filename: The path to the data file. This can be an\n+        absolute path or relative to the config root path.\n+    :param load: A callable that takes a file handle and returns a\n+        mapping of loaded data from the file.\n+    :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+        implements a ``read`` method.\n+    :param silent: Ignore the file if it doesn't exist.\n+    :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+        Use 'rb' for binary mode when using loaders like tomllib.load.\n+    :return: ``True`` if the file was loaded successfully.\n+\n+    .. versionadded:: 2.0\n+    \"\"\"\n+    filename = os.path.join(self.root_path, filename)\n+\n+    try:\n+        with open(filename, mode) as f:\n+            obj = load(f)\n+    except OSError as e:\n+        if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+            return False\n+\n+        e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        raise\n+\n+    return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_3": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..31f682fb 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,110 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +343,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +356,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +365,16 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_4": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..30d2d594 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,110 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +343,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +356,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +365,16 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_5": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..31f682fb 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,110 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +343,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +356,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +365,16 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_6": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..3bc71dd5 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,61 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +294,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +307,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +316,65 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n+def from_file(\n+    self,\n+    filename: str,\n+    load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+    silent: bool = False,\n+    mode: str = 'r',\n+) -> bool:\n+    \"\"\"Update the values in the config from a file that is loaded\n+    using the ``load`` parameter. The loaded data is passed to the\n+    :meth:`from_mapping` method.\n+\n+    .. code-block:: python\n+\n+        import json\n+        app.config.from_file(\"config.json\", load=json.load)\n+\n+        import tomllib\n+        app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+        import toml\n+        app.config.from_file(\"config.toml\", load=toml.load)\n+\n+    :param filename: The path to the data file. This can be an\n+        absolute path or relative to the config root path.\n+    :param load: A callable that takes a file handle and returns a\n+        mapping of loaded data from the file.\n+    :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+        implements a ``read`` method.\n+    :param silent: Ignore the file if it doesn't exist.\n+    :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+        Use 'rb' for binary mode when using loaders like tomllib.load.\n+    :return: ``True`` if the file was loaded successfully.\n+\n+    .. versionadded:: 2.0\n+    \"\"\"\n+    filename = os.path.join(self.root_path, filename)\n+\n+    try:\n+        with open(filename, mode) as f:\n+            obj = load(f)\n+    except OSError as e:\n+        if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+            return False\n+\n+        e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        raise\n+\n+    return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_7": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..3bc71dd5 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,61 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +294,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +307,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +316,65 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n+def from_file(\n+    self,\n+    filename: str,\n+    load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+    silent: bool = False,\n+    mode: str = 'r',\n+) -> bool:\n+    \"\"\"Update the values in the config from a file that is loaded\n+    using the ``load`` parameter. The loaded data is passed to the\n+    :meth:`from_mapping` method.\n+\n+    .. code-block:: python\n+\n+        import json\n+        app.config.from_file(\"config.json\", load=json.load)\n+\n+        import tomllib\n+        app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+        import toml\n+        app.config.from_file(\"config.toml\", load=toml.load)\n+\n+    :param filename: The path to the data file. This can be an\n+        absolute path or relative to the config root path.\n+    :param load: A callable that takes a file handle and returns a\n+        mapping of loaded data from the file.\n+    :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+        implements a ``read`` method.\n+    :param silent: Ignore the file if it doesn't exist.\n+    :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+        Use 'rb' for binary mode when using loaders like tomllib.load.\n+    :return: ``True`` if the file was loaded successfully.\n+\n+    .. versionadded:: 2.0\n+    \"\"\"\n+    filename = os.path.join(self.root_path, filename)\n+\n+    try:\n+        with open(filename, mode) as f:\n+            obj = load(f)\n+    except OSError as e:\n+        if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+            return False\n+\n+        e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        raise\n+\n+    return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "variant_8": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..31f682fb 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -229,11 +229,110 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n+\n+    def from_file(\n+        self,\n+        filename: str,\n+        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        silent: bool = False,\n+        mode: str = 'r',\n+    ) -> bool:\n+        \"\"\"Update the values in the config from a file that is loaded\n+        using the ``load`` parameter. The loaded data is passed to the\n+        :meth:`from_mapping` method.\n+\n+        .. code-block:: python\n+\n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n+            import toml\n+            app.config.from_file(\"config.toml\", load=toml.load)\n+\n+        :param filename: The path to the data file. This can be an\n+            absolute path or relative to the config root path.\n+        :param load: A callable that takes a file handle and returns a\n+            mapping of loaded data from the file.\n+        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n+            implements a ``read`` method.\n+        :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n+        :return: ``True`` if the file was loaded successfully.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+\n     def from_file(\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,6 +343,9 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -254,6 +356,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode to open the file in. Defaults to 'r' for text mode.\n+            Use 'rb' for binary mode when using loaders like tomllib.load.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +365,16 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n+                obj = load(f)\n+        except OSError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n+            raise\n+\n+        return self.from_mapping(obj)\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n"
  }
}