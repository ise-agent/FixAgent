{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/scikit-learn/sklearn/model_selection/_split.py lines 1210-1218)": "\n    \"\"\"\n\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
    "Location 2 (/root/hy/projects_4/scikit-learn/sklearn/model_selection/_split.py lines 1262-1270)": "\nclass RepeatedKFold(_RepeatedSplits):\n    \"\"\"Repeated K-Fold cross validator.\n\n    Repeats K-Fold n times with different randomization in each repetition.\n\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of folds. Must be at least 2.\n\n    n_repeats : int, default=10\n        Number of times cross-validator needs to be repeated.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the randomness of each repeated cross-validation instance.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import RepeatedKFold\n    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    >>> y = np.array([0, 0, 1, 1])\n    >>> rkf = RepeatedKFold(n_splits=2, n_repeats=2, random_state=2652124)\n    >>> for i, (train_index, test_index) in enumerate(rkf.split(X)):\n    ...     print(f\"Fold {i}:\")\n    ...     print(f\"  Train: index={train_index}\")\n    ...     print(f\"  Test:  index={test_index}\")\n    Fold 0:\n      Train: index=[2 3]\n      Test:  index=[0 1]\n    Fold 1:\n      Train: index=[0 1]\n      Test:  index=[2 3]\n    Fold 2:\n      Train: index=[0 2]\n      Test:  index=[1 3]\n    Fold 3:\n      Train: index=[1 3]\n      Test:  index=[0 2]\n\n    Notes\n    -----\n    Randomized CV splitters may return different results for each call of\n    split. You can make the results identical by setting ``random_state``\n    to an integer.\n\n    See also\n    --------\n    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n\n\nclass RepeatedStratifiedKFold(_RepeatedSplits):\n    \"\"\"Repeated Stratified K-Fold cross validator.\n\n    Repeats Stratified K-Fold n times with different randomization in each\n    repetition.\n\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of folds. Must be at least 2.\n\n    n_repeats : int, default=10\n        Number of times cross-validator needs to be repeated.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the randomness of each repeated cross-validation instance.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import RepeatedStratifiedKFold\n    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    >>> y = np.array([0, 0, 1, 1])\n    >>> rskf = RepeatedStratifiedKFold(n_splits=2, n_repeats=2,\n    ...     random_state=36851234)\n    >>> for i, (train_index, test_index) in enumerate(rskf.split(X, y)):\n    ...     print(f\"Fold {i}:\")\n    ...     print(f\"  Train: index={train_index}\")\n    ...     print(f\"  Test:  index={test_index}\")\n    Fold 0:\n      Train: index=[1 2]\n      Test:  index=[0 3]\n    Fold 1:\n      Train: index=[0 3]\n      Test:  index=[1 2]\n    Fold 2:\n      Train: index=[1 3]\n      Test:  index=[0 2]\n    Fold 3:\n      Train: index=[0 2]\n      Test:  index=[1 3]\n\n    Notes\n    -----\n    Randomized CV splitters may return different results for each call of\n    split. You can make the results identical by setting ``random_state``\n    to an integer.\n\n    See also\n    --------\n    RepeatedKFold: Repeats K-Fold n times.\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/scikit-learn/sklearn/model_selection/_split.py lines 1210-1218)": [
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            KFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n"
    ],
    "Location 2 (/root/hy/projects_4/scikit-learn/sklearn/model_selection/_split.py lines 1262-1270)": [
      "\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    \"\"\"\n\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n",
      "\n    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n        super().__init__(\n            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n\n    def __repr__(self):\n        return _build_repr(self)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..b53f65870 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,6 +1208,7 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n+\n     See also\n     --------\n     RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n@@ -1216,6 +1217,9 @@ class RepeatedKFold(_RepeatedSplits):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,6 +1263,7 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n+\n     to an integer.\n \n     See also\n@@ -1269,6 +1274,9 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_0": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..b1bd4286b 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,14 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n+\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,6 +1259,115 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n+\n+class RepeatedKFold(_RepeatedSplits):\n+    \"\"\"Repeated K-Fold cross validator.\n+\n+    Repeats K-Fold n times with different randomization in each repetition.\n+\n+    Parameters\n+    ----------\n+    n_splits : int, default=5\n+        Number of folds. Must be at least 2.\n+\n+    n_repeats : int, default=10\n+        Number of times cross-validator needs to be repeated.\n+\n+    random_state : int, RandomState instance or None, default=None\n+        Controls the randomness of each repeated cross-validation instance.\n+        Pass an int for reproducible output across multiple function calls.\n+        See :term:`Glossary <random_state>`.\n+\n+    Examples\n+    --------\n+    >>> import numpy as np\n+    >>> from sklearn.model_selection import RepeatedKFold\n+    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n+    >>> y = np.array([0, 0, 1, 1])\n+    >>> rkf = RepeatedKFold(n_splits=2, n_repeats=2, random_state=2652124)\n+    >>> for i, (train_index, test_index) in enumerate(rkf.split(X)):\n+    ...     print(f\"Fold {i}:\")\n+    ...     print(f\"  Train: index={train_index}\")\n+    ...     print(f\"  Test:  index={test_index}\")\n+    Fold 0:\n+      Train: index=[2 3]\n+      Test:  index=[0 1]\n+    Fold 1:\n+      Train: index=[0 1]\n+      Test:  index=[2 3]\n+    Fold 2:\n+      Train: index=[0 2]\n+      Test:  index=[1 3]\n+    Fold 3:\n+      Train: index=[1 3]\n+      Test:  index=[0 2]\n+\n+    Notes\n+    -----\n+    Randomized CV splitters may return different results for each call of\n+    split. You can make the results identical by setting ``random_state``\n+    to an integer.\n+\n+    See also\n+    --------\n+    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n+    \"\"\"\n+    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n+        super().__init__(\n+            KFold, n_repeats, random_state, n_splits=n_splits)\n+\n+    def __repr__(self):\n+        return _build_repr(self)\n+\n+\n+class RepeatedStratifiedKFold(_RepeatedSplits):\n+    \"\"\"Repeated Stratified K-Fold cross validator.\n+\n+    Repeats Stratified K-Fold n times with different randomization in each\n+    repetition.\n+\n+    Parameters\n+    ----------\n+    n_splits : int, default=5\n+        Number of folds. Must be at least 2.\n+\n+    n_repeats : int, default=10\n+        Number of times cross-validator needs to be repeated.\n+\n+    random_state : int, RandomState instance or None, default=None\n+        Controls the randomness of each repeated cross-validation instance.\n+        Pass an int for reproducible output across multiple function calls.\n+        See :term:`Glossary <random_state>`.\n+\n+    Examples\n+    --------\n+    >>> import numpy as np\n+    >>> from sklearn.model_selection import RepeatedStratifiedKFold\n+    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n+    >>> y = np.array([0, 0, 1, 1])\n+    >>> rskf = RepeatedStratifiedKFold(n_splits=2, n_repeats=2,\n+    ...     random_state=36851234)\n+    >>> for i, (train_index, test_index) in enumerate(rskf.split(X, y)):\n+    ...     print(f\"Fold {i}:\")\n+    ...     print(f\"  Train: index={train_index}\")\n+    ...     print(f\"  Test:  index={test_index}\")\n+    Fold 0:\n+      Train: index=[1 2]\n+      Test:  index=[0 3]\n+    Fold 1:\n+      Train: index=[0 3]\n+      Test:  index=[1 2]\n+    Fold 2:\n+      Train: index=[1 3]\n+      Test:  index=[0 2]\n+    Fold 3:\n+      Train: index=[0 2]\n+      Test:  index=[1 3]\n+\n+    Notes\n+    -----\n+    Randomized CV splitters may return different results for each call of\n+    split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n     See also\n@@ -1269,6 +1378,9 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_1": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..c4adcdfd5 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,13 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1258,14 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n-    \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_2": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..52d202ab9 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,13 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1258,15 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_3": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..c4adcdfd5 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,13 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1258,14 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n-    \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_4": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..de6a00c6b 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,12 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n-    \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1257,14 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n-    \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_5": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..52d202ab9 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,13 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1258,15 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_6": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..c4adcdfd5 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,13 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1258,14 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n-    \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_7": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..9d2650f6b 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,13 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1258,16 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n     \"\"\"\n+\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
    "variant_8": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..c4adcdfd5 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1208,14 +1208,13 @@ class RepeatedKFold(_RepeatedSplits):\n     split. You can make the results identical by setting ``random_state``\n     to an integer.\n \n-    See also\n-    --------\n-    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1259,16 +1258,14 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     -----\n     Randomized CV splitters may return different results for each call of\n     split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n-    \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n"
  }
}