{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/requests/requests/models.py lines 463-466)": "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n",
    "Location 2 (/root/hy/projects_4/requests/requests/models.py lines 149-152)": "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/requests/requests/models.py lines 463-466)": [
      "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n",
      "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n",
      "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n",
      "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        \n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n",
      "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n",
      "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n        # Handle both single hooks and lists of hooks\n        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n            # It's a list/iterable of hooks\n            for h in hook:\n                self.hooks[event].append(h)\n        else:\n            # It's a single hook function\n            self.hooks[event].append(hook)\n"
    ],
    "Location 2 (/root/hy/projects_4/requests/requests/models.py lines 149-152)": [
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook to the given event.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n",
      "\ndef register_hook(self, event, hook):\n    \"\"\"Properly register a hook.\"\"\"\n    # Handle both single hooks and lists of hooks\n    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n        # It's a list/iterable of hooks\n        for h in hook:\n            self.hooks[event].append(h)\n    else:\n        # It's a single hook function\n        self.hooks[event].append(hook)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..44907888 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,6 +146,7 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n@@ -460,10 +461,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_0": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..fadc83a3 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_1": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..6e36fef0 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook to the given event.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_2": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..fadc83a3 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_3": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..fadc83a3 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_4": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..7dbb9e05 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,18 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        \n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_5": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..fadc83a3 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_6": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..fadc83a3 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
    "variant_7": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..1a8a1fcb 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,9 +467,16 @@ class Request(object):\n \n         return ''.join(url)\n \n-    def register_hook(self, event, hook):\n-        \"\"\"Properly register a hook.\"\"\"\n \n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n         self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n",
    "variant_8": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..fadc83a3 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n-        hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+def register_hook(self, event, hook):\n+    \"\"\"Properly register a hook.\"\"\"\n+    # Handle both single hooks and lists of hooks\n+    if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+        # It's a list/iterable of hooks\n+        for h in hook:\n+            self.hooks[event].append(h)\n+    else:\n+        # It's a single hook function\n+        self.hooks[event].append(hook)\n \n         #: Session.\n         self.session = session\n@@ -460,10 +467,17 @@ class Request(object):\n \n         return ''.join(url)\n \n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        # Handle both single hooks and lists of hooks\n+        if hasattr(hook, '__iter__') and not hasattr(hook, '__call__'):\n+            # It's a list/iterable of hooks\n+            for h in hook:\n+                self.hooks[event].append(h)\n+        else:\n+            # It's a single hook function\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n"
  }
}