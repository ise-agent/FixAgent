{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/flask/src/flask/cli.py lines 1021-1021)": "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
    "Location 2 (/root/hy/projects_4/flask/src/flask/cli.py lines 1022-1026)": "\n    widths = (\n        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
    "Location 3 (/root/hy/projects_4/flask/src/flask/cli.py lines 1028-1028)": "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
    "Location 4 (/root/hy/projects_4/flask/src/flask/cli.py lines 1030-1034)": "\n    # Extract domain information for each rule\n    domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        server_name = current_app.config.get('SERVER_NAME', '') or ''\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
    "Location 5 (/root/hy/projects_4/flask/src/flask/cli.py lines 997-998)": "\n@click.command(\"routes\", short_help=\"Show the routes for the app.\")\n@click.option(\n    \"--sort\",\n    \"-s\",\n    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\", \"domain\")),\n    default=\"endpoint\",\n    help=(\n        'Method to sort routes by. \"match\" is the order that Flask will match '\n        \"routes when dispatching a request.\"\n    ),\n)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/flask/src/flask/cli.py lines 1021-1021)": [
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n"
    ],
    "Location 2 (/root/hy/projects_4/flask/src/flask/cli.py lines 1022-1026)": [
      "\n    widths = (\n        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') and current_app.config.get('SERVER_NAME', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    widths = (\n        max(len(getattr(rule, 'subdomain', '') + ('.' + current_app.config.get('SERVER_NAME', '') if current_app.config.get('SERVER_NAME') else '')) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    widths = (\n        max(len(f\"{getattr(rule, 'subdomain', '')}.{current_app.config.get('SERVER_NAME', '')}\" if getattr(rule, 'subdomain', '') else current_app.config.get('SERVER_NAME', '')) for rule in rules) if rules else 0,\n        max(len(rule.endpoint) for rule in rules) if rules else 0,\n        max(len(methods) for methods in rule_methods) if rule_methods else 0,\n        max(len(rule.rule) for rule in rules) if rules else 0,\n    )\n",
      "\n    widths = (\n        max(len(f\"{getattr(rule, 'subdomain', '')}.{current_app.config.get('SERVER_NAME', '')}\" if getattr(rule, 'subdomain', '') else current_app.config.get('SERVER_NAME', '')) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    widths = (\n        max(len(construct_domain(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    widths = (\n        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') and current_app.config.get('SERVER_NAME', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules) if rules else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    widths = (\n        max(len(construct_domain(rule)) for rule in rules) if rules else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    widths = (\n        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n"
    ],
    "Location 3 (/root/hy/projects_4/flask/src/flask/cli.py lines 1028-1028)": [
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n"
    ],
    "Location 4 (/root/hy/projects_4/flask/src/flask/cli.py lines 1030-1034)": [
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    # Extract domain information for width calculation\n    domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        server_name = current_app.config.get('SERVER_NAME', '') or ''\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n    \n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    # Extract domain information for width calculation\n    domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        server_name = current_app.config.get('SERVER_NAME', '')\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n    \n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    # Extract domain information for display\n    domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        server_name = current_app.config.get('SERVER_NAME', '')\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    # Extract domain information for width calculation\n    domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        server_name = current_app.config.get('SERVER_NAME', '') or ''\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n    \n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    # Extract domain information for each rule\n    domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        server_name = current_app.config.get('SERVER_NAME', '') or ''\n        \n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n    \n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    # Extract domain information for width calculation\n    domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        server_name = current_app.config.get('SERVER_NAME', '')\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n    \n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    # Extract domain information for each rule\n    domains = []\n    server_name = current_app.config.get('SERVER_NAME', '')\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = subdomain if subdomain else ''\n        domains.append(domain)\n\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    # Extract domain information for each rule\n    domains = []\n    server_name = current_app.config.get('SERVER_NAME', '')\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', '') or ''\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = ''\n        domains.append(domain)\n    \n    widths = (\n        max(len(domain) for domain in domains) if domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n"
    ],
    "Location 5 (/root/hy/projects_4/flask/src/flask/cli.py lines 997-998)": [
      "\n    ),\n)\n",
      "\n    ),\n)\n",
      "\n    ),\n)\n",
      "\n    ),\n)\n",
      "\n    ),\n)\n",
      "\n    ),\n)\n",
      "\n@click.command(\"routes\", short_help=\"Show the routes for the app.\")\n@click.option(\n    \"--sort\",\n    \"-s\",\n    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\", \"domain\")),\n    default=\"endpoint\",\n    help=(\n        'Method to sort routes by. \"match\" is the order that Flask will match '\n        \"routes when dispatching a request.\"\n    ),\n)\n",
      "\n    ),\n)\n@click.option(\n    \"--sort\",\n    \"-s\",\n    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\", \"domain\")),\n    default=\"endpoint\",\n    help=(\n        'Method to sort routes by. \"match\" is the order that Flask will match '\n        \"routes when dispatching a request.\"\n    ),\n)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..df69377a 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,7 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1019,38 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    # Extract domain information for width calculation\n+    rule_domains = []\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        rule_domains.append(domain)\n+    \n     widths = (\n+        max(len(domain) for domain in rule_domains) if rule_domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_0": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..d2e2e4a8 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,16 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n+@click.command(\"routes\", short_help=\"Show the routes for the app.\")\n+@click.option(\n+    \"--sort\",\n+    \"-s\",\n+    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\", \"domain\")),\n+    default=\"endpoint\",\n+    help=(\n+        'Method to sort routes by. \"match\" is the order that Flask will match '\n+        \"routes when dispatching a request.\"\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1028,48 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    # Extract domain information for each rule\n+    domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        server_name = current_app.config.get('SERVER_NAME', '') or ''\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_1": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..091efac1 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,7 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1019,49 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') and current_app.config.get('SERVER_NAME', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    # Extract domain information for width calculation\n+    domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        server_name = current_app.config.get('SERVER_NAME', '') or ''\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+    \n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_2": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..8648ea1f 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,7 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1019,49 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(getattr(rule, 'subdomain', '') + ('.' + current_app.config.get('SERVER_NAME', '') if current_app.config.get('SERVER_NAME') else '')) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    # Extract domain information for width calculation\n+    domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+    \n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_3": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..2411ede1 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,7 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1019,48 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(f\"{getattr(rule, 'subdomain', '')}.{current_app.config.get('SERVER_NAME', '')}\" if getattr(rule, 'subdomain', '') else current_app.config.get('SERVER_NAME', '')) for rule in rules) if rules else 0,\n+        max(len(rule.endpoint) for rule in rules) if rules else 0,\n+        max(len(methods) for methods in rule_methods) if rule_methods else 0,\n+        max(len(rule.rule) for rule in rules) if rules else 0,\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    # Extract domain information for display\n+    domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_4": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..821c0f09 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,7 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1019,49 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(f\"{getattr(rule, 'subdomain', '')}.{current_app.config.get('SERVER_NAME', '')}\" if getattr(rule, 'subdomain', '') else current_app.config.get('SERVER_NAME', '')) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    # Extract domain information for width calculation\n+    domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        server_name = current_app.config.get('SERVER_NAME', '') or ''\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+    \n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_5": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..c4327aea 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,7 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1019,50 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(construct_domain(rule)) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    # Extract domain information for each rule\n+    domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        server_name = current_app.config.get('SERVER_NAME', '') or ''\n+        \n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+    \n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_6": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..4c309258 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,7 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1019,49 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') and current_app.config.get('SERVER_NAME', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules) if rules else 0,\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    # Extract domain information for width calculation\n+    domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+    \n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_7": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..0774dd48 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -994,6 +994,16 @@ def shell_command() -> None:\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n+\n+@click.command(\"routes\", short_help=\"Show the routes for the app.\")\n+@click.option(\n+    \"--sort\",\n+    \"-s\",\n+    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\", \"domain\")),\n+    default=\"endpoint\",\n+    help=(\n+        'Method to sort routes by. \"match\" is the order that Flask will match '\n+        \"routes when dispatching a request.\"\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@@ -1018,20 +1028,48 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(construct_domain(rule)) for rule in rules) if rules else 0,\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    # Extract domain information for each rule\n+    domains = []\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = subdomain if subdomain else ''\n+        domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_8": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..5b45e9b3 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -991,6 +991,17 @@ def shell_command() -> None:\n     \"-s\",\n     type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n     default=\"endpoint\",\n+    help=(\n+        'Method to sort routes by. \"match\" is the order that Flask will match '\n+        \"routes when dispatching a request.\"\n+\n+    ),\n+)\n+@click.option(\n+    \"--sort\",\n+    \"-s\",\n+    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\", \"domain\")),\n+    default=\"endpoint\",\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n         \"routes when dispatching a request.\"\n@@ -1018,20 +1029,49 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    widths = (\n+        max(len(getattr(rule, 'subdomain', '') + ('.' if getattr(rule, 'subdomain', '') else '') + current_app.config.get('SERVER_NAME', '')) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    # Extract domain information for each rule\n+    domains = []\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', '') or ''\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = ''\n+        domains.append(domain)\n+    \n     widths = (\n+        max(len(domain) for domain in domains) if domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n"
  }
}