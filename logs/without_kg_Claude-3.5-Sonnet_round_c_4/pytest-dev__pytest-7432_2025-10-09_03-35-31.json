{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/skipping.py lines 273-274)": "\n    elif item.config.option.runxfail:\n        # Only skip xfail processing, don't block other logic\n        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n            pass  # don't interfere with non-xfail cases\n",
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/skipping.py lines 294-305)": "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n    \n    # Always check for skip location fix, regardless of runxfail option\n    if (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/skipping.py lines 273-274)": [
      "\n    elif item.config.option.runxfail:\n        # Only skip xfail processing, don't block other logic\n        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n            pass  # don't interfere with non-xfail cases\n",
      "\n    elif item.config.option.runxfail:\n        # Only skip xfail processing, but allow other logic to continue\n        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n            pass  # don't interfere with non-xfail cases\n",
      "\n    elif item.config.option.runxfail:\n        # Only interfere with xfail-specific behavior, not skip reporting\n        if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n            pass  # don't interfere with xfail exceptions when runxfail is enabled\n",
      "\n    elif item.config.option.runxfail and (\n        (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)) or xfailed\n    ):\n        pass  # don't interfere with xfail handling only\n",
      "\n    elif item.config.option.runxfail:\n        # Only skip xfail processing, but allow other processing to continue\n        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n            pass  # don't interfere with non-xfail cases\n",
      "\n    elif item.config.option.runxfail:\n        # Only skip xfail processing, don't interfere with other logic\n        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n            pass\n",
      "\n    elif item.config.option.runxfail:\n        # Only skip xfail processing, don't interfere with other logic\n        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n            pass\n",
      "\n    elif item.config.option.runxfail:\n        # Only skip xfail processing, but allow other processing to continue\n        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n            pass  # don't interfere with non-xfail cases\n"
    ],
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/skipping.py lines 294-305)": [
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n",
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n",
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n",
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n",
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n",
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n",
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n",
      "\n    elif (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n\n    # Always apply skip location fix when conditions are met, regardless of --runxfail\n    if (\n        item._store.get(skipped_by_mark_key, True)\n        and rep.skipped\n        and type(rep.longrepr) is tuple\n    ):\n        # skipped by mark.skipif; change the location of the failure\n        # to point to the item definition, otherwise it will display\n        # the location of where the skip exception was raised within pytest\n        _, _, reason = rep.longrepr\n        filename, line = item.reportinfo()[:2]\n        assert line is not None\n        rep.longrepr = str(filename), line + 1, reason\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..03d5cee87 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,10 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # don't interfere with xfail behavior, but allow skip location fix to run\n+        pass\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,7 +293,10 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n-    elif (\n+\n+    # Skip location fix logic - moved outside elif chain to run independently\n+    # This ensures skip location reporting works regardless of --runxfail option\n+    if (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n         and type(rep.longrepr) is tuple\n",
    "variant_0": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..15e10175e 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only skip xfail processing, don't block other logic\n+        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n+            pass  # don't interfere with non-xfail cases\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n@@ -303,6 +307,20 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         filename, line = item.reportinfo()[:2]\n         assert line is not None\n         rep.longrepr = str(filename), line + 1, reason\n+    \n+    # Always check for skip location fix, regardless of runxfail option\n+    if (\n+        item._store.get(skipped_by_mark_key, True)\n+        and rep.skipped\n+        and type(rep.longrepr) is tuple\n+    ):\n+        # skipped by mark.skipif; change the location of the failure\n+        # to point to the item definition, otherwise it will display\n+        # the location of where the skip exception was raised within pytest\n+        _, _, reason = rep.longrepr\n+        filename, line = item.reportinfo()[:2]\n+        assert line is not None\n+        rep.longrepr = str(filename), line + 1, reason\n \n \n def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:\n",
    "variant_1": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..f0e593605 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only skip xfail processing, don't block other logic\n+        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n+            pass  # don't interfere with non-xfail cases\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n",
    "variant_2": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..cd22c0724 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only skip xfail processing, but allow other logic to continue\n+        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n+            pass  # don't interfere with non-xfail cases\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n",
    "variant_3": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..0441bc939 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only interfere with xfail-specific behavior, not skip reporting\n+        if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n+            pass  # don't interfere with xfail exceptions when runxfail is enabled\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n",
    "variant_4": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..2a47b2887 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n-    elif item.config.option.runxfail:\n-        pass  # don't interfere\n+\n+    elif item.config.option.runxfail and (\n+        (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)) or xfailed\n+    ):\n+        pass  # don't interfere with xfail handling only\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n",
    "variant_5": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..87a5c01b1 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only skip xfail processing, but allow other processing to continue\n+        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n+            pass  # don't interfere with non-xfail cases\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n",
    "variant_6": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..f6cedf7d1 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only skip xfail processing, don't interfere with other logic\n+        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n+            pass\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n",
    "variant_7": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..f6cedf7d1 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only skip xfail processing, don't interfere with other logic\n+        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n+            pass\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n",
    "variant_8": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..b22cf23c7 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n+\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Only skip xfail processing, but allow other processing to continue\n+        if not (call.excinfo and isinstance(call.excinfo.value, xfail.Exception)):\n+            pass  # don't interfere with non-xfail cases\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -291,6 +294,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n+\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n@@ -304,6 +308,20 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert line is not None\n         rep.longrepr = str(filename), line + 1, reason\n \n+    # Always apply skip location fix when conditions are met, regardless of --runxfail\n+    if (\n+        item._store.get(skipped_by_mark_key, True)\n+        and rep.skipped\n+        and type(rep.longrepr) is tuple\n+    ):\n+        # skipped by mark.skipif; change the location of the failure\n+        # to point to the item definition, otherwise it will display\n+        # the location of where the skip exception was raised within pytest\n+        _, _, reason = rep.longrepr\n+        filename, line = item.reportinfo()[:2]\n+        assert line is not None\n+        rep.longrepr = str(filename), line + 1, reason\n+\n \n def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:\n     if hasattr(report, \"wasxfail\"):\n"
  }
}