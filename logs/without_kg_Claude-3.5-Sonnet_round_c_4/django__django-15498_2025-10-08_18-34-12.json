{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/views/static.py lines 129-131)": "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
    "Location 2 (/root/hy/projects_4/django/tests/view_tests/tests/test_static.py lines 110-115)": "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Empty If-Modified-Since header should be ignored and file served.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/views/static.py lines 129-131)": [
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n",
      "\n    try:\n        if header is None:\n            raise ValueError\n        if not header or not header.strip():\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n"
    ],
    "Location 2 (/root/hy/projects_4/django/tests/view_tests/tests/test_static.py lines 110-115)": [
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Test that an empty If-Modified-Since header is handled gracefully.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n",
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Empty If-Modified-Since header should be handled gracefully.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n",
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Empty If-Modified-Since header should be ignored and serve the file.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n",
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        An empty If-Modified-Since header should be ignored and the file\n        should be served normally without raising an exception.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n",
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Test that empty If-Modified-Since header is handled gracefully.\n        \n        An empty string should be treated the same as a missing header,\n        not cause an AttributeError.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n",
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Empty If-Modified-Since header should be ignored and file served.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n",
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Empty If-Modified-Since header should be ignored and file content served.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n",
      "\n    def test_empty_if_modified_since(self):\n        \"\"\"\n        Test that empty If-Modified-Since header is handled gracefully.\n        \"\"\"\n        file_name = \"file.txt\"\n        response = self.client.get(\n            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n        )\n        response_content = b\"\".join(response)\n        with open(path.join(media_dir, file_name), \"rb\") as fp:\n            self.assertEqual(fp.read(), response_content)\n        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n\n    def test_404(self):\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..41ce0434ff 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -126,8 +126,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n+\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..69ddcd5e48 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,6 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+        with open(path.join(media_dir, file_name), \"rb\") as fp:\n+            self.assertEqual(fp.read(), response_content)\n+        self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"Handle empty If-Modified-Since values gracefully\n+        \n+        Empty strings should be ignored like None values, not cause exceptions.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n",
    "variant_0": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..974f8f01d3 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Empty If-Modified-Since header should be ignored and file served.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_1": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..53d9165042 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Test that an empty If-Modified-Since header is handled gracefully.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_2": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..bf22bd5d5a 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Empty If-Modified-Since header should be handled gracefully.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_3": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..94ccd59cd3 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Empty If-Modified-Since header should be ignored and serve the file.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_4": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..a4ecbd7287 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,22 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        An empty If-Modified-Since header should be ignored and the file\n+        should be served normally without raising an exception.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_5": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..97f6593955 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,24 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Test that empty If-Modified-Since header is handled gracefully.\n+        \n+        An empty string should be treated the same as a missing header,\n+        not cause an AttributeError.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_6": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..974f8f01d3 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Empty If-Modified-Since header should be ignored and file served.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_7": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..3803dcff8f 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Empty If-Modified-Since header should be ignored and file content served.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n",
    "variant_8": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..a231cdf427 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,9 +125,13 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    try:\n+\n     try:\n         if header is None:\n             raise ValueError\n+        if not header or not header.strip():\n+            raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\ndiff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 5ec054bf30..1ceed12f7b 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -107,12 +107,21 @@ class StaticTests(SimpleTestCase):\n             \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=invalid_date\n         )\n         response_content = b\"\".join(response)\n+\n+    def test_empty_if_modified_since(self):\n+        \"\"\"\n+        Test that empty If-Modified-Since header is handled gracefully.\n+        \"\"\"\n+        file_name = \"file.txt\"\n+        response = self.client.get(\n+            \"/%s/%s\" % (self.prefix, file_name), HTTP_IF_MODIFIED_SINCE=\"\"\n+        )\n+        response_content = b\"\".join(response)\n         with open(path.join(media_dir, file_name), \"rb\") as fp:\n             self.assertEqual(fp.read(), response_content)\n         self.assertEqual(len(response_content), int(response.headers[\"Content-Length\"]))\n \n     def test_404(self):\n-        response = self.client.get(\"/%s/nonexistent_resource\" % self.prefix)\n         self.assertEqual(404, response.status_code)\n \n     def test_index(self):\n"
  }
}