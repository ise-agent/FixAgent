{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/deletion.py lines 392-398)": "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/models/deletion.py lines 392-398)": [
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n",
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n",
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n",
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n",
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n",
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n",
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n",
      "\n        # Optimize for the case with a single obj and no dependencies\n        if len(self.data) == 1 and len(instances) == 1:\n            instance = list(instances)[0]\n            if self.can_fast_delete(instance):\n                with transaction.mark_for_rollback_on_error():\n                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                setattr(instance, model._meta.pk.attname, None)\n                if count > 0:\n                    return count, {model._meta.label: count}\n                else:\n                    return count, {}\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..51e9dfd8ed 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -389,13 +389,17 @@ class Collector:\n         deleted_counter = Counter()\n \n         # Optimize for the case with a single obj and no dependencies\n+\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_0": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_1": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_2": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_3": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_4": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_5": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_6": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_7": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n",
    "variant_8": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..fe3dcc39d9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -388,6 +388,8 @@ class Collector:\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n+        # Optimize for the case with a single obj and no dependencies\n+\n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n@@ -395,7 +397,10 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                if count > 0:\n+                    return count, {model._meta.label: count}\n+                else:\n+                    return count, {}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n"
  }
}