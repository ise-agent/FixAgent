{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/contrib/auth/management/__init__.py lines 68-69)": "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
    "Location 2 (/root/hy/projects_4/django/django/contrib/contenttypes/management/__init__.py lines 62-63)": "\n        # Skip router check when database is explicitly specified via migration\n        # The migration executor has already validated database availability\n        if using != DEFAULT_DB_ALIAS:\n            # Database explicitly specified, skip router validation\n            pass\n        elif not router.allow_migrate_model(using, ContentType):\n            return\n",
    "Location 3 (/root/hy/projects_4/django/django/contrib/contenttypes/management/__init__.py lines 93-94)": "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
    "Location 4 (/root/hy/projects_4/django/django/db/utils.py lines 267-273)": "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
    "Location 5 (/root/hy/projects_4/django/django/db/utils.py lines 253-265)": "\n    def allow_migrate(self, db, app_label, **hints):\n        for router in self.routers:\n            try:\n                method = router.allow_migrate\n            except AttributeError:\n                # If the router doesn't have a method, skip to the next one.\n                continue\n\n            allow = method(db, app_label, **hints)\n\n            if allow is not None:\n                return allow\n        return True\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/contrib/auth/management/__init__.py lines 68-69)": [
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, Permission):\n        return\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/contrib/contenttypes/management/__init__.py lines 62-63)": [
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return\n",
      "\n        if using != DEFAULT_DB_ALIAS:\n            # Database explicitly specified, skip router validation\n            pass\n        elif not router.allow_migrate_model(using, ContentType):\n            return\n",
      "\n        # Skip router check when database is explicitly specified via migration\n        # The migration executor has already validated database availability\n        if using != DEFAULT_DB_ALIAS:\n            # Database explicitly specified, skip router validation\n            pass\n        elif not router.allow_migrate_model(using, ContentType):\n            return\n",
      "\n    # Skip router check when database is explicitly specified via migration\n    # The migration executor has already validated database availability\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return\n",
      "\n        if using != DEFAULT_DB_ALIAS:\n            # Database explicitly specified, skip router validation\n            pass\n        elif not router.allow_migrate_model(using, ContentType):\n            return\n",
      "\n        # Skip router check when database is explicitly specified via migration\n        # The migration executor has already validated database availability\n        if using != DEFAULT_DB_ALIAS:\n            # Database explicitly specified, skip router validation\n            pass\n        elif not router.allow_migrate_model(using, ContentType):\n            return\n",
      "\n        # Skip router check when database is explicitly specified via migration\n        # The migration executor has already validated database availability\n        if using != DEFAULT_DB_ALIAS:\n            # Database explicitly specified, skip router validation\n            pass\n        elif not router.allow_migrate_model(using, ContentType):\n            return\n",
      "\n        if using != DEFAULT_DB_ALIAS:\n            # Database explicitly specified, skip router validation\n            pass\n        elif not router.allow_migrate_model(using, ContentType):\n            return\n"
    ],
    "Location 3 (/root/hy/projects_4/django/django/contrib/contenttypes/management/__init__.py lines 93-94)": [
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if using != DEFAULT_DB_ALIAS:\n        # Database explicitly specified, skip router validation\n        pass\n    elif not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n"
    ],
    "Location 4 (/root/hy/projects_4/django/django/db/utils.py lines 267-273)": [
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n",
      "\ndef allow_migrate_model(self, db, model):\n    return self.allow_migrate(\n        db,\n        model._meta.app_label,\n        model_name=model._meta.model_name,\n        model=model,\n    )\n"
    ],
    "Location 5 (/root/hy/projects_4/django/django/db/utils.py lines 253-265)": [
      "\n    def allow_migrate(self, db, app_label, **hints):\n        for router in self.routers:\n            try:\n                method = router.allow_migrate\n            except AttributeError:\n                # If the router doesn't have a method, skip to the next one.\n                continue\n\n            allow = method(db, app_label, **hints)\n\n            if allow is not None:\n                return allow\n        return True\n",
      "\n    def allow_migrate(self, db, app_label, **hints):\n        for router in self.routers:\n            try:\n                method = router.allow_migrate\n            except AttributeError:\n                # If the router doesn't have a method, skip to the next one.\n                continue\n\n            allow = method(db, app_label, **hints)\n\n            if allow is not None:\n                return allow\n        return True\n",
      "\ndef allow_migrate(self, db, app_label, **hints):\n    for router in self.routers:\n        try:\n            method = router.allow_migrate\n        except AttributeError:\n            # If the router doesn't have a method, skip to the next one.\n            continue\n\n        allow = method(db, app_label, **hints)\n\n        if allow is not None:\n            return allow\n    return True\n",
      "\ndef allow_migrate(self, db, app_label, **hints):\n    for router in self.routers:\n        try:\n            method = router.allow_migrate\n        except AttributeError:\n            # If the router doesn't have a method, skip to the next one.\n            continue\n\n        allow = method(db, app_label, **hints)\n\n        if allow is not None:\n            return allow\n    return True\n",
      "\ndef allow_migrate(self, db, app_label, **hints):\n    for router in self.routers:\n        try:\n            method = router.allow_migrate\n        except AttributeError:\n            # If the router doesn't have a method, skip to the next one.\n            continue\n\n        allow = method(db, app_label, **hints)\n\n        if allow is not None:\n            return allow\n    return True\n",
      "\ndef allow_migrate(self, db, app_label, **hints):\n    for router in self.routers:\n        try:\n            method = router.allow_migrate\n        except AttributeError:\n            # If the router doesn't have a method, skip to the next one.\n            continue\n\n        allow = method(db, app_label, **hints)\n\n        if allow is not None:\n            return allow\n    return True\n",
      "\ndef allow_migrate(self, db, app_label, **hints):\n    for router in self.routers:\n        try:\n            method = router.allow_migrate\n        except AttributeError:\n            # If the router doesn't have a method, skip to the next one.\n            continue\n\n        allow = method(db, app_label, **hints)\n\n        if allow is not None:\n            return allow\n    return True\n",
      "\n    def allow_migrate(self, db, app_label, **hints):\n        for router in self.routers:\n            try:\n                method = router.allow_migrate\n            except AttributeError:\n                # If the router doesn't have a method, skip to the next one.\n                continue\n\n            allow = method(db, app_label, **hints)\n\n            if allow is not None:\n                return allow\n        return True\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..8a6a13dc76 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,13 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        # Skip router check when database is explicitly specified via migration\n+        # The migration executor has already validated database availability\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +96,13 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..177b023577 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,6 +250,7 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n+\n     def allow_migrate(self, db, app_label, **hints):\n         for router in self.routers:\n             try:\n@@ -264,6 +265,7 @@ class ConnectionRouter:\n                 return allow\n         return True\n \n+\n     def allow_migrate_model(self, db, model):\n         return self.allow_migrate(\n             db,\n",
    "variant_0": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..982d745a26 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,13 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        # Skip router check when database is explicitly specified via migration\n+        # The migration executor has already validated database availability\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +96,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +113,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..2662b0963a 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,6 +250,7 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n+\n     def allow_migrate(self, db, app_label, **hints):\n         for router in self.routers:\n             try:\n@@ -264,13 +265,14 @@ class ConnectionRouter:\n                 return allow\n         return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_1": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..cf9b48a8f8 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,8 +59,14 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n-            return\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n+        return\n         available = True\n \n     for migration, backward in plan:\n@@ -90,7 +96,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +113,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..2662b0963a 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,6 +250,7 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n+\n     def allow_migrate(self, db, app_label, **hints):\n         for router in self.routers:\n             try:\n@@ -264,13 +265,14 @@ class ConnectionRouter:\n                 return allow\n         return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_2": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..4b80734a28 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,11 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +94,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +111,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..2662b0963a 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,6 +250,7 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n+\n     def allow_migrate(self, db, app_label, **hints):\n         for router in self.routers:\n             try:\n@@ -264,13 +265,14 @@ class ConnectionRouter:\n                 return allow\n         return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_3": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..982d745a26 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,13 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        # Skip router check when database is explicitly specified via migration\n+        # The migration executor has already validated database availability\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +96,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +113,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..6c93b4cf53 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,27 +250,29 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n-    def allow_migrate(self, db, app_label, **hints):\n-        for router in self.routers:\n-            try:\n-                method = router.allow_migrate\n-            except AttributeError:\n-                # If the router doesn't have a method, skip to the next one.\n-                continue\n \n-            allow = method(db, app_label, **hints)\n+def allow_migrate(self, db, app_label, **hints):\n+    for router in self.routers:\n+        try:\n+            method = router.allow_migrate\n+        except AttributeError:\n+            # If the router doesn't have a method, skip to the next one.\n+            continue\n+\n+        allow = method(db, app_label, **hints)\n+\n+        if allow is not None:\n+            return allow\n+    return True\n \n-            if allow is not None:\n-                return allow\n-        return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_4": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..cf9b48a8f8 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,8 +59,14 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n-            return\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n+        return\n         available = True\n \n     for migration, backward in plan:\n@@ -90,7 +96,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +113,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..6c93b4cf53 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,27 +250,29 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n-    def allow_migrate(self, db, app_label, **hints):\n-        for router in self.routers:\n-            try:\n-                method = router.allow_migrate\n-            except AttributeError:\n-                # If the router doesn't have a method, skip to the next one.\n-                continue\n \n-            allow = method(db, app_label, **hints)\n+def allow_migrate(self, db, app_label, **hints):\n+    for router in self.routers:\n+        try:\n+            method = router.allow_migrate\n+        except AttributeError:\n+            # If the router doesn't have a method, skip to the next one.\n+            continue\n+\n+        allow = method(db, app_label, **hints)\n+\n+        if allow is not None:\n+            return allow\n+    return True\n \n-            if allow is not None:\n-                return allow\n-        return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_5": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..4b80734a28 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,11 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +94,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +111,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..6c93b4cf53 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,27 +250,29 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n-    def allow_migrate(self, db, app_label, **hints):\n-        for router in self.routers:\n-            try:\n-                method = router.allow_migrate\n-            except AttributeError:\n-                # If the router doesn't have a method, skip to the next one.\n-                continue\n \n-            allow = method(db, app_label, **hints)\n+def allow_migrate(self, db, app_label, **hints):\n+    for router in self.routers:\n+        try:\n+            method = router.allow_migrate\n+        except AttributeError:\n+            # If the router doesn't have a method, skip to the next one.\n+            continue\n+\n+        allow = method(db, app_label, **hints)\n+\n+        if allow is not None:\n+            return allow\n+    return True\n \n-            if allow is not None:\n-                return allow\n-        return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_6": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..982d745a26 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,13 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        # Skip router check when database is explicitly specified via migration\n+        # The migration executor has already validated database availability\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +96,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +113,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..6c93b4cf53 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,27 +250,29 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n-    def allow_migrate(self, db, app_label, **hints):\n-        for router in self.routers:\n-            try:\n-                method = router.allow_migrate\n-            except AttributeError:\n-                # If the router doesn't have a method, skip to the next one.\n-                continue\n \n-            allow = method(db, app_label, **hints)\n+def allow_migrate(self, db, app_label, **hints):\n+    for router in self.routers:\n+        try:\n+            method = router.allow_migrate\n+        except AttributeError:\n+            # If the router doesn't have a method, skip to the next one.\n+            continue\n+\n+        allow = method(db, app_label, **hints)\n+\n+        if allow is not None:\n+            return allow\n+    return True\n \n-            if allow is not None:\n-                return allow\n-        return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_7": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..982d745a26 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,13 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        # Skip router check when database is explicitly specified via migration\n+        # The migration executor has already validated database availability\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +96,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +113,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..6c93b4cf53 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,27 +250,29 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n-    def allow_migrate(self, db, app_label, **hints):\n-        for router in self.routers:\n-            try:\n-                method = router.allow_migrate\n-            except AttributeError:\n-                # If the router doesn't have a method, skip to the next one.\n-                continue\n \n-            allow = method(db, app_label, **hints)\n+def allow_migrate(self, db, app_label, **hints):\n+    for router in self.routers:\n+        try:\n+            method = router.allow_migrate\n+        except AttributeError:\n+            # If the router doesn't have a method, skip to the next one.\n+            continue\n+\n+        allow = method(db, app_label, **hints)\n+\n+        if allow is not None:\n+            return allow\n+    return True\n \n-            if allow is not None:\n-                return allow\n-        return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n",
    "variant_8": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..12ac6e7f8b 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -65,7 +65,13 @@ def create_permissions(\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n+\n+    # Skip router check when database is explicitly specified via migration\n+    # The migration executor has already validated database availability\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, Permission):\n         return\n \n     # This will hold the permissions we're looking for as\ndiff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..4b80734a28 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -59,7 +59,11 @@ def inject_rename_contenttypes_operations(\n     except LookupError:\n         available = False\n     else:\n-        if not router.allow_migrate_model(using, ContentType):\n+\n+        if using != DEFAULT_DB_ALIAS:\n+            # Database explicitly specified, skip router validation\n+            pass\n+        elif not router.allow_migrate_model(using, ContentType):\n             return\n         available = True\n \n@@ -90,7 +94,12 @@ def inject_rename_contenttypes_operations(\n \n \n def get_contenttypes_and_models(app_config, using, ContentType):\n-    if not router.allow_migrate_model(using, ContentType):\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if using != DEFAULT_DB_ALIAS:\n+        # Database explicitly specified, skip router validation\n+        pass\n+    elif not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n     ContentType.objects.clear_cache()\n@@ -102,6 +111,15 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     app_models = {model._meta.model_name: model for model in app_config.get_models()}\n     return content_types, app_models\n \n+    ContentType.objects.clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n+\n \n def create_contenttypes(\n     app_config,\ndiff --git a/django/db/utils.py b/django/db/utils.py\nindex e45f1db249..2662b0963a 100644\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -250,6 +250,7 @@ class ConnectionRouter:\n                     return allow\n         return obj1._state.db == obj2._state.db\n \n+\n     def allow_migrate(self, db, app_label, **hints):\n         for router in self.routers:\n             try:\n@@ -264,13 +265,14 @@ class ConnectionRouter:\n                 return allow\n         return True\n \n-    def allow_migrate_model(self, db, model):\n-        return self.allow_migrate(\n-            db,\n-            model._meta.app_label,\n-            model_name=model._meta.model_name,\n-            model=model,\n-        )\n+\n+def allow_migrate_model(self, db, model):\n+    return self.allow_migrate(\n+        db,\n+        model._meta.app_label,\n+        model_name=model._meta.model_name,\n+        model=model,\n+    )\n \n     def get_migratable_models(self, app_config, db, include_auto_created=False):\n         \"\"\"Return app models allowed to be migrated on provided db.\"\"\"\n"
  }
}