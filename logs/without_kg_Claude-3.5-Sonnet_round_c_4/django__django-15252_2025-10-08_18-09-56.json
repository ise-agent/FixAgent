{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/migrations/recorder.py lines 59-70)": "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if migration is allowed on this database connection\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n            return\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
    "Location 2 (/root/hy/projects_4/django/django/db/migrations/recorder.py lines 84-87)": "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
    "Location 3 (/root/hy/projects_4/django/django/db/migrations/recorder.py lines 89-92)": "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if migrations are allowed on this database\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/django/django/db/migrations/recorder.py lines 59-70)": [
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if migration is allowed on this database connection\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n            return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if migration is allowed on this database connection\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n            return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Check if migrations are allowed on this database\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\ndef ensure_schema(self):\n    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n    # Check if migration is allowed on this database\n    from django.db import router\n    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n        return\n    \n    # If the table's there, that's fine - we've never changed its schema\n    # in the codebase.\n    if self.has_table():\n        return\n    # Make the table\n    try:\n        with self.connection.schema_editor() as editor:\n            editor.create_model(self.Migration)\n    except DatabaseError as exc:\n        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Check if migrations are allowed on this database\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Check if migration is allowed on this database\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Check if migration is allowed on this database\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\ndef ensure_schema(self):\n    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n    # Check if migration is allowed on this database\n    from django.db import router\n    if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n        return\n    \n    # If the table's there, that's fine - we've never changed its schema\n    # in the codebase.\n    if self.has_table():\n        return\n    # Make the table\n    try:\n        with self.connection.schema_editor() as editor:\n            editor.create_model(self.Migration)\n    except DatabaseError as exc:\n        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n"
    ],
    "Location 2 (/root/hy/projects_4/django/django/db/migrations/recorder.py lines 84-87)": [
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\ndef record_applied(self, app, name):\n    \"\"\"Record that a migration was applied.\"\"\"\n    from django.db import router\n    if router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Import here to avoid circular imports\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Import here to avoid circular imports\n        from django.db import router\n        \n        # Check if migration is allowed on this database\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            self.ensure_schema()\n            self.migration_qs.create(app=app, name=name)\n",
      "\ndef ensure_schema(self):\n    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n    # If the table's there, that's fine - we've never changed its schema\n    # in the codebase.\n    if self.has_table():\n        return\n    \n    # Check if migration is allowed on this database\n    from django.db import router\n    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n        return\n    \n    # Make the table\n    try:\n        with self.connection.schema_editor() as editor:\n            editor.create_model(self.Migration)\n    except DatabaseError as exc:\n        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        \n        # Check if migration recording is allowed on this database\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        \n        # Check if migration recording is allowed on this database\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n"
    ],
    "Location 3 (/root/hy/projects_4/django/django/db/migrations/recorder.py lines 89-92)": [
      "\ndef record_unapplied(self, app, name):\n    \"\"\"Record that a migration was unapplied.\"\"\"\n    from django.db import router\n    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n        return\n    self.ensure_schema()\n    self.migration_qs.filter(app=app, name=name).delete()\n",
      "\ndef ensure_schema(self):\n    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n    # Check if migration is allowed on this database connection\n    from django.db import router\n    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n        return\n    \n    # If the table's there, that's fine - we've never changed its schema\n    # in the codebase.\n    if self.has_table():\n        return\n    # Make the table\n    try:\n        with self.connection.schema_editor() as editor:\n            editor.create_model(self.Migration)\n    except DatabaseError as exc:\n        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if migration is allowed on this database connection\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Check if migrations are allowed on this database connection\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\ndef ensure_schema(self):\n    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n    # If the table's there, that's fine - we've never changed its schema\n    # in the codebase.\n    if self.has_table():\n        return\n    # Check if migrations are allowed on this database\n    from django.db import router\n    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n        return\n    # Make the table\n    try:\n        with self.connection.schema_editor() as editor:\n            editor.create_model(self.Migration)\n    except DatabaseError as exc:\n        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if migration is allowed on this database\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if migrations are allowed on this database\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Check if migration is allowed on this database connection\n        from django.db import router\n        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..9da7745f8b 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,12 +56,17 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if migration is allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -81,11 +86,13 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n         self.ensure_schema()\n",
    "variant_0": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..7f15929f9c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,13 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migration is allowed on this database connection\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -81,15 +86,36 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migrations are allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+        \n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_1": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..f1cdbe596e 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,14 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migration is allowed on this database connection\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+            return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -81,15 +87,26 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+def record_unapplied(self, app, name):\n+    \"\"\"Record that a migration was unapplied.\"\"\"\n+    from django.db import router\n+    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+        return\n+    self.ensure_schema()\n+    self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_2": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..df645419b1 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,14 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migration is allowed on this database connection\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+            return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -81,15 +87,32 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n-    def record_applied(self, app, name):\n-        \"\"\"Record that a migration was applied.\"\"\"\n+\n+def record_applied(self, app, name):\n+    \"\"\"Record that a migration was applied.\"\"\"\n+    from django.db import router\n+    if router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+def ensure_schema(self):\n+    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+    # Check if migration is allowed on this database connection\n+    from django.db import router\n+    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+        return\n+    \n+    # If the table's there, that's fine - we've never changed its schema\n+    # in the codebase.\n+    if self.has_table():\n+        return\n+    # Make the table\n+    try:\n+        with self.connection.schema_editor() as editor:\n+            editor.create_model(self.Migration)\n+    except DatabaseError as exc:\n+        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_3": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..4b059d8d39 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,12 +56,17 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if migrations are allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -81,15 +86,45 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n-    def record_applied(self, app, name):\n-        \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Import here to avoid circular imports\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+\n+\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migration is allowed on this database connection\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_4": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..a3dd9ba491 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,18 +56,24 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n-        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n-        # If the table's there, that's fine - we've never changed its schema\n-        # in the codebase.\n-        if self.has_table():\n-            return\n-        # Make the table\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+\n+def ensure_schema(self):\n+    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+    # Check if migration is allowed on this database\n+    from django.db import router\n+    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+        return\n+    \n+    # If the table's there, that's fine - we've never changed its schema\n+    # in the codebase.\n+    if self.has_table():\n+        return\n+    # Make the table\n+    try:\n+        with self.connection.schema_editor() as editor:\n+            editor.create_model(self.Migration)\n+    except DatabaseError as exc:\n+        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def applied_migrations(self):\n         \"\"\"\n@@ -81,15 +87,44 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n-    def record_applied(self, app, name):\n-        \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Import here to avoid circular imports\n+        from django.db import router\n+        \n+        # Check if migration is allowed on this database\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+\n+\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Check if migrations are allowed on this database connection\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_5": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..ed034092d3 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,12 +56,17 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if migrations are allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -81,15 +86,31 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.create(app=app, name=name)\n-\n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+        from django.db import router\n+        if router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            self.ensure_schema()\n+            self.migration_qs.create(app=app, name=name)\n+\n+\n+def ensure_schema(self):\n+    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+    # If the table's there, that's fine - we've never changed its schema\n+    # in the codebase.\n+    if self.has_table():\n+        return\n+    # Check if migrations are allowed on this database\n+    from django.db import router\n+    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+        return\n+    # Make the table\n+    try:\n+        with self.connection.schema_editor() as editor:\n+            editor.create_model(self.Migration)\n+    except DatabaseError as exc:\n+        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_6": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..0dd2ad47a4 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,12 +56,17 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if migration is allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -81,15 +86,44 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n-    def record_applied(self, app, name):\n-        \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+def ensure_schema(self):\n+    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+    # If the table's there, that's fine - we've never changed its schema\n+    # in the codebase.\n+    if self.has_table():\n+        return\n+    \n+    # Check if migration is allowed on this database\n+    from django.db import router\n+    if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+        return\n+    \n+    # Make the table\n+    try:\n+        with self.connection.schema_editor() as editor:\n+            editor.create_model(self.Migration)\n+    except DatabaseError as exc:\n+        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+\n+\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migration is allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_7": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..7c7bcd5ec6 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,12 +56,17 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if migration is allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -81,15 +86,36 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migration recording is allowed on this database\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migrations are allowed on this database\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+        \n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n",
    "variant_8": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..3cb34571a5 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,18 +56,24 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n-        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n-        # If the table's there, that's fine - we've never changed its schema\n-        # in the codebase.\n-        if self.has_table():\n-            return\n-        # Make the table\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+\n+def ensure_schema(self):\n+    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+    # Check if migration is allowed on this database\n+    from django.db import router\n+    if not router.allow_migrate(self.connection.alias, 'migrations', model_name='Migration'):\n+        return\n+    \n+    # If the table's there, that's fine - we've never changed its schema\n+    # in the codebase.\n+    if self.has_table():\n+        return\n+    # Make the table\n+    try:\n+        with self.connection.schema_editor() as editor:\n+            editor.create_model(self.Migration)\n+    except DatabaseError as exc:\n+        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def applied_migrations(self):\n         \"\"\"\n@@ -81,15 +87,35 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migration recording is allowed on this database\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+            \n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+    def ensure_schema(self):\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Check if migration is allowed on this database connection\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, app_label='migrations', model_name='Migration'):\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n"
  }
}