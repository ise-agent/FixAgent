{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/assertion/rewrite.py lines 680-682)": "\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n",
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/assertion/rewrite.py lines 744-746)": "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    if not isinstance(docstring, str):\n        return False\n    return \"PYTEST_DONT_REWRITE\" in docstring\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/pytest/src/_pytest/assertion/rewrite.py lines 680-682)": [
      "\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n",
      "\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n",
      "\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n",
      "\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n",
      "\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n"
    ],
    "Location 2 (/root/hy/projects_4/pytest/src/_pytest/assertion/rewrite.py lines 744-746)": [
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    if not isinstance(docstring, str):\n        return False\n    return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    if not isinstance(docstring, str):\n        return False\n    return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    if not isinstance(docstring, str):\n        return False\n    return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    if not isinstance(docstring, str):\n        return False\n    return \"PYTEST_DONT_REWRITE\" in docstring\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..69bac4e8f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -677,8 +677,9 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n+\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -741,8 +742,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_0": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..db31527c9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,6 +667,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n+        if doc is not None and self.is_rewrite_disabled(doc):\n+            return\n+        pos = 0\n+        item = None\n+        for item in mod.body:\n+            if (\n+                expect_docstring\n+                and isinstance(item, ast.Expr)\n+                and isinstance(item.value, ast.Constant)\n+            ):\n+\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n@@ -678,7 +689,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -690,6 +701,16 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n+                expect_docstring = False\n+            elif (\n+                isinstance(item, ast.ImportFrom)\n+                and item.level == 0\n+                and item.module == \"__future__\"\n+            ):\n+                pass\n+            else:\n+                break\n+            pos += 1\n         # Special case: for a decorated function, set the lineno to that of the\n         # first decorator, not the `def`. Issue #4984.\n         if isinstance(item, ast.FunctionDef) and item.decorator_list:\n@@ -741,9 +762,12 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    if not isinstance(docstring, str):\n+        return False\n+    return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_1": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..56e6cfc24 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,6 +667,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n+        if doc is not None and self.is_rewrite_disabled(doc):\n+            return\n+        pos = 0\n+        item = None\n+        for item in mod.body:\n+            if (\n+                expect_docstring\n+                and isinstance(item, ast.Expr)\n+                and isinstance(item.value, ast.Constant)\n+            ):\n+\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n@@ -678,7 +689,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -690,6 +701,16 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n+                expect_docstring = False\n+            elif (\n+                isinstance(item, ast.ImportFrom)\n+                and item.level == 0\n+                and item.module == \"__future__\"\n+            ):\n+                pass\n+            else:\n+                break\n+            pos += 1\n         # Special case: for a decorated function, set the lineno to that of the\n         # first decorator, not the `def`. Issue #4984.\n         if isinstance(item, ast.FunctionDef) and item.decorator_list:\n@@ -741,8 +762,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_2": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..4eb1ceebb 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -677,9 +677,9 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n+\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+            return\n                 expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n@@ -741,8 +741,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_3": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..56e6cfc24 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,6 +667,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n+        if doc is not None and self.is_rewrite_disabled(doc):\n+            return\n+        pos = 0\n+        item = None\n+        for item in mod.body:\n+            if (\n+                expect_docstring\n+                and isinstance(item, ast.Expr)\n+                and isinstance(item.value, ast.Constant)\n+            ):\n+\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n@@ -678,7 +689,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -690,6 +701,16 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n+                expect_docstring = False\n+            elif (\n+                isinstance(item, ast.ImportFrom)\n+                and item.level == 0\n+                and item.module == \"__future__\"\n+            ):\n+                pass\n+            else:\n+                break\n+            pos += 1\n         # Special case: for a decorated function, set the lineno to that of the\n         # first decorator, not the `def`. Issue #4984.\n         if isinstance(item, ast.FunctionDef) and item.decorator_list:\n@@ -741,8 +762,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_4": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..f18b16274 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -677,9 +677,9 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n+\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+            return\n                 expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n@@ -741,9 +741,12 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    if not isinstance(docstring, str):\n+        return False\n+    return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_5": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..f18b16274 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -677,9 +677,9 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n+\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+            return\n                 expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n@@ -741,9 +741,12 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    if not isinstance(docstring, str):\n+        return False\n+    return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_6": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..56e6cfc24 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,6 +667,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n+        if doc is not None and self.is_rewrite_disabled(doc):\n+            return\n+        pos = 0\n+        item = None\n+        for item in mod.body:\n+            if (\n+                expect_docstring\n+                and isinstance(item, ast.Expr)\n+                and isinstance(item.value, ast.Constant)\n+            ):\n+\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n@@ -678,7 +689,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -690,6 +701,16 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n+                expect_docstring = False\n+            elif (\n+                isinstance(item, ast.ImportFrom)\n+                and item.level == 0\n+                and item.module == \"__future__\"\n+            ):\n+                pass\n+            else:\n+                break\n+            pos += 1\n         # Special case: for a decorated function, set the lineno to that of the\n         # first decorator, not the `def`. Issue #4984.\n         if isinstance(item, ast.FunctionDef) and item.decorator_list:\n@@ -741,8 +762,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_7": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..db31527c9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,6 +667,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n+        if doc is not None and self.is_rewrite_disabled(doc):\n+            return\n+        pos = 0\n+        item = None\n+        for item in mod.body:\n+            if (\n+                expect_docstring\n+                and isinstance(item, ast.Expr)\n+                and isinstance(item.value, ast.Constant)\n+            ):\n+\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n@@ -678,7 +689,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -690,6 +701,16 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n+                expect_docstring = False\n+            elif (\n+                isinstance(item, ast.ImportFrom)\n+                and item.level == 0\n+                and item.module == \"__future__\"\n+            ):\n+                pass\n+            else:\n+                break\n+            pos += 1\n         # Special case: for a decorated function, set the lineno to that of the\n         # first decorator, not the `def`. Issue #4984.\n         if isinstance(item, ast.FunctionDef) and item.decorator_list:\n@@ -741,9 +762,12 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    if not isinstance(docstring, str):\n+        return False\n+    return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_8": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..db31527c9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,6 +667,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n+        if doc is not None and self.is_rewrite_disabled(doc):\n+            return\n+        pos = 0\n+        item = None\n+        for item in mod.body:\n+            if (\n+                expect_docstring\n+                and isinstance(item, ast.Expr)\n+                and isinstance(item.value, ast.Constant)\n+            ):\n+\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n@@ -678,7 +689,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -690,6 +701,16 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n+                expect_docstring = False\n+            elif (\n+                isinstance(item, ast.ImportFrom)\n+                and item.level == 0\n+                and item.module == \"__future__\"\n+            ):\n+                pass\n+            else:\n+                break\n+            pos += 1\n         # Special case: for a decorated function, set the lineno to that of the\n         # first decorator, not the `def`. Issue #4984.\n         if isinstance(item, ast.FunctionDef) and item.decorator_list:\n@@ -741,9 +762,12 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    if not isinstance(docstring, str):\n+        return False\n+    return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n"
  }
}