{
  "zero_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/autodoc/__init__.py lines 1077-1080)": "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_4/sphinx/sphinx/ext/autodoc/__init__.py lines 1077-1080)": [
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n",
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n",
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n",
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n",
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n",
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n",
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n",
      "\n    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n        members = self.get_module_members()\n        if want_all:\n            if self.__all__ is None:\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, list(members.values())\n            else:\n                for member in members.values():\n                    if member.__name__ not in self.__all__:\n                        member.skipped = True\n\n                return False, list(members.values())\n        else:\n            memberlist = self.options.members or []\n            ret = []\n            for name in memberlist:\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..109526dff 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,8 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..4024d648e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,11 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+\n+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n+        if want_all:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n@@ -1084,6 +1088,16 @@ class ModuleDocumenter(Documenter):\n                         member.skipped = True\n \n                 return False, list(members.values())\n+        else:\n+            memberlist = self.options.members or []\n+            ret = []\n+            for name in memberlist:\n+            else:\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n+\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n"
  }
}