{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 1084-1090)": "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Get the correct case-sensitive app label from the apps registry\n            raw_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(raw_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Get the correct case-sensitive app label for through model\n            raw_through_app_label = field.remote_field.through._meta.app_label\n            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
    "Location 2 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 1077-1094)": "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Get the correct case-sensitive app label from the apps registry\n            dep_app_label = self.from_state.apps.get_app_config(field.remote_field.model._meta.app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Get the correct case-sensitive app label for through model\n            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
    "Location 3 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 230-232)": "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    # Get the correct case-sensitive app label from the apps registry\n                    through_app_label = self.from_state.apps.get_app_config(\n                        old_field.remote_field.through._meta.app_label\n                    ).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
    "Location 4 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 775-776)": "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 1084-1090)": [
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Get the correct case-sensitive app label from the apps registry\n            dep_app_label = self.from_state.apps.get_app_config(field.remote_field.model._meta.app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Get the correct case-sensitive app label for through model\n            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Resolve the correct case-sensitive app label from the apps registry\n            dep_app_label = self.from_state.apps.get_app_config(field.remote_field.model._meta.app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Resolve the correct case-sensitive app label for through model as well\n            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Use the correct case-sensitive app label from apps registry\n            raw_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(raw_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Use the correct case-sensitive app label for through model\n            raw_through_app_label = field.remote_field.through._meta.app_label\n            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\ndef _get_dependencies_for_foreign_key(self, field):\n    # Account for FKs to swappable models\n    swappable_setting = getattr(field, 'swappable_setting', None)\n    if swappable_setting is not None:\n        dep_app_label = \"__setting__\"\n        dep_object_name = swappable_setting\n    else:\n        # Get the correct case-sensitive app label from the apps registry\n        model_app_label = field.remote_field.model._meta.app_label\n        dep_app_label = self.from_state.apps.get_app_config(model_app_label).label\n        dep_object_name = field.remote_field.model._meta.object_name\n    dependencies = [(dep_app_label, dep_object_name, None, True)]\n    if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n        # Get the correct case-sensitive app label for through model\n        through_app_label = field.remote_field.through._meta.app_label\n        through_app_config = self.from_state.apps.get_app_config(through_app_label)\n        dependencies.append((\n            through_app_config.label,\n            field.remote_field.through._meta.object_name,\n            None,\n            True,\n        ))\n    return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Get the correct case-sensitive app label from the apps registry\n            raw_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(raw_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Get the correct case-sensitive app label for through model\n            raw_through_app_label = field.remote_field.through._meta.app_label\n            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\ndef _get_dependencies_for_foreign_key(self, field):\n    # Account for FKs to swappable models\n    swappable_setting = getattr(field, 'swappable_setting', None)\n    if swappable_setting is not None:\n        dep_app_label = \"__setting__\"\n        dep_object_name = swappable_setting\n    else:\n        # Use the correct case-sensitive app label from apps registry\n        dep_app_label = self.from_state.apps.get_app_config(field.remote_field.model._meta.app_label).label\n        dep_object_name = field.remote_field.model._meta.object_name\n    dependencies = [(dep_app_label, dep_object_name, None, True)]\n    if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n        # Use the correct case-sensitive app label for through model as well\n        through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n        dependencies.append((\n            through_app_label,\n            field.remote_field.through._meta.object_name,\n            None,\n            True,\n        ))\n    return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Use the correct case-sensitive app label from apps registry\n            raw_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(raw_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Use the correct case-sensitive app label for through model\n            raw_through_app_label = field.remote_field.through._meta.app_label\n            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Use the apps registry to get the correct case-sensitive app label\n            dep_app_label = self.from_state.apps.get_app_config(field.remote_field.model._meta.app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Use the apps registry to get the correct case-sensitive app label for through model\n            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 1077-1094)": [
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Resolve the correct case-sensitive app label from the apps registry\n            lowercase_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(lowercase_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Resolve the correct case-sensitive app label for through model as well\n            through_lowercase_app_label = field.remote_field.through._meta.app_label\n            through_dep_app_label = self.from_state.apps.get_app_config(through_lowercase_app_label).label\n            dependencies.append((\n                through_dep_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Resolve the correct case-sensitive app label from the apps registry\n            model_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(model_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Resolve the correct case-sensitive app label for through model\n            through_app_label = field.remote_field.through._meta.app_label\n            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n            dependencies.append((\n                through_dep_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Use the correct case-sensitive app label from apps registry\n            model_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(model_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Use the correct case-sensitive app label for through models too\n            through_app_label = field.remote_field.through._meta.app_label\n            dependencies.append((\n                self.from_state.apps.get_app_config(through_app_label).label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Get the correct case-sensitive app label from the apps registry\n            app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Get the correct case-sensitive app label for through model\n            through_app_label = field.remote_field.through._meta.app_label\n            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n            dependencies.append((\n                through_dep_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Resolve correct case-sensitive app label from apps registry\n            app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Resolve correct case-sensitive app label for through model\n            through_app_label = field.remote_field.through._meta.app_label\n            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n            dependencies.append((\n                through_dep_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Get the correct case-sensitive app label from the apps registry\n            model_app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(model_app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Get the correct case-sensitive app label for through model\n            through_app_label = field.remote_field.through._meta.app_label\n            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n            dependencies.append((\n                through_dep_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Resolve correct case-sensitive app label from apps registry\n            raw_app_label = field.remote_field.model._meta.app_label\n            try:\n                dep_app_label = self.from_state.apps.get_app_config(raw_app_label).label\n            except LookupError:\n                # Fallback to raw app label if not found in registry\n                dep_app_label = raw_app_label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Resolve correct case-sensitive app label for through model\n            raw_through_app_label = field.remote_field.through._meta.app_label\n            try:\n                through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n            except LookupError:\n                # Fallback to raw app label if not found in registry\n                through_app_label = raw_through_app_label\n            dependencies.append((\n                through_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n",
      "\n    def _get_dependencies_for_foreign_key(self, field):\n        # Account for FKs to swappable models\n        swappable_setting = getattr(field, 'swappable_setting', None)\n        if swappable_setting is not None:\n            dep_app_label = \"__setting__\"\n            dep_object_name = swappable_setting\n        else:\n            # Use the apps registry to get the correct case-sensitive app label\n            app_label = field.remote_field.model._meta.app_label\n            dep_app_label = self.from_state.apps.get_app_config(app_label).label\n            dep_object_name = field.remote_field.model._meta.object_name\n        dependencies = [(dep_app_label, dep_object_name, None, True)]\n        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n            # Use the apps registry to get the correct case-sensitive app label for through model\n            through_app_label = field.remote_field.through._meta.app_label\n            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n            dependencies.append((\n                through_dep_app_label,\n                field.remote_field.through._meta.object_name,\n                None,\n                True,\n            ))\n        return dependencies\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 230-232)": [
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    # Get the correct case-sensitive app label from apps registry\n                    through_app_label = self.from_state.apps.get_app_config(\n                        old_field.remote_field.through._meta.app_label\n                    ).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    # Resolve the correct case-sensitive app label from the apps registry\n                    through_app_label = self.from_state.apps.get_app_config(\n                        old_field.remote_field.through._meta.app_label\n                    ).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    # Get the correct case-sensitive app label from the apps registry\n                    through_app_label = self.from_state.apps.get_app_config(\n                        old_field.remote_field.through._meta.app_label\n                    ).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    through_app_label = self.from_state.apps.get_app_config(old_field.remote_field.through._meta.app_label).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    # Resolve the correct case-sensitive app label from the apps registry\n                    through_app_label = self.from_state.apps.get_app_config(\n                        old_field.remote_field.through._meta.app_label\n                    ).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    through_app_label = self.from_state.apps.get_app_config(old_field.remote_field.through._meta.app_label).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    # Resolve the correct case-sensitive app label\n                    through_app_label = self.from_state.apps.get_app_config(\n                        old_field.remote_field.through._meta.app_label\n                    ).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n",
      "\n    def _generate_through_model_map(self):\n        \"\"\"Through model map generation.\"\"\"\n        for app_label, model_name in sorted(self.old_model_keys):\n            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n            old_model_state = self.from_state.models[app_label, old_model_name]\n            for field_name in old_model_state.fields:\n                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                        not old_field.remote_field.through._meta.auto_created):\n                    # Get the correct case-sensitive app label from apps registry\n                    through_app_label = self.from_state.apps.get_app_config(\n                        old_field.remote_field.through._meta.app_label\n                    ).label\n                    through_key = (\n                        through_app_label,\n                        old_field.remote_field.through._meta.model_name,\n                    )\n                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n"
    ],
    "Location 4 (/root/hy/projects/django/django/db/migrations/autodetector.py lines 775-776)": [
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n",
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n",
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n",
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n",
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n",
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n",
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n",
      "\n            # Then remove each related field\n            for name in sorted(related_fields):\n                self.add_operation(\n                    app_label,\n                    operations.RemoveField(\n                        model_name=model_name,\n                        name=name,\n                    )\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..f45a70ee12 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -227,9 +227,10 @@ class MigrationAutodetector:\n             for field_name in old_model_state.fields:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n                         not old_field.remote_field.through._meta.auto_created):\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        self.from_state.apps.get_app_config(old_field.remote_field.through._meta.app_label).label,\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -772,6 +773,7 @@ class MigrationAutodetector:\n                     app_label,\n                     operations.RemoveField(\n                         model_name=model_name,\n+\n                         name=name,\n                     )\n                 )\n@@ -1074,6 +1076,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,17 +1084,18 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(field.remote_field.model._meta.app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n         return dependencies\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\n",
    "variant_0": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..45c29afddd 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,15 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    # Get the correct case-sensitive app label from the apps registry\n+                    through_app_label = self.from_state.apps.get_app_config(\n+                        old_field.remote_field.through._meta.app_label\n+                    ).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +783,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +798,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1098,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,17 +1106,37 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Get the correct case-sensitive app label from the apps registry\n+            dep_app_label = self.from_state.apps.get_app_config(field.remote_field.model._meta.app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Get the correct case-sensitive app label for through model\n+            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n         return dependencies\n+            dep_object_name = field.remote_field.model._meta.object_name\n+        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Get the correct case-sensitive app label for through model\n+            raw_through_app_label = field.remote_field.through._meta.app_label\n+            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n+            dependencies.append((\n+                through_app_label,\n+                field.remote_field.through._meta.object_name,\n+                None,\n+                True,\n+            ))\n+        return dependencies\n+                None,\n+                True,\n+            ))\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\n",
    "variant_1": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..0c3a976431 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,15 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    # Get the correct case-sensitive app label from apps registry\n+                    through_app_label = self.from_state.apps.get_app_config(\n+                        old_field.remote_field.through._meta.app_label\n+                    ).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +783,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +798,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1098,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,16 +1106,36 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Resolve the correct case-sensitive app label from the apps registry\n+            lowercase_app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(lowercase_app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Resolve the correct case-sensitive app label for through model as well\n+            through_lowercase_app_label = field.remote_field.through._meta.app_label\n+            through_dep_app_label = self.from_state.apps.get_app_config(through_lowercase_app_label).label\n+            dependencies.append((\n+                through_dep_app_label,\n+                field.remote_field.through._meta.object_name,\n+                None,\n+                True,\n+            ))\n+        return dependencies\n+        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Get the correct case-sensitive app label for through model\n+            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n+        return dependencies\n+                None,\n+                True,\n+            ))\n         return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n",
    "variant_2": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..a96f27f3d9 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,15 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    # Resolve the correct case-sensitive app label from the apps registry\n+                    through_app_label = self.from_state.apps.get_app_config(\n+                        old_field.remote_field.through._meta.app_label\n+                    ).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +783,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +798,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1098,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,16 +1106,36 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Resolve the correct case-sensitive app label from the apps registry\n+            model_app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(model_app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Resolve the correct case-sensitive app label for through model\n+            through_app_label = field.remote_field.through._meta.app_label\n+            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n+            dependencies.append((\n+                through_dep_app_label,\n+                field.remote_field.through._meta.object_name,\n+                None,\n+                True,\n+            ))\n+        return dependencies\n+        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Resolve the correct case-sensitive app label for through model as well\n+            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n+        return dependencies\n+                None,\n+                True,\n+            ))\n         return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n",
    "variant_3": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..bd5dd01e58 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,15 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    # Get the correct case-sensitive app label from the apps registry\n+                    through_app_label = self.from_state.apps.get_app_config(\n+                        old_field.remote_field.through._meta.app_label\n+                    ).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +783,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +798,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1098,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,17 +1106,38 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Use the correct case-sensitive app label from apps registry\n+            model_app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(model_app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Use the correct case-sensitive app label for through models too\n+            through_app_label = field.remote_field.through._meta.app_label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                self.from_state.apps.get_app_config(through_app_label).label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n         return dependencies\n+            dep_object_name = field.remote_field.model._meta.object_name\n+        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Use the correct case-sensitive app label for through model\n+            raw_through_app_label = field.remote_field.through._meta.app_label\n+            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n+            dependencies.append((\n+                through_app_label,\n+                field.remote_field.through._meta.object_name,\n+                None,\n+                True,\n+            ))\n+        return dependencies\n+                None,\n+                True,\n+            ))\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\n",
    "variant_4": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..56e089a1b0 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,12 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    through_app_label = self.from_state.apps.get_app_config(old_field.remote_field.through._meta.app_label).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +780,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +795,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1095,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,17 +1103,39 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Get the correct case-sensitive app label from the apps registry\n+            app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Get the correct case-sensitive app label for through model\n+            through_app_label = field.remote_field.through._meta.app_label\n+            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_dep_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n         return dependencies\n+        dep_object_name = field.remote_field.model._meta.object_name\n+    dependencies = [(dep_app_label, dep_object_name, None, True)]\n+    if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+        # Get the correct case-sensitive app label for through model\n+        through_app_label = field.remote_field.through._meta.app_label\n+        through_app_config = self.from_state.apps.get_app_config(through_app_label)\n+        dependencies.append((\n+            through_app_config.label,\n+            field.remote_field.through._meta.object_name,\n+            None,\n+            True,\n+        ))\n+    return dependencies\n+                None,\n+                True,\n+            ))\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\n",
    "variant_5": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..8b9b7657ab 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,15 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    # Resolve the correct case-sensitive app label from the apps registry\n+                    through_app_label = self.from_state.apps.get_app_config(\n+                        old_field.remote_field.through._meta.app_label\n+                    ).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +783,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +798,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1098,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,17 +1106,39 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Resolve correct case-sensitive app label from apps registry\n+            app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Resolve correct case-sensitive app label for through model\n+            through_app_label = field.remote_field.through._meta.app_label\n+            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_dep_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n         return dependencies\n+            dep_object_name = field.remote_field.model._meta.object_name\n+        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Get the correct case-sensitive app label for through model\n+            raw_through_app_label = field.remote_field.through._meta.app_label\n+            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n+            dependencies.append((\n+                through_app_label,\n+                field.remote_field.through._meta.object_name,\n+                None,\n+                True,\n+            ))\n+        return dependencies\n+                None,\n+                True,\n+            ))\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\n",
    "variant_6": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..de225d230f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,12 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    through_app_label = self.from_state.apps.get_app_config(old_field.remote_field.through._meta.app_label).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +780,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +795,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1095,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,17 +1103,37 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Get the correct case-sensitive app label from the apps registry\n+            model_app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(model_app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Get the correct case-sensitive app label for through model\n+            through_app_label = field.remote_field.through._meta.app_label\n+            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_dep_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n         return dependencies\n+    dependencies = [(dep_app_label, dep_object_name, None, True)]\n+    if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+        # Use the correct case-sensitive app label for through model as well\n+        through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n+        dependencies.append((\n+            through_app_label,\n+            field.remote_field.through._meta.object_name,\n+            None,\n+            True,\n+        ))\n+    return dependencies\n+                None,\n+                True,\n+            ))\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\n",
    "variant_7": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..49f0cb3a8b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,15 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    # Resolve the correct case-sensitive app label\n+                    through_app_label = self.from_state.apps.get_app_config(\n+                        old_field.remote_field.through._meta.app_label\n+                    ).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +783,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +798,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1098,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,17 +1106,47 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Resolve correct case-sensitive app label from apps registry\n+            raw_app_label = field.remote_field.model._meta.app_label\n+            try:\n+                dep_app_label = self.from_state.apps.get_app_config(raw_app_label).label\n+            except LookupError:\n+                # Fallback to raw app label if not found in registry\n+                dep_app_label = raw_app_label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Resolve correct case-sensitive app label for through model\n+            raw_through_app_label = field.remote_field.through._meta.app_label\n+            try:\n+                through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n+            except LookupError:\n+                # Fallback to raw app label if not found in registry\n+                through_app_label = raw_through_app_label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n         return dependencies\n+            dep_object_name = field.remote_field.model._meta.object_name\n+        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Use the correct case-sensitive app label for through model\n+            raw_through_app_label = field.remote_field.through._meta.app_label\n+            through_app_label = self.from_state.apps.get_app_config(raw_through_app_label).label\n+            dependencies.append((\n+                through_app_label,\n+                field.remote_field.through._meta.object_name,\n+                None,\n+                True,\n+            ))\n+        return dependencies\n+                None,\n+                True,\n+            ))\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\n",
    "variant_8": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..141e4ce600 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -219,6 +219,15 @@ class MigrationAutodetector:\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n+    def _generate_through_model_map(self):\n+        \"\"\"Through model map generation.\"\"\"\n+        for app_label, model_name in sorted(self.old_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            for field_name in old_model_state.fields:\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n+\n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n         for app_label, model_name in sorted(self.old_model_keys):\n@@ -228,8 +237,15 @@ class MigrationAutodetector:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n+                    # Get the correct case-sensitive app label from apps registry\n+                    through_app_label = self.from_state.apps.get_app_config(\n+                        old_field.remote_field.through._meta.app_label\n+                    ).label\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n+                        through_app_label,\n+                        old_field.remote_field.through._meta.model_name,\n+                    )\n+                    self.through_users[through_key] = (app_label, old_model_name, field_name)\n                         old_field.remote_field.through._meta.model_name,\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n@@ -767,6 +783,13 @@ class MigrationAutodetector:\n                     )\n                 )\n             # Then remove each related field\n+            for name in sorted(related_fields):\n+                self.add_operation(\n+                    app_label,\n+                    operations.RemoveField(\n+                        model_name=model_name,\n+\n+            # Then remove each related field\n             for name in sorted(related_fields):\n                 self.add_operation(\n                     app_label,\n@@ -775,6 +798,7 @@ class MigrationAutodetector:\n                         name=name,\n                     )\n                 )\n+                )\n             # Finally, remove the model.\n             # This depends on both the removal/alteration of all incoming fields\n             # and the removal of all its own related fields, and if it's\n@@ -1074,6 +1098,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n+\n     def _get_dependencies_for_foreign_key(self, field):\n         # Account for FKs to swappable models\n         swappable_setting = getattr(field, 'swappable_setting', None)\n@@ -1081,16 +1106,36 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n+            # Use the apps registry to get the correct case-sensitive app label\n+            app_label = field.remote_field.model._meta.app_label\n+            dep_app_label = self.from_state.apps.get_app_config(app_label).label\n             dep_object_name = field.remote_field.model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Use the apps registry to get the correct case-sensitive app label for through model\n+            through_app_label = field.remote_field.through._meta.app_label\n+            through_dep_app_label = self.from_state.apps.get_app_config(through_app_label).label\n+            dependencies.append((\n+                through_dep_app_label,\n+                field.remote_field.through._meta.object_name,\n+                None,\n+                True,\n+            ))\n+        return dependencies\n+        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+            # Use the apps registry to get the correct case-sensitive app label for through model\n+            through_app_label = self.from_state.apps.get_app_config(field.remote_field.through._meta.app_label).label\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n+                through_app_label,\n                 field.remote_field.through._meta.object_name,\n                 None,\n                 True,\n             ))\n+        return dependencies\n+                None,\n+                True,\n+            ))\n         return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n"
  }
}