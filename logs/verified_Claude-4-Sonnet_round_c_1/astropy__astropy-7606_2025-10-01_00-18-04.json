{
  "zero_patches": {
    "Location 1 (/root/hy/projects/astropy/astropy/units/core.py lines 1700-1702)": "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
    "Location 2 (/root/hy/projects/astropy/astropy/units/core.py lines 1809-1810)": "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    try:\n        other = Unit(other, parse_strict='silent')\n    except TypeError:\n        return False\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/astropy/astropy/units/core.py lines 1700-1702)": [
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef to_string(self, format=None):\n    return self.name\n\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n"
    ],
    "Location 2 (/root/hy/projects/astropy/astropy/units/core.py lines 1809-1810)": [
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\n    def __eq__(self, other):\n        if other is None:\n            return False\n        other = Unit(other, parse_strict='silent')\n        return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\n    def __eq__(self, other):\n        if other is None:\n            return False\n        other = Unit(other, parse_strict='silent')\n        return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n",
      "\ndef __eq__(self, other):\n    if other is None:\n        return False\n    other = Unit(other, parse_strict='silent')\n    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..d76873beca 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+    def __eq__(self, other):\n+        if other is None:\n+            return False\n+        other = Unit(other, parse_strict='silent')\n+        return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,6 +1809,7 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n+\n                     if parse_strict == 'raise':\n                         raise ValueError(msg)\n                     elif parse_strict == 'warn':\n",
    "variant_0": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..188abe18dc 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,15 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    try:\n+        other = Unit(other, parse_strict='silent')\n+    except TypeError:\n+        return False\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_1": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..872ffebc02 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_2": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..5cde3aeb91 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+    def __eq__(self, other):\n+        if other is None:\n+            return False\n+        other = Unit(other, parse_strict='silent')\n+        return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_3": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..872ffebc02 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_4": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..872ffebc02 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_5": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..872ffebc02 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_6": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..6219637495 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,15 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def to_string(self, format=None):\n+    return self.name\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1812,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+    def __eq__(self, other):\n+        if other is None:\n+            return False\n+        other = Unit(other, parse_strict='silent')\n+        return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_7": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..872ffebc02 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n",
    "variant_8": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..872ffebc02 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1697,9 +1697,12 @@ class UnrecognizedUnit(IrreducibleUnit):\n     def __str__(self):\n         return self.name\n \n-    def to_string(self, format=None):\n-        return self.name\n \n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n     def _unrecognized_operator(self, *args, **kwargs):\n         raise ValueError(\n             \"The unit {0!r} is unrecognized, so all arithmetic operations \"\n@@ -1806,8 +1809,12 @@ class _UnitMetaClass(InheritDocstrings):\n                         format_clause = ''\n                     msg = (\"'{0}' did not parse as {1}unit: {2}\"\n                            .format(s, format_clause, str(e)))\n-                    if parse_strict == 'raise':\n-                        raise ValueError(msg)\n+\n+def __eq__(self, other):\n+    if other is None:\n+        return False\n+    other = Unit(other, parse_strict='silent')\n+    return isinstance(other, UnrecognizedUnit) and self.name == other.name\n                     elif parse_strict == 'warn':\n                         warnings.warn(msg, UnitsWarning)\n                     else:\n"
  }
}