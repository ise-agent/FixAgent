{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/functions/datetime.py lines 167-171)": "\n# Remove the incorrect YearLookup registrations for ExtractIsoYear\n# These will be replaced with proper IsoYearLookup classes\n\n# ExtractIsoYear.register_lookup(YearExact)\n# ExtractIsoYear.register_lookup(YearGt)\n# ExtractIsoYear.register_lookup(YearGte)\n# ExtractIsoYear.register_lookup(YearLt)\n# ExtractIsoYear.register_lookup(YearLte)\n\n# Register ISO-specific lookups (these classes will be defined in lookups.py)\nExtractIsoYear.register_lookup(IsoYearExact)\nExtractIsoYear.register_lookup(IsoYearGt)\nExtractIsoYear.register_lookup(IsoYearGte)\nExtractIsoYear.register_lookup(IsoYearLt)\nExtractIsoYear.register_lookup(IsoYearLte)\n",
    "Location 2 (/root/hy/projects/django/django/db/models/lookups.py lines 541-547)": "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
    "Location 3 (/root/hy/projects/django/django/db/models/lookups.py lines 572-597)": "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup:\n    def as_sql(self, compiler, connection):\n        # Extract ISO year from the lhs\n        lhs_sql, lhs_params = compiler.compile(self.lhs)\n        \n        # Get the ISO year bounds for the rhs value\n        tzname = None\n        if hasattr(self.lhs, 'tzinfo') and self.lhs.tzinfo is not None:\n            tzname = self.lhs.tzinfo.zone if hasattr(self.lhs.tzinfo, 'zone') else None\n        \n        start, finish = connection.ops.iso_year_lookup_bounds(self.rhs, tzname)\n        params = self.get_bound_params(start, finish)\n        \n        return self.get_direct_rhs_sql(connection, ['%s'] * len(params)), lhs_params + params\n\n    def get_direct_rhs_sql(self, connection, rhs):\n        return connection.operators[self.lookup_name] % rhs\n\n    def get_bound_params(self, start, finish):\n        raise NotImplementedError(\n            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n        )\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n",
    "Location 4 (/root/hy/projects/django/django/db/models/lookups.py lines 549-561)": "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n",
    "Location 5 (/root/hy/projects/django/django/db/models/functions/datetime.py lines 8-10)": "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/functions/datetime.py lines 167-171)": [
      "\n# Remove the incorrect YearLookup registrations for ExtractIsoYear\n# These will be replaced with proper IsoYearLookup classes\n\n# ExtractIsoYear.register_lookup(YearExact)\n# ExtractIsoYear.register_lookup(YearGt)\n# ExtractIsoYear.register_lookup(YearGte)\n# ExtractIsoYear.register_lookup(YearLt)\n# ExtractIsoYear.register_lookup(YearLte)\n\n# Register ISO-specific lookup classes instead\nExtractIsoYear.register_lookup(IsoYearExact)\nExtractIsoYear.register_lookup(IsoYearGt)\nExtractIsoYear.register_lookup(IsoYearGte)\nExtractIsoYear.register_lookup(IsoYearLt)\nExtractIsoYear.register_lookup(IsoYearLte)\n",
      "\n# These lines should be removed - ExtractIsoYear should not use YearLookup classes\n# ExtractIsoYear.register_lookup(YearExact)\n# ExtractIsoYear.register_lookup(YearGt)\n# ExtractIsoYear.register_lookup(YearGte)\n# ExtractIsoYear.register_lookup(YearLt)\n# ExtractIsoYear.register_lookup(YearLte)\n\nExtractIsoYear.register_lookup(IsoYearExact)\nExtractIsoYear.register_lookup(IsoYearGt)\nExtractIsoYear.register_lookup(IsoYearGte)\nExtractIsoYear.register_lookup(IsoYearLt)\nExtractIsoYear.register_lookup(IsoYearLte)\n",
      "\n# Remove the incorrect YearLookup registrations for ExtractIsoYear\n# These will be replaced with proper IsoYearLookup registrations once those classes are created\n",
      "\n# These lines should be removed - ExtractIsoYear should not use YearLookup classes\n# which are designed for calendar years, not ISO years\n",
      "\n# Remove the incorrect YearLookup registrations for ExtractIsoYear\n# These will be replaced with proper ISO year lookup classes\n",
      "\n# Remove these incorrect registrations - they will be replaced with ISO-specific lookups\n# ExtractIsoYear.register_lookup(YearExact)\n# ExtractIsoYear.register_lookup(YearGt)\n# ExtractIsoYear.register_lookup(YearGte)\n# ExtractIsoYear.register_lookup(YearLt)\n# ExtractIsoYear.register_lookup(YearLte)\n\nExtractIsoYear.register_lookup(IsoYearExact)\nExtractIsoYear.register_lookup(IsoYearGt)\nExtractIsoYear.register_lookup(IsoYearGte)\nExtractIsoYear.register_lookup(IsoYearLt)\nExtractIsoYear.register_lookup(IsoYearLte)\n",
      "\n# Remove the incorrect YearLookup registrations for ExtractIsoYear\n# These will be replaced with ISO-specific lookup classes\n\n# ExtractIsoYear.register_lookup(YearExact)\n# ExtractIsoYear.register_lookup(YearGt)\n# ExtractIsoYear.register_lookup(YearGte)\n# ExtractIsoYear.register_lookup(YearLt)\n# ExtractIsoYear.register_lookup(YearLte)\n\n# These registrations will be added after the ISO-specific lookup classes are created\n",
      "\n# Remove these incorrect registrations - they will be replaced with ISO-specific lookups\n# ExtractIsoYear.register_lookup(YearExact)\n# ExtractIsoYear.register_lookup(YearGt)\n# ExtractIsoYear.register_lookup(YearGte)\n# ExtractIsoYear.register_lookup(YearLt)\n# ExtractIsoYear.register_lookup(YearLte)\n\nExtractIsoYear.register_lookup(IsoYearExact)\nExtractIsoYear.register_lookup(IsoYearGt)\nExtractIsoYear.register_lookup(IsoYearGte)\nExtractIsoYear.register_lookup(IsoYearLt)\nExtractIsoYear.register_lookup(IsoYearLte)\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/models/lookups.py lines 541-547)": [
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/models/lookups.py lines 572-597)": [
      "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup:\n    def as_sql(self, compiler, connection):\n        # Avoid the bounds optimization for ISO years - use the default\n        # SQL generation that preserves ISO year semantics\n        return super(YearLookup, self).as_sql(compiler, connection)\n\n\nclass IsoYearExact(IsoYearLookup, YearLookup, Exact):\n    pass\n\n\nclass IsoYearGt(IsoYearLookup, YearLookup, GreaterThan):\n    pass\n\n\nclass IsoYearGte(IsoYearLookup, YearLookup, GreaterThanOrEqual):\n    pass\n\n\nclass IsoYearLt(IsoYearLookup, YearLookup, LessThan):\n    pass\n\n\nclass IsoYearLte(IsoYearLookup, YearLookup, LessThanOrEqual):\n    pass\n",
      "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup(YearLookup):\n    \"\"\"\n    Base class for ISO year lookups that use iso_year_lookup_bounds\n    instead of year_lookup_bounds.\n    \"\"\"\n    def as_sql(self, compiler, connection):\n        # Need the Extract node, not the lookup.\n        extract = self.extract\n        if hasattr(extract, 'tzinfo'):\n            tzname = self.get_tzname()\n        else:\n            tzname = None\n        sql, params = compiler.compile(extract.lhs)\n        start, finish = connection.ops.iso_year_lookup_bounds(\n            extract.lookup_name, self.rhs, tzname\n        )\n        params.extend(self.get_bound_params(start, finish))\n        return sql, params\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n",
      "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup(YearLookupMixin):\n    \"\"\"\n    Optimize ISO year lookups by converting them to bounded date ranges.\n    \"\"\"\n    def as_sql(self, compiler, connection):\n        # Avoid circular import\n        try:\n            from django.db.models.functions.datetime import iso_year_lookup_bounds\n        except ImportError:\n            # Fallback if iso_year_lookup_bounds doesn't exist yet\n            return super().as_sql(compiler, connection)\n            \n        lhs_sql, lhs_params = self.process_lhs(compiler, connection)\n        rhs_sql, rhs_params = self.process_rhs(compiler, connection)\n        rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n        \n        start, finish = iso_year_lookup_bounds(connection, self.rhs)\n        params = (*lhs_params, *self.get_bound_params(start, finish))\n        return rhs_sql, params\n\n    def get_direct_rhs_sql(self, connection, rhs):\n        return connection.operators[self.lookup_name] % rhs\n\n    def get_bound_params(self, start, finish):\n        raise NotImplementedError(\n            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n        )\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n",
      "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup(Lookup):\n    def iso_year_lookup_bounds(self, connection, year):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a field value using a year lookup.\n        This method handles ISO year boundaries which start on the Monday of\n        the week containing January 4th.\n        \"\"\"\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, lhs_params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, rhs_params = self.process_rhs(compiler, connection)\n            rhs = rhs_params[0]\n            start, finish = self.iso_year_lookup_bounds(connection, rhs)\n            params = self.get_bound_params(start, finish)\n            return '%s %s' % (lhs_sql, self.get_direct_rhs_sql(connection, rhs_sql)), lhs_params + params\n        return super().as_sql(compiler, connection)\n\n    def get_direct_rhs_sql(self, connection, rhs):\n        return connection.operators[self.lookup_name] % rhs\n\n    def get_bound_params(self, start, finish):\n        raise NotImplementedError(\n            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n        )\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n",
      "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup(Lookup):\n    \"\"\"Base class for ISO year-based lookups.\"\"\"\n\n    def as_sql(self, compiler, connection):\n        # Extract the field part for ISO year\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        \n        # For ISO year lookups, don't use the optimization - fall back to standard EXTRACT\n        return '%s %s %s' % (lhs, connection.operators[self.lookup_name], rhs), lhs_params + rhs_params\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    pass\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    pass\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    pass\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    pass\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    pass\n",
      "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup:\n    def as_sql(self, compiler, connection):\n        # For ISO year lookups, we cannot use the optimization\n        # as ISO years don't align with calendar boundaries.\n        # Fall back to the standard EXTRACT-based approach.\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        rhs_params = self.get_rhs_op(connection, rhs_params)\n        return '%s %s' % (lhs, rhs), lhs_params + rhs_params\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    pass\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    pass\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    pass\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    pass\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    pass\n",
      "\nclass IsoYearLookup(YearLookup):\n    def as_sql(self, compiler, connection):\n        # Need to use a different boundary calculation for ISO years\n        # For now, fall back to the original EXTRACT-based approach\n        # since ISO year boundaries are complex and database-dependent\n        return super(YearLookup, self).as_sql(compiler, connection)\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    pass\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    pass\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    pass\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    pass\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    pass\n\n\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n",
      "\nclass YearExact(YearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass YearGt(YearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass YearGte(YearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLt(YearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass YearLte(YearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearLookup:\n    def as_sql(self, compiler, connection):\n        # Extract RHS year and get bounds\n        rhs_sql, rhs_params = self.process_rhs(compiler, connection)\n        if rhs_sql == '%s':\n            lhs, lhs_params = self.process_lhs(compiler, connection)\n            year = rhs_params[0]\n            bounds = self.iso_year_lookup_bounds(connection, year)\n            start, finish = bounds\n            params = (*lhs_params, *self.get_bound_params(start, finish))\n            return '%s %s' % (lhs, self.get_direct_rhs_sql(connection, '%s')), params\n        else:\n            # Fall back to EXTRACT for complex RHS\n            return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        \"\"\"\n        Return a two-elements tuple with the lower and upper bound to be used\n        with a BETWEEN operator for an ISO year lookup. The `year` parameter\n        is an int.\n        \"\"\"\n        return connection.ops.iso_year_lookup_bounds(year)\n\n    def get_direct_rhs_sql(self, connection, rhs):\n        return connection.operators[self.lookup_name] % rhs\n\n    def get_bound_params(self, start, finish):\n        raise NotImplementedError(\n            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n        )\n\n\nclass IsoYearExact(IsoYearLookup, Exact):\n    def get_direct_rhs_sql(self, connection, rhs):\n        return 'BETWEEN %s AND %s'\n\n    def get_bound_params(self, start, finish):\n        return (start, finish)\n\n\nclass IsoYearGt(IsoYearLookup, GreaterThan):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n\n\nclass IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLt(IsoYearLookup, LessThan):\n    def get_bound_params(self, start, finish):\n        return (start,)\n\n\nclass IsoYearLte(IsoYearLookup, LessThanOrEqual):\n    def get_bound_params(self, start, finish):\n        return (finish,)\n"
    ],
    "Location 4 (/root/hy/projects/django/django/db/models/lookups.py lines 549-561)": [
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n",
      "\n    def as_sql(self, compiler, connection):\n        # Avoid the extract operation if the rhs is a direct value to allow\n        # indexes to be used.\n        if self.rhs_is_direct_value():\n            # Skip the extract part by directly using the originating field,\n            # that is self.lhs.lhs.\n            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n            rhs_sql, _ = self.process_rhs(compiler, connection)\n            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n            start, finish = self.year_lookup_bounds(connection, self.rhs)\n            params.extend(self.get_bound_params(start, finish))\n            return '%s %s' % (lhs_sql, rhs_sql), params\n        return super().as_sql(compiler, connection)\n\n    def iso_year_lookup_bounds(self, connection, year):\n        output_field = self.lhs.lhs.output_field\n        if isinstance(output_field, DateTimeField):\n            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n        else:\n            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n        return bounds\n"
    ],
    "Location 5 (/root/hy/projects/django/django/db/models/functions/datetime.py lines 8-10)": [
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n",
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n",
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n",
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n",
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n",
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n",
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n",
      "\nfrom django.db.models.lookups import (\n    Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..fb71729fe1 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,9 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove the incorrect YearLookup registrations for ExtractIsoYear\n+# These will be replaced with ISO-specific lookup classes\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..a0805f98fa 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -569,6 +579,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +608,66 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup(Lookup):\n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+    def as_sql(self, compiler, connection):\n+        # Avoid the extract operation if the rhs is a direct value to allow\n+        # indexes to be used.\n+        if self.rhs_is_direct_value():\n+            # Skip the extract part by directly using the originating field,\n+            # that is self.lhs.lhs.\n+            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n+            rhs_sql, _ = self.process_rhs(compiler, connection)\n+            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n+            start, finish = self.iso_year_lookup_bounds(connection, self.rhs)\n+            params.extend(self.get_bound_params(start, finish))\n+            return '%s %s' % (lhs_sql, rhs_sql), params\n+        return super().as_sql(compiler, connection)\n+\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return connection.operators[self.lookup_name] % rhs\n+\n+    def get_bound_params(self, start, finish):\n+        raise NotImplementedError(\n+            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n+        )\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return 'BETWEEN %s AND %s'\n+\n+    def get_bound_params(self, start, finish):\n+        return (start, finish)\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_0": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..592000eda5 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,22 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove the incorrect YearLookup registrations for ExtractIsoYear\n+# These will be replaced with proper IsoYearLookup classes\n+\n+# ExtractIsoYear.register_lookup(YearExact)\n+# ExtractIsoYear.register_lookup(YearGt)\n+# ExtractIsoYear.register_lookup(YearGte)\n+# ExtractIsoYear.register_lookup(YearLt)\n+# ExtractIsoYear.register_lookup(YearLte)\n+\n+# Register ISO-specific lookups (these classes will be defined in lookups.py)\n+ExtractIsoYear.register_lookup(IsoYearExact)\n+ExtractIsoYear.register_lookup(IsoYearGt)\n+ExtractIsoYear.register_lookup(IsoYearGte)\n+ExtractIsoYear.register_lookup(IsoYearLt)\n+ExtractIsoYear.register_lookup(IsoYearLte)\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..71a0294c53 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -569,6 +579,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +608,58 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup:\n+    def as_sql(self, compiler, connection):\n+        # Extract ISO year from the lhs\n+        lhs_sql, lhs_params = compiler.compile(self.lhs)\n+        \n+        # Get the ISO year bounds for the rhs value\n+        tzname = None\n+        if hasattr(self.lhs, 'tzinfo') and self.lhs.tzinfo is not None:\n+            tzname = self.lhs.tzinfo.zone if hasattr(self.lhs.tzinfo, 'zone') else None\n+        \n+        start, finish = connection.ops.iso_year_lookup_bounds(self.rhs, tzname)\n+        params = self.get_bound_params(start, finish)\n+        \n+        return self.get_direct_rhs_sql(connection, ['%s'] * len(params)), lhs_params + params\n+\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return connection.operators[self.lookup_name] % rhs\n+\n+    def get_bound_params(self, start, finish):\n+        raise NotImplementedError(\n+            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n+        )\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return 'BETWEEN %s AND %s'\n+\n+    def get_bound_params(self, start, finish):\n+        return (start, finish)\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_1": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..09270dd9ce 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,22 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove the incorrect YearLookup registrations for ExtractIsoYear\n+# These will be replaced with proper IsoYearLookup classes\n+\n+# ExtractIsoYear.register_lookup(YearExact)\n+# ExtractIsoYear.register_lookup(YearGt)\n+# ExtractIsoYear.register_lookup(YearGte)\n+# ExtractIsoYear.register_lookup(YearLt)\n+# ExtractIsoYear.register_lookup(YearLte)\n+\n+# Register ISO-specific lookup classes instead\n+ExtractIsoYear.register_lookup(IsoYearExact)\n+ExtractIsoYear.register_lookup(IsoYearGt)\n+ExtractIsoYear.register_lookup(IsoYearGte)\n+ExtractIsoYear.register_lookup(IsoYearLt)\n+ExtractIsoYear.register_lookup(IsoYearLte)\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..8a9323df73 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +616,33 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup:\n+    def as_sql(self, compiler, connection):\n+        # Avoid the bounds optimization for ISO years - use the default\n+        # SQL generation that preserves ISO year semantics\n+        return super(YearLookup, self).as_sql(compiler, connection)\n+\n+\n+class IsoYearExact(IsoYearLookup, YearLookup, Exact):\n+    pass\n+\n+\n+class IsoYearGt(IsoYearLookup, YearLookup, GreaterThan):\n+    pass\n+\n+\n+class IsoYearGte(IsoYearLookup, YearLookup, GreaterThanOrEqual):\n+    pass\n+\n+\n+class IsoYearLt(IsoYearLookup, YearLookup, LessThan):\n+    pass\n+\n+\n+class IsoYearLte(IsoYearLookup, YearLookup, LessThanOrEqual):\n+    pass\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_2": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..202e3bc10e 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,19 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# These lines should be removed - ExtractIsoYear should not use YearLookup classes\n+# ExtractIsoYear.register_lookup(YearExact)\n+# ExtractIsoYear.register_lookup(YearGt)\n+# ExtractIsoYear.register_lookup(YearGte)\n+# ExtractIsoYear.register_lookup(YearLt)\n+# ExtractIsoYear.register_lookup(YearLte)\n+\n+ExtractIsoYear.register_lookup(IsoYearExact)\n+ExtractIsoYear.register_lookup(IsoYearGt)\n+ExtractIsoYear.register_lookup(IsoYearGte)\n+ExtractIsoYear.register_lookup(IsoYearLt)\n+ExtractIsoYear.register_lookup(IsoYearLte)\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..6a90973b88 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +616,54 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup(YearLookup):\n+    \"\"\"\n+    Base class for ISO year lookups that use iso_year_lookup_bounds\n+    instead of year_lookup_bounds.\n+    \"\"\"\n+    def as_sql(self, compiler, connection):\n+        # Need the Extract node, not the lookup.\n+        extract = self.extract\n+        if hasattr(extract, 'tzinfo'):\n+            tzname = self.get_tzname()\n+        else:\n+            tzname = None\n+        sql, params = compiler.compile(extract.lhs)\n+        start, finish = connection.ops.iso_year_lookup_bounds(\n+            extract.lookup_name, self.rhs, tzname\n+        )\n+        params.extend(self.get_bound_params(start, finish))\n+        return sql, params\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return 'BETWEEN %s AND %s'\n+\n+    def get_bound_params(self, start, finish):\n+        return (start, finish)\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_3": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..928b228494 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,9 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove the incorrect YearLookup registrations for ExtractIsoYear\n+# These will be replaced with proper IsoYearLookup registrations once those classes are created\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..9b9a36379b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +616,63 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup(YearLookupMixin):\n+    \"\"\"\n+    Optimize ISO year lookups by converting them to bounded date ranges.\n+    \"\"\"\n+    def as_sql(self, compiler, connection):\n+        # Avoid circular import\n+        try:\n+            from django.db.models.functions.datetime import iso_year_lookup_bounds\n+        except ImportError:\n+            # Fallback if iso_year_lookup_bounds doesn't exist yet\n+            return super().as_sql(compiler, connection)\n+            \n+        lhs_sql, lhs_params = self.process_lhs(compiler, connection)\n+        rhs_sql, rhs_params = self.process_rhs(compiler, connection)\n+        rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n+        \n+        start, finish = iso_year_lookup_bounds(connection, self.rhs)\n+        params = (*lhs_params, *self.get_bound_params(start, finish))\n+        return rhs_sql, params\n+\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return connection.operators[self.lookup_name] % rhs\n+\n+    def get_bound_params(self, start, finish):\n+        raise NotImplementedError(\n+            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n+        )\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return 'BETWEEN %s AND %s'\n+\n+    def get_bound_params(self, start, finish):\n+        return (start, finish)\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_4": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..5e8d079152 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,9 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# These lines should be removed - ExtractIsoYear should not use YearLookup classes\n+# which are designed for calendar years, not ISO years\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..ddb58ba4fe 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +616,72 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup(Lookup):\n+    def iso_year_lookup_bounds(self, connection, year):\n+        \"\"\"\n+        Return a two-elements list with the lower and upper bound to be used\n+        with a BETWEEN operator to query a field value using a year lookup.\n+        This method handles ISO year boundaries which start on the Monday of\n+        the week containing January 4th.\n+        \"\"\"\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+    def as_sql(self, compiler, connection):\n+        # Avoid the extract operation if the rhs is a direct value to allow\n+        # indexes to be used.\n+        if self.rhs_is_direct_value():\n+            # Skip the extract part by directly using the originating field,\n+            # that is self.lhs.lhs.\n+            lhs_sql, lhs_params = self.process_lhs(compiler, connection, self.lhs.lhs)\n+            rhs_sql, rhs_params = self.process_rhs(compiler, connection)\n+            rhs = rhs_params[0]\n+            start, finish = self.iso_year_lookup_bounds(connection, rhs)\n+            params = self.get_bound_params(start, finish)\n+            return '%s %s' % (lhs_sql, self.get_direct_rhs_sql(connection, rhs_sql)), lhs_params + params\n+        return super().as_sql(compiler, connection)\n+\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return connection.operators[self.lookup_name] % rhs\n+\n+    def get_bound_params(self, start, finish):\n+        raise NotImplementedError(\n+            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n+        )\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return 'BETWEEN %s AND %s'\n+\n+    def get_bound_params(self, start, finish):\n+        return (start, finish)\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_5": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..f4f306268a 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,9 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove the incorrect YearLookup registrations for ExtractIsoYear\n+# These will be replaced with proper ISO year lookup classes\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..29ad92c274 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +616,38 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup(Lookup):\n+    \"\"\"Base class for ISO year-based lookups.\"\"\"\n+\n+    def as_sql(self, compiler, connection):\n+        # Extract the field part for ISO year\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs, rhs_params = self.process_rhs(compiler, connection)\n+        \n+        # For ISO year lookups, don't use the optimization - fall back to standard EXTRACT\n+        return '%s %s %s' % (lhs, connection.operators[self.lookup_name], rhs), lhs_params + rhs_params\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    pass\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    pass\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    pass\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    pass\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    pass\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_6": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..7406d9a57e 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,19 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove these incorrect registrations - they will be replaced with ISO-specific lookups\n+# ExtractIsoYear.register_lookup(YearExact)\n+# ExtractIsoYear.register_lookup(YearGt)\n+# ExtractIsoYear.register_lookup(YearGte)\n+# ExtractIsoYear.register_lookup(YearLt)\n+# ExtractIsoYear.register_lookup(YearLte)\n+\n+ExtractIsoYear.register_lookup(IsoYearExact)\n+ExtractIsoYear.register_lookup(IsoYearGt)\n+ExtractIsoYear.register_lookup(IsoYearGte)\n+ExtractIsoYear.register_lookup(IsoYearLt)\n+ExtractIsoYear.register_lookup(IsoYearLte)\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..81856f6b90 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +616,37 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup:\n+    def as_sql(self, compiler, connection):\n+        # For ISO year lookups, we cannot use the optimization\n+        # as ISO years don't align with calendar boundaries.\n+        # Fall back to the standard EXTRACT-based approach.\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs, rhs_params = self.process_rhs(compiler, connection)\n+        rhs_params = self.get_rhs_op(connection, rhs_params)\n+        return '%s %s' % (lhs, rhs), lhs_params + rhs_params\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    pass\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    pass\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    pass\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    pass\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    pass\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n",
    "variant_7": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..6d3b6afee9 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,17 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove the incorrect YearLookup registrations for ExtractIsoYear\n+# These will be replaced with ISO-specific lookup classes\n+\n+# ExtractIsoYear.register_lookup(YearExact)\n+# ExtractIsoYear.register_lookup(YearGt)\n+# ExtractIsoYear.register_lookup(YearGte)\n+# ExtractIsoYear.register_lookup(YearLt)\n+# ExtractIsoYear.register_lookup(YearLte)\n+\n+# These registrations will be added after the ISO-specific lookup classes are created\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..76d75f3886 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,35 @@ class YearLookup(Lookup):\n         )\n \n \n+\n+class IsoYearLookup(YearLookup):\n+    def as_sql(self, compiler, connection):\n+        # Need to use a different boundary calculation for ISO years\n+        # For now, fall back to the original EXTRACT-based approach\n+        # since ISO year boundaries are complex and database-dependent\n+        return super(YearLookup, self).as_sql(compiler, connection)\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    pass\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    pass\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    pass\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    pass\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    pass\n+\n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n",
    "variant_8": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..7406d9a57e 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -5,8 +5,10 @@ from django.db.models.expressions import Func\n from django.db.models.fields import (\n     DateField, DateTimeField, DurationField, Field, IntegerField, TimeField,\n )\n+\n from django.db.models.lookups import (\n     Transform, YearExact, YearGt, YearGte, YearLt, YearLte,\n+    IsoYearExact, IsoYearGt, IsoYearGte, IsoYearLt, IsoYearLte,\n )\n from django.utils import timezone\n \n@@ -164,11 +166,19 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n+# Remove these incorrect registrations - they will be replaced with ISO-specific lookups\n+# ExtractIsoYear.register_lookup(YearExact)\n+# ExtractIsoYear.register_lookup(YearGt)\n+# ExtractIsoYear.register_lookup(YearGte)\n+# ExtractIsoYear.register_lookup(YearLt)\n+# ExtractIsoYear.register_lookup(YearLte)\n+\n+ExtractIsoYear.register_lookup(IsoYearExact)\n+ExtractIsoYear.register_lookup(IsoYearGt)\n+ExtractIsoYear.register_lookup(IsoYearGte)\n+ExtractIsoYear.register_lookup(IsoYearLt)\n+ExtractIsoYear.register_lookup(IsoYearLte)\n \n \n class Now(Func):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..30107db183 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,7 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n@@ -546,6 +547,15 @@ class YearLookup(Lookup):\n             bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n         return bounds\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n+\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n@@ -560,6 +570,14 @@ class YearLookup(Lookup):\n             return '%s %s' % (lhs_sql, rhs_sql), params\n         return super().as_sql(compiler, connection)\n \n+    def iso_year_lookup_bounds(self, connection, year):\n+        output_field = self.lhs.lhs.output_field\n+        if isinstance(output_field, DateTimeField):\n+            bounds = connection.ops.iso_year_lookup_bounds_for_datetime_field(year)\n+        else:\n+            bounds = connection.ops.iso_year_lookup_bounds_for_date_field(year)\n+        return bounds\n+\n     def get_direct_rhs_sql(self, connection, rhs):\n         return connection.operators[self.lookup_name] % rhs\n \n@@ -569,6 +587,7 @@ class YearLookup(Lookup):\n         )\n \n \n+\n class YearExact(YearLookup, Exact):\n     def get_direct_rhs_sql(self, connection, rhs):\n         return 'BETWEEN %s AND %s'\n@@ -597,6 +616,66 @@ class YearLte(YearLookup, LessThanOrEqual):\n         return (finish,)\n \n \n+class IsoYearLookup:\n+    def as_sql(self, compiler, connection):\n+        # Extract RHS year and get bounds\n+        rhs_sql, rhs_params = self.process_rhs(compiler, connection)\n+        if rhs_sql == '%s':\n+            lhs, lhs_params = self.process_lhs(compiler, connection)\n+            year = rhs_params[0]\n+            bounds = self.iso_year_lookup_bounds(connection, year)\n+            start, finish = bounds\n+            params = (*lhs_params, *self.get_bound_params(start, finish))\n+            return '%s %s' % (lhs, self.get_direct_rhs_sql(connection, '%s')), params\n+        else:\n+            # Fall back to EXTRACT for complex RHS\n+            return super().as_sql(compiler, connection)\n+\n+    def iso_year_lookup_bounds(self, connection, year):\n+        \"\"\"\n+        Return a two-elements tuple with the lower and upper bound to be used\n+        with a BETWEEN operator for an ISO year lookup. The `year` parameter\n+        is an int.\n+        \"\"\"\n+        return connection.ops.iso_year_lookup_bounds(year)\n+\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return connection.operators[self.lookup_name] % rhs\n+\n+    def get_bound_params(self, start, finish):\n+        raise NotImplementedError(\n+            'subclasses of IsoYearLookup must provide a get_bound_params() method'\n+        )\n+\n+\n+class IsoYearExact(IsoYearLookup, Exact):\n+    def get_direct_rhs_sql(self, connection, rhs):\n+        return 'BETWEEN %s AND %s'\n+\n+    def get_bound_params(self, start, finish):\n+        return (start, finish)\n+\n+\n+class IsoYearGt(IsoYearLookup, GreaterThan):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n+class IsoYearGte(IsoYearLookup, GreaterThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLt(IsoYearLookup, LessThan):\n+    def get_bound_params(self, start, finish):\n+        return (start,)\n+\n+\n+class IsoYearLte(IsoYearLookup, LessThanOrEqual):\n+    def get_bound_params(self, start, finish):\n+        return (finish,)\n+\n+\n class UUIDTextMixin:\n     \"\"\"\n     Strip hyphens from a value when filtering a UUIDField on backends without\n"
  }
}