{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/urls/resolvers.py lines 48-53)": "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/urls/resolvers.py lines 48-53)": [
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n",
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n",
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n",
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n",
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n",
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n",
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n",
      "\n        # Handle functools.partial objects by unwrapping them\n        actual_func = func\n        if isinstance(func, functools.partial):\n            actual_func = func.func\n\n        if not hasattr(actual_func, '__name__'):\n            # A class-based view\n            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n        else:\n            # A function-based view\n            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_0": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_1": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_2": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_3": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_4": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_5": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_6": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_7": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n",
    "variant_8": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..a5facaa06b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,18 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+\n+        # Handle functools.partial objects by unwrapping them\n+        actual_func = func\n+        if isinstance(func, functools.partial):\n+            actual_func = func.func\n+\n+        if not hasattr(actual_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = actual_func.__class__.__module__ + '.' + actual_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = actual_func.__module__ + '.' + actual_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n"
  }
}