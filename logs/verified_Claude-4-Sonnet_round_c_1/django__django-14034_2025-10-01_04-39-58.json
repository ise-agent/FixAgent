{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/forms/fields.py lines 1024-1031)": "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
    "Location 2 (/root/hy/projects/django/django/forms/fields.py lines 1037-1049)": "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/forms/fields.py lines 1024-1031)": [
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n"
    ],
    "Location 2 (/root/hy/projects/django/django/forms/fields.py lines 1037-1049)": [
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    # Only return early if require_all_fields=True OR no individual fields are required\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    # Only return early if require_all_fields=True OR no individual fields are required\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    # Only return early if require_all_fields=True OR no individual fields are required\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    # Only return early if require_all_fields=True OR no individual fields are required\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    # Only return early if require_all_fields=True OR no individual fields are required\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n",
      "\n        if not value or isinstance(value, (list, tuple)):\n            if not value or not [v for v in value if v not in self.empty_values]:\n                if self.required:\n                    raise ValidationError(self.error_messages['required'], code='required')\n                elif self.require_all_fields or not any(field.required for field in self.fields):\n                    return self.compress([])\n        else:\n            raise ValidationError(self.error_messages['invalid'], code='invalid')\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..064fbd49ec 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,13 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    # Only return early if require_all_fields=True OR no individual fields are required\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,6 +1036,7 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n+\n             if field_value in self.empty_values:\n                 if self.require_all_fields:\n                     # Raise a 'required' error if the MultiValueField is\n",
    "variant_0": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..28079dc5e8 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,15 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_1": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..cf164a45e9 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,16 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    # Only return early if require_all_fields=True OR no individual fields are required\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_2": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..28079dc5e8 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,15 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_3": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..cf164a45e9 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,16 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    # Only return early if require_all_fields=True OR no individual fields are required\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_4": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..cf164a45e9 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,16 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    # Only return early if require_all_fields=True OR no individual fields are required\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_5": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..28079dc5e8 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,15 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_6": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..cf164a45e9 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,16 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    # Only return early if require_all_fields=True OR no individual fields are required\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_7": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..cf164a45e9 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,16 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    # Only return early if require_all_fields=True OR no individual fields are required\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
    "variant_8": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..28079dc5e8 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,11 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n+\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n@@ -1034,19 +1035,15 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+\n+        if not value or isinstance(value, (list, tuple)):\n+            if not value or not [v for v in value if v not in self.empty_values]:\n+                if self.required:\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif self.require_all_fields or not any(field.required for field in self.fields):\n+                    return self.compress([])\n+        else:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n"
  }
}