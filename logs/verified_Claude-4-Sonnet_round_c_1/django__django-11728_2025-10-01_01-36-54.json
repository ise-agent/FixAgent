{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/contrib/admindocs/utils.py lines 169-182)": "\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/contrib/admindocs/utils.py lines 169-182)": [
      "\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n",
      "\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n",
      "\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n",
      "\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n",
      "\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n",
      "\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n",
      "\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n",
      "\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # If we've reached the end of the pattern while still inside a named group,\n            # include the remaining pattern as the complete group pattern\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..22517ae471 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -166,6 +166,7 @@ def replace_named_groups(pattern):\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n         unmatched_open_brackets, prev_char = 1, None\n+\n         for idx, val in enumerate(pattern[end:]):\n             # If brackets are balanced, the end of the string for the current\n             # named capture group pattern has been reached.\n@@ -180,6 +181,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_0": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..3e2d7b2016 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -163,6 +163,10 @@ def replace_named_groups(pattern):\n     # Tuples of (named capture group pattern, group name).\n     group_pattern_and_name = []\n     # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n         unmatched_open_brackets, prev_char = 1, None\n@@ -180,6 +184,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_1": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..12ac6674a6 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -162,6 +162,11 @@ def replace_named_groups(pattern):\n     ]\n     # Tuples of (named capture group pattern, group name).\n     group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     # Loop over the groups and their start and end indices.\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n@@ -180,6 +185,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_2": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..0618dbac67 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -156,6 +156,17 @@ def replace_named_groups(pattern):\n     1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n     2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n     \"\"\"\n+    named_group_indices = [\n+        (m.start(0), m.end(0), m.group(1))\n+        for m in named_group_matcher.finditer(pattern)\n+    ]\n+    # Tuples of (named capture group pattern, group name).\n+    group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     named_group_indices = [\n         (m.start(0), m.end(0), m.group(1))\n         for m in named_group_matcher.finditer(pattern)\n@@ -180,6 +191,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_3": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..0618dbac67 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -156,6 +156,17 @@ def replace_named_groups(pattern):\n     1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n     2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n     \"\"\"\n+    named_group_indices = [\n+        (m.start(0), m.end(0), m.group(1))\n+        for m in named_group_matcher.finditer(pattern)\n+    ]\n+    # Tuples of (named capture group pattern, group name).\n+    group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     named_group_indices = [\n         (m.start(0), m.end(0), m.group(1))\n         for m in named_group_matcher.finditer(pattern)\n@@ -180,6 +191,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_4": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..12ac6674a6 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -162,6 +162,11 @@ def replace_named_groups(pattern):\n     ]\n     # Tuples of (named capture group pattern, group name).\n     group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     # Loop over the groups and their start and end indices.\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n@@ -180,6 +185,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_5": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..12ac6674a6 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -162,6 +162,11 @@ def replace_named_groups(pattern):\n     ]\n     # Tuples of (named capture group pattern, group name).\n     group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     # Loop over the groups and their start and end indices.\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n@@ -180,6 +185,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_6": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..0618dbac67 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -156,6 +156,17 @@ def replace_named_groups(pattern):\n     1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n     2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n     \"\"\"\n+    named_group_indices = [\n+        (m.start(0), m.end(0), m.group(1))\n+        for m in named_group_matcher.finditer(pattern)\n+    ]\n+    # Tuples of (named capture group pattern, group name).\n+    group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     named_group_indices = [\n         (m.start(0), m.end(0), m.group(1))\n         for m in named_group_matcher.finditer(pattern)\n@@ -180,6 +191,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_7": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..0618dbac67 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -156,6 +156,17 @@ def replace_named_groups(pattern):\n     1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n     2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n     \"\"\"\n+    named_group_indices = [\n+        (m.start(0), m.end(0), m.group(1))\n+        for m in named_group_matcher.finditer(pattern)\n+    ]\n+    # Tuples of (named capture group pattern, group name).\n+    group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     named_group_indices = [\n         (m.start(0), m.end(0), m.group(1))\n         for m in named_group_matcher.finditer(pattern)\n@@ -180,6 +191,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
    "variant_8": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..0618dbac67 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -156,6 +156,17 @@ def replace_named_groups(pattern):\n     1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n     2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n     \"\"\"\n+    named_group_indices = [\n+        (m.start(0), m.end(0), m.group(1))\n+        for m in named_group_matcher.finditer(pattern)\n+    ]\n+    # Tuples of (named capture group pattern, group name).\n+    group_pattern_and_name = []\n+    # Loop over the groups and their start and end indices.\n+    for start, end, group_name in named_group_indices:\n+        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n+        unmatched_open_brackets, prev_char = 1, None\n+\n     named_group_indices = [\n         (m.start(0), m.end(0), m.group(1))\n         for m in named_group_matcher.finditer(pattern)\n@@ -180,6 +191,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we've reached the end of the pattern while still inside a named group,\n+            # include the remaining pattern as the complete group pattern\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n"
  }
}