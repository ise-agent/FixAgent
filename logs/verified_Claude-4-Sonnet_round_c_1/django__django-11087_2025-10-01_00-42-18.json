{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/deletion.py lines 235-237)": "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
    "Location 2 (/root/hy/projects/django/django/db/models/deletion.py lines 231-234)": "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
    "Location 3 (/root/hy/projects/django/django/db/models/deletion.py lines 220-224)": "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized for deletion performance by only fetching primary key fields.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/deletion.py lines 235-237)": [
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary keys to improve deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields for optimal deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/models/deletion.py lines 231-234)": [
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/models/deletion.py lines 220-224)": [
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_manager_cls(related.model).using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized to only fetch primary key fields for deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized for deletion by only fetching primary key fields.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Only fetches primary key fields to optimize deletion performance.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n",
      "\n    def related_objects(self, related, objs):\n        \"\"\"\n        Get a QuerySet of objects related to `objs` via the relation `related`.\n        Optimized for deletion by only fetching primary key fields.\n        \"\"\"\n        return related.related_model._base_manager.using(self.using).filter(\n            **{\"%s__in\" % related.field.name: objs}\n        ).only('pk')\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..dbcbdc8c3f 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,6 +217,7 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n+\n                     sub_objs = self.related_objects(related, batch)\n                     if self.can_fast_delete(sub_objs, from_field=field):\n                         self.fast_deletes.append(sub_objs)\n@@ -228,13 +229,16 @@ class Collector:\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n         \"\"\"\n+\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_0": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..163b2bab05 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized for deletion performance by only fetching primary key fields.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_1": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..ba56a0954e 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n+        \"\"\"\n+        return related.related_manager_cls(related.model).using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_2": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..1a8d86863e 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary keys to improve deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_3": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..ae2c4eb16b 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_4": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..f9923e28c1 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_5": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..2668f6e115 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_6": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..27a1e377ec 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized for deletion by only fetching primary key fields.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized to only fetch primary key fields for deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields for optimal deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_7": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..98773abd19 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "variant_8": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..6690a80240 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -217,24 +217,39 @@ class Collector:\n                     continue\n                 batches = self.get_del_batches(new_objs, field)\n                 for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Optimized for deletion by only fetching primary key fields.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n+\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n+\n+    def related_objects(self, related, objs):\n+        \"\"\"\n+        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches primary key fields to optimize deletion performance.\n+        \"\"\"\n+        return related.related_model._base_manager.using(self.using).filter(\n+            **{\"%s__in\" % related.field.name: objs}\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n"
  }
}