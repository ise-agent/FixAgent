{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/backends/mysql/base.py lines 202-205)": "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/backends/mysql/base.py lines 202-205)": [
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n",
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n",
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n",
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n",
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n",
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n",
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n",
      "\n    def get_connection_params(self):\n        kwargs = {\n            'conv': django_conversions,\n            'charset': 'utf8',\n        }\n        settings_dict = self.settings_dict\n        if settings_dict['USER']:\n            kwargs['user'] = settings_dict['USER']\n        if settings_dict['NAME']:\n            kwargs['database'] = settings_dict['NAME']\n        if settings_dict['PASSWORD']:\n            kwargs['password'] = settings_dict['PASSWORD']\n        if settings_dict['HOST'].startswith('/'):\n            kwargs['unix_socket'] = settings_dict['HOST']\n        elif settings_dict['HOST']:\n            kwargs['host'] = settings_dict['HOST']\n        if settings_dict['PORT']:\n            kwargs['port'] = int(settings_dict['PORT'])\n        # We need the number of potentially affected rows after an\n        # \"UPDATE\", not the number of changed rows.\n        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n        # Validate the transaction isolation level, if specified.\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..dbff06a62f 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -199,10 +199,11 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         settings_dict = self.settings_dict\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n+\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_0": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_1": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_2": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_3": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_4": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_5": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_6": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..49d09440cf 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,18 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_7": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n",
    "variant_8": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..0a12d4f20e 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -191,6 +191,15 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     ops_class = DatabaseOperations\n     validation_class = DatabaseValidation\n \n+    def get_connection_params(self):\n+        kwargs = {\n+            'conv': django_conversions,\n+            'charset': 'utf8',\n+        }\n+        settings_dict = self.settings_dict\n+        if settings_dict['USER']:\n+            kwargs['user'] = settings_dict['USER']\n+\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n@@ -200,9 +209,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n+        if settings_dict['HOST'].startswith('/'):\n+            kwargs['unix_socket'] = settings_dict['HOST']\n+        elif settings_dict['HOST']:\n+            kwargs['host'] = settings_dict['HOST']\n+        if settings_dict['PORT']:\n+            kwargs['port'] = int(settings_dict['PORT'])\n+        # We need the number of potentially affected rows after an\n+        # \"UPDATE\", not the number of changed rows.\n+        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+        # Validate the transaction isolation level, if specified.\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n"
  }
}