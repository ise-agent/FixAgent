{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/utils/timezone.py lines 74-76)": "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
    "Location 2 (/root/hy/projects/django/django/db/backends/postgresql/operations.py lines 46-51)": "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\" \n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n",
    "Location 3 (/root/hy/projects/django/django/db/models/functions/datetime.py lines 24-27)": "\ndef get_tzname(self):\n    # Timezone conversions must happen to the input datetime *before*\n    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n    # based on the input datetime not the stored datetime.\n    tzname = None\n    if settings.USE_TZ:\n        if self.tzinfo is None:\n            tzname = timezone.get_current_timezone_name()\n        else:\n            tzname = timezone._get_timezone_name(self.tzinfo)\n        \n        # Log warning for complex timezone names that might need special handling\n        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n            import logging\n            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n    return tzname\n",
    "Location 4 (/root/hy/projects/django/django/db/backends/postgresql/operations.py lines 53-56)": "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
    "Location 5 (/root/hy/projects/django/django/utils/timezone.py lines 69-71)": "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/utils/timezone.py lines 74-76)": [
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n",
      "\ndef _get_timezone_name(timezone):\n    \"\"\"Return the name of ``timezone``.\"\"\"\n    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n    if hasattr(timezone, 'utcoffset'):\n        # Get offset for a reference datetime (e.g., current time)\n        offset = timezone.utcoffset(datetime.now())\n        if offset is not None:\n            total_seconds = int(offset.total_seconds())\n            hours = total_seconds // 3600\n            return f\"{'+' if hours >= 0 else ''}{hours}\"\n    return str(timezone)\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/backends/postgresql/operations.py lines 46-51)": [
      "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\" \n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n",
      "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\"\n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n",
      "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\" \n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n",
      "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\" \n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n",
      "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\"\n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n",
      "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\"\n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n",
      "\n    def _prepare_tzname_delta(self, tzname):\n        # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n        # Don't modify complex timezone names like \"Etc/GMT-10\" \n        import re\n        if re.match(r'^[+-]\\d+$', tzname):\n            if '+' in tzname:\n                return tzname.replace('+', '-')\n            elif '-' in tzname:\n                return tzname.replace('-', '+')\n        return tzname\n",
      "\ndef _prepare_tzname_delta(self, tzname):\n    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n    # Don't modify complex timezone names like \"Etc/GMT-10\" \n    import re\n    if re.match(r'^[+-]\\d+$', tzname):\n        if '+' in tzname:\n            return tzname.replace('+', '-')\n        elif '-' in tzname:\n            return tzname.replace('-', '+')\n    return tzname\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/models/functions/datetime.py lines 24-27)": [
      "\ndef get_tzname(self):\n    # Timezone conversions must happen to the input datetime *before*\n    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n    # based on the input datetime not the stored datetime.\n    tzname = None\n    if settings.USE_TZ:\n        if self.tzinfo is None:\n            tzname = timezone.get_current_timezone_name()\n        else:\n            tzname = timezone._get_timezone_name(self.tzinfo)\n        # Add validation for complex timezone names that might need special handling\n        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n            import logging\n            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n    return tzname\n",
      "\ndef get_tzname(self):\n    # Timezone conversions must happen to the input datetime *before*\n    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n    # based on the input datetime not the stored datetime.\n    tzname = None\n    if settings.USE_TZ:\n        if self.tzinfo is None:\n            tzname = timezone.get_current_timezone_name()\n        else:\n            tzname = timezone._get_timezone_name(self.tzinfo)\n        # Add validation to ensure the returned tzname is compatible with database operations\n        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n            import logging\n            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n    return tzname\n",
      "\ndef get_tzname(self):\n    # Timezone conversions must happen to the input datetime *before*\n    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n    # based on the input datetime not the stored datetime.\n    tzname = None\n    if settings.USE_TZ:\n        if self.tzinfo is None:\n            tzname = timezone.get_current_timezone_name()\n        else:\n            tzname = timezone._get_timezone_name(self.tzinfo)\n        # Add validation to ensure timezone name is compatible with database operations\n        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n            import logging\n            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n    return tzname\n",
      "\ndef get_tzname(self):\n    # Timezone conversions must happen to the input datetime *before*\n    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n    # based on the input datetime not the stored datetime.\n    tzname = None\n    if settings.USE_TZ:\n        if self.tzinfo is None:\n            tzname = timezone.get_current_timezone_name()\n        else:\n            tzname = timezone._get_timezone_name(self.tzinfo)\n        # Add validation for complex timezone names that might need special handling\n        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n            import logging\n            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n    return tzname\n",
      "\nclass TimezoneMixin:\n    tzinfo = None\n\n    def get_tzname(self):\n        # Timezone conversions must happen to the input datetime *before*\n        # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n        # database as 2016-01-01 01:00:00 +00:00. Any results should be\n        # based on the input datetime not the stored datetime.\n        tzname = None\n        if settings.USE_TZ:\n            if self.tzinfo is None:\n                tzname = timezone.get_current_timezone_name()\n            else:\n                tzname = timezone._get_timezone_name(self.tzinfo)\n            # Add validation for complex timezone names that might need special handling\n            if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n                import logging\n                logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n        return tzname\n",
      "\ndef get_tzname(self):\n    # Timezone conversions must happen to the input datetime *before*\n    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n    # based on the input datetime not the stored datetime.\n    tzname = None\n    if settings.USE_TZ:\n        if self.tzinfo is None:\n            tzname = timezone.get_current_timezone_name()\n        else:\n            tzname = timezone._get_timezone_name(self.tzinfo)\n        # Add validation for complex timezone names that might need special handling\n        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n            import logging\n            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n    return tzname\n",
      "\nclass TimezoneMixin:\n    tzinfo = None\n\n    def get_tzname(self):\n        # Timezone conversions must happen to the input datetime *before*\n        # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n        # database as 2016-01-01 01:00:00 +00:00. Any results should be\n        # based on the input datetime not the stored datetime.\n        tzname = None\n        if settings.USE_TZ:\n            if self.tzinfo is None:\n                tzname = timezone.get_current_timezone_name()\n            else:\n                tzname = timezone._get_timezone_name(self.tzinfo)\n            # Add validation for complex timezone names that might need special handling\n            if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n                import logging\n                logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n        return tzname\n",
      "\ndef get_tzname(self):\n    # Timezone conversions must happen to the input datetime *before*\n    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n    # based on the input datetime not the stored datetime.\n    tzname = None\n    if settings.USE_TZ:\n        if self.tzinfo is None:\n            tzname = timezone.get_current_timezone_name()\n        else:\n            tzname = timezone._get_timezone_name(self.tzinfo)\n        # Add validation for complex timezone names that might need special handling\n        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n            import logging\n            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n    return tzname\n"
    ],
    "Location 4 (/root/hy/projects/django/django/db/backends/postgresql/operations.py lines 53-56)": [
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n",
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if tzname and settings.USE_TZ:\n        # Ensure tzname is in expected format before processing\n        processed_tzname = self._prepare_tzname_delta(tzname)\n        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n    return field_name\n"
    ],
    "Location 5 (/root/hy/projects/django/django/utils/timezone.py lines 69-71)": [
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n",
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n",
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n",
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n",
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n",
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n",
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n",
      "\ndef get_current_timezone_name():\n    \"\"\"Return the name of the currently active time zone.\"\"\"\n    return _get_timezone_name(get_current_timezone())\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..9140d9628b 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,13 +43,19 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n+\n     def _prepare_tzname_delta(self, tzname):\n-        if '+' in tzname:\n-            return tzname.replace('+', '-')\n-        elif '-' in tzname:\n-            return tzname.replace('-', '+')\n+        # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+        # Don't modify complex timezone names like \"Etc/GMT-10\" \n+        import re\n+        if re.match(r'^[+-]\\d+$', tzname):\n+            if '+' in tzname:\n+                return tzname.replace('+', '-')\n+            elif '-' in tzname:\n+                return tzname.replace('-', '+')\n         return tzname\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if tzname and settings.USE_TZ:\n             field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..c72f5c6146 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,6 +21,7 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n+\n             if self.tzinfo is None:\n                 tzname = timezone.get_current_timezone_name()\n             else:\ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_0": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..b52a45e015 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\" \n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..7d9adf7891 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,10 +21,24 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n-            if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n-            else:\n-                tzname = timezone._get_timezone_name(self.tzinfo)\n+\n+def get_tzname(self):\n+    # Timezone conversions must happen to the input datetime *before*\n+    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+    # based on the input datetime not the stored datetime.\n+    tzname = None\n+    if settings.USE_TZ:\n+        if self.tzinfo is None:\n+            tzname = timezone.get_current_timezone_name()\n+        else:\n+            tzname = timezone._get_timezone_name(self.tzinfo)\n+        \n+        # Log warning for complex timezone names that might need special handling\n+        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+            import logging\n+            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+    return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_1": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..b52a45e015 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\" \n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..cb9c2c01dc 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,10 +21,23 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n-            if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n-            else:\n-                tzname = timezone._get_timezone_name(self.tzinfo)\n+\n+def get_tzname(self):\n+    # Timezone conversions must happen to the input datetime *before*\n+    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+    # based on the input datetime not the stored datetime.\n+    tzname = None\n+    if settings.USE_TZ:\n+        if self.tzinfo is None:\n+            tzname = timezone.get_current_timezone_name()\n+        else:\n+            tzname = timezone._get_timezone_name(self.tzinfo)\n+        # Add validation for complex timezone names that might need special handling\n+        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+            import logging\n+            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+    return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_2": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..df17f84c6f 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\"\n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..c8a91e1a95 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,10 +21,23 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n-            if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n-            else:\n-                tzname = timezone._get_timezone_name(self.tzinfo)\n+\n+def get_tzname(self):\n+    # Timezone conversions must happen to the input datetime *before*\n+    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+    # based on the input datetime not the stored datetime.\n+    tzname = None\n+    if settings.USE_TZ:\n+        if self.tzinfo is None:\n+            tzname = timezone.get_current_timezone_name()\n+        else:\n+            tzname = timezone._get_timezone_name(self.tzinfo)\n+        # Add validation to ensure the returned tzname is compatible with database operations\n+        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+            import logging\n+            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+    return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_3": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..b52a45e015 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\" \n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..a845b6a044 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,10 +21,23 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n-            if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n-            else:\n-                tzname = timezone._get_timezone_name(self.tzinfo)\n+\n+def get_tzname(self):\n+    # Timezone conversions must happen to the input datetime *before*\n+    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+    # based on the input datetime not the stored datetime.\n+    tzname = None\n+    if settings.USE_TZ:\n+        if self.tzinfo is None:\n+            tzname = timezone.get_current_timezone_name()\n+        else:\n+            tzname = timezone._get_timezone_name(self.tzinfo)\n+        # Add validation to ensure timezone name is compatible with database operations\n+        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+            import logging\n+            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+    return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_4": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..b52a45e015 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\" \n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..cb9c2c01dc 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,10 +21,23 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n-            if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n-            else:\n-                tzname = timezone._get_timezone_name(self.tzinfo)\n+\n+def get_tzname(self):\n+    # Timezone conversions must happen to the input datetime *before*\n+    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+    # based on the input datetime not the stored datetime.\n+    tzname = None\n+    if settings.USE_TZ:\n+        if self.tzinfo is None:\n+            tzname = timezone.get_current_timezone_name()\n+        else:\n+            tzname = timezone._get_timezone_name(self.tzinfo)\n+        # Add validation for complex timezone names that might need special handling\n+        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+            import logging\n+            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+    return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_5": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..df17f84c6f 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\"\n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..98a9a3e8f1 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -11,6 +11,17 @@ from django.db.models.lookups import (\n from django.utils import timezone\n \n \n+class TimezoneMixin:\n+    tzinfo = None\n+\n+    def get_tzname(self):\n+        # Timezone conversions must happen to the input datetime *before*\n+        # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+        # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+        # based on the input datetime not the stored datetime.\n+        tzname = None\n+        if settings.USE_TZ:\n+\n class TimezoneMixin:\n     tzinfo = None\n \n@@ -25,6 +36,11 @@ class TimezoneMixin:\n                 tzname = timezone.get_current_timezone_name()\n             else:\n                 tzname = timezone._get_timezone_name(self.tzinfo)\n+            # Add validation for complex timezone names that might need special handling\n+            if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+                import logging\n+                logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+        return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_6": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..df17f84c6f 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\"\n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..cb9c2c01dc 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,10 +21,23 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n-            if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n-            else:\n-                tzname = timezone._get_timezone_name(self.tzinfo)\n+\n+def get_tzname(self):\n+    # Timezone conversions must happen to the input datetime *before*\n+    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+    # based on the input datetime not the stored datetime.\n+    tzname = None\n+    if settings.USE_TZ:\n+        if self.tzinfo is None:\n+            tzname = timezone.get_current_timezone_name()\n+        else:\n+            tzname = timezone._get_timezone_name(self.tzinfo)\n+        # Add validation for complex timezone names that might need special handling\n+        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+            import logging\n+            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+    return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_7": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..4f1c57b47e 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n+\n     def _prepare_tzname_delta(self, tzname):\n-        if '+' in tzname:\n-            return tzname.replace('+', '-')\n-        elif '-' in tzname:\n-            return tzname.replace('-', '+')\n+        # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+        # Don't modify complex timezone names like \"Etc/GMT-10\" \n+        import re\n+        if re.match(r'^[+-]\\d+$', tzname):\n+            if '+' in tzname:\n+                return tzname.replace('+', '-')\n+            elif '-' in tzname:\n+                return tzname.replace('-', '+')\n         return tzname\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..98a9a3e8f1 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -11,6 +11,17 @@ from django.db.models.lookups import (\n from django.utils import timezone\n \n \n+class TimezoneMixin:\n+    tzinfo = None\n+\n+    def get_tzname(self):\n+        # Timezone conversions must happen to the input datetime *before*\n+        # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+        # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+        # based on the input datetime not the stored datetime.\n+        tzname = None\n+        if settings.USE_TZ:\n+\n class TimezoneMixin:\n     tzinfo = None\n \n@@ -25,6 +36,11 @@ class TimezoneMixin:\n                 tzname = timezone.get_current_timezone_name()\n             else:\n                 tzname = timezone._get_timezone_name(self.tzinfo)\n+            # Add validation for complex timezone names that might need special handling\n+            if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+                import logging\n+                logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+        return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n",
    "variant_8": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..b52a45e015 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -43,17 +43,25 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def _prepare_tzname_delta(self, tzname):\n+\n+def _prepare_tzname_delta(self, tzname):\n+    # Only apply sign reversal to simple offset patterns like \"+10\" or \"-5\"\n+    # Don't modify complex timezone names like \"Etc/GMT-10\" \n+    import re\n+    if re.match(r'^[+-]\\d+$', tzname):\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n             return tzname.replace('-', '+')\n-        return tzname\n+    return tzname\n+\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n-        return field_name\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if tzname and settings.USE_TZ:\n+        # Ensure tzname is in expected format before processing\n+        processed_tzname = self._prepare_tzname_delta(tzname)\n+        field_name = \"%s AT TIME ZONE '%s'\" % (field_name, processed_tzname)\n+    return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 20161bef38..cb9c2c01dc 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -21,10 +21,23 @@ class TimezoneMixin:\n         # based on the input datetime not the stored datetime.\n         tzname = None\n         if settings.USE_TZ:\n-            if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n-            else:\n-                tzname = timezone._get_timezone_name(self.tzinfo)\n+\n+def get_tzname(self):\n+    # Timezone conversions must happen to the input datetime *before*\n+    # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the\n+    # database as 2016-01-01 01:00:00 +00:00. Any results should be\n+    # based on the input datetime not the stored datetime.\n+    tzname = None\n+    if settings.USE_TZ:\n+        if self.tzinfo is None:\n+            tzname = timezone.get_current_timezone_name()\n+        else:\n+            tzname = timezone._get_timezone_name(self.tzinfo)\n+        # Add validation for complex timezone names that might need special handling\n+        if tzname and not tzname.startswith(('+', '-')) and '/' in tzname:\n+            import logging\n+            logging.warning(f\"Complex timezone name '{tzname}' may need special handling\")\n+    return tzname\n         return tzname\n \n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..1f0c55b7cc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -66,13 +66,23 @@ def get_current_timezone():\n     return getattr(_active, \"value\", get_default_timezone())\n \n \n+\n def get_current_timezone_name():\n     \"\"\"Return the name of the currently active time zone.\"\"\"\n     return _get_timezone_name(get_current_timezone())\n \n \n+\n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    # Extract UTC offset to maintain compatibility with _prepare_tzname_delta()\n+    if hasattr(timezone, 'utcoffset'):\n+        # Get offset for a reference datetime (e.g., current time)\n+        offset = timezone.utcoffset(datetime.now())\n+        if offset is not None:\n+            total_seconds = int(offset.total_seconds())\n+            hours = total_seconds // 3600\n+            return f\"{'+' if hours >= 0 else ''}{hours}\"\n     return str(timezone)\n \n # Timezone selection functions.\n"
  }
}