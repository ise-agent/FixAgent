{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/contrib/admin/filters.py lines 196-201)": "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
    "Location 2 (/root/hy/projects/django/django/contrib/admin/filters.py lines 420-422)": "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/contrib/admin/filters.py lines 196-201)": [
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, ordering=ordering)\n"
    ],
    "Location 2 (/root/hy/projects/django/django/contrib/admin/filters.py lines 420-422)": [
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
      "\ndef field_choices(self, field, request, model_admin):\n    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n    ordering = field.remote_field.model._meta.ordering\n    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n    if related_admin is not None:\n        ordering = related_admin.get_ordering(request)\n    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..b87cce7bd0 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,8 +193,9 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n+\n     def field_choices(self, field, request, model_admin):\n-        ordering = ()\n+        ordering = field.remote_field.model._meta.ordering\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n+\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        ordering = field.remote_field.model._meta.ordering\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_0": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_1": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_2": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_3": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_4": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_5": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_6": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_7": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n",
    "variant_8": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..f4fe062f64 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,12 +193,13 @@ class RelatedFieldListFilter(FieldListFilter):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-        return field.get_choices(include_blank=False, ordering=ordering)\n+\n+def field_choices(self, field, request, model_admin):\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n         yield {\n@@ -417,6 +418,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n \n \n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n-    def field_choices(self, field, request, model_admin):\n-        pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+\n+def field_choices(self, field, request, model_admin):\n+    pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+    ordering = field.remote_field.model._meta.ordering\n+    related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+    if related_admin is not None:\n+        ordering = related_admin.get_ordering(request)\n+    return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n"
  }
}