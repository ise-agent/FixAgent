{
  "zero_patches": {
    "Location 1 (/root/hy/projects/astropy/astropy/io/ascii/cds.py lines 129-133)": "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess unit string to handle scientific notation attached to units\n                    # Convert patterns like \"10+3J\" to \"10+3xJ\" and \"10-7J\" to \"10-7xJ\"\n                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n",
    "Location 2 (/root/hy/projects/astropy/astropy/io/ascii/cds.py lines 47-50)": "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n",
    "Location 3 (/root/hy/projects/astropy/astropy/units/format/cds.py lines 109-112)": "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n",
    "Location 4 (/root/hy/projects/astropy/astropy/units/format/cds.py lines 99-107)": "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
    "Location 5 (/root/hy/projects/astropy/astropy/units/format/cds.py lines 202-219)": "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/astropy/astropy/io/ascii/cds.py lines 129-133)": [
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess scientific notation attached to units (e.g., 10+3J -> 10+3xJ)\n                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n",
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess scientific notation units to add missing 'x' separator\n                    unit = self._preprocess_scientific_notation_units(unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                col.description = (match.group(\"descr\") or \"\").strip()\n                col.raw_type = match.group(\"format\")\n                col.type = self.get_col_type(col)\n\n                match = re.match(\n                    # Matches limits specifier (eg []) that may or may not be\n                    # present\n                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n                    # Matches '?' directly\n                    r\"\\?\"\n",
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess scientific notation units to add missing 'x' separator\n                    unit = self._preprocess_scientific_notation_units(unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                col.description = (match.group(\"descr\") or \"\").strip()\n                col.raw_type = match.group(\"format\")\n                col.type = self.get_col_type(col)\n\n                match = re.match(\n                    # Matches limits specifier (eg []) that may or may not be\n                    # present\n                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n                    # Matches '?' directly\n                    r\"\\?\"\n",
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess scientific notation attached to units (e.g., 10+3J -> 10+3xJ)\n                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                col.description = (match.group(\"descr\") or \"\").strip()\n                col.raw_type = match.group(\"format\")\n                col.type = self.get_col_type(col)\n\n                match = re.match(\n                    # Matches limits specifier (eg []) that may or may not be\n                    # present\n                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n                    # Matches '?' directly\n                    r\"\\?\"\n",
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess scientific notation in units (e.g., 10+3J -> 10+3xJ)\n                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n",
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess scientific notation units to add missing 'x' separator\n                    unit = self._preprocess_scientific_notation_units(unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n",
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess unit to handle scientific notation attached to unit symbols\n                    # Convert patterns like \"10+3J/m/s/kpc2\" to \"10+3xJ/m/s/kpc2\"\n                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n",
      "\n        cols = []\n        for line in itertools.islice(lines, i_col_def + 4, None):\n            if line.startswith((\"------\", \"=======\")):\n                break\n            match = re_col_def.match(line)\n            if match:\n                col = core.Column(name=match.group(\"name\"))\n                col.start = int(\n                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                col.end = int(match.group(\"end\"))\n                unit = match.group(\"units\")\n                if unit == \"---\":\n                    col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                else:\n                    # Preprocess unit to handle scientific notation attached to unit symbols\n                    # Convert patterns like \"10+3J/m/s/kpc2\" to \"10+3xJ/m/s/kpc2\"\n                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                col.description = (match.group(\"descr\") or \"\").strip()\n                col.raw_type = match.group(\"format\")\n                col.type = self.get_col_type(col)\n\n                match = re.match(\n                    # Matches limits specifier (eg []) that may or may not be\n                    # present\n                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n                    # Matches '?' directly\n                    r\"\\?\"\n"
    ],
    "Location 2 (/root/hy/projects/astropy/astropy/io/ascii/cds.py lines 47-50)": [
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n",
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n",
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n\n    @staticmethod\n    def _preprocess_scientific_notation_units(unit_str):\n        \"\"\"\n        Preprocess unit strings to handle scientific notation directly attached to units.\n        \n        Converts patterns like '10+3J/m/s/kpc2' to '10+3xJ/m/s/kpc2' by inserting\n        multiplication operator 'x' between scientific notation and unit symbols.\n        \n        Parameters\n        ----------\n        unit_str : str\n            Unit string that may contain scientific notation\n            \n        Returns\n        -------\n        str\n            Preprocessed unit string with proper separators\n        \"\"\"\n        if not unit_str:\n            return unit_str\n            \n        # Pattern to match scientific notation directly followed by a unit symbol\n        # Matches: digits + sign + digits + letter (start of unit)\n        pattern = r'(\\d+[+-]\\d+)([A-Za-z])'\n        return re.sub(pattern, r'\\1x\\2', unit_str)\n",
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n",
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n",
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n",
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n",
      "\n    def get_cols(self, lines):\n        \"\"\"\n        Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n        header.\n\n        Parameters\n        ----------\n        lines : list\n            List of table lines\n\n        \"\"\"\n        # Read header block for the table ``self.data.table_name`` from the read\n        # me file ``self.readme``.\n        if self.readme and self.data.table_name:\n"
    ],
    "Location 3 (/root/hy/projects/astropy/astropy/units/format/cds.py lines 109-112)": [
      "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n",
      "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n",
      "\ndef t_X(t):  # multiplication for factor in front of unit\n    r\"[xÃ—]\"\n    return t\n",
      "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n",
      "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n",
      "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n",
      "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n",
      "\n        def t_X(t):  # multiplication for factor in front of unit\n            r\"[xÃ—]\"\n            return t\n"
    ],
    "Location 4 (/root/hy/projects/astropy/astropy/units/format/cds.py lines 99-107)": [
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n",
      "\n        def t_UINT(t):\n            r\"\\d+\"\n            t.value = int(t.value)\n            return t\n\n        def t_SIGN(t):\n            r\"[+-](?=\\d)\"\n            t.value = float(t.value + \"1\")\n            return t\n"
    ],
    "Location 5 (/root/hy/projects/astropy/astropy/units/format/cds.py lines 202-219)": [
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n",
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n",
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n",
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n",
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n",
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n",
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n",
      "\n        def p_factor(p):\n            \"\"\"\n            factor : signed_float X UINT signed_int\n                   | UINT X UINT signed_int\n                   | UINT signed_int\n                   | UINT\n                   | signed_float\n            \"\"\"\n            if len(p) == 5:\n                if p[3] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = p[1] * 10.0 ** p[4]\n            elif len(p) == 3:\n                if p[1] != 10:\n                    raise ValueError(\"Only base ten exponents are allowed in CDS\")\n                p[0] = 10.0 ** p[2]\n            elif len(p) == 2:\n                p[0] = p[1]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..7eb7511366 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,6 +44,39 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n+    @staticmethod\n+    def _preprocess_scientific_notation_units(unit_string):\n+        \"\"\"\n+        Preprocess unit strings to handle scientific notation directly attached to units.\n+        \n+        Converts patterns like '10+3J/m/s/kpc2' to '10+3xJ/m/s/kpc2' by inserting\n+        the multiplication operator 'x' between scientific notation and unit symbols.\n+        This allows the CDS parser to properly tokenize and parse the units.\n+        \n+        Parameters\n+        ----------\n+        unit_string : str\n+            The original unit string from the MRT file\n+            \n+        Returns\n+        -------\n+        str\n+            The preprocessed unit string with 'x' inserted where needed\n+        \"\"\"\n+        if not unit_string or unit_string == \"---\":\n+            return unit_string\n+            \n+        # Pattern to match scientific notation directly attached to units\n+        # Matches: digits + sign + digits + letter (start of unit)\n+        # Examples: 10+3J, 10-7J, 2+5m, etc.\n+        pattern = r'(\\d+[+-]\\d+)([A-Za-z%Â°])'\n+        \n+        # Insert 'x' between scientific notation and unit symbol\n+        processed = re.sub(pattern, r'\\1x\\2', unit_string)\n+        \n+        return processed\n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n@@ -126,11 +159,14 @@ class CdsHeader(core.BaseHeader):\n                 col.start = int(\n                     re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n                 col.end = int(match.group(\"end\"))\n+\n                 unit = match.group(\"units\")\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n-                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n+                    # Preprocess unit string to handle scientific notation attached to units\n+                    processed_unit = self._preprocess_scientific_notation_units(unit)\n+                    col.unit = Unit(processed_unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\n                 col.type = self.get_col_type(col)\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_0": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..cdf7f1898a 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,19 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +124,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,6 +149,9 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess unit string to handle scientific notation attached to units\n+                    # Convert patterns like \"10+3J\" to \"10+3xJ\" and \"10-7J\" to \"10-7xJ\"\n+                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_1": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..6ad1d44d21 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,22 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +127,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,6 +152,8 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess scientific notation attached to units (e.g., 10+3J -> 10+3xJ)\n+                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_2": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..e343a7a24f 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,22 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +127,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,11 +152,23 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess scientific notation units to add missing 'x' separator\n+                    unit = self._preprocess_scientific_notation_units(unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\n                 col.type = self.get_col_type(col)\n \n+                match = re.match(\n+                    # Matches limits specifier (eg []) that may or may not be\n+                    # present\n+                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n+                    # Matches '?' directly\n+                    r\"\\?\"\n+                col.description = (match.group(\"descr\") or \"\").strip()\n+                col.raw_type = match.group(\"format\")\n+                col.type = self.get_col_type(col)\n+\n                 match = re.match(\n                     # Matches limits specifier (eg []) that may or may not be\n                     # present\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_3": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..d165e1fdbf 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,48 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n+    @staticmethod\n+    def _preprocess_scientific_notation_units(unit_str):\n+        \"\"\"\n+        Preprocess unit strings to handle scientific notation directly attached to units.\n+        \n+        Converts patterns like '10+3J/m/s/kpc2' to '10+3xJ/m/s/kpc2' by inserting\n+        multiplication operator 'x' between scientific notation and unit symbols.\n+        \n+        Parameters\n+        ----------\n+        unit_str : str\n+            Unit string that may contain scientific notation\n+            \n+        Returns\n+        -------\n+        str\n+            Preprocessed unit string with proper separators\n+        \"\"\"\n+        if not unit_str:\n+            return unit_str\n+            \n+        # Pattern to match scientific notation directly followed by a unit symbol\n+        # Matches: digits + sign + digits + letter (start of unit)\n+        pattern = r'(\\d+[+-]\\d+)([A-Za-z])'\n+        return re.sub(pattern, r'\\1x\\2', unit_str)\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +153,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,11 +178,23 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess scientific notation units to add missing 'x' separator\n+                    unit = self._preprocess_scientific_notation_units(unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\n                 col.type = self.get_col_type(col)\n \n+                match = re.match(\n+                    # Matches limits specifier (eg []) that may or may not be\n+                    # present\n+                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n+                    # Matches '?' directly\n+                    r\"\\?\"\n+                col.description = (match.group(\"descr\") or \"\").strip()\n+                col.raw_type = match.group(\"format\")\n+                col.type = self.get_col_type(col)\n+\n                 match = re.match(\n                     # Matches limits specifier (eg []) that may or may not be\n                     # present\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..ebfe328976 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n-        def t_X(t):  # multiplication for factor in front of unit\n-            r\"[xÃ—]\"\n-            return t\n \n+def t_X(t):  # multiplication for factor in front of unit\n+    r\"[xÃ—]\"\n+    return t\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_4": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..24eaca2c9e 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,22 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +127,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,11 +152,23 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess scientific notation attached to units (e.g., 10+3J -> 10+3xJ)\n+                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\n                 col.type = self.get_col_type(col)\n \n+                match = re.match(\n+                    # Matches limits specifier (eg []) that may or may not be\n+                    # present\n+                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n+                    # Matches '?' directly\n+                    r\"\\?\"\n+                col.description = (match.group(\"descr\") or \"\").strip()\n+                col.raw_type = match.group(\"format\")\n+                col.type = self.get_col_type(col)\n+\n                 match = re.match(\n                     # Matches limits specifier (eg []) that may or may not be\n                     # present\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_5": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..3f8c81f4eb 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,22 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +127,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,6 +152,8 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess scientific notation in units (e.g., 10+3J -> 10+3xJ)\n+                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_6": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..0067df25ab 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,22 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +127,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,6 +152,8 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess scientific notation units to add missing 'x' separator\n+                    unit = self._preprocess_scientific_notation_units(unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_7": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..5f1004751c 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,22 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +127,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,6 +152,9 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess unit to handle scientific notation attached to unit symbols\n+                    # Convert patterns like \"10+3J/m/s/kpc2\" to \"10+3xJ/m/s/kpc2\"\n+                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n",
    "variant_8": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex 7a83fc39be..f089497fb3 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -44,11 +44,22 @@ class CdsHeader(core.BaseHeader):\n             )\n         return match.group(1)\n \n+\n     def get_cols(self, lines):\n         \"\"\"\n         Initialize the header Column objects from the table ``lines`` for a CDS/MRT\n         header.\n \n+        Parameters\n+        ----------\n+        lines : list\n+            List of table lines\n+\n+        \"\"\"\n+        # Read header block for the table ``self.data.table_name`` from the read\n+        # me file ``self.readme``.\n+        if self.readme and self.data.table_name:\n+\n         Parameters\n         ----------\n         lines : list\n@@ -116,6 +127,17 @@ class CdsHeader(core.BaseHeader):\n             re.VERBOSE,\n         )\n \n+        cols = []\n+        for line in itertools.islice(lines, i_col_def + 4, None):\n+            if line.startswith((\"------\", \"=======\")):\n+                break\n+            match = re_col_def.match(line)\n+            if match:\n+                col = core.Column(name=match.group(\"name\"))\n+                col.start = int(\n+                    re.sub(r'[-\\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip\n+                col.end = int(match.group(\"end\"))\n+\n         cols = []\n         for line in itertools.islice(lines, i_col_def + 4, None):\n             if line.startswith((\"------\", \"=======\")):\n@@ -130,11 +152,24 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n+                    # Preprocess unit to handle scientific notation attached to unit symbols\n+                    # Convert patterns like \"10+3J/m/s/kpc2\" to \"10+3xJ/m/s/kpc2\"\n+                    unit = re.sub(r'(\\d+[+-]\\d+)([A-Za-z])', r'\\1x\\2', unit)\n                     col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\n                 col.type = self.get_col_type(col)\n \n+                match = re.match(\n+                    # Matches limits specifier (eg []) that may or may not be\n+                    # present\n+                    r\"(?P<limits>[\\[\\]] \\S* [\\[\\]])?\"\n+                    # Matches '?' directly\n+                    r\"\\?\"\n+                col.description = (match.group(\"descr\") or \"\").strip()\n+                col.raw_type = match.group(\"format\")\n+                col.type = self.get_col_type(col)\n+\n                 match = re.match(\n                     # Matches limits specifier (eg []) that may or may not be\n                     # present\ndiff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..0934f0ef10 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -96,6 +96,7 @@ class CDS(Base):\n                 t.value = float(t.value)\n             return t\n \n+\n         def t_UINT(t):\n             r\"\\d+\"\n             t.value = int(t.value)\n@@ -106,10 +107,10 @@ class CDS(Base):\n             t.value = float(t.value + \"1\")\n             return t\n \n+\n         def t_X(t):  # multiplication for factor in front of unit\n             r\"[xÃ—]\"\n             return t\n-\n         def t_UNIT(t):\n             r\"\\%|Â°|\\\\h|((?!\\d)\\w)+\"\n             t.value = cls._get_unit(t)\n@@ -199,6 +200,7 @@ class CDS(Base):\n             else:\n                 p[0] = p[2]\n \n+\n         def p_factor(p):\n             \"\"\"\n             factor : signed_float X UINT signed_int\n"
  }
}