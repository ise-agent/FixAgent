{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/forms/models.py lines 872-878)": "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None, can_add=True):\n",
    "Location 2 (/root/hy/projects/django/django/forms/models.py lines 893-897)": "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
    "Location 3 (/root/hy/projects/django/django/forms/models.py lines 575-581)": "\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        self.can_add = kwargs.pop('can_add', True)\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\n    def initial_form_count(self):\n",
    "Location 4 (/root/hy/projects/django/django/forms/models.py lines 814-826)": "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
    "Location 5 (/root/hy/projects/django/django/forms/models.py lines 667-679)": "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/forms/models.py lines 872-878)": [
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None,\n                         can_add=True):\n",
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None,\n                         can_add=True):\n",
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None,\n                         can_add=True):\n",
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None,\n                         can_add=True):\n",
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None,\n                         can_add=True):\n",
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None,\n                         can_add=True):\n",
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, renderer=None,\n                         can_add=True):\n",
      "\ndef modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                         formset=BaseModelFormSet, extra=1, can_delete=False,\n                         can_order=False, max_num=None, fields=None, exclude=None,\n                         widgets=None, validate_max=False, localized_fields=None,\n                         labels=None, help_texts=None, error_messages=None,\n                         min_num=None, validate_min=False, field_classes=None,\n                         absolute_max=None, can_delete_extra=True, can_add=True, renderer=None):\n"
    ],
    "Location 2 (/root/hy/projects/django/django/forms/models.py lines 893-897)": [
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n",
      "\n    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                              can_order=can_order, can_delete=can_delete,\n                              validate_min=validate_min, validate_max=validate_max,\n                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                              can_add=can_add, renderer=renderer)\n"
    ],
    "Location 3 (/root/hy/projects/django/django/forms/models.py lines 575-581)": [
      "\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        self.can_add = kwargs.pop('can_add', True)\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n",
      "\ndef __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n             queryset=None, *, initial=None, **kwargs):\n    self.queryset = queryset\n    self.initial_extra = initial\n    self.can_add = kwargs.pop('can_add', True)\n    super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\ndef initial_form_count(self):\n",
      "\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        self.can_add = kwargs.pop('can_add', True)\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n",
      "\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        self.can_add = kwargs.pop('can_add', True)\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\n    def initial_form_count(self):\n",
      "\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        self.can_add = kwargs.pop('can_add', True)\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\n    def initial_form_count(self):\n",
      "\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        self.can_add = kwargs.pop('can_add', True)\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\n    def initial_form_count(self):\n",
      "\ndef __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n             queryset=None, *, initial=None, **kwargs):\n    self.queryset = queryset\n    self.initial_extra = initial\n    self.can_add = kwargs.pop('can_add', True)\n    super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\ndef initial_form_count(self):\n",
      "\ndef __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n             queryset=None, *, initial=None, **kwargs):\n    self.queryset = queryset\n    self.initial_extra = initial\n    self.can_add = kwargs.pop('can_add', True)\n    super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\ndef initial_form_count(self):\n"
    ],
    "Location 4 (/root/hy/projects/django/django/forms/models.py lines 814-826)": [
      "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
      "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
      "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
      "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
      "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
      "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
      "\n    def save_new_objects(self, commit=True):\n        if not getattr(self, 'can_add', True):\n            return []\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n",
      "\ndef save_new_objects(self, commit=True):\n    if not getattr(self, 'can_add', True):\n        return []\n    self.new_objects = []\n    for form in self.extra_forms:\n        if not form.has_changed():\n            continue\n        # If someone has marked an add form for deletion, don't save the\n        # object.\n        if self.can_delete and self._should_delete_form(form):\n            continue\n        self.new_objects.append(self.save_new(form, commit=commit))\n        if not commit:\n            self.saved_forms.append(form)\n    return self.new_objects\n"
    ],
    "Location 5 (/root/hy/projects/django/django/forms/models.py lines 667-679)": [
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n",
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n",
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n",
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n",
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n",
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n",
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n",
      "\n    def save(self, commit=True):\n        \"\"\"\n        Save model instances for every form, adding and changing instances\n        as necessary, and return the list of instances.\n        \"\"\"\n        if not commit:\n            self.saved_forms = []\n\n            def save_m2m():\n                for form in self.saved_forms:\n                    form.save_m2m()\n            self.save_m2m = save_m2m\n        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..767941a263 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,10 +572,12 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.can_add = kwargs.pop('can_add', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,8 +814,11 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n+        if not getattr(self, 'can_add', True):\n+            return self.new_objects\n         for form in self.extra_forms:\n             if not form.has_changed():\n                 continue\n@@ -869,13 +875,14 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, can_add=True, renderer=None):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +897,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_0": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..d381dd7584 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,10 +572,12 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.can_add = kwargs.pop('can_add', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +814,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +875,14 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None, can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +897,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_1": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..b9fb113d06 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,13 +572,13 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.can_add = kwargs.pop('can_add', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n-\n-    def initial_form_count(self):\n         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n         if not self.is_bound:\n             return len(self.get_queryset())\n@@ -664,6 +664,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +677,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +812,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +873,15 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +896,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_2": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..1e8fad2263 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,13 +572,15 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n-        self.queryset = queryset\n-        self.initial_extra = initial\n-        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n-    def initial_form_count(self):\n+def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n+             queryset=None, *, initial=None, **kwargs):\n+    self.queryset = queryset\n+    self.initial_extra = initial\n+    self.can_add = kwargs.pop('can_add', True)\n+    super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n+\n+def initial_form_count(self):\n         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n         if not self.is_bound:\n             return len(self.get_queryset())\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +814,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +875,15 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +898,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_3": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..b9fb113d06 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,13 +572,13 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.can_add = kwargs.pop('can_add', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n-\n-    def initial_form_count(self):\n         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n         if not self.is_bound:\n             return len(self.get_queryset())\n@@ -664,6 +664,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +677,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +812,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +873,15 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +896,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_4": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..27eea95652 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,10 +572,12 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.can_add = kwargs.pop('can_add', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +814,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +875,15 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +898,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_5": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..27eea95652 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,10 +572,12 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.can_add = kwargs.pop('can_add', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +814,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +875,15 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +898,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_6": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..27eea95652 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,10 +572,12 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.can_add = kwargs.pop('can_add', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +814,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +875,15 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +898,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_7": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..1e8fad2263 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,13 +572,15 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n-        self.queryset = queryset\n-        self.initial_extra = initial\n-        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n-    def initial_form_count(self):\n+def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n+             queryset=None, *, initial=None, **kwargs):\n+    self.queryset = queryset\n+    self.initial_extra = initial\n+    self.can_add = kwargs.pop('can_add', True)\n+    super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n+\n+def initial_form_count(self):\n         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n         if not self.is_bound:\n             return len(self.get_queryset())\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,7 +814,10 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n+\n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'can_add', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -869,13 +875,15 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +898,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n",
    "variant_8": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..fb3739c725 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -572,13 +572,15 @@ class BaseModelFormSet(BaseFormSet):\n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n-        self.queryset = queryset\n-        self.initial_extra = initial\n-        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n-    def initial_form_count(self):\n+def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n+             queryset=None, *, initial=None, **kwargs):\n+    self.queryset = queryset\n+    self.initial_extra = initial\n+    self.can_add = kwargs.pop('can_add', True)\n+    super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n+\n+def initial_form_count(self):\n         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n         if not self.is_bound:\n             return len(self.get_queryset())\n@@ -664,6 +666,7 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+\n     def save(self, commit=True):\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n@@ -676,7 +679,7 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit) + (self.save_new_objects(commit) if getattr(self, 'can_add', True) else [])\n \n     save.alters_data = True\n \n@@ -811,19 +814,22 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n \n-    def save_new_objects(self, commit=True):\n-        self.new_objects = []\n-        for form in self.extra_forms:\n-            if not form.has_changed():\n-                continue\n-            # If someone has marked an add form for deletion, don't save the\n-            # object.\n-            if self.can_delete and self._should_delete_form(form):\n-                continue\n-            self.new_objects.append(self.save_new(form, commit=commit))\n-            if not commit:\n-                self.saved_forms.append(form)\n-        return self.new_objects\n+\n+def save_new_objects(self, commit=True):\n+    if not getattr(self, 'can_add', True):\n+        return []\n+    self.new_objects = []\n+    for form in self.extra_forms:\n+        if not form.has_changed():\n+            continue\n+        # If someone has marked an add form for deletion, don't save the\n+        # object.\n+        if self.can_delete and self._should_delete_form(form):\n+            continue\n+        self.new_objects.append(self.save_new(form, commit=commit))\n+        if not commit:\n+            self.saved_forms.append(form)\n+    return self.new_objects\n \n     def add_fields(self, form, index):\n         \"\"\"Add a hidden field for the object's primary key.\"\"\"\n@@ -869,13 +875,14 @@ class BaseModelFormSet(BaseFormSet):\n         super().add_fields(form, index)\n \n \n+\n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          formset=BaseModelFormSet, extra=1, can_delete=False,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, can_add=True, renderer=None):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +897,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n+\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              can_add=can_add, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n \n"
  }
}