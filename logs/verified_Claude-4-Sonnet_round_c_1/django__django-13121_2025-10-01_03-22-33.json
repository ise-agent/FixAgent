{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/backends/sqlite3/base.py lines 564-564)": "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
    "Location 2 (/root/hy/projects/django/django/db/backends/base/operations.py lines 581-583)": "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            from django.utils.dateparse import parse_duration\n            try:\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
    "Location 3 (/root/hy/projects/django/django/db/backends/sqlite3/base.py lines 562-563)": "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/backends/sqlite3/base.py lines 564-564)": [
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/backends/base/operations.py lines 581-583)": [
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            from django.utils.dateparse import parse_duration\n            try:\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            from django.utils.dateparse import parse_duration\n            try:\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            from django.utils.dateparse import parse_duration\n            try:\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            from django.utils.dateparse import parse_duration\n            try:\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            try:\n                from django.utils.dateparse import parse_duration\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            from django.utils.dateparse import parse_duration\n            try:\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            try:\n                from django.utils.dateparse import parse_duration\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n",
      "\ndef convert_durationfield_value(self, value, expression, connection):\n    if value is not None:\n        if isinstance(value, int):\n            return datetime.timedelta(0, 0, value)\n        elif isinstance(value, str):\n            # Handle string representations from duration expressions\n            try:\n                from django.utils.dateparse import parse_duration\n                return parse_duration(value)\n            except (ValueError, TypeError):\n                return None\n        else:\n            # Fallback for other numeric types\n            try:\n                return datetime.timedelta(0, 0, int(value))\n            except (ValueError, TypeError):\n                return None\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/backends/sqlite3/base.py lines 562-563)": [
      "\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    return duration_microseconds(out)\n",
      "\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    return duration_microseconds(out)\n",
      "\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    return duration_microseconds(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    return duration_microseconds(out)\n",
      "\ndef _sqlite_format_dtdelta(conn, lhs, rhs):\n    \"\"\"\n    LHS and RHS can be either:\n    - An integer number of microseconds\n    - A string representing a datetime\n    \"\"\"\n    try:\n        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n        if conn.strip() == '+':\n            out = real_lhs + real_rhs\n        else:\n            out = real_lhs - real_rhs\n    except (ValueError, TypeError):\n        return None\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    if isinstance(out, datetime.timedelta):\n        return duration_microseconds(out)\n    return str(out)\n",
      "\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    return duration_microseconds(out)\n",
      "\n    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n    # For duration expressions: returns microseconds as integer\n    return duration_microseconds(out)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..cadecd270b 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,26 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n+\n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            if isinstance(value, int):\n+                # Simple case: value is microseconds\n+                return datetime.timedelta(0, 0, value)\n+            elif isinstance(value, str):\n+                # Handle string representations from duration expressions\n+                # Parse the string back to a timedelta\n+                from django.utils.dateparse import parse_duration\n+                try:\n+                    return parse_duration(value)\n+                except (ValueError, TypeError):\n+                    return None\n+            else:\n+                # Fallback for other numeric types\n+                try:\n+                    return datetime.timedelta(0, 0, int(value))\n+                except (ValueError, TypeError):\n+                    return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..0d68084826 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,6 +559,13 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+\n+    # Check if out is a timedelta (from duration expressions) or datetime (from timestamp expressions)\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     # typecast_timestamp returns a date or a datetime without timezone.\n     # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n     return str(out)\n",
    "variant_0": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..2da4f07751 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            from django.utils.dateparse import parse_duration\n+            try:\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..856c2c252b 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,47 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n+    return str(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_1": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..2da4f07751 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            from django.utils.dateparse import parse_duration\n+            try:\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..7b0017880f 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,30 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    return duration_microseconds(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_2": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..2da4f07751 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            from django.utils.dateparse import parse_duration\n+            try:\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..7b0017880f 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,30 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    return duration_microseconds(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_3": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..2da4f07751 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            from django.utils.dateparse import parse_duration\n+            try:\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..85fd6a88b0 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,15 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    return duration_microseconds(out)\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_4": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..2da4f07751 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            from django.utils.dateparse import parse_duration\n+            try:\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..856c2c252b 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,47 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n+    return str(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_5": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..8f36286d9f 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            try:\n+                from django.utils.dateparse import parse_duration\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..7b0017880f 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,30 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    return duration_microseconds(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_6": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..2da4f07751 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            from django.utils.dateparse import parse_duration\n+            try:\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..856c2c252b 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,47 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n+    return str(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_7": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..8f36286d9f 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            try:\n+                from django.utils.dateparse import parse_duration\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..7b0017880f 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,30 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    return duration_microseconds(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n",
    "variant_8": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..8f36286d9f 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -578,9 +578,24 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n+\n+def convert_durationfield_value(self, value, expression, connection):\n+    if value is not None:\n+        if isinstance(value, int):\n             return datetime.timedelta(0, 0, value)\n+        elif isinstance(value, str):\n+            # Handle string representations from duration expressions\n+            try:\n+                from django.utils.dateparse import parse_duration\n+                return parse_duration(value)\n+            except (ValueError, TypeError):\n+                return None\n+        else:\n+            # Fallback for other numeric types\n+            try:\n+                return datetime.timedelta(0, 0, int(value))\n+            except (ValueError, TypeError):\n+                return None\n \n     def check_expression_support(self, expression):\n         \"\"\"\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 31e8a55a43..7b0017880f 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -559,8 +559,30 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n             out = real_lhs - real_rhs\n     except (ValueError, TypeError):\n         return None\n-    # typecast_timestamp returns a date or a datetime without timezone.\n-    # It will be formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    return duration_microseconds(out)\n+\n+def _sqlite_format_dtdelta(conn, lhs, rhs):\n+    \"\"\"\n+    LHS and RHS can be either:\n+    - An integer number of microseconds\n+    - A string representing a datetime\n+    \"\"\"\n+    try:\n+        real_lhs = datetime.timedelta(0, 0, lhs) if isinstance(lhs, int) else backend_utils.typecast_timestamp(lhs)\n+        real_rhs = datetime.timedelta(0, 0, rhs) if isinstance(rhs, int) else backend_utils.typecast_timestamp(rhs)\n+        if conn.strip() == '+':\n+            out = real_lhs + real_rhs\n+        else:\n+            out = real_lhs - real_rhs\n+    except (ValueError, TypeError):\n+        return None\n+    # For datetime expressions: returns formatted as \"%Y-%m-%d\" or \"%Y-%m-%d %H:%M:%S[.%f]\"\n+    # For duration expressions: returns microseconds as integer\n+    if isinstance(out, datetime.timedelta):\n+        return duration_microseconds(out)\n     return str(out)\n \n \n"
  }
}