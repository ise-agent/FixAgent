{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/sql/query.py lines 2220-2223)": "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    # Handle OrderBy objects that may slip through from Meta.ordering expressions\n    if hasattr(field, 'expression'):\n        # This is an OrderBy object, extract the field name and direction\n        field_name = str(field.expression)\n        if field.descending:\n            return field_name, dirn[1]\n        else:\n            return field_name, dirn[0]\n    # Handle string field names\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
    "Location 2 (/root/hy/projects/django/django/db/models/sql/compiler.py lines 281-296)": "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
    "Location 3 (/root/hy/projects/django/django/db/models/sql/compiler.py lines 285-286)": "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/sql/query.py lines 2220-2223)": [
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    # Handle OrderBy objects that may have been passed instead of strings\n    if hasattr(field, 'expression'):\n        # This is an OrderBy object, extract the field name and direction\n        field_name = str(field.expression)\n        direction = 'DESC' if field.descending else 'ASC'\n        return field_name, direction\n    \n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    # Handle OrderBy objects that may have been passed instead of strings\n    from django.db.models.expressions import OrderBy\n    if isinstance(field, OrderBy):\n        # Extract the field name from the OrderBy expression\n        field_name = str(field.expression)\n        # Return the field name and direction based on OrderBy's descending attribute\n        dirn = ORDER_DIR[default]\n        return field_name, dirn[1] if field.descending else dirn[0]\n    \n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    # Handle OrderBy objects that may have been passed in\n    if hasattr(field, 'expression') and hasattr(field, 'descending'):\n        # This is an OrderBy object\n        field_name = str(field.expression)\n        direction = 'DESC' if field.descending else 'ASC'\n        return field_name, direction\n    \n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    # Handle OrderBy objects that might be passed instead of strings\n    from django.db.models import OrderBy\n    if isinstance(field, OrderBy):\n        field_name = field.expression.name if hasattr(field.expression, 'name') else str(field.expression)\n        direction = 'DESC' if field.descending else 'ASC'\n        return field_name, direction\n    \n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    # Handle OrderBy objects that may be passed instead of strings\n    from django.db.models.expressions import OrderBy\n    if isinstance(field, OrderBy):\n        return field.expression, 'DESC' if field.descending else 'ASC'\n    \n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    # Handle OrderBy objects that may be passed instead of strings\n    if hasattr(field, 'expression') and hasattr(field, 'descending'):\n        # This is an OrderBy object\n        field_name = str(field.expression)\n        direction = 'DESC' if field.descending else 'ASC'\n        return field_name, direction\n    \n    # Handle string field names (original logic)\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    from django.db.models.expressions import OrderBy\n    \n    # Handle OrderBy objects\n    if isinstance(field, OrderBy):\n        field_name = str(field.expression)\n        direction = 'DESC' if field.descending else 'ASC'\n        return field_name, direction\n    \n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    # Handle OrderBy objects that may have slipped through\n    if hasattr(field, 'expression') and hasattr(field, 'descending'):\n        # This is an OrderBy object\n        from django.db.models.expressions import OrderBy\n        if isinstance(field, OrderBy):\n            field_name = str(field.expression)\n            direction = 'DESC' if field.descending else 'ASC'\n            return field_name, direction\n    \n    # Handle string fields (original logic)\n    if not isinstance(field, str):\n        field = str(field)\n    \n    dirn = ORDER_DIR[default]\n    if field and field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/models/sql/compiler.py lines 281-296)": [
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n",
      "\n        order_by = []\n        for field in ordering:\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if isinstance(field, OrderBy):\n                # Handle OrderBy objects that don't have resolve_expression\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n            if field == '?':  # random\n                order_by.append((OrderBy(Random()), False))\n                continue\n\n            col, order = get_order_dir(field, asc)\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/models/sql/compiler.py lines 285-286)": [
      "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n",
      "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n",
      "\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                elif isinstance(field, OrderBy):\n                    # OrderBy object is already properly formed, just use it\n                    pass\n",
      "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n",
      "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n",
      "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n",
      "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n",
      "\n            if hasattr(field, 'resolve_expression'):\n                if isinstance(field, Value):\n                    # output_field must be resolved for constants.\n                    field = Cast(field, field.output_field)\n                if not isinstance(field, OrderBy):\n                    field = field.asc()\n                if not self.query.standard_ordering:\n                    field = field.copy()\n                    field.reverse_ordering()\n                order_by.append((field, False))\n                continue\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..b9e750d83a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -278,6 +278,7 @@ class SQLCompiler:\n \n         order_by = []\n         for field in ordering:\n+\n             if hasattr(field, 'resolve_expression'):\n                 if isinstance(field, Value):\n                     # output_field must be resolved for constants.\n@@ -289,10 +290,18 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            # Add explicit check for OrderBy objects that don't have resolve_expression\n+            if isinstance(field, OrderBy):\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+            col, order = get_order_dir(field, asc)\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..87b6215b54 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,7 +2217,20 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n     dirn = ORDER_DIR[default]\n+    # Handle OrderBy objects that may slip through from expression processing\n+    if hasattr(field, 'expression') and hasattr(field, 'descending'):\n+        # This is an OrderBy object - extract the field name and direction\n+        expr = field.expression\n+        if hasattr(expr, 'name'):\n+            field_name = expr.name\n+        elif hasattr(expr, 'target') and hasattr(expr.target, 'name'):\n+            field_name = expr.target.name\n+        else:\n+            field_name = str(expr)\n+        return field_name, dirn[1] if field.descending else dirn[0]\n+    # Handle string field names (original logic)\n     if field[0] == '-':\n         return field[1:], dirn[1]\n     return field, dirn[0]\n",
    "variant_0": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..83c756d7e1 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2209,6 +2209,15 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n@@ -2218,6 +2227,15 @@ def get_order_dir(field, default='ASC'):\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n     dirn = ORDER_DIR[default]\n+    # Handle OrderBy objects that may slip through from Meta.ordering expressions\n+    if hasattr(field, 'expression'):\n+        # This is an OrderBy object, extract the field name and direction\n+        field_name = str(field.expression)\n+        if field.descending:\n+            return field_name, dirn[1]\n+        else:\n+            return field_name, dirn[0]\n+    # Handle string field names\n     if field[0] == '-':\n         return field[1:], dirn[1]\n     return field, dirn[0]\n",
    "variant_1": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..817fd6d3b1 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,6 +2217,22 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    # Handle OrderBy objects that may have been passed instead of strings\n+    if hasattr(field, 'expression'):\n+        # This is an OrderBy object, extract the field name and direction\n+        field_name = str(field.expression)\n+        direction = 'DESC' if field.descending else 'ASC'\n+        return field_name, direction\n+    \n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n",
    "variant_2": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..e9bd84a89f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,6 +2217,24 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    # Handle OrderBy objects that may have been passed instead of strings\n+    from django.db.models.expressions import OrderBy\n+    if isinstance(field, OrderBy):\n+        # Extract the field name from the OrderBy expression\n+        field_name = str(field.expression)\n+        # Return the field name and direction based on OrderBy's descending attribute\n+        dirn = ORDER_DIR[default]\n+        return field_name, dirn[1] if field.descending else dirn[0]\n+    \n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n",
    "variant_3": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..95ec71f095 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,10 +292,21 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+            col, order = get_order_dir(field, asc)\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..f9c4826695 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,6 +2217,22 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    # Handle OrderBy objects that may have been passed in\n+    if hasattr(field, 'expression') and hasattr(field, 'descending'):\n+        # This is an OrderBy object\n+        field_name = str(field.expression)\n+        direction = 'DESC' if field.descending else 'ASC'\n+        return field_name, direction\n+    \n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n",
    "variant_4": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..45867a5f80 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,6 +2217,22 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    # Handle OrderBy objects that might be passed instead of strings\n+    from django.db.models import OrderBy\n+    if isinstance(field, OrderBy):\n+        field_name = field.expression.name if hasattr(field.expression, 'name') else str(field.expression)\n+        direction = 'DESC' if field.descending else 'ASC'\n+        return field_name, direction\n+    \n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n",
    "variant_5": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..1acdb379ba 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,6 +2217,20 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    # Handle OrderBy objects that may be passed instead of strings\n+    from django.db.models.expressions import OrderBy\n+    if isinstance(field, OrderBy):\n+        return field.expression, 'DESC' if field.descending else 'ASC'\n+    \n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n",
    "variant_6": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..8046efbe01 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,6 +2217,23 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    # Handle OrderBy objects that may be passed instead of strings\n+    if hasattr(field, 'expression') and hasattr(field, 'descending'):\n+        # This is an OrderBy object\n+        field_name = str(field.expression)\n+        direction = 'DESC' if field.descending else 'ASC'\n+        return field_name, direction\n+    \n+    # Handle string field names (original logic)\n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n",
    "variant_7": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..af3c3e35fc 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,6 +2217,23 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    from django.db.models.expressions import OrderBy\n+    \n+    # Handle OrderBy objects\n+    if isinstance(field, OrderBy):\n+        field_name = str(field.expression)\n+        direction = 'DESC' if field.descending else 'ASC'\n+        return field_name, direction\n+    \n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n",
    "variant_8": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..121b56707b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -276,6 +276,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        order_by = []\n+        for field in ordering:\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -289,6 +292,23 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n+            if isinstance(field, OrderBy):\n+                # Handle OrderBy objects that don't have resolve_expression\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n+            if field == '?':  # random\n+                order_by.append((OrderBy(Random()), False))\n+                continue\n+\n+            col, order = get_order_dir(field, asc)\n+                if not self.query.standard_ordering:\n+                    field = field.copy()\n+                    field.reverse_ordering()\n+                order_by.append((field, False))\n+                continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n                 continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..85ef4ab2fe 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,8 +2217,30 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+\n+def get_order_dir(field, default='ASC'):\n+    \"\"\"\n+    Return the field name and direction for an order specification. For\n+    example, '-foo' is returned as ('foo', 'DESC').\n+\n+    The 'default' param is used to indicate which way no prefix (or a '+'\n+    prefix) should sort. The '-' prefix always sorts the opposite way.\n+    \"\"\"\n+    # Handle OrderBy objects that may have slipped through\n+    if hasattr(field, 'expression') and hasattr(field, 'descending'):\n+        # This is an OrderBy object\n+        from django.db.models.expressions import OrderBy\n+        if isinstance(field, OrderBy):\n+            field_name = str(field.expression)\n+            direction = 'DESC' if field.descending else 'ASC'\n+            return field_name, direction\n+    \n+    # Handle string fields (original logic)\n+    if not isinstance(field, str):\n+        field = str(field)\n+    \n     dirn = ORDER_DIR[default]\n-    if field[0] == '-':\n+    if field and field[0] == '-':\n         return field[1:], dirn[1]\n     return field, dirn[0]\n \n"
  }
}