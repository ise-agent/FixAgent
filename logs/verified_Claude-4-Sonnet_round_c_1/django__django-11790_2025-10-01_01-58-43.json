{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/contrib/auth/forms.py lines 64-69)": "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
    "Location 2 (/root/hy/projects/django/django/contrib/auth/forms.py lines 183-196)": "\ndef widget_attrs(self, widget):\n    attrs = super().widget_attrs(widget)\n    if self.max_length is not None and not widget.is_hidden:\n        attrs['maxlength'] = str(self.max_length)\n    return attrs\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/contrib/auth/forms.py lines 64-69)": [
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        # Ensure maxlength attribute is set if max_length is defined\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        # Ensure maxlength attribute is set if field has max_length\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n",
      "\n    def widget_attrs(self, widget):\n        attrs = {\n            **super().widget_attrs(widget),\n            'autocapitalize': 'none',\n            'autocomplete': 'username',\n        }\n        if self.max_length is not None and not widget.is_hidden:\n            attrs['maxlength'] = str(self.max_length)\n        return attrs\n"
    ],
    "Location 2 (/root/hy/projects/django/django/contrib/auth/forms.py lines 183-196)": [
      "\ndef widget_attrs(self, widget):\n    attrs = super().widget_attrs(widget)\n    if self.max_length is not None and not widget.is_hidden:\n        attrs['maxlength'] = str(self.max_length)\n    return attrs\n",
      "\ndef __init__(self, request=None, *args, **kwargs):\n    \"\"\"\n    The 'request' parameter is set for custom auth use by subclasses.\n    The form data comes in via the standard 'data' kwarg.\n    \"\"\"\n    self.request = request\n    self.user_cache = None\n    \n    # Set the max length for the \"username\" field before calling super().__init__()\n    # to ensure the widget gets the maxlength attribute properly\n    self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n    username_max_length = self.username_field.max_length or 254\n    \n    # If 'data' is in kwargs, we need to preserve it for super().__init__()\n    if 'initial' not in kwargs:\n        kwargs['initial'] = {}\n    \n    super().__init__(*args, **kwargs)\n\n    # Set the max length and label for the \"username\" field.\n    self.fields['username'].max_length = username_max_length\n    # Force widget to update its attributes with the new max_length\n    if hasattr(self.fields['username'].widget, 'attrs'):\n        self.fields['username'].widget.attrs['maxlength'] = str(username_max_length)\n    \n    if self.fields['username'].label is None:\n        self.fields['username'].label = capfirst(self.username_field.verbose_name)\n",
      "\ndef widget_attrs(self, widget):\n    attrs = super().widget_attrs(widget)\n    if self.max_length is not None and not widget.is_hidden:\n        attrs['maxlength'] = str(self.max_length)\n    return attrs\n",
      "\ndef __init__(self, request=None, *args, **kwargs):\n    \"\"\"\n    The 'request' parameter is set for custom auth use by subclasses.\n    The form data comes in via the standard 'data' kwarg.\n    \"\"\"\n    self.request = request\n    self.user_cache = None\n    \n    # Set the max length for the \"username\" field before calling super().__init__()\n    # to ensure the widget gets the maxlength attribute properly\n    self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n    username_max_length = self.username_field.max_length or 254\n    \n    # If 'data' is in kwargs and we're modifying declared fields, we need to be careful\n    # Create a copy of the declared fields to avoid modifying the class-level fields\n    if hasattr(self, 'declared_fields') and 'username' in self.declared_fields:\n        # Make a copy of declared_fields to avoid class-level mutations\n        self.declared_fields = self.declared_fields.copy()\n        self.declared_fields['username'] = self.declared_fields['username'].__class__(\n            max_length=username_max_length,\n            **{k: v for k, v in self.declared_fields['username'].__dict__.items() \n               if k not in ('max_length',) and not k.startswith('_')}\n        )\n    \n    super().__init__(*args, **kwargs)\n\n    # Set the max length and label for the \"username\" field.\n    self.fields['username'].max_length = username_max_length\n    if self.fields['username'].label is None:\n        self.fields['username'].label = capfirst(self.username_field.verbose_name)\n",
      "\n    def __init__(self, request=None, *args, **kwargs):\n        \"\"\"\n        The 'request' parameter is set for custom auth use by subclasses.\n        The form data comes in via the standard 'data' kwarg.\n        \"\"\"\n        self.request = request\n        self.user_cache = None\n        \n        # Set the max length for the \"username\" field before calling super().__init__()\n        # to ensure the widget gets the maxlength attribute\n        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n        max_length = self.username_field.max_length or 254\n        \n        # If data is provided, we need to modify the field definition before super().__init__\n        if 'data' not in kwargs:\n            # Pre-configure the username field's max_length\n            super().__init__(*args, **kwargs)\n            self.fields['username'].max_length = max_length\n        else:\n            # For bound forms, we need to set max_length on the base field before initialization\n            super().__init__(*args, **kwargs)\n            self.fields['username'].max_length = max_length\n            # Force widget to update maxlength attribute\n            if hasattr(self.fields['username'].widget, 'attrs'):\n                self.fields['username'].widget.attrs['maxlength'] = str(max_length)\n        \n        if self.fields['username'].label is None:\n            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n",
      "\ndef widget_attrs(self, widget):\n    attrs = super().widget_attrs(widget)\n    if self.max_length is not None and not widget.is_hidden:\n        attrs['maxlength'] = str(self.max_length)\n    return attrs\n",
      "\n    def __init__(self, request=None, *args, **kwargs):\n        \"\"\"\n        The 'request' parameter is set for custom auth use by subclasses.\n        The form data comes in via the standard 'data' kwarg.\n        \"\"\"\n        self.request = request\n        self.user_cache = None\n        \n        # Set the max length for the \"username\" field before calling super().__init__()\n        # to ensure the widget gets the maxlength attribute properly\n        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n        username_max_length = self.username_field.max_length or 254\n        \n        # Update the username field definition before form initialization\n        if 'username' in self.base_fields:\n            self.base_fields['username'].max_length = username_max_length\n        \n        super().__init__(*args, **kwargs)\n\n        # Set the label for the \"username\" field\n        if self.fields['username'].label is None:\n            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n",
      "\ndef widget_attrs(self, widget):\n    attrs = super().widget_attrs(widget)\n    if self.max_length is not None and not widget.is_hidden:\n        attrs['maxlength'] = str(self.max_length)\n    return attrs\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..48447bdf64 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,17 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        # Handle maxlength explicitly for AuthenticationForm timing issue\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,6 +185,7 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n+\n     def __init__(self, request=None, *args, **kwargs):\n         \"\"\"\n         The 'request' parameter is set for custom auth use by subclasses.\n",
    "variant_0": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..0cad821607 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,16 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,20 +184,12 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n-        \"\"\"\n-        The 'request' parameter is set for custom auth use by subclasses.\n-        The form data comes in via the standard 'data' kwarg.\n-        \"\"\"\n-        self.request = request\n-        self.user_cache = None\n-        super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n-        if self.fields['username'].label is None:\n-            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n+def widget_attrs(self, widget):\n+    attrs = super().widget_attrs(widget)\n+    if self.max_length is not None and not widget.is_hidden:\n+        attrs['maxlength'] = str(self.max_length)\n+    return attrs\n \n     def clean(self):\n         username = self.cleaned_data.get('username')\n",
    "variant_1": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..503647805d 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,17 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        # Ensure maxlength attribute is set if max_length is defined\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,20 +185,12 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n-        \"\"\"\n-        The 'request' parameter is set for custom auth use by subclasses.\n-        The form data comes in via the standard 'data' kwarg.\n-        \"\"\"\n-        self.request = request\n-        self.user_cache = None\n-        super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n-        if self.fields['username'].label is None:\n-            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n+def widget_attrs(self, widget):\n+    attrs = super().widget_attrs(widget)\n+    if self.max_length is not None and not widget.is_hidden:\n+        attrs['maxlength'] = str(self.max_length)\n+    return attrs\n \n     def clean(self):\n         username = self.cleaned_data.get('username')\n",
    "variant_2": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..299647aec6 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,16 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,20 +184,34 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n-        \"\"\"\n-        The 'request' parameter is set for custom auth use by subclasses.\n-        The form data comes in via the standard 'data' kwarg.\n-        \"\"\"\n-        self.request = request\n-        self.user_cache = None\n-        super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n-        if self.fields['username'].label is None:\n-            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n+def __init__(self, request=None, *args, **kwargs):\n+    \"\"\"\n+    The 'request' parameter is set for custom auth use by subclasses.\n+    The form data comes in via the standard 'data' kwarg.\n+    \"\"\"\n+    self.request = request\n+    self.user_cache = None\n+    \n+    # Set the max length for the \"username\" field before calling super().__init__()\n+    # to ensure the widget gets the maxlength attribute properly\n+    self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n+    username_max_length = self.username_field.max_length or 254\n+    \n+    # If 'data' is in kwargs, we need to preserve it for super().__init__()\n+    if 'initial' not in kwargs:\n+        kwargs['initial'] = {}\n+    \n+    super().__init__(*args, **kwargs)\n+\n+    # Set the max length and label for the \"username\" field.\n+    self.fields['username'].max_length = username_max_length\n+    # Force widget to update its attributes with the new max_length\n+    if hasattr(self.fields['username'].widget, 'attrs'):\n+        self.fields['username'].widget.attrs['maxlength'] = str(username_max_length)\n+    \n+    if self.fields['username'].label is None:\n+        self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n     def clean(self):\n         username = self.cleaned_data.get('username')\n",
    "variant_3": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..0cad821607 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,16 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,20 +184,12 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n-        \"\"\"\n-        The 'request' parameter is set for custom auth use by subclasses.\n-        The form data comes in via the standard 'data' kwarg.\n-        \"\"\"\n-        self.request = request\n-        self.user_cache = None\n-        super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n-        if self.fields['username'].label is None:\n-            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n+def widget_attrs(self, widget):\n+    attrs = super().widget_attrs(widget)\n+    if self.max_length is not None and not widget.is_hidden:\n+        attrs['maxlength'] = str(self.max_length)\n+    return attrs\n \n     def clean(self):\n         username = self.cleaned_data.get('username')\n",
    "variant_4": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..a0ffef49ab 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,17 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        # Ensure maxlength attribute is set if field has max_length\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,20 +185,37 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n-        \"\"\"\n-        The 'request' parameter is set for custom auth use by subclasses.\n-        The form data comes in via the standard 'data' kwarg.\n-        \"\"\"\n-        self.request = request\n-        self.user_cache = None\n-        super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n-        if self.fields['username'].label is None:\n-            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n+def __init__(self, request=None, *args, **kwargs):\n+    \"\"\"\n+    The 'request' parameter is set for custom auth use by subclasses.\n+    The form data comes in via the standard 'data' kwarg.\n+    \"\"\"\n+    self.request = request\n+    self.user_cache = None\n+    \n+    # Set the max length for the \"username\" field before calling super().__init__()\n+    # to ensure the widget gets the maxlength attribute properly\n+    self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n+    username_max_length = self.username_field.max_length or 254\n+    \n+    # If 'data' is in kwargs and we're modifying declared fields, we need to be careful\n+    # Create a copy of the declared fields to avoid modifying the class-level fields\n+    if hasattr(self, 'declared_fields') and 'username' in self.declared_fields:\n+        # Make a copy of declared_fields to avoid class-level mutations\n+        self.declared_fields = self.declared_fields.copy()\n+        self.declared_fields['username'] = self.declared_fields['username'].__class__(\n+            max_length=username_max_length,\n+            **{k: v for k, v in self.declared_fields['username'].__dict__.items() \n+               if k not in ('max_length',) and not k.startswith('_')}\n+        )\n+    \n+    super().__init__(*args, **kwargs)\n+\n+    # Set the max length and label for the \"username\" field.\n+    self.fields['username'].max_length = username_max_length\n+    if self.fields['username'].label is None:\n+        self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n     def clean(self):\n         username = self.cleaned_data.get('username')\n",
    "variant_5": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..a77deb810c 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,16 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,6 +184,7 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n+\n     def __init__(self, request=None, *args, **kwargs):\n         \"\"\"\n         The 'request' parameter is set for custom auth use by subclasses.\n@@ -187,11 +192,25 @@ class AuthenticationForm(forms.Form):\n         \"\"\"\n         self.request = request\n         self.user_cache = None\n-        super().__init__(*args, **kwargs)\n-\n-        # Set the max length and label for the \"username\" field.\n+        \n+        # Set the max length for the \"username\" field before calling super().__init__()\n+        # to ensure the widget gets the maxlength attribute\n         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n+        max_length = self.username_field.max_length or 254\n+        \n+        # If data is provided, we need to modify the field definition before super().__init__\n+        if 'data' not in kwargs:\n+            # Pre-configure the username field's max_length\n+            super().__init__(*args, **kwargs)\n+            self.fields['username'].max_length = max_length\n+        else:\n+            # For bound forms, we need to set max_length on the base field before initialization\n+            super().__init__(*args, **kwargs)\n+            self.fields['username'].max_length = max_length\n+            # Force widget to update maxlength attribute\n+            if hasattr(self.fields['username'].widget, 'attrs'):\n+                self.fields['username'].widget.attrs['maxlength'] = str(max_length)\n+        \n         if self.fields['username'].label is None:\n             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n",
    "variant_6": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..0cad821607 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,16 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,20 +184,12 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n-        \"\"\"\n-        The 'request' parameter is set for custom auth use by subclasses.\n-        The form data comes in via the standard 'data' kwarg.\n-        \"\"\"\n-        self.request = request\n-        self.user_cache = None\n-        super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n-        if self.fields['username'].label is None:\n-            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n+def widget_attrs(self, widget):\n+    attrs = super().widget_attrs(widget)\n+    if self.max_length is not None and not widget.is_hidden:\n+        attrs['maxlength'] = str(self.max_length)\n+    return attrs\n \n     def clean(self):\n         username = self.cleaned_data.get('username')\n",
    "variant_7": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..82a2a5b9ee 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,16 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,6 +184,7 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n+\n     def __init__(self, request=None, *args, **kwargs):\n         \"\"\"\n         The 'request' parameter is set for custom auth use by subclasses.\n@@ -187,11 +192,19 @@ class AuthenticationForm(forms.Form):\n         \"\"\"\n         self.request = request\n         self.user_cache = None\n+        \n+        # Set the max length for the \"username\" field before calling super().__init__()\n+        # to ensure the widget gets the maxlength attribute properly\n+        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n+        username_max_length = self.username_field.max_length or 254\n+        \n+        # Update the username field definition before form initialization\n+        if 'username' in self.base_fields:\n+            self.base_fields['username'].max_length = username_max_length\n+        \n         super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n+        # Set the label for the \"username\" field\n         if self.fields['username'].label is None:\n             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n",
    "variant_8": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..0cad821607 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -61,12 +61,16 @@ class UsernameField(forms.CharField):\n     def to_python(self, value):\n         return unicodedata.normalize('NFKC', super().to_python(value))\n \n+\n     def widget_attrs(self, widget):\n-        return {\n+        attrs = {\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n         }\n+        if self.max_length is not None and not widget.is_hidden:\n+            attrs['maxlength'] = str(self.max_length)\n+        return attrs\n \n \n class UserCreationForm(forms.ModelForm):\n@@ -180,20 +184,12 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n-        \"\"\"\n-        The 'request' parameter is set for custom auth use by subclasses.\n-        The form data comes in via the standard 'data' kwarg.\n-        \"\"\"\n-        self.request = request\n-        self.user_cache = None\n-        super().__init__(*args, **kwargs)\n \n-        # Set the max length and label for the \"username\" field.\n-        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n-        if self.fields['username'].label is None:\n-            self.fields['username'].label = capfirst(self.username_field.verbose_name)\n+def widget_attrs(self, widget):\n+    attrs = super().widget_attrs(widget)\n+    if self.max_length is not None and not widget.is_hidden:\n+        attrs['maxlength'] = str(self.max_length)\n+    return attrs\n \n     def clean(self):\n         username = self.cleaned_data.get('username')\n"
  }
}