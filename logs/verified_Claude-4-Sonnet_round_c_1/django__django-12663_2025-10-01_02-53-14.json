{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/fields/__init__.py lines 1767-1776)": "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Resolve SimpleLazyObject before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n",
    "Location 2 (/root/hy/projects/django/django/db/models/fields/__init__.py lines 1781-1791)": "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/fields/__init__.py lines 1767-1776)": [
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Handle SimpleLazyObject by resolving it to its wrapped value\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Handle SimpleLazyObject by resolving it to its wrapped value\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Resolve SimpleLazyObject instances\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject instances\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Handle SimpleLazyObject by resolving it to its wrapped value\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Resolve SimpleLazyObject before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Handle SimpleLazyObject and other lazy objects\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return None\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/models/fields/__init__.py lines 1781-1791)": [
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject if present\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject if present\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject if present\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject if present\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return value\n        # Handle SimpleLazyObject and other lazy objects\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Handle SimpleLazyObject and other lazy objects\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return value\n        # Handle SimpleLazyObject by resolving it to its wrapped value\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Handle SimpleLazyObject by resolving it to its wrapped value\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Resolve SimpleLazyObject instances before conversion\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if value is None:\n            return value\n        # Handle SimpleLazyObject by resolving it first\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError) as e:\n            raise e.__class__(\n                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n            ) from e\n\n    def get_internal_type(self):\n        return \"IntegerField\"\n\n    def to_python(self, value):\n        if value is None:\n            return value\n        # Handle SimpleLazyObject by resolving it first\n        if hasattr(value, '_wrapped'):\n            value = value._wrapped\n        try:\n            return int(value)\n        except (TypeError, ValueError):\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..bbe6c835d4 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,14 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1778,9 +1782,13 @@ class IntegerField(Field):\n     def get_internal_type(self):\n         return \"IntegerField\"\n \n+\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_0": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..3ada8a90a9 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,32 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Resolve SimpleLazyObject before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        if value is None:\n+            return value\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1803,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_1": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..5ac644dd9c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,32 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        if value is None:\n+            return value\n+        # Resolve SimpleLazyObject if present\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1803,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Resolve SimpleLazyObject if present\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_2": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..f4ab0b5b39 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,50 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Handle SimpleLazyObject by resolving it to its wrapped value\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+    def to_python(self, value):\n+        if value is None:\n+            return value\n+        # Handle SimpleLazyObject by resolving it to its wrapped value\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError):\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        if value is None:\n+            return value\n+        # Resolve SimpleLazyObject if present\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1821,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Resolve SimpleLazyObject if present\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_3": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..dbc1c80256 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,44 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Resolve SimpleLazyObject instances\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+    def to_python(self, value):\n+        if value is None:\n+            return value\n+        # Resolve SimpleLazyObject instances\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError):\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return value\n+        # Resolve SimpleLazyObject before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1815,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Resolve SimpleLazyObject before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_4": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..9811f9871d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,32 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Handle SimpleLazyObject by resolving it to its wrapped value\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        if value is None:\n+            return value\n+        # Handle SimpleLazyObject and other lazy objects\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1803,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Handle SimpleLazyObject and other lazy objects\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_5": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..304b2d26fc 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,32 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Resolve SimpleLazyObject before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        if value is None:\n+            return value\n+        # Handle SimpleLazyObject by resolving it to its wrapped value\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1803,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Handle SimpleLazyObject by resolving it to its wrapped value\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_6": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..6b03003afd 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,32 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        if value is None:\n+            return value\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1803,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_7": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..1959da5924 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,31 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Handle SimpleLazyObject and other lazy objects\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return value\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1802,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n",
    "variant_8": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..c5f08026dc 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1764,10 +1764,32 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        # Resolve SimpleLazyObject instances before conversion\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n+        try:\n+            return int(value)\n+        except (TypeError, ValueError) as e:\n+            raise e.__class__(\n+                \"Field '%s' expected a number but got %r.\" % (self.name, value),\n+            ) from e\n+\n+    def get_internal_type(self):\n+        return \"IntegerField\"\n+\n+\n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        if value is None:\n+            return value\n+        # Handle SimpleLazyObject by resolving it first\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1781,6 +1803,9 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Handle SimpleLazyObject by resolving it first\n+        if hasattr(value, '_wrapped'):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n"
  }
}