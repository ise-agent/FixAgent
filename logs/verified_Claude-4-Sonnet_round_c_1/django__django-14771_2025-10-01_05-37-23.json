{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/utils/autoreload.py lines 222-222)": "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/utils/autoreload.py lines 222-222)": [
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n",
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n",
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n",
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n",
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n",
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n",
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n",
      "\ndef get_child_arguments():\n    \"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\"\n    import __main__\n    py_script = Path(sys.argv[0])\n\n    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n    # __spec__ is set when the server was started with the `-m` option,\n    # see https://docs.python.org/3/reference/import.html#main-spec\n    # __spec__ may not exist, e.g. when running in a Conda env.\n    if getattr(__main__, '__spec__', None) is not None:\n        spec = __main__.__spec__\n        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n            name = spec.parent\n        else:\n            name = spec.name\n        args += ['-m', name]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..e9b21dd6b9 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,8 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_0": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_1": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_2": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_3": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_4": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_5": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_6": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_7": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
    "variant_8": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..d794e04651 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,27 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+\n+def get_child_arguments():\n+    \"\"\"\n+    Return the executable. This contains a workaround for Windows if the\n+    executable is reported to not have the .exe extension which can cause bugs\n+    on reloading.\n+    \"\"\"\n+    import __main__\n+    py_script = Path(sys.argv[0])\n+\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % (f'{k}={v}' if v != True else k) for k, v in getattr(sys, '_xoptions', {}).items()]\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    # __spec__ may not exist, e.g. when running in a Conda env.\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n"
  }
}