{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/sql/compiler.py lines 428-433)": "\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
    "Location 2 (/root/hy/projects/django/django/db/models/sql/query.py lines 2030-2063)": "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
    "Location 3 (/root/hy/projects/django/django/db/models/sql/query.py lines 2084-2097)": "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
    "Location 4 (/root/hy/projects/django/django/db/models/sql/query.py lines 2065-2082)": "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/sql/compiler.py lines 428-433)": [
      "\n                # If the columns list is limited, then all combined queries\n                # must have the same columns list. Set the selects defined on\n                # the query on all combined queries, if not already set.\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
      "\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
      "\n                # If the columns list is limited, then all combined queries\n                # must have the same columns list. Set the selects defined on\n                # the query on all combined queries, if not already set.\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
      "\n                # If the columns list is limited, then all combined queries\n                # must have the same columns list. Set the selects defined on\n                # the query on all combined queries, if not already set.\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
      "\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
      "\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
      "\n                # If the columns list is limited, then all combined queries\n                # must have the same columns list. Set the selects defined on\n                # the query on all combined queries, if not already set.\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
      "\n                # If the columns list is limited, then all combined queries\n                # must have the same columns list. Set the selects defined on\n                # the query on all combined queries, if not already set.\n                if self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/models/sql/query.py lines 2030-2063)": [
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n",
      "\n    def set_values(self, fields):\n        self.select_related = False\n        self.clear_deferred_loading()\n        self.clear_select_fields()\n\n        if self.group_by is True:\n            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n            self.set_group_by()\n            self.clear_select_fields()\n\n        if fields:\n            field_names = []\n            extra_names = []\n            annotation_names = []\n            if not self.extra and not self.annotations:\n                # Shortcut - if there are no extra or annotations, then\n                # the values() clause must be just field names.\n                field_names = list(fields)\n            else:\n                self.default_cols = False\n                for f in fields:\n                    if f in self.extra_select:\n                        extra_names.append(f)\n                    elif f in self.annotation_select:\n                        annotation_names.append(f)\n                    else:\n                        field_names.append(f)\n            self.set_extra_mask(extra_names)\n            self.set_annotation_mask(annotation_names)\n        else:\n            field_names = [f.attname for f in self.model._meta.concrete_fields]\n\n        self.values_select = tuple(field_names)\n        self.add_fields(field_names, True)\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/models/sql/query.py lines 2084-2097)": [
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n",
      "\n    @property\n    def extra_select(self):\n        if self._extra_select_cache is not None:\n            return self._extra_select_cache\n        if not self.extra:\n            return {}\n        elif self.extra_select_mask is not None:\n            self._extra_select_cache = {\n                k: v for k, v in self.extra.items()\n                if k in self.extra_select_mask\n            }\n            return self._extra_select_cache\n        else:\n            return self.extra\n"
    ],
    "Location 4 (/root/hy/projects/django/django/db/models/sql/query.py lines 2065-2082)": [
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n",
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n",
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n",
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n",
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n",
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n",
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n",
      "\n    @property\n    def annotation_select(self):\n        \"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\"\n        if self._annotation_select_cache is not None:\n            return self._annotation_select_cache\n        elif not self.annotations:\n            return {}\n        elif self.annotation_select_mask is not None:\n            self._annotation_select_cache = {\n                k: v for k, v in self.annotations.items()\n                if k in self.annotation_select_mask\n            }\n            return self._annotation_select_cache\n        else:\n            return self.annotations\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..23b2c83a80 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,8 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_0": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..23b2c83a80 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,8 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_1": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..0f901c015e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,11 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                # If the columns list is limited, then all combined queries\n+                # must have the same columns list. Set the selects defined on\n+                # the query on all combined queries, if not already set.\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_2": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..23b2c83a80 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,8 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_3": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..0f901c015e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,11 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                # If the columns list is limited, then all combined queries\n+                # must have the same columns list. Set the selects defined on\n+                # the query on all combined queries, if not already set.\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_4": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..0f901c015e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,11 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                # If the columns list is limited, then all combined queries\n+                # must have the same columns list. Set the selects defined on\n+                # the query on all combined queries, if not already set.\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_5": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..23b2c83a80 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,8 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_6": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..23b2c83a80 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,8 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_7": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..0f901c015e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,11 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                # If the columns list is limited, then all combined queries\n+                # must have the same columns list. Set the selects defined on\n+                # the query on all combined queries, if not already set.\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n",
    "variant_8": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..0f901c015e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,7 +425,11 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+\n+                # If the columns list is limited, then all combined queries\n+                # must have the same columns list. Set the selects defined on\n+                # the query on all combined queries, if not already set.\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..a251eda3da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,6 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n+\n     def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n@@ -2062,6 +2063,7 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n@@ -2081,6 +2083,7 @@ class Query(BaseExpression):\n         else:\n             return self.annotations\n \n+\n     @property\n     def extra_select(self):\n         if self._extra_select_cache is not None:\n"
  }
}