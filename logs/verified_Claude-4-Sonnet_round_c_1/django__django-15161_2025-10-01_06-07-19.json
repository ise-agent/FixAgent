{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/expressions.py lines 734-734)": "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
    "Location 2 (/root/hy/projects/django/django/db/models/expressions.py lines 988-988)": "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n",
    "Location 3 (/root/hy/projects/django/django/db/models/expressions.py lines 1055-1055)": "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n",
    "Location 4 (/root/hy/projects/django/django/db/models/expressions.py lines 1136-1136)": "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n",
    "Location 5 (/root/hy/projects/django/django/db/models/expressions.py lines 1193-1193)": "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/expressions.py lines 734-734)": [
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Value')\nclass Value(SQLiteNumericMixin, Expression):\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/models/expressions.py lines 988-988)": [
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n    template = 'WHEN %(condition)s THEN %(result)s'\n    # This isn't a complete conditional expression, must be used in Case().\n    conditional = False\n\n    def __init__(self, condition=None, then=None, **lookups):\n        if lookups:\n            if condition is None:\n                condition, lookups = Q(**lookups), None\n            elif getattr(condition, 'conditional', False):\n                condition, lookups = Q(condition, **lookups), None\n",
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n",
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n",
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n    template = 'WHEN %(condition)s THEN %(result)s'\n    # This isn't a complete conditional expression, must be used in Case().\n    conditional = False\n\n    def __init__(self, condition=None, then=None, **lookups):\n        if lookups:\n            if condition is None:\n                condition, lookups = Q(**lookups), None\n            elif getattr(condition, 'conditional', False):\n                condition, lookups = Q(condition, **lookups), None\n",
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n",
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n",
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n    template = 'WHEN %(condition)s THEN %(result)s'\n    # This isn't a complete conditional expression, must be used in Case().\n    conditional = False\n\n    def __init__(self, condition=None, then=None, **lookups):\n        if lookups:\n            if condition is None:\n                condition, lookups = Q(**lookups), None\n            elif getattr(condition, 'conditional', False):\n                condition, lookups = Q(condition, **lookups), None\n",
      "\n@deconstructible(path='django.db.models.When')\nclass When(Expression):\n    template = 'WHEN %(condition)s THEN %(result)s'\n    # This isn't a complete conditional expression, must be used in Case().\n    conditional = False\n\n    def __init__(self, condition=None, then=None, **lookups):\n        if lookups:\n            if condition is None:\n                condition, lookups = Q(**lookups), None\n            elif getattr(condition, 'conditional', False):\n                condition, lookups = Q(condition, **lookups), None\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/models/expressions.py lines 1055-1055)": [
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n    \"\"\"\n    An SQL searched CASE expression:\n\n        CASE\n            WHEN n > 0\n                THEN 'positive'\n            WHEN n < 0\n                THEN 'negative'\n            ELSE 'zero'\n        END\n",
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n",
      "\n@deconstructible(path='django.db.models.Case')\nclass Case(SQLiteNumericMixin, Expression):\n"
    ],
    "Location 4 (/root/hy/projects/django/django/db/models/expressions.py lines 1136-1136)": [
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n",
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n    \"\"\"\n    An explicit subquery. It may contain OuterRef() references to the outer\n    query which will be resolved when it is applied to that query.\n    \"\"\"\n    template = '(%(subquery)s)'\n    contains_aggregate = False\n    empty_result_set_value = None\n\n    def __init__(self, queryset, output_field=None, **extra):\n        # Allow the usage of both QuerySet and sql.Query objects.\n",
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n",
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n",
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n",
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n    \"\"\"\n    An explicit subquery. It may contain OuterRef() references to the outer\n    query which will be resolved when it is applied to that query.\n    \"\"\"\n    template = '(%(subquery)s)'\n    contains_aggregate = False\n    empty_result_set_value = None\n\n    def __init__(self, queryset, output_field=None, **extra):\n        # Allow the usage of both QuerySet and sql.Query objects.\n",
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n",
      "\n@deconstructible(path='django.db.models.Subquery')\nclass Subquery(BaseExpression, Combinable):\n"
    ],
    "Location 5 (/root/hy/projects/django/django/db/models/expressions.py lines 1193-1193)": [
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n",
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n",
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n    template = 'EXISTS(%(subquery)s)'\n    output_field = fields.BooleanField()\n\n    def __init__(self, queryset, negated=False, **kwargs):\n        self.negated = negated\n        super().__init__(queryset, **kwargs)\n\n    def __invert__(self):\n        clone = self.copy()\n        clone.negated = not self.negated\n",
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n",
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n",
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n",
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n",
      "\n@deconstructible(path='django.db.models.Exists')\nclass Exists(Subquery):\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..1bab0638fc 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,6 +987,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n@@ -1052,6 +1056,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1139,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,6 +1198,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_0": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..1bab0638fc 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,6 +987,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n@@ -1052,6 +1056,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1139,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,6 +1198,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_1": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..85feb1633d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,11 +987,23 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def __init__(self, condition=None, then=None, **lookups):\n+        if lookups:\n+            if condition is None:\n+                condition, lookups = Q(**lookups), None\n+            elif getattr(condition, 'conditional', False):\n+                condition, lookups = Q(condition, **lookups), None\n+    template = 'WHEN %(condition)s THEN %(result)s'\n+    # This isn't a complete conditional expression, must be used in Case().\n+    conditional = False\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n@@ -1052,6 +1066,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1149,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,6 +1208,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_2": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..427809ee48 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,6 +987,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n@@ -1052,6 +1056,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1139,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1142,6 +1150,16 @@ class Subquery(BaseExpression, Combinable):\n     contains_aggregate = False\n     empty_result_set_value = None\n \n+    def __init__(self, queryset, output_field=None, **extra):\n+        # Allow the usage of both QuerySet and sql.Query objects.\n+    \"\"\"\n+    An explicit subquery. It may contain OuterRef() references to the outer\n+    query which will be resolved when it is applied to that query.\n+    \"\"\"\n+    template = '(%(subquery)s)'\n+    contains_aggregate = False\n+    empty_result_set_value = None\n+\n     def __init__(self, queryset, output_field=None, **extra):\n         # Allow the usage of both QuerySet and sql.Query objects.\n         self.query = getattr(queryset, 'query', queryset)\n@@ -1190,6 +1208,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_3": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..af47fd6581 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,6 +987,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n@@ -1052,6 +1056,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1139,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,10 +1198,22 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n \n+    def __init__(self, queryset, negated=False, **kwargs):\n+        self.negated = negated\n+        super().__init__(queryset, **kwargs)\n+\n+    def __invert__(self):\n+        clone = self.copy()\n+        clone.negated = not self.negated\n+    template = 'EXISTS(%(subquery)s)'\n+    output_field = fields.BooleanField()\n+\n     def __init__(self, queryset, negated=False, **kwargs):\n         self.negated = negated\n         super().__init__(queryset, **kwargs)\n",
    "variant_4": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..85feb1633d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,11 +987,23 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def __init__(self, condition=None, then=None, **lookups):\n+        if lookups:\n+            if condition is None:\n+                condition, lookups = Q(**lookups), None\n+            elif getattr(condition, 'conditional', False):\n+                condition, lookups = Q(condition, **lookups), None\n+    template = 'WHEN %(condition)s THEN %(result)s'\n+    # This isn't a complete conditional expression, must be used in Case().\n+    conditional = False\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n@@ -1052,6 +1066,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1149,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,6 +1208,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_5": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..1bab0638fc 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,6 +987,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n@@ -1052,6 +1056,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1139,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,6 +1198,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_6": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..6a1371e5ee 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,6 +987,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n@@ -1052,6 +1056,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1064,6 +1070,16 @@ class Case(SQLiteNumericMixin, Expression):\n             ELSE 'zero'\n         END\n     \"\"\"\n+    An SQL searched CASE expression:\n+\n+        CASE\n+            WHEN n > 0\n+                THEN 'positive'\n+            WHEN n < 0\n+                THEN 'negative'\n+            ELSE 'zero'\n+        END\n+    \"\"\"\n     template = 'CASE %(cases)s ELSE %(default)s END'\n     case_joiner = ' '\n \n@@ -1133,6 +1149,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1142,6 +1160,16 @@ class Subquery(BaseExpression, Combinable):\n     contains_aggregate = False\n     empty_result_set_value = None\n \n+    def __init__(self, queryset, output_field=None, **extra):\n+        # Allow the usage of both QuerySet and sql.Query objects.\n+    \"\"\"\n+    An explicit subquery. It may contain OuterRef() references to the outer\n+    query which will be resolved when it is applied to that query.\n+    \"\"\"\n+    template = '(%(subquery)s)'\n+    contains_aggregate = False\n+    empty_result_set_value = None\n+\n     def __init__(self, queryset, output_field=None, **extra):\n         # Allow the usage of both QuerySet and sql.Query objects.\n         self.query = getattr(queryset, 'query', queryset)\n@@ -1190,6 +1218,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_7": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..85feb1633d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,11 +987,23 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def __init__(self, condition=None, then=None, **lookups):\n+        if lookups:\n+            if condition is None:\n+                condition, lookups = Q(**lookups), None\n+            elif getattr(condition, 'conditional', False):\n+                condition, lookups = Q(condition, **lookups), None\n+    template = 'WHEN %(condition)s THEN %(result)s'\n+    # This isn't a complete conditional expression, must be used in Case().\n+    conditional = False\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n@@ -1052,6 +1066,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1149,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,6 +1208,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n",
    "variant_8": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..85feb1633d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,8 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+\n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n@@ -985,11 +987,23 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n \n+\n+@deconstructible(path='django.db.models.When')\n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def __init__(self, condition=None, then=None, **lookups):\n+        if lookups:\n+            if condition is None:\n+                condition, lookups = Q(**lookups), None\n+            elif getattr(condition, 'conditional', False):\n+                condition, lookups = Q(condition, **lookups), None\n+    template = 'WHEN %(condition)s THEN %(result)s'\n+    # This isn't a complete conditional expression, must be used in Case().\n+    conditional = False\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n@@ -1052,6 +1066,8 @@ class When(Expression):\n         return cols\n \n \n+\n+@deconstructible(path='django.db.models.Case')\n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n     An SQL searched CASE expression:\n@@ -1133,6 +1149,8 @@ class Case(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols(alias)\n \n \n+\n+@deconstructible(path='django.db.models.Subquery')\n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n     An explicit subquery. It may contain OuterRef() references to the outer\n@@ -1190,6 +1208,8 @@ class Subquery(BaseExpression, Combinable):\n         return self.query.get_group_by_cols()\n \n \n+\n+@deconstructible(path='django.db.models.Exists')\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n"
  }
}