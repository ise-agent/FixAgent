{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/enums.py lines 33-34)": "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/enums.py lines 33-34)": [
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n",
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n",
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n",
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n",
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n",
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n",
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n",
      "\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_0": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_1": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_2": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_3": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_4": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_5": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_6": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_7": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n",
    "variant_8": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..8cd441a50e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -30,7 +30,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # Add a label property to instances of enum which uses the enum member\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n+\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n"
  }
}