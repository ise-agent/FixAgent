{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/fields/json.py lines 81-84)": "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
    "Location 2 (/root/hy/projects/django/django/db/models/fields/json.py lines 92-95)": "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/models/fields/json.py lines 81-84)": [
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n",
      "\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/models/fields/json.py lines 92-95)": [
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n",
      "\n    def validate(self, value, model_instance):\n        super().validate(value, model_instance)\n        try:\n            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n        except TypeError:\n            raise exceptions.ValidationError(\n                self.error_messages['invalid'],\n                code='invalid',\n                params={'value': value},\n            )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..2f5db36ebe 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_0": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_1": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_2": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_3": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_4": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_5": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_6": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_7": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n",
    "variant_8": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..9214e04b46 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -78,10 +78,11 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_internal_type(self):\n         return 'JSONField'\n \n+\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -89,10 +90,17 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             return transform\n         return KeyTransformFactory(name)\n \n+\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n+        except TypeError:\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n"
  }
}