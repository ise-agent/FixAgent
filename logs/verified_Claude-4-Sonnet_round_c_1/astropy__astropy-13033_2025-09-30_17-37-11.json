{
  "zero_patches": {
    "Location 1 (/root/hy/projects/astropy/astropy/timeseries/core.py lines 79-81)": "\n            elif self.colnames[:len(required_columns)] != required_columns:\n\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
    "Location 2 (/root/hy/projects/astropy/astropy/timeseries/core.py lines 73-75)": "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/astropy/astropy/timeseries/core.py lines 79-81)": [
      "\n            elif self.colnames[:len(required_columns)] != required_columns:\n\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
      "\n            elif self.colnames[:len(required_columns)] != required_columns:\n\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
      "\n            elif self.colnames[:len(required_columns)] != required_columns:\n\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
      "\n            elif self.colnames[:len(required_columns)] != required_columns:\n\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
      "\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
      "\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
      "\n            elif self.colnames[:len(required_columns)] != required_columns:\n\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n",
      "\n                missing_columns = [col for col in required_columns if col not in self.colnames]\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but found {}. Missing required columns: {}\"\n                                 .format(self.__class__.__name__, required_columns, \n                                        self.colnames[:len(required_columns)], missing_columns))\n"
    ],
    "Location 2 (/root/hy/projects/astropy/astropy/timeseries/core.py lines 73-75)": [
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n",
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n",
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n",
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n",
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n",
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n",
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n",
      "\n                raise ValueError(\"{} object is invalid - expected required columns {} \"\n                                 \"but time series has no columns\"\n                                 .format(self.__class__.__name__, required_columns))\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..ec52f3871c 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,19 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_0": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..37af81afd9 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,21 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n+\n+            elif self.colnames[:len(required_columns)] != required_columns:\n+\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_1": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..37af81afd9 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,21 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n+\n+            elif self.colnames[:len(required_columns)] != required_columns:\n+\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_2": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..37af81afd9 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,21 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n+\n+            elif self.colnames[:len(required_columns)] != required_columns:\n+\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_3": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..37af81afd9 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,21 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n+\n+            elif self.colnames[:len(required_columns)] != required_columns:\n+\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_4": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..37af81afd9 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,21 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n+\n+            elif self.colnames[:len(required_columns)] != required_columns:\n+\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_5": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..ec52f3871c 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,19 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_6": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..ec52f3871c 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,19 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_7": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..37af81afd9 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,21 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n+\n+            elif self.colnames[:len(required_columns)] != required_columns:\n+\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
    "variant_8": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..ec52f3871c 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -70,15 +70,19 @@ class BaseTimeSeries(QTable):\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, required_columns))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - expected required columns {} \"\n+                                 \"but found {}. Missing required columns: {}\"\n+                                 .format(self.__class__.__name__, required_columns, \n+                                        self.colnames[:len(required_columns)], missing_columns))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n"
  }
}