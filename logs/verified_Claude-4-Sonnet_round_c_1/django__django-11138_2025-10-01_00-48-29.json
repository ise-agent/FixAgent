{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/backends/mysql/operations.py lines 71-74)": "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
    "Location 2 (/root/hy/projects/django/django/db/backends/oracle/operations.py lines 97-104)": "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/backends/mysql/operations.py lines 71-74)": [
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if settings.USE_TZ:\n            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n        return field_name\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/backends/oracle/operations.py lines 97-104)": [
      "\ndef _convert_field_to_tz(self, field_name, tzname):\n    if not settings.USE_TZ:\n        return field_name\n    if not self._tzname_re.match(tzname):\n        raise ValueError(\"Invalid time zone name: %s\" % tzname)\n    # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n    # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n    return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n",
      "\n    def _convert_field_to_tz(self, field_name, tzname):\n        if not settings.USE_TZ:\n            return field_name\n        if not self._tzname_re.match(tzname):\n            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..56088e077a 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,6 +94,7 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n@@ -101,7 +102,7 @@ END;\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n         # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_0": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..b06824127b 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,14 +94,15 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n+        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_1": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..25b386d463 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,14 +94,15 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n-        if not settings.USE_TZ:\n-            return field_name\n-        if not self._tzname_re.match(tzname):\n-            raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n-        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+\n+def _convert_field_to_tz(self, field_name, tzname):\n+    if not settings.USE_TZ:\n+        return field_name\n+    if not self._tzname_re.match(tzname):\n+        raise ValueError(\"Invalid time zone name: %s\" % tzname)\n+    # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n+    # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n+    return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_2": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..56088e077a 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,6 +94,7 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n@@ -101,7 +102,7 @@ END;\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n         # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_3": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..b06824127b 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,14 +94,15 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n+        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_4": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..b06824127b 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,14 +94,15 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n+        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_5": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..b06824127b 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,14 +94,15 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n+        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_6": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..56088e077a 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,6 +94,7 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n@@ -101,7 +102,7 @@ END;\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n         # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_7": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..56088e077a 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,6 +94,7 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n@@ -101,7 +102,7 @@ END;\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n         # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n",
    "variant_8": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..9fa065357b 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,9 +68,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..56088e077a 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,6 +94,7 @@ END;\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n@@ -101,7 +102,7 @@ END;\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n         # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, self.connection.timezone_name, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n"
  }
}