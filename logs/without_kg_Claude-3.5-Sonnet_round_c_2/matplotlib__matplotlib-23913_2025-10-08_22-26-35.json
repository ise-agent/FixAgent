{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/matplotlib/legend.py lines 306-346)": "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
    "Location 2 (/root/hy/projects_2/matplotlib/lib/matplotlib/legend.py lines 540-542)": "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        \n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
    "Location 3 (/root/hy/projects_2/matplotlib/lib/matplotlib/legend.py lines 362-364)": "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/matplotlib/legend.py lines 306-346)": [
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,         # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n"
    ],
    "Location 2 (/root/hy/projects_2/matplotlib/lib/matplotlib/legend.py lines 540-542)": [
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        \n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        \n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # Enable draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n"
    ],
    "Location 3 (/root/hy/projects_2/matplotlib/lib/matplotlib/legend.py lines 362-364)": [
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n",
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n",
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n",
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n",
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n",
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n",
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n",
      "\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend. If True, the legend\n            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n            after legend creation.\n        %(_legend_kw_doc)s\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..fbd03836b2 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -303,6 +303,7 @@ class Legend(Artist):\n \n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n+\n     def __init__(\n         self, parent, handles, labels,\n         loc=None,\n@@ -341,6 +342,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -359,9 +361,13 @@ class Legend(Artist):\n             to the smaller of both lengths.\n \n         Other Parameters\n+\n         ----------------\n         %(_legend_kw_doc)s\n-\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -537,8 +543,13 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n+\n         self._draggable = None\n \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n",
    "variant_0": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..4a4ccdf571 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,8 +545,14 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
    "variant_1": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..4a4ccdf571 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,8 +545,14 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
    "variant_2": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9a794b5099 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,9 +545,15 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n",
    "variant_3": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9a794b5099 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,9 +545,15 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n",
    "variant_4": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9a794b5099 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,9 +545,15 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n",
    "variant_5": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9a794b5099 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,9 +545,15 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n",
    "variant_6": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9a794b5099 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,9 +545,15 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n",
    "variant_7": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..4a4ccdf571 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,8 +545,14 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
    "variant_8": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9a794b5099 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,6 +344,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,         # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -358,10 +362,15 @@ class Legend(Artist):\n             and labels should be the same. If they are not, they are truncated\n             to the smaller of both lengths.\n \n+        Other Parameters\n+\n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Enable mouse dragging support for the legend. If True, the legend\n+            can be dragged with the mouse. Equivalent to calling set_draggable(True)\n+            after legend creation.\n         %(_legend_kw_doc)s\n-\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -536,9 +545,15 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n"
  }
}