{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/pytest/src/_pytest/tmpdir.py lines 151-159)": "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
    "Location 2 (/root/hy/projects_2/pytest/src/_pytest/tmpdir.py lines 114-118)": "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize user to ensure filesystem compatibility\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/pytest/src/_pytest/tmpdir.py lines 151-159)": [
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing illegal filesystem characters\n        # Replace backslashes and other problematic characters with underscores\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n"
    ],
    "Location 2 (/root/hy/projects_2/pytest/src/_pytest/tmpdir.py lines 114-118)": [
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize user to ensure filesystem-safe directory names\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        user = get_user() or \"unknown\"\n        # use a sub-directory in the temproot to speed-up\n        # make_numbered_dir() call\n        rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n        rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize user to ensure filesystem compatibility\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize user to ensure it's safe for filesystem paths\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize user to ensure filesystem-safe directory names\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize user to ensure filesystem compatibility\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize user to ensure filesystem-safe directory names\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..408299c1b 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,6 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n             user = get_user() or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n@@ -148,13 +149,18 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_0": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..53f3303db 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize user to ensure filesystem compatibility\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_1": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..df52f84a2 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize user to ensure filesystem-safe directory names\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_2": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..4c175ce1c 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,12 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+        user = get_user() or \"unknown\"\n+        # use a sub-directory in the temproot to speed-up\n+        # make_numbered_dir() call\n+        rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+        rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +149,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_3": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..67a66c4e3 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -148,13 +156,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_4": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..53f3303db 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize user to ensure filesystem compatibility\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_5": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..0157aceef 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize user to ensure it's safe for filesystem paths\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_6": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..df52f84a2 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize user to ensure filesystem-safe directory names\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_7": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..53f3303db 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize user to ensure filesystem compatibility\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_8": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..df52f84a2 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize user to ensure filesystem-safe directory names\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,16 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n-    import getpass\n-\n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username by replacing illegal filesystem characters\n+        # Replace backslashes and other problematic characters with underscores\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n"
  }
}