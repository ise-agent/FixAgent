{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/conf/global_settings.py lines 307-307)": "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
    "Location 2 (/root/hy/projects_2/django/django/core/files/uploadedfile.py lines 61-61)": "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
    "Location 3 (/root/hy/projects_2/django/django/core/files/storage.py lines 254-255)": "\n# Default file storage mechanism that holds media files\nDEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = None\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# List of upload handler classes to be applied in order.\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n]\n\n# Maximum size, in bytes, of a request before it will be streamed to the\n# file system instead of into memory.\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum size in bytes of request data (excluding file uploads) that will be\n# read before a SuspiciousOperation (RequestDataTooBig) is raised.\nDATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum number of GET/POST parameters that will be read before a\n# SuspiciousOperation (TooManyFieldsSent) is raised.\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n\n# Directory in which upload streamed files will be temporarily saved. A value of\n# `None` will make Django use the operating system's default temporary directory\n# (i.e. \"/tmp\" on *nix systems).\nFILE_UPLOAD_TEMP_DIR = None\n\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod(); see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
    "Location 4 (/root/hy/projects_2/django/django/core/files/storage.py lines 283-284)": "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
    "Location 5 (/root/hy/projects_2/django/django/core/files/move.py lines 71-71)": "\n# Default file storage mechanism that holds media files\nDEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = None\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# List of upload handler classes to be applied in order.\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n]\n\n# Maximum size, in bytes, of a request before it will be streamed to the\n# file system instead of into memory.\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum size in bytes of request data (excluding file uploads) that will be\n# read before a SuspiciousOperation (RequestDataTooBig) is raised.\nDATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum number of GET/POST parameters that will be read before a\n# SuspiciousOperation (TooManyFieldsSent) is raised.\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n\n# Directory in which upload streamed files will be temporarily saved. A value of\n# `None` will make Django use the operating system's default temporary directory\n# (i.e. \"/tmp\" on *nix systems).\nFILE_UPLOAD_TEMP_DIR = None\n\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/conf/global_settings.py lines 307-307)": [
      "\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/core/files/uploadedfile.py lines 61-61)": [
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage mechanism that holds media files\nDEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = None\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = [\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',\n]\n\n# Migration modules overrides for apps, by app label.\nMIGRATION_MODULES = {}\n\n# List of locations of the fixture data files, in search order.\nFIXTURE_DIRS = []\n\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n"
    ],
    "Location 3 (/root/hy/projects_2/django/django/core/files/storage.py lines 254-255)": [
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage mechanism that holds media files\nDEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n\n# URL that handles the media served from MEDIA_ROOT, used for managing\n# stored files. It must end in a slash if set to a non-empty value.\n# You will probably want to change this in your production settings.\nMEDIA_URL = ''\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = None\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# List of upload handler classes to be applied in order.\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n]\n\n# Maximum size, in bytes, of a request before it will be streamed to the\n# file system instead of into memory.\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum size in bytes of request data (excluding file uploads) that will be\n# read before a SuspiciousOperation (RequestDataTooBig) is raised.\nDATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum number of GET/POST parameters that will be read before a\n# SuspiciousOperation (TooManyFieldsSent) is raised.\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n\n# Directory in which upload streamed files will be temporarily saved. A value of\n# `None` will make Django use the operating system's default temporary directory\n# (i.e. \"/tmp\" on *nix systems).\nFILE_UPLOAD_TEMP_DIR = None\n\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage mechanism that holds media files\nDEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = None\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# List of upload handler classes to be applied in order.\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n]\n\n# Maximum size, in bytes, of a request before it will be streamed to the\n# file system instead of into memory.\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum size in bytes of request data (excluding file uploads) that will be\n# read before a SuspiciousOperation (RequestDataTooBig) is raised.\nDATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum number of GET/POST parameters that will be read before a\n# SuspiciousOperation (TooManyFieldsSent) is raised.\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n\n# Directory in which upload streamed files will be stored.\nFILE_UPLOAD_TEMP_DIR = None\n\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n"
    ],
    "Location 4 (/root/hy/projects_2/django/django/core/files/storage.py lines 283-284)": [
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions for uploaded files\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage mechanism that holds media files\nDEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = None\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# List of upload handler classes to be applied in order.\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n]\n\n# Maximum size, in bytes, of a request before it will be streamed to the\n# file system instead of into memory.\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum size in bytes of request data (excluding file uploads) that will be\n# read before a SuspiciousOperation (RequestDataTooBig) is raised.\nDATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n\n# Maximum number of GET/POST parameters that will be read before a\n# SuspiciousOperation (TooManyFieldsSent) is raised.\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n\n# Directory in which upload streamed files will be temporarily saved. A value of\n# `None` will make Django use the operating system's default temporary directory\n# (i.e. \"/tmp\" on *nix systems).\nFILE_UPLOAD_TEMP_DIR = None\n\n# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# File upload permissions mode. None means don't change the permissions.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# File upload permissions mode.  None means use the system default.\n# See https://docs.djangoproject.com/en/dev/ref/settings/#file-upload-permissions\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# File upload permissions mode.  None means don't change any permissions.\nFILE_UPLOAD_PERMISSIONS = 0o644\n"
    ],
    "Location 5 (/root/hy/projects_2/django/django/core/files/move.py lines 71-71)": [
      "\n# Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n# the type of the destination filesystem isn't the same as the source\n# filesystem; ignore that.\nif e.errno != errno.EPERM:\n    raise\n",
      "\n# This location doesn't need a code change - the copystat call here preserves \n# the source file's metadata including restrictive permissions, but the fix\n# in global_settings.py will ensure proper permissions are set later in the\n# storage layer via chmod().\ncopystat(old_file_name, new_file_name)\n",
      "\n        copystat(old_file_name, new_file_name)\n",
      "\n# This location doesn't need changes - copystat preserves file metadata\ncopystat(old_file_name, new_file_name)\n",
      "\n# File upload permissions mode. None means to use the system default.\n# See https://docs.djangoproject.com/en/stable/ref/settings/#file-upload-permissions\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# File upload permissions mode. None means to use the system default.\n# See https://docs.python.org/library/os.html#os.chmod\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..2d974dcb07 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,6 +68,7 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n+\n         copystat(old_file_name, new_file_name)\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..f58c5ee505 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,6 +251,7 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n+\n                 if hasattr(content, 'temporary_file_path'):\n                     file_move_safe(content.temporary_file_path(), full_path)\n \n@@ -280,6 +281,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_0": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..33e289480d 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,7 +68,55 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n-        copystat(old_file_name, new_file_name)\n+\n+# Default file storage mechanism that holds media files\n+DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n+\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\n+# Example: \"/var/www/example.com/media/\"\n+MEDIA_ROOT = ''\n+\n+# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n+# trailing slash.\n+# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n+MEDIA_URL = ''\n+\n+# Absolute path to the directory static files should be collected to.\n+# Don't put anything in this directory yourself; store your static files\n+# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n+# Example: \"/var/www/example.com/static/\"\n+STATIC_ROOT = None\n+\n+# URL prefix for static files.\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\n+STATIC_URL = '/static/'\n+\n+# List of upload handler classes to be applied in order.\n+FILE_UPLOAD_HANDLERS = [\n+    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n+    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n+]\n+\n+# Maximum size, in bytes, of a request before it will be streamed to the\n+# file system instead of into memory.\n+FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum size in bytes of request data (excluding file uploads) that will be\n+# read before a SuspiciousOperation (RequestDataTooBig) is raised.\n+DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum number of GET/POST parameters that will be read before a\n+# SuspiciousOperation (TooManyFieldsSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n+\n+# Directory in which upload streamed files will be temporarily saved. A value of\n+# `None` will make Django use the operating system's default temporary directory\n+# (i.e. \"/tmp\" on *nix systems).\n+FILE_UPLOAD_TEMP_DIR = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..a61470965f 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,55 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+# Default file storage mechanism that holds media files\n+DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n+\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\n+# Example: \"/var/www/example.com/media/\"\n+MEDIA_ROOT = ''\n+\n+# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n+# trailing slash.\n+# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n+MEDIA_URL = ''\n+\n+# Absolute path to the directory static files should be collected to.\n+# Don't put anything in this directory yourself; store your static files\n+# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n+# Example: \"/var/www/example.com/static/\"\n+STATIC_ROOT = None\n+\n+# URL prefix for static files.\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\n+STATIC_URL = '/static/'\n+\n+# List of upload handler classes to be applied in order.\n+FILE_UPLOAD_HANDLERS = [\n+    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n+    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n+]\n+\n+# Maximum size, in bytes, of a request before it will be streamed to the\n+# file system instead of into memory.\n+FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum size in bytes of request data (excluding file uploads) that will be\n+# read before a SuspiciousOperation (RequestDataTooBig) is raised.\n+DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum number of GET/POST parameters that will be read before a\n+# SuspiciousOperation (TooManyFieldsSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n+\n+# Directory in which upload streamed files will be temporarily saved. A value of\n+# `None` will make Django use the operating system's default temporary directory\n+# (i.e. \"/tmp\" on *nix systems).\n+FILE_UPLOAD_TEMP_DIR = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod(); see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +327,8 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_1": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..90a30239e9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,10 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..1f46e15eca 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,7 +68,12 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n-        copystat(old_file_name, new_file_name)\n+\n+# Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+# the type of the destination filesystem isn't the same as the source\n+# filesystem; ignore that.\n+if e.errno != errno.EPERM:\n+    raise\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..02684537cc 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,8 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +280,8 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_2": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..31936ece9d 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,7 +68,12 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n-        copystat(old_file_name, new_file_name)\n+\n+# This location doesn't need a code change - the copystat call here preserves \n+# the source file's metadata including restrictive permissions, but the fix\n+# in global_settings.py will ensure proper permissions are set later in the\n+# storage layer via chmod().\n+copystat(old_file_name, new_file_name)\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..05cf40cad6 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,55 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+# Default file storage mechanism that holds media files\n+DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n+\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\n+# Example: \"/var/www/example.com/media/\"\n+MEDIA_ROOT = ''\n+\n+# URL that handles the media served from MEDIA_ROOT, used for managing\n+# stored files. It must end in a slash if set to a non-empty value.\n+# You will probably want to change this in your production settings.\n+MEDIA_URL = ''\n+\n+# Absolute path to the directory static files should be collected to.\n+# Don't put anything in this directory yourself; store your static files\n+# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n+# Example: \"/var/www/example.com/static/\"\n+STATIC_ROOT = None\n+\n+# URL prefix for static files.\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\n+STATIC_URL = '/static/'\n+\n+# List of upload handler classes to be applied in order.\n+FILE_UPLOAD_HANDLERS = [\n+    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n+    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n+]\n+\n+# Maximum size, in bytes, of a request before it will be streamed to the\n+# file system instead of into memory.\n+FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum size in bytes of request data (excluding file uploads) that will be\n+# read before a SuspiciousOperation (RequestDataTooBig) is raised.\n+DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum number of GET/POST parameters that will be read before a\n+# SuspiciousOperation (TooManyFieldsSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n+\n+# Directory in which upload streamed files will be temporarily saved. A value of\n+# `None` will make Django use the operating system's default temporary directory\n+# (i.e. \"/tmp\" on *nix systems).\n+FILE_UPLOAD_TEMP_DIR = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +327,9 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+# Default file storage permissions for uploaded files\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_3": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..2d974dcb07 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,6 +68,7 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n+\n         copystat(old_file_name, new_file_name)\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..5bb880e3c3 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,9 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+# Default file storage permissions\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +281,55 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+# Default file storage mechanism that holds media files\n+DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n+\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\n+# Example: \"/var/www/example.com/media/\"\n+MEDIA_ROOT = ''\n+\n+# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n+# trailing slash.\n+# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n+MEDIA_URL = ''\n+\n+# Absolute path to the directory static files should be collected to.\n+# Don't put anything in this directory yourself; store your static files\n+# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n+# Example: \"/var/www/example.com/static/\"\n+STATIC_ROOT = None\n+\n+# URL prefix for static files.\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\n+STATIC_URL = '/static/'\n+\n+# List of upload handler classes to be applied in order.\n+FILE_UPLOAD_HANDLERS = [\n+    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n+    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n+]\n+\n+# Maximum size, in bytes, of a request before it will be streamed to the\n+# file system instead of into memory.\n+FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum size in bytes of request data (excluding file uploads) that will be\n+# read before a SuspiciousOperation (RequestDataTooBig) is raised.\n+DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum number of GET/POST parameters that will be read before a\n+# SuspiciousOperation (TooManyFieldsSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n+\n+# Directory in which upload streamed files will be temporarily saved. A value of\n+# `None` will make Django use the operating system's default temporary directory\n+# (i.e. \"/tmp\" on *nix systems).\n+FILE_UPLOAD_TEMP_DIR = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..09822806f3 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,46 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+# Default file storage mechanism that holds media files\n+DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n+\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\n+# Example: \"/var/www/example.com/media/\"\n+MEDIA_ROOT = ''\n+\n+# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n+# trailing slash.\n+# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n+MEDIA_URL = ''\n+\n+# Absolute path to the directory static files should be collected to.\n+# Don't put anything in this directory yourself; store your static files\n+# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n+# Example: \"/var/www/example.com/static/\"\n+STATIC_ROOT = None\n+\n+# URL prefix for static files.\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\n+STATIC_URL = '/static/'\n+\n+# List of finder classes that know how to find static files in\n+# various locations.\n+STATICFILES_FINDERS = [\n+    'django.contrib.staticfiles.finders.FileSystemFinder',\n+    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n+    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',\n+]\n+\n+# Migration modules overrides for apps, by app label.\n+MIGRATION_MODULES = {}\n+\n+# List of locations of the fixture data files, in search order.\n+FIXTURE_DIRS = []\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_4": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..470c9596b5 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,7 +68,9 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n-        copystat(old_file_name, new_file_name)\n+\n+# This location doesn't need changes - copystat preserves file metadata\n+copystat(old_file_name, new_file_name)\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..855258fcf5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,53 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+# Default file storage mechanism that holds media files\n+DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n+\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\n+# Example: \"/var/www/example.com/media/\"\n+MEDIA_ROOT = ''\n+\n+# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n+# trailing slash.\n+# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n+MEDIA_URL = ''\n+\n+# Absolute path to the directory static files should be collected to.\n+# Don't put anything in this directory yourself; store your static files\n+# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n+# Example: \"/var/www/example.com/static/\"\n+STATIC_ROOT = None\n+\n+# URL prefix for static files.\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\n+STATIC_URL = '/static/'\n+\n+# List of upload handler classes to be applied in order.\n+FILE_UPLOAD_HANDLERS = [\n+    'django.core.files.uploadhandler.MemoryFileUploadHandler',\n+    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n+]\n+\n+# Maximum size, in bytes, of a request before it will be streamed to the\n+# file system instead of into memory.\n+FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum size in bytes of request data (excluding file uploads) that will be\n+# read before a SuspiciousOperation (RequestDataTooBig) is raised.\n+DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum number of GET/POST parameters that will be read before a\n+# SuspiciousOperation (TooManyFieldsSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n+\n+# Directory in which upload streamed files will be stored.\n+FILE_UPLOAD_TEMP_DIR = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +325,9 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+# File upload permissions mode. None means don't change the permissions.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_5": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..3929e937c8 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,7 +68,10 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n-        copystat(old_file_name, new_file_name)\n+\n+# File upload permissions mode. None means to use the system default.\n+# See https://docs.djangoproject.com/en/stable/ref/settings/#file-upload-permissions\n+FILE_UPLOAD_PERMISSIONS = 0o644\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..e4df8a7576 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,8 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +280,10 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+# File upload permissions mode.  None means use the system default.\n+# See https://docs.djangoproject.com/en/dev/ref/settings/#file-upload-permissions\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_6": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..90a30239e9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,10 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..320aef2f00 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,7 +68,10 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n-        copystat(old_file_name, new_file_name)\n+\n+# File upload permissions mode. None means to use the system default.\n+# See https://docs.python.org/library/os.html#os.chmod\n+FILE_UPLOAD_PERMISSIONS = 0o644\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..02684537cc 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,8 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +280,8 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_7": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..9643a42b74 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -68,7 +68,8 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             os.close(fd)\n \n     try:\n-        copystat(old_file_name, new_file_name)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..5a36cac467 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,8 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +280,9 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+# Default file storage permissions\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n",
    "variant_8": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..a036f689c9 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,8 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..7b1c3d2e1b 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -67,6 +67,8 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n             locks.unlock(fd)\n             os.close(fd)\n \n+    try:\n+\n     try:\n         copystat(old_file_name, new_file_name)\n     except PermissionError as e:\n@@ -75,6 +77,12 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         # filesystem; ignore that.\n         if e.errno != errno.EPERM:\n             raise\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n \n     try:\n         os.remove(old_file_name)\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..bbe540771b 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -251,8 +251,8 @@ class FileSystemStorage(Storage):\n         while True:\n             try:\n                 # This file has a file path that we can move.\n-                if hasattr(content, 'temporary_file_path'):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n@@ -280,8 +280,9 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+\n+# File upload permissions mode.  None means don't change any permissions.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..2b945434e8 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,7 +58,8 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n-        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n+\n+FILE_UPLOAD_PERMISSIONS = 0o644\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n     def temporary_file_path(self):\n"
  }
}