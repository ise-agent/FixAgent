{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1664-1670)": "\ndef _find_numeric_cols(self, data):\n    \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n    numeric_cols = []\n    for col in data:\n        if variable_type(data[col]) == \"numeric\":\n            numeric_cols.append(col)\n    return numeric_cols\n",
    "Location 2 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1444-1451)": "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
    "Location 3 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1475-1476)": "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
    "Location 4 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1490-1490)": "\n            # Ensure proper handling of MultiIndex column names\n            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n                # For MultiIndex columns, var should already be a tuple\n                vector = self.data[var]\n            else:\n                vector = self.data[var]\n",
    "Location 5 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1261-1262)": "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else list(x_vars) if x_vars is not None else []\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else list(y_vars) if y_vars is not None else []\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1664-1670)": [
      "\n    def _find_numeric_cols(self, data):\n        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n        numeric_cols = []\n        for col in data:\n            if variable_type(data[col]) == \"numeric\":\n                numeric_cols.append(col)\n        return numeric_cols\n",
      "\n    def _find_numeric_cols(self, data):\n        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n        numeric_cols = []\n        for col in data:\n            if variable_type(data[col]) == \"numeric\":\n                numeric_cols.append(col)\n        return numeric_cols\n",
      "\n    def _find_numeric_cols(self, data):\n        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n        numeric_cols = []\n        for col in data:\n            if variable_type(data[col]) == \"numeric\":\n                numeric_cols.append(col)\n        return numeric_cols\n",
      "\ndef _find_numeric_cols(self, data):\n    \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n    numeric_cols = []\n    for col in data:\n        if variable_type(data[col]) == \"numeric\":\n            numeric_cols.append(col)\n    return numeric_cols\n",
      "\n    def _find_numeric_cols(self, data):\n        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n        numeric_cols = []\n        for col in data:\n            if variable_type(data[col]) == \"numeric\":\n                numeric_cols.append(col)\n        return numeric_cols\n",
      "\n    def _find_numeric_cols(self, data):\n        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n        numeric_cols = []\n        for col in data:\n            if variable_type(data[col]) == \"numeric\":\n                numeric_cols.append(col)\n        return numeric_cols\n",
      "\n    def _find_numeric_cols(self, data):\n        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n        numeric_cols = []\n        for col in data:\n            if variable_type(data[col]) == \"numeric\":\n                numeric_cols.append(col)\n        return numeric_cols\n",
      "\n    def _find_numeric_cols(self, data):\n        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n        numeric_cols = []\n        for col in data:\n            if variable_type(data[col]) == \"numeric\":\n                numeric_cols.append(col)\n        return numeric_cols\n"
    ],
    "Location 2 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1444-1451)": [
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n",
      "\n        # Add special diagonal axes for the univariate plot\n        if self.diag_axes is None:\n            diag_vars = []\n            diag_axes = []\n            for i, y_var in enumerate(self.y_vars):\n                for j, x_var in enumerate(self.x_vars):\n                    if x_var == y_var:\n\n                        # Make the density axes\n                        diag_vars.append(x_var)\n"
    ],
    "Location 3 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1475-1476)": [
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n",
      "\n            self.diag_vars = np.array(diag_vars, dtype=object)\n            self.diag_axes = np.array(diag_axes, dtype=object)\n"
    ],
    "Location 4 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1490-1490)": [
      "\n            # Ensure we have the correct column reference for MultiIndex DataFrames\n            if isinstance(self.data.columns, pd.MultiIndex):\n                # For MultiIndex, var should already be a tuple from diag_vars\n                vector = self.data[var]\n            else:\n                vector = self.data[var]\n",
      "\n            # Ensure var is properly handled for MultiIndex columns\n            try:\n                vector = self.data[var]\n            except KeyError:\n                # If var is not found and data has MultiIndex columns,\n                # it might be a partial key - try to find the matching column\n                if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n                    # Find columns that contain var as a level value\n                    matching_cols = [col for col in self.data.columns if var in col]\n                    if len(matching_cols) == 1:\n                        vector = self.data[matching_cols[0]]\n                    else:\n                        raise KeyError(f\"Column '{var}' not found in MultiIndex DataFrame\")\n                else:\n                    raise\n",
      "\n            # Ensure proper handling of MultiIndex column names\n            if isinstance(self.data.columns, pd.MultiIndex):\n                # For MultiIndex, var should already be a tuple from diag_vars\n                vector = self.data[var]\n            else:\n                vector = self.data[var]\n",
      "\n            # Ensure we have the proper column reference for MultiIndex DataFrames\n            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n                # For MultiIndex columns, var should already be a tuple\n                # but verify it exists in the DataFrame\n                if var not in self.data.columns:\n                    raise KeyError(f\"Column {var} not found in DataFrame with MultiIndex columns\")\n            vector = self.data[var]\n",
      "\n            # Ensure proper handling of MultiIndex column names\n            # For MultiIndex DataFrames, var should be a tuple representing the full column name\n            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n                # var is already the correct tuple from diag_vars\n                vector = self.data[var]\n            else:\n                vector = self.data[var]\n",
      "\n            # Ensure proper handling of MultiIndex column names\n            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n                # For MultiIndex columns, var should already be a tuple\n                vector = self.data[var]\n            else:\n                vector = self.data[var]\n",
      "\n            # Ensure proper handling of MultiIndex columns by preserving tuple structure\n            try:\n                vector = self.data[var]\n            except KeyError:\n                # Handle case where var might be a partial key for MultiIndex\n                if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n                    # Find the matching column tuple that contains this var\n                    matching_cols = [col for col in self.data.columns if var in col or col == var]\n                    if matching_cols:\n                        vector = self.data[matching_cols[0]]\n                    else:\n                        raise\n                else:\n                    raise\n",
      "\n            # Ensure proper handling of MultiIndex columns\n            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n                # For MultiIndex, var should already be a tuple from diag_vars\n                vector = self.data[var]\n            else:\n                vector = self.data[var]\n"
    ],
    "Location 5 (/root/hy/projects_2/seaborn/seaborn/axisgrid.py lines 1261-1262)": [
      "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else x_vars\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else y_vars\n",
      "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else [x_vars] if x_vars is not None else []\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else [y_vars] if y_vars is not None else []\n",
      "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else x_vars\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else y_vars\n",
      "\n        self.x_vars = x_vars = list(x_vars)\n        self.y_vars = y_vars = list(y_vars)\n",
      "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, (str, tuple)) else list([x_vars]) if x_vars is not None else []\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, (str, tuple)) else list([y_vars]) if y_vars is not None else []\n",
      "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else x_vars\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else y_vars\n",
      "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else [x_vars] if x_vars is not None else []\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else [y_vars] if y_vars is not None else []\n",
      "\n        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else list(x_vars) if x_vars is not None else []\n        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else list(y_vars) if y_vars is not None else []\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..48c15798 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,6 +1258,7 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n+\n         self.x_vars = x_vars = list(x_vars)\n         self.y_vars = y_vars = list(y_vars)\n         self.square_grid = self.x_vars == self.y_vars\n@@ -1441,6 +1442,7 @@ class PairGrid(Grid):\n         \"\"\"\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n+\n             diag_vars = []\n             diag_axes = []\n             for i, y_var in enumerate(self.y_vars):\n@@ -1472,8 +1474,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,6 +1490,7 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n+\n             vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n@@ -1661,6 +1665,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n",
    "variant_0": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..f6534a25 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else list(x_vars) if x_vars is not None else []\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else list(y_vars) if y_vars is not None else []\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,13 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure proper handling of MultiIndex column names\n+            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n+                # For MultiIndex columns, var should already be a tuple\n+                vector = self.data[var]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,13 +1672,14 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n-    def _find_numeric_cols(self, data):\n-        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n-        numeric_cols = []\n-        for col in data:\n-            if variable_type(data[col]) == \"numeric\":\n-                numeric_cols.append(col)\n-        return numeric_cols\n+\n+def _find_numeric_cols(self, data):\n+    \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n+    numeric_cols = []\n+    for col in data:\n+        if variable_type(data[col]) == \"numeric\":\n+            numeric_cols.append(col)\n+    return numeric_cols\n \n \n class JointGrid(_BaseGrid):\n",
    "variant_1": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..3201d5fb 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else x_vars\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else y_vars\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,13 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure we have the correct column reference for MultiIndex DataFrames\n+            if isinstance(self.data.columns, pd.MultiIndex):\n+                # For MultiIndex, var should already be a tuple from diag_vars\n+                vector = self.data[var]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,6 +1672,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n",
    "variant_2": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..80d8c4b9 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else [x_vars] if x_vars is not None else []\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else [y_vars] if y_vars is not None else []\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,22 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure var is properly handled for MultiIndex columns\n+            try:\n+                vector = self.data[var]\n+            except KeyError:\n+                # If var is not found and data has MultiIndex columns,\n+                # it might be a partial key - try to find the matching column\n+                if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n+                    # Find columns that contain var as a level value\n+                    matching_cols = [col for col in self.data.columns if var in col]\n+                    if len(matching_cols) == 1:\n+                        vector = self.data[matching_cols[0]]\n+                    else:\n+                        raise KeyError(f\"Column '{var}' not found in MultiIndex DataFrame\")\n+                else:\n+                    raise\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,6 +1681,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n",
    "variant_3": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..62ade9f8 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else x_vars\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else y_vars\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,13 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure proper handling of MultiIndex column names\n+            if isinstance(self.data.columns, pd.MultiIndex):\n+                # For MultiIndex, var should already be a tuple from diag_vars\n+                vector = self.data[var]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,6 +1672,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n",
    "variant_4": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..a135066a 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,6 +1258,7 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n+\n         self.x_vars = x_vars = list(x_vars)\n         self.y_vars = y_vars = list(y_vars)\n         self.square_grid = self.x_vars == self.y_vars\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,6 +1492,13 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n+\n+            # Ensure we have the proper column reference for MultiIndex DataFrames\n+            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n+                # For MultiIndex columns, var should already be a tuple\n+                # but verify it exists in the DataFrame\n+                if var not in self.data.columns:\n+                    raise KeyError(f\"Column {var} not found in DataFrame with MultiIndex columns\")\n             vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n@@ -1661,13 +1673,14 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n-    def _find_numeric_cols(self, data):\n-        \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n-        numeric_cols = []\n-        for col in data:\n-            if variable_type(data[col]) == \"numeric\":\n-                numeric_cols.append(col)\n-        return numeric_cols\n+\n+def _find_numeric_cols(self, data):\n+    \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n+    numeric_cols = []\n+    for col in data:\n+        if variable_type(data[col]) == \"numeric\":\n+            numeric_cols.append(col)\n+    return numeric_cols\n \n \n class JointGrid(_BaseGrid):\n",
    "variant_5": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..4f3efe2d 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, (str, tuple)) else list([x_vars]) if x_vars is not None else []\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, (str, tuple)) else list([y_vars]) if y_vars is not None else []\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,14 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure proper handling of MultiIndex column names\n+            # For MultiIndex DataFrames, var should be a tuple representing the full column name\n+            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n+                # var is already the correct tuple from diag_vars\n+                vector = self.data[var]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,6 +1673,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n",
    "variant_6": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..ef072d7a 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else x_vars\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else y_vars\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,13 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure proper handling of MultiIndex column names\n+            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n+                # For MultiIndex columns, var should already be a tuple\n+                vector = self.data[var]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,6 +1672,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n",
    "variant_7": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..39f012d8 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else [x_vars] if x_vars is not None else []\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else [y_vars] if y_vars is not None else []\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,21 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure proper handling of MultiIndex columns by preserving tuple structure\n+            try:\n+                vector = self.data[var]\n+            except KeyError:\n+                # Handle case where var might be a partial key for MultiIndex\n+                if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n+                    # Find the matching column tuple that contains this var\n+                    matching_cols = [col for col in self.data.columns if var in col or col == var]\n+                    if matching_cols:\n+                        vector = self.data[matching_cols[0]]\n+                    else:\n+                        raise\n+                else:\n+                    raise\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,6 +1680,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n",
    "variant_8": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..39c61944 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,9 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+\n+        self.x_vars = x_vars = list(x_vars) if hasattr(x_vars, '__iter__') and not isinstance(x_vars, str) else list(x_vars) if x_vars is not None else []\n+        self.y_vars = y_vars = list(y_vars) if hasattr(y_vars, '__iter__') and not isinstance(y_vars, str) else list(y_vars) if y_vars is not None else []\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1439,6 +1440,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        # Add special diagonal axes for the univariate plot\n+        if self.diag_axes is None:\n+\n         # Add special diagonal axes for the univariate plot\n         if self.diag_axes is None:\n             diag_vars = []\n@@ -1472,8 +1476,9 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+\n+            self.diag_vars = np.array(diag_vars, dtype=object)\n+            self.diag_axes = np.array(diag_axes, dtype=object)\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n@@ -1487,7 +1492,13 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+\n+            # Ensure proper handling of MultiIndex columns\n+            if hasattr(self.data.columns, 'nlevels') and self.data.columns.nlevels > 1:\n+                # For MultiIndex, var should already be a tuple from diag_vars\n+                vector = self.data[var]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1661,6 +1672,7 @@ class PairGrid(Grid):\n         for ax, label in zip(self.axes[:, 0], self.y_vars):\n             ax.set_ylabel(label)\n \n+\n     def _find_numeric_cols(self, data):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n"
  }
}