{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/pytest/src/_pytest/assertion/rewrite.py lines 744-746)": "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
    "Location 2 (/root/hy/projects_2/pytest/src/_pytest/assertion/rewrite.py lines 675-683)": "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            # Only check for rewrite disable if doc is actually a string\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n            expect_docstring = False\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/pytest/src/_pytest/assertion/rewrite.py lines 744-746)": [
      "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n@staticmethod\ndef is_rewrite_disabled(docstring: str) -> bool:\n    return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n"
    ],
    "Location 2 (/root/hy/projects_2/pytest/src/_pytest/assertion/rewrite.py lines 675-683)": [
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            # Only check for rewrite disable if doc is actually a string\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n            expect_docstring = False\n",
      "\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                # Only check for rewrite disable if doc is actually a string\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            # Only check for rewrite disable if doc is actually a string\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n            expect_docstring = False\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            # Only check for rewrite disable if doc is actually a string\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n            expect_docstring = False\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            # Only check for rewrite disable if doc is actually a string\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n            expect_docstring = False\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            # Only check for rewrite disable if doc is actually a string\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n            expect_docstring = False\n",
      "\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                # Only check for rewrite disable if doc is actually a string\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n",
      "\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                # Only check for rewrite disable if doc is actually a string\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..46892f1e7 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,13 +672,14 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n+\n             if (\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -741,9 +742,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_0": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..b2f5e7d49 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,15 +672,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            # Only check for rewrite disable if doc is actually a string\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_1": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..c70bd02a1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,15 +672,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            # Only check for rewrite disable if doc is actually a string\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_2": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..458527fc3 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,13 +672,15 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n+\n             if (\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                # Only check for rewrite disable if doc is actually a string\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_3": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..c70bd02a1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,15 +672,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            # Only check for rewrite disable if doc is actually a string\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_4": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..b2f5e7d49 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,15 +672,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            # Only check for rewrite disable if doc is actually a string\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_5": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..b2f5e7d49 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,15 +672,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            # Only check for rewrite disable if doc is actually a string\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_6": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..b2f5e7d49 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,15 +672,17 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            # Only check for rewrite disable if doc is actually a string\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_7": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..458527fc3 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,13 +672,15 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n+\n             if (\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                # Only check for rewrite disable if doc is actually a string\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n",
    "variant_8": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..3b4e0cc47 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -672,13 +672,15 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n+\n             if (\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                # Only check for rewrite disable if doc is actually a string\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -741,9 +743,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n-    @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+\n+@staticmethod\n+def is_rewrite_disabled(docstring: str) -> bool:\n+    return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n"
  }
}