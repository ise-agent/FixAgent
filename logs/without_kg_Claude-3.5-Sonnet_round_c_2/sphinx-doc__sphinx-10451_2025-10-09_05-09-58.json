{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/ext/autodoc/typehints.py lines 124-128)": "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/ext/autodoc/typehints.py lines 124-128)": [
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n",
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n",
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n",
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n",
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n",
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n",
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n",
      "\n    for name, annotation in annotations.items():\n        if name == 'return':\n            continue\n\n        arg = arguments.get(name, {})\n        if not arg.get('type'):\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotation))\n            node += field\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7d5..50ad2f015 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,10 +121,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        arg = arguments.get(name, {})\n+        if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n"
  }
}