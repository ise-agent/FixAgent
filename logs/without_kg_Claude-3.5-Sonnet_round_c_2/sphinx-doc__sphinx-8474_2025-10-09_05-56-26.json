{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/domains/std.py lines 1072-1079)": "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc as key\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/domains/std.py lines 1060-1062)": "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            if builder.name == 'singlehtml':\n                master_doc = builder.config.master_doc\n                if master_doc not in env.toc_fignumbers:\n                    raise ValueError  # no number assigned\n                \n                flattened_figtype = f\"{docname}/{figtype}\"\n                if flattened_figtype not in env.toc_fignumbers[master_doc]:\n                    raise ValueError  # no number assigned\n                \n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[master_doc][flattened_figtype].get(figure_id)\n            else:\n                if docname not in env.toc_fignumbers:\n                    raise ValueError  # no number assigned\n                elif figtype not in env.toc_fignumbers[docname]:\n                    raise ValueError  # no number assigned\n                else:\n                    figure_id = target_node['ids'][0]\n                    return env.toc_fignumbers[docname][figtype].get(figure_id)\n",
    "Location 3 (/root/hy/projects_2/sphinx/sphinx/domains/std.py lines 854-856)": "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            elif builder.name == 'singlehtml':\n                docname = env.config.master_doc\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname][anchorname]\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                try:\n                    return env.toc_fignumbers[env.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n                except (KeyError, TypeError):\n                    return None\n            else:\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except (KeyError, TypeError):\n                    return None\n",
    "Location 4 (/root/hy/projects_2/sphinx/sphinx/builders/singlehtml.py lines 104-123)": "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target: \"Element\") -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                return env.toc_secnumbers.get(docname, {}).get(target['ids'][0], ())\n        else:\n            try:\n                figure_id = target['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use the flattened structure\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # target is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                return tuple()\n",
    "Location 5 (/root/hy/projects_2/sphinx/sphinx/writers/html.py lines 311-312)": "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                try:\n                    fignumber = env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n                    if '.' in fignumber:\n                        return tuple(map(int, fignumber.split('.')))\n                    else:\n                        return (int(fignumber),)\n                except (KeyError, ValueError):\n                    return tuple()\n        else:\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\"\n                    master_doc = builder.config.master_doc\n                    flattened_key = f\"{docname}/{figtype}\"\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[master_doc][flattened_key][figure_id]\n                else:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[docname][figtype][figure_id]\n                if '.' in fignumber:\n                    return tuple(map(int, fignumber.split('.')))\n                else:\n                    return (int(fignumber),)\n            except (KeyError, ValueError):\n                return tuple()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/domains/std.py lines 1072-1079)": [
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc as key\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc as key\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc as key\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, figure numbers are stored under master_doc\n                    # with flattened keys in format \"docname/figtype\"\n                    figure_id = target_node['ids'][0]\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n                else:\n                    figure_id = target_node['ids'][0]\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc and \"docname/figtype\" key\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc as key\n                    # and \"docname/figtype\" as the figure type key\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc as key\n                    # and \"docname/figtype\" as the figure type key\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure with master_doc as key\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n"
    ],
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/domains/std.py lines 1060-1062)": [
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            figure_id = target_node['ids'][0]\n            try:\n                if builder.name == 'singlehtml':\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                # no number assigned\n                raise ValueError\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                # For singlehtml, use the flattened structure\n                master_doc = builder.config.master_doc\n                if (master_doc in env.toc_fignumbers and\n                    f\"{docname}/{figtype}\" in env.toc_fignumbers[master_doc] and\n                    figure_id in env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"]):\n                    return env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"][figure_id]\n                else:\n                    raise ValueError  # no number assigned\n            else:\n                # Standard behavior for other builders\n                if (docname not in env.toc_fignumbers or\n                    figtype not in env.toc_fignumbers[docname] or\n                    figure_id not in env.toc_fignumbers[docname][figtype]):\n                    raise ValueError  # no number assigned\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                # For singlehtml, use the flattened structure\n                master_doc = builder.config.master_doc\n                if master_doc not in env.toc_secnumbers:\n                    raise ValueError  # no number assigned\n                else:\n                    anchorname = '#' + target_node['ids'][0]\n                    full_anchorname = f\"{docname}{anchorname}\"\n                    if full_anchorname not in env.toc_secnumbers[master_doc]:\n                        # try first heading which has no anchor\n                        return env.toc_secnumbers[master_doc].get(docname)\n                    else:\n                        return env.toc_secnumbers[master_doc].get(full_anchorname)\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                # For singlehtml, use the flattened structure with master_doc\n                master_doc = builder.config.master_doc\n                flattened_figtype = f\"{docname}/{figtype}\"\n                try:\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                except (KeyError, TypeError):\n                    raise ValueError  # no number assigned\n            else:\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except (KeyError, TypeError):\n                    raise ValueError  # no number assigned\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            if builder.name == 'singlehtml':\n                master_doc = builder.config.master_doc\n                if (master_doc in env.toc_fignumbers and\n                    f\"{docname}/{figtype}\" in env.toc_fignumbers[master_doc]):\n                    figure_id = target_node['ids'][0]\n                    if figure_id in env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"]:\n                        return env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"][figure_id]\n                raise ValueError  # no number assigned\n            else:\n                if (docname not in env.toc_fignumbers or\n                    figtype not in env.toc_fignumbers[docname]):\n                    raise ValueError  # no number assigned\n                else:\n                    figure_id = target_node['ids'][0]\n                    return env.toc_fignumbers[docname][figtype].get(figure_id)\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            figure_id = target_node['ids'][0]\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\" -> figure_id\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    # Standard nested structure: docname -> figtype -> figure_id\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                # no number assigned\n                raise ValueError\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            if builder.name == 'singlehtml':\n                # For singlehtml, use flattened structure with master_doc as key\n                master_doc = builder.config.master_doc\n                flattened_figtype = f\"{docname}/{figtype}\"\n                if (master_doc in env.toc_fignumbers and\n                    flattened_figtype in env.toc_fignumbers[master_doc]):\n                    figure_id = target_node['ids'][0]\n                    if figure_id in env.toc_fignumbers[master_doc][flattened_figtype]:\n                        return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                raise ValueError  # no number assigned\n            else:\n                if (docname not in env.toc_fignumbers or\n                    figtype not in env.toc_fignumbers[docname]):\n                    raise ValueError  # no number assigned\n\n                figure_id = target_node['ids'][0]\n                if figure_id in env.toc_fignumbers[docname][figtype]:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                else:\n                    raise ValueError  # no number assigned\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            figure_id = target_node['ids'][0]\n            \n            if builder.name == 'singlehtml':\n                # For singlehtml, use flattened structure with master_doc as top-level key\n                master_doc = builder.config.master_doc\n                flattened_figtype = f\"{docname}/{figtype}\"\n                try:\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                except KeyError:\n                    raise ValueError  # no number assigned\n            else:\n                # Standard nested structure for other builders\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except KeyError:\n                    raise ValueError  # no number assigned\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            elif docname not in env.toc_secnumbers:\n                raise ValueError  # no number assigned\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname].get(anchorname)\n        else:\n            if builder.name == 'singlehtml':\n                master_doc = builder.config.master_doc\n                if master_doc not in env.toc_fignumbers:\n                    raise ValueError  # no number assigned\n                flattened_figtype = f\"{docname}/{figtype}\"\n                if flattened_figtype not in env.toc_fignumbers[master_doc]:\n                    raise ValueError  # no number assigned\n                figure_id = target_node['ids'][0]\n                if figure_id not in env.toc_fignumbers[master_doc][flattened_figtype]:\n                    raise ValueError  # no number assigned\n                return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n            else:\n                if docname not in env.toc_fignumbers:\n                    raise ValueError  # no number assigned\n                if figtype not in env.toc_fignumbers[docname]:\n                    raise ValueError  # no number assigned\n                figure_id = target_node['ids'][0]\n                if figure_id not in env.toc_fignumbers[docname][figtype]:\n                    raise ValueError  # no number assigned\n                return env.toc_fignumbers[docname][figtype][figure_id]\n"
    ],
    "Location 3 (/root/hy/projects_2/sphinx/sphinx/domains/std.py lines 854-856)": [
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            elif builder.name == 'singlehtml':\n                docname = env.config.master_doc\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers.get(docname, {}):\n                    anchorname = ''\n                if anchorname in env.toc_secnumbers.get(docname, {}):\n                    return tuple(env.toc_secnumbers[docname][anchorname])\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                # For singlehtml, use the flattened structure\n                master_doc = env.config.master_doc\n                flattened_figtype = f\"{docname}/{figtype}\"\n                if (master_doc in env.toc_fignumbers and \n                    flattened_figtype in env.toc_fignumbers[master_doc] and\n                    figure_id in env.toc_fignumbers[master_doc][flattened_figtype]):\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n            else:\n                if (docname in env.toc_fignumbers and\n                    figtype in env.toc_fignumbers[docname] and\n                    figure_id in env.toc_fignumbers[docname][figtype]):\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n\n        return None\n",
      "\n    def get_fignumber(self, env: BuildEnvironment, builder: Builder, figtype: str,\n                      docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname]['section'].get(figure_id)\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                try:\n                    return env.toc_fignumbers[builder.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n                except KeyError:\n                    return None\n            else:\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except KeyError:\n                    return None\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                figure_id = target_node['ids'][0]\n                return env.toc_secnumbers.get(docname, {}).get(figure_id)\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                master_doc = builder.config.master_doc\n                flattened_figtype = f\"{docname}/{figtype}\"\n                return env.toc_fignumbers.get(master_doc, {}).get(flattened_figtype, {}).get(figure_id)\n            else:\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except (KeyError, TypeError):\n                    # no number assigned\n                    return None\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            elif builder.name == 'singlehtml':\n                sid = target_node['ids'][0]\n                return tuple(env.toc_secnumbers[docname][sid])\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_fignumbers[docname]:\n                    # try first heading which has no anchor\n                    return env.toc_fignumbers[docname].get('', tuple())\n                else:\n                    return env.toc_fignumbers[docname][anchorname]\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                try:\n                    return env.toc_fignumbers[builder.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n                except (KeyError, TypeError):\n                    return None\n            else:\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except (KeyError, TypeError):\n                    return None\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            elif builder.name == 'singlehtml':\n                docname = env.config.master_doc\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers.get(docname, {}):\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers.get(docname, {}).get('', tuple())\n                else:\n                    return tuple(env.toc_secnumbers[docname][anchorname])\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                try:\n                    return env.toc_fignumbers[env.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n                except (KeyError, TypeError):\n                    return None\n            else:\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except (KeyError, TypeError):\n                    return None\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            elif builder.name == 'singlehtml':\n                docname = env.config.master_doc\n                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n            else:\n                anchorname = '#' + target_node['ids'][0]\n                if anchorname not in env.toc_secnumbers.get(docname, {}):\n                    # try first heading which has no anchor\n                    return env.toc_secnumbers[docname].get('')\n                else:\n                    return env.toc_secnumbers[docname][anchorname]\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                try:\n                    return env.toc_fignumbers[env.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n                except (KeyError, TypeError):\n                    return None\n            else:\n                try:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except (KeyError, TypeError):\n                    return None\n",
      "\n    def get_fignumber(self, env: BuildEnvironment, builder: Builder, figtype: str,\n                      docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                figure_id = target_node['ids'][0]\n                return env.toc_secnumbers.get(docname, {}).get(figure_id)\n        else:\n            figure_id = target_node['ids'][0]\n            if builder.name == 'singlehtml':\n                # For singlehtml, use the flattened structure\n                master_doc = builder.config.master_doc\n                flattened_key = f\"{docname}/{figtype}\"\n                return env.toc_fignumbers.get(master_doc, {}).get(flattened_key, {}).get(figure_id)\n            else:\n                return env.toc_fignumbers.get(docname, {}).get(figtype, {}).get(figure_id)\n",
      "\n        if figtype != 'section':\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\" -> figure_id\n                    return env.toc_fignumbers[builder.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                return None\n"
    ],
    "Location 4 (/root/hy/projects_2/sphinx/sphinx/builders/singlehtml.py lines 104-123)": [
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                figure_id = target_node['ids'][0]\n                return env.toc_secnumbers[docname].get(figure_id, ())\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    alias = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][alias][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\", figtype: str,\n                      docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            try:\n                return env.toc_secnumbers[docname][target_node['ids'][0]]\n            except (KeyError, TypeError):\n                # no number assigned\n                return tuple()\n        else:\n            try:\n                if builder.name == 'singlehtml':\n                    alias = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][alias][target_node['ids'][0]]\n                else:\n                    return env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n            except (KeyError, TypeError):\n                # no number assigned\n                return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                figure_id = target_node['ids'][0]\n                return env.toc_secnumbers[docname].get(figure_id, ())\n        else:\n            if builder.name == 'singlehtml':\n                try:\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    figure_id = target_node['ids'][0]\n                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n                except (KeyError, IndexError):\n                    return tuple()\n            else:\n                try:\n                    figure_id = target_node['ids'][0]\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n                except (KeyError, IndexError):\n                    return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                try:\n                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n                except (KeyError, TypeError):\n                    # Maybe the target_node is not in a document that is in the toctree.\n                    # It could be in an appendix, for example.\n                    return tuple()\n        else:\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use the flattened structure\n                    figure_id = target_node['ids'][0]\n                    flattened_figtype = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n                else:\n                    figure_id = target_node['ids'][0]\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            try:\n                return env.toc_secnumbers[docname][target_node['ids'][0]]\n            except (KeyError, TypeError):\n                # TypeError is raised when target_node['ids'] is not iterable.\n                return tuple()\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n            except IndexError:\n                return tuple()\n\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, figure numbers are flattened under master_doc\n                    # with keys in format \"docname/figtype\"\n                    master_doc = builder.config.master_doc\n                    figtype_key = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][figtype_key][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                try:\n                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n                except (KeyError, TypeError):\n                    # target_node is found, but not in toc_secnumbers\n                    return tuple()\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use the flattened structure\n                    master_doc = builder.config.master_doc\n                    flattened_figtype = f\"{docname}/{figtype}\"\n                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                # target_node is found, but not in toc_fignumbers\n                return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                figure_id = target_node['ids'][0]\n                try:\n                    return env.toc_secnumbers[docname][figure_id]\n                except (KeyError, TypeError):\n                    # target_node is found, but fignumber is not assigned.\n                    # Maybe it is defined in orphaned document.\n                    return tuple()\n        else:\n            figure_id = target_node['ids'][0]\n            try:\n                if builder.name == 'singlehtml':\n                    alias = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][alias][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                return tuple()\n",
      "\n    def get_fignumber(self, env: BuildEnvironment, builder: \"Builder\", figtype: str,\n                      docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                try:\n                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n                except (KeyError, TypeError):\n                    # target_node is found, but not in toc_secnumbers (maybe generated\n                    # by extensions)\n                    return tuple()\n        else:\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use the flattened structure\n                    figure_id = target_node['ids'][0]\n                    figtype_key = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][figtype_key][figure_id]\n                else:\n                    figure_id = target_node['ids'][0]\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                # target_node is found, but not in toc_fignumbers\n                return tuple()\n"
    ],
    "Location 5 (/root/hy/projects_2/sphinx/sphinx/writers/html.py lines 311-312)": [
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                try:\n                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n                except (KeyError, TypeError):\n                    # target_node is found, but not in toc_secnumbers (maybe broken\n                    # structure); return empty tuple\n                    return tuple()\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    key = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                # target_node is found, but not in toc_fignumbers\n                return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            try:\n                fignumber = env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n                if fignumber is None:\n                    return tuple()\n                else:\n                    return fignumber\n            except (KeyError, IndexError):\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                return tuple()\n        else:\n            try:\n                if builder.name == 'singlehtml':\n                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\" -> figure_id\n                    key = \"%s/%s\" % (docname, figtype)\n                    fignumber = env.toc_fignumbers[builder.config.master_doc][key][target_node['ids'][0]]\n                else:\n                    fignumber = env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n                if fignumber is None:\n                    return tuple()\n                else:\n                    return fignumber\n            except (KeyError, IndexError):\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                return tuple()\n",
      "\n    def get_fignumber(self, env: BuildEnvironment, builder: Builder,\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                try:\n                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n                except (KeyError, TypeError):\n                    # no number assigned\n                    return tuple()\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                if builder.name == 'singlehtml':\n                    key = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, TypeError):\n                # no number assigned\n                return tuple()\n",
      "\n    def get_fignumber(self, env: BuildEnvironment, builder: Builder,\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype not in env.toc_fignumbers:\n            raise ValueError\n\n        figure_id = target_node['ids'][0]\n\n        try:\n            if target_node.get('secnumber'):\n                secnum = target_node['secnumber']\n                fignumbers = env.toc_fignumbers[docname][figtype]\n                if builder.name == 'latex':\n                    # use ex. \"Figure 1.1\" for latex\n                    fignum = fignumbers[figure_id][1:]\n                else:\n                    # use ex. \"Figure 1\" for html\n                    fignum = fignumbers[figure_id]\n            else:\n                if builder.name == 'latex':\n                    key = docname\n                elif builder.name == 'singlehtml':\n                    key = builder.config.master_doc\n                    figtype_key = f\"{docname}/{figtype}\"\n                    fignumbers = env.toc_fignumbers[key][figtype_key]\n                    fignum = fignumbers[figure_id]\n                    return tuple(fignum)\n                else:\n                    key = docname\n\n                fignumbers = env.toc_fignumbers[key][figtype]\n                fignum = fignumbers[figure_id]\n\n            return tuple(fignum)\n        except (KeyError, IndexError) as exc:\n            raise ValueError from exc\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype not in env.toc_fignumbers:\n            raise ValueError(__(\"no number is assigned for %s: %s\") % (figtype, target_node))\n\n        figure_id = target_node['ids'][0]\n\n        try:\n            if target_node.get('secnumber'):\n                secnumber = tuple(target_node['secnumber'])\n\n                if builder.name == 'latex':\n                    key = \"%s/%s\" % (docname, figtype)\n                    if key in env.toc_secnumbers:\n                        number = env.toc_secnumbers[key][figure_id]\n                    else:\n                        number = env.toc_fignumbers[docname][figtype][figure_id]\n                else:\n                    try:\n                        number = env.toc_fignumbers[docname][figtype][figure_id]\n                    except KeyError:\n                        number = env.toc_fignumbers[builder.config.master_doc][figtype][figure_id]\n\n                return secnumber + number\n            else:\n                if builder.name == 'singlehtml':\n                    key = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n        except KeyError:\n            raise ValueError(__(\"no number is assigned for %s: %s\") % (figtype, target_node))\n",
      "\ndef get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                  figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n    if figtype == 'section':\n        if builder.name == 'latex':\n            return tuple()\n        elif builder.name == 'singlehtml':\n            return tuple()\n        else:\n            try:\n                return env.toc_secnumbers[docname][target_node['ids'][0]]\n            except (KeyError, TypeError):\n                # no number assigned\n                return tuple()\n    else:\n        try:\n            if builder.name == 'singlehtml':\n                key = \"%s/%s\" % (docname, figtype)\n                return env.toc_fignumbers[builder.config.master_doc][key][target_node['ids'][0]]\n            else:\n                return env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n        except (KeyError, TypeError):\n            # no number assigned\n            return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                secnumber = self.get_secnumber(env, docname, target_node)\n                if secnumber:\n                    return secnumber\n                else:\n                    return tuple()\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n\n                if builder.name == 'singlehtml':\n                    key = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n                else:\n                    return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                return tuple()\n",
      "\n    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n        if figtype == 'section':\n            if builder.name == 'latex':\n                return tuple()\n            elif builder.name == 'singlehtml':\n                return tuple()\n            else:\n                try:\n                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n                except (KeyError, TypeError):\n                    # XXX production lists??\n                    return tuple()\n        else:\n            try:\n                if builder.name == 'singlehtml':\n                    key = \"%s/%s\" % (docname, figtype)\n                    return env.toc_fignumbers[builder.config.master_doc][key][target_node['ids'][0]]\n                else:\n                    return env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n            except (KeyError, TypeError):\n                return tuple()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..192c0dd3b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..6a8db8fbc 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,6 +851,7 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n+\n         except ValueError:\n             logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                            location=node)\n@@ -1057,6 +1058,7 @@ class StandardDomain(Domain):\n \n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n@@ -1069,10 +1071,16 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\" -> figure_id\n+                    flattened_key = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][flattened_key][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..b9f93c89a 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,6 +308,7 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n+\n             if self.builder.name == 'singlehtml':\n                 key = \"%s/%s\" % (self.docnames[-1], figtype)\n             else:\n",
    "variant_0": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..0b76b49f1 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,29 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target: \"Element\") -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                return env.toc_secnumbers.get(docname, {}).get(target['ids'][0], ())\n+        else:\n+            try:\n+                figure_id = target['ids'][0]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use the flattened structure\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, IndexError):\n+                # target is found, but fignumber is not assigned.\n+                # Maybe it is defined in orphaned document.\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..4d7809f94 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,34 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            elif builder.name == 'singlehtml':\n+                docname = env.config.master_doc\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname][anchorname]\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                try:\n+                    return env.toc_fignumbers[env.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n+            else:\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n             return contnode\n \n         try:\n@@ -1055,11 +1080,16 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1099,46 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            if builder.name == 'singlehtml':\n+                master_doc = builder.config.master_doc\n+                if master_doc not in env.toc_fignumbers:\n+                    raise ValueError  # no number assigned\n+                \n+                flattened_figtype = f\"{docname}/{figtype}\"\n+                if flattened_figtype not in env.toc_fignumbers[master_doc]:\n+                    raise ValueError  # no number assigned\n+                \n+                figure_id = target_node['ids'][0]\n+                return env.toc_fignumbers[master_doc][flattened_figtype].get(figure_id)\n+            else:\n+                if docname not in env.toc_fignumbers:\n+                    raise ValueError  # no number assigned\n+                elif figtype not in env.toc_fignumbers[docname]:\n+                    raise ValueError  # no number assigned\n+                else:\n+                    figure_id = target_node['ids'][0]\n+                    return env.toc_fignumbers[docname][figtype].get(figure_id)\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc as key\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..afb1abec1 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,40 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                try:\n+                    fignumber = env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n+                    if '.' in fignumber:\n+                        return tuple(map(int, fignumber.split('.')))\n+                    else:\n+                        return (int(fignumber),)\n+                except (KeyError, ValueError):\n+                    return tuple()\n+        else:\n+            try:\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\"\n+                    master_doc = builder.config.master_doc\n+                    flattened_key = f\"{docname}/{figtype}\"\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[master_doc][flattened_key][figure_id]\n+                else:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[docname][figtype][figure_id]\n+                if '.' in fignumber:\n+                    return tuple(map(int, fignumber.split('.')))\n+                else:\n+                    return (int(fignumber),)\n+            except (KeyError, ValueError):\n+                return tuple()\n             else:\n                 key = figtype\n \n",
    "variant_1": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cfb023d52 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,27 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                figure_id = target_node['ids'][0]\n+                return env.toc_secnumbers[docname].get(figure_id, ())\n+        else:\n+            try:\n+                figure_id = target_node['ids'][0]\n+                if builder.name == 'singlehtml':\n+                    alias = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][alias][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, IndexError):\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..96b524ec4 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,38 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            elif builder.name == 'singlehtml':\n+                docname = env.config.master_doc\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers.get(docname, {}):\n+                    anchorname = ''\n+                if anchorname in env.toc_secnumbers.get(docname, {}):\n+                    return tuple(env.toc_secnumbers[docname][anchorname])\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                # For singlehtml, use the flattened structure\n+                master_doc = env.config.master_doc\n+                flattened_figtype = f\"{docname}/{figtype}\"\n+                if (master_doc in env.toc_fignumbers and \n+                    flattened_figtype in env.toc_fignumbers[master_doc] and\n+                    figure_id in env.toc_fignumbers[master_doc][flattened_figtype]):\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+            else:\n+                if (docname in env.toc_fignumbers and\n+                    figtype in env.toc_fignumbers[docname] and\n+                    figure_id in env.toc_fignumbers[docname][figtype]):\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+\n+        return None\n             return contnode\n \n         try:\n@@ -1055,11 +1084,16 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1103,38 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            try:\n+                if builder.name == 'singlehtml':\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                # no number assigned\n+                raise ValueError\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc as key\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..46031b9dd 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,32 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                try:\n+                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n+                except (KeyError, TypeError):\n+                    # target_node is found, but not in toc_secnumbers (maybe broken\n+                    # structure); return empty tuple\n+                    return tuple()\n+        else:\n+            try:\n+                figure_id = target_node['ids'][0]\n+                if builder.name == 'singlehtml':\n+                    key = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                # target_node is found, but not in toc_fignumbers\n+                return tuple()\n             else:\n                 key = figtype\n \n",
    "variant_2": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..5b03b8cdc 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,29 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\", figtype: str,\n+                      docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            try:\n+                return env.toc_secnumbers[docname][target_node['ids'][0]]\n+            except (KeyError, TypeError):\n+                # no number assigned\n+                return tuple()\n+        else:\n+            try:\n+                if builder.name == 'singlehtml':\n+                    alias = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][alias][target_node['ids'][0]]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n+            except (KeyError, TypeError):\n+                # no number assigned\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..9b7fb2e7f 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,29 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: BuildEnvironment, builder: Builder, figtype: str,\n+                      docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                figure_id = target_node['ids'][0]\n+                return env.toc_fignumbers[docname]['section'].get(figure_id)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                try:\n+                    return env.toc_fignumbers[builder.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                except KeyError:\n+                    return None\n+            else:\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except KeyError:\n+                    return None\n             return contnode\n \n         try:\n@@ -1055,11 +1075,44 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                # For singlehtml, use the flattened structure\n+                master_doc = builder.config.master_doc\n+                if (master_doc in env.toc_fignumbers and\n+                    f\"{docname}/{figtype}\" in env.toc_fignumbers[master_doc] and\n+                    figure_id in env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"]):\n+                    return env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                else:\n+                    raise ValueError  # no number assigned\n+            else:\n+                # Standard behavior for other builders\n+                if (docname not in env.toc_fignumbers or\n+                    figtype not in env.toc_fignumbers[docname] or\n+                    figure_id not in env.toc_fignumbers[docname][figtype]):\n+                    raise ValueError  # no number assigned\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1122,16 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc as key\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..cc28913b9 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,40 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            try:\n+                fignumber = env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n+                if fignumber is None:\n+                    return tuple()\n+                else:\n+                    return fignumber\n+            except (KeyError, IndexError):\n+                # target_node is found, but fignumber is not assigned.\n+                # Maybe it is defined in orphaned document.\n+                return tuple()\n+        else:\n+            try:\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\" -> figure_id\n+                    key = \"%s/%s\" % (docname, figtype)\n+                    fignumber = env.toc_fignumbers[builder.config.master_doc][key][target_node['ids'][0]]\n+                else:\n+                    fignumber = env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n+                if fignumber is None:\n+                    return tuple()\n+                else:\n+                    return fignumber\n+            except (KeyError, IndexError):\n+                # target_node is found, but fignumber is not assigned.\n+                # Maybe it is defined in orphaned document.\n+                return tuple()\n             else:\n                 key = figtype\n \n",
    "variant_3": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..c7827de77 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,31 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                figure_id = target_node['ids'][0]\n+                return env.toc_secnumbers[docname].get(figure_id, ())\n+        else:\n+            if builder.name == 'singlehtml':\n+                try:\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    figure_id = target_node['ids'][0]\n+                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    return tuple()\n+            else:\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..3ce3cb5a8 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,29 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                figure_id = target_node['ids'][0]\n+                return env.toc_secnumbers.get(docname, {}).get(figure_id)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                master_doc = builder.config.master_doc\n+                flattened_figtype = f\"{docname}/{figtype}\"\n+                return env.toc_fignumbers.get(master_doc, {}).get(flattened_figtype, {}).get(figure_id)\n+            else:\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except (KeyError, TypeError):\n+                    # no number assigned\n+                    return None\n             return contnode\n \n         try:\n@@ -1055,11 +1075,51 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                # For singlehtml, use the flattened structure\n+                master_doc = builder.config.master_doc\n+                if master_doc not in env.toc_secnumbers:\n+                    raise ValueError  # no number assigned\n+                else:\n+                    anchorname = '#' + target_node['ids'][0]\n+                    full_anchorname = f\"{docname}{anchorname}\"\n+                    if full_anchorname not in env.toc_secnumbers[master_doc]:\n+                        # try first heading which has no anchor\n+                        return env.toc_secnumbers[master_doc].get(docname)\n+                    else:\n+                        return env.toc_secnumbers[master_doc].get(full_anchorname)\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                # For singlehtml, use the flattened structure with master_doc\n+                master_doc = builder.config.master_doc\n+                flattened_figtype = f\"{docname}/{figtype}\"\n+                try:\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                except (KeyError, TypeError):\n+                    raise ValueError  # no number assigned\n+            else:\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except (KeyError, TypeError):\n+                    raise ValueError  # no number assigned\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1129,17 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc as key\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..1b6749a57 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,31 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: BuildEnvironment, builder: Builder,\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                try:\n+                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n+                except (KeyError, TypeError):\n+                    # no number assigned\n+                    return tuple()\n+        else:\n+            try:\n+                figure_id = target_node['ids'][0]\n+                if builder.name == 'singlehtml':\n+                    key = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                # no number assigned\n+                return tuple()\n             else:\n                 key = figtype\n \n",
    "variant_4": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..e1be15ad5 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,33 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                try:\n+                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n+                except (KeyError, TypeError):\n+                    # Maybe the target_node is not in a document that is in the toctree.\n+                    # It could be in an appendix, for example.\n+                    return tuple()\n+        else:\n+            try:\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use the flattened structure\n+                    figure_id = target_node['ids'][0]\n+                    flattened_figtype = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n+                else:\n+                    figure_id = target_node['ids'][0]\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..cb692f17f 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,34 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            elif builder.name == 'singlehtml':\n+                sid = target_node['ids'][0]\n+                return tuple(env.toc_secnumbers[docname][sid])\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_fignumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_fignumbers[docname].get('', tuple())\n+                else:\n+                    return env.toc_fignumbers[docname][anchorname]\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                try:\n+                    return env.toc_fignumbers[builder.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n+            else:\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n             return contnode\n \n         try:\n@@ -1055,11 +1080,16 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1099,43 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            if builder.name == 'singlehtml':\n+                master_doc = builder.config.master_doc\n+                if (master_doc in env.toc_fignumbers and\n+                    f\"{docname}/{figtype}\" in env.toc_fignumbers[master_doc]):\n+                    figure_id = target_node['ids'][0]\n+                    if figure_id in env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"]:\n+                        return env.toc_fignumbers[master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                raise ValueError  # no number assigned\n+            else:\n+                if (docname not in env.toc_fignumbers or\n+                    figtype not in env.toc_fignumbers[docname]):\n+                    raise ValueError  # no number assigned\n+                else:\n+                    figure_id = target_node['ids'][0]\n+                    return env.toc_fignumbers[docname][figtype].get(figure_id)\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n-                figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, figure numbers are stored under master_doc\n+                    # with flattened keys in format \"docname/figtype\"\n+                    figure_id = target_node['ids'][0]\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[builder.config.master_doc][flattened_figtype][figure_id]\n+                else:\n+                    figure_id = target_node['ids'][0]\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..33d9a6bd0 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,42 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: BuildEnvironment, builder: Builder,\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype not in env.toc_fignumbers:\n+            raise ValueError\n+\n+        figure_id = target_node['ids'][0]\n+\n+        try:\n+            if target_node.get('secnumber'):\n+                secnum = target_node['secnumber']\n+                fignumbers = env.toc_fignumbers[docname][figtype]\n+                if builder.name == 'latex':\n+                    # use ex. \"Figure 1.1\" for latex\n+                    fignum = fignumbers[figure_id][1:]\n+                else:\n+                    # use ex. \"Figure 1\" for html\n+                    fignum = fignumbers[figure_id]\n+            else:\n+                if builder.name == 'latex':\n+                    key = docname\n+                elif builder.name == 'singlehtml':\n+                    key = builder.config.master_doc\n+                    figtype_key = f\"{docname}/{figtype}\"\n+                    fignumbers = env.toc_fignumbers[key][figtype_key]\n+                    fignum = fignumbers[figure_id]\n+                    return tuple(fignum)\n+                else:\n+                    key = docname\n+\n+                fignumbers = env.toc_fignumbers[key][figtype]\n+                fignum = fignumbers[figure_id]\n+\n+            return tuple(fignum)\n+        except (KeyError, IndexError) as exc:\n+            raise ValueError from exc\n             else:\n                 key = figtype\n \n",
    "variant_5": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..fa82f521d 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,36 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            try:\n+                return env.toc_secnumbers[docname][target_node['ids'][0]]\n+            except (KeyError, TypeError):\n+                # TypeError is raised when target_node['ids'] is not iterable.\n+                return tuple()\n+        else:\n+            try:\n+                figure_id = target_node['ids'][0]\n+            except IndexError:\n+                return tuple()\n+\n+            try:\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, figure numbers are flattened under master_doc\n+                    # with keys in format \"docname/figtype\"\n+                    master_doc = builder.config.master_doc\n+                    figtype_key = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][figtype_key][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..a54933be5 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,34 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            elif builder.name == 'singlehtml':\n+                docname = env.config.master_doc\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers.get(docname, {}):\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers.get(docname, {}).get('', tuple())\n+                else:\n+                    return tuple(env.toc_secnumbers[docname][anchorname])\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                try:\n+                    return env.toc_fignumbers[env.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n+            else:\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n             return contnode\n \n         try:\n@@ -1055,11 +1080,16 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1099,40 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            try:\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\" -> figure_id\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    # Standard nested structure: docname -> figtype -> figure_id\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                # no number assigned\n+                raise ValueError\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc and \"docname/figtype\" key\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..bee5f960b 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,39 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype not in env.toc_fignumbers:\n+            raise ValueError(__(\"no number is assigned for %s: %s\") % (figtype, target_node))\n+\n+        figure_id = target_node['ids'][0]\n+\n+        try:\n+            if target_node.get('secnumber'):\n+                secnumber = tuple(target_node['secnumber'])\n+\n+                if builder.name == 'latex':\n+                    key = \"%s/%s\" % (docname, figtype)\n+                    if key in env.toc_secnumbers:\n+                        number = env.toc_secnumbers[key][figure_id]\n+                    else:\n+                        number = env.toc_fignumbers[docname][figtype][figure_id]\n+                else:\n+                    try:\n+                        number = env.toc_fignumbers[docname][figtype][figure_id]\n+                    except KeyError:\n+                        number = env.toc_fignumbers[builder.config.master_doc][figtype][figure_id]\n+\n+                return secnumber + number\n+            else:\n+                if builder.name == 'singlehtml':\n+                    key = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+        except KeyError:\n+            raise ValueError(__(\"no number is assigned for %s: %s\") % (figtype, target_node))\n             else:\n                 key = figtype\n \n",
    "variant_6": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..19cf41429 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,33 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                try:\n+                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n+                except (KeyError, TypeError):\n+                    # target_node is found, but not in toc_secnumbers\n+                    return tuple()\n+        else:\n+            try:\n+                figure_id = target_node['ids'][0]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use the flattened structure\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                # target_node is found, but not in toc_fignumbers\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b9a294ad8 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,34 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            elif builder.name == 'singlehtml':\n+                docname = env.config.master_doc\n+                return tuple(env.toc_secnumbers[docname][target_node['ids'][0]])\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers.get(docname, {}):\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname][anchorname]\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                try:\n+                    return env.toc_fignumbers[env.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n+            else:\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except (KeyError, TypeError):\n+                    return None\n             return contnode\n \n         try:\n@@ -1055,11 +1080,46 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            if builder.name == 'singlehtml':\n+                # For singlehtml, use flattened structure with master_doc as key\n+                master_doc = builder.config.master_doc\n+                flattened_figtype = f\"{docname}/{figtype}\"\n+                if (master_doc in env.toc_fignumbers and\n+                    flattened_figtype in env.toc_fignumbers[master_doc]):\n+                    figure_id = target_node['ids'][0]\n+                    if figure_id in env.toc_fignumbers[master_doc][flattened_figtype]:\n+                        return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                raise ValueError  # no number assigned\n+            else:\n+                if (docname not in env.toc_fignumbers or\n+                    figtype not in env.toc_fignumbers[docname]):\n+                    raise ValueError  # no number assigned\n+\n+                figure_id = target_node['ids'][0]\n+                if figure_id in env.toc_fignumbers[docname][figtype]:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                else:\n+                    raise ValueError  # no number assigned\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1129,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc as key\n+                    # and \"docname/figtype\" as the figure type key\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..3b2d0ef58 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,30 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                  figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+    if figtype == 'section':\n+        if builder.name == 'latex':\n+            return tuple()\n+        elif builder.name == 'singlehtml':\n+            return tuple()\n+        else:\n+            try:\n+                return env.toc_secnumbers[docname][target_node['ids'][0]]\n+            except (KeyError, TypeError):\n+                # no number assigned\n+                return tuple()\n+    else:\n+        try:\n+            if builder.name == 'singlehtml':\n+                key = \"%s/%s\" % (docname, figtype)\n+                return env.toc_fignumbers[builder.config.master_doc][key][target_node['ids'][0]]\n+            else:\n+                return env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n+        except (KeyError, TypeError):\n+            # no number assigned\n+            return tuple()\n             else:\n                 key = figtype\n \n",
    "variant_7": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..91715c010 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,34 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                figure_id = target_node['ids'][0]\n+                try:\n+                    return env.toc_secnumbers[docname][figure_id]\n+                except (KeyError, TypeError):\n+                    # target_node is found, but fignumber is not assigned.\n+                    # Maybe it is defined in orphaned document.\n+                    return tuple()\n+        else:\n+            figure_id = target_node['ids'][0]\n+            try:\n+                if builder.name == 'singlehtml':\n+                    alias = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][alias][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                # target_node is found, but fignumber is not assigned.\n+                # Maybe it is defined in orphaned document.\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..85a92ff3d 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,26 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+    def get_fignumber(self, env: BuildEnvironment, builder: Builder, figtype: str,\n+                      docname: str, target_node: Element) -> Optional[Tuple[int, ...]]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                figure_id = target_node['ids'][0]\n+                return env.toc_secnumbers.get(docname, {}).get(figure_id)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            if builder.name == 'singlehtml':\n+                # For singlehtml, use the flattened structure\n+                master_doc = builder.config.master_doc\n+                flattened_key = f\"{docname}/{figtype}\"\n+                return env.toc_fignumbers.get(master_doc, {}).get(flattened_key, {}).get(figure_id)\n+            else:\n+                return env.toc_fignumbers.get(docname, {}).get(figtype, {}).get(figure_id)\n             return contnode\n \n         try:\n@@ -1055,11 +1072,16 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1069,10 +1091,44 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            figure_id = target_node['ids'][0]\n+            \n+            if builder.name == 'singlehtml':\n+                # For singlehtml, use flattened structure with master_doc as top-level key\n+                master_doc = builder.config.master_doc\n+                flattened_figtype = f\"{docname}/{figtype}\"\n+                try:\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                except KeyError:\n+                    raise ValueError  # no number assigned\n+            else:\n+                # Standard nested structure for other builders\n+                try:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+                except KeyError:\n+                    raise ValueError  # no number assigned\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n-                return env.toc_fignumbers[docname][figtype][figure_id]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc as key\n+                    # and \"docname/figtype\" as the figure type key\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..a7aed48c0 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,33 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                secnumber = self.get_secnumber(env, docname, target_node)\n+                if secnumber:\n+                    return secnumber\n+                else:\n+                    return tuple()\n+        else:\n+            try:\n+                figure_id = target_node['ids'][0]\n+\n+                if builder.name == 'singlehtml':\n+                    key = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][key][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, IndexError):\n+                # target_node is found, but fignumber is not assigned.\n+                # Maybe it is defined in orphaned document.\n+                return tuple()\n             else:\n                 key = figtype\n \n",
    "variant_8": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cf063d60d 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,34 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+    def get_fignumber(self, env: BuildEnvironment, builder: \"Builder\", figtype: str,\n+                      docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                try:\n+                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n+                except (KeyError, TypeError):\n+                    # target_node is found, but not in toc_secnumbers (maybe generated\n+                    # by extensions)\n+                    return tuple()\n+        else:\n+            try:\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use the flattened structure\n+                    figure_id = target_node['ids'][0]\n+                    figtype_key = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][figtype_key][figure_id]\n+                else:\n+                    figure_id = target_node['ids'][0]\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                # target_node is found, but not in toc_fignumbers\n+                return tuple()\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..1d1ed25ba 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -851,9 +851,16 @@ class StandardDomain(Domain):\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+\n+        if figtype != 'section':\n+            try:\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure: master_doc -> \"docname/figtype\" -> figure_id\n+                    return env.toc_fignumbers[builder.config.master_doc][f\"{docname}/{figtype}\"][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n+            except (KeyError, TypeError):\n+                return None\n             return contnode\n \n         try:\n@@ -1055,11 +1062,16 @@ class StandardDomain(Domain):\n             figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))\n             return figtype\n \n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+\n     def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n                       figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n         if figtype == 'section':\n             if builder.name == 'latex':\n                 return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n             elif docname not in env.toc_secnumbers:\n                 raise ValueError  # no number assigned\n             else:\n@@ -1070,9 +1082,46 @@ class StandardDomain(Domain):\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n         else:\n-            try:\n+            if builder.name == 'singlehtml':\n+                master_doc = builder.config.master_doc\n+                if master_doc not in env.toc_fignumbers:\n+                    raise ValueError  # no number assigned\n+                flattened_figtype = f\"{docname}/{figtype}\"\n+                if flattened_figtype not in env.toc_fignumbers[master_doc]:\n+                    raise ValueError  # no number assigned\n+                figure_id = target_node['ids'][0]\n+                if figure_id not in env.toc_fignumbers[master_doc][flattened_figtype]:\n+                    raise ValueError  # no number assigned\n+                return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+            else:\n+                if docname not in env.toc_fignumbers:\n+                    raise ValueError  # no number assigned\n+                if figtype not in env.toc_fignumbers[docname]:\n+                    raise ValueError  # no number assigned\n                 figure_id = target_node['ids'][0]\n+                if figure_id not in env.toc_fignumbers[docname][figtype]:\n+                    raise ValueError  # no number assigned\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n+            elif docname not in env.toc_secnumbers:\n+                raise ValueError  # no number assigned\n+            else:\n+                anchorname = '#' + target_node['ids'][0]\n+                if anchorname not in env.toc_secnumbers[docname]:\n+                    # try first heading which has no anchor\n+                    return env.toc_secnumbers[docname].get('')\n+                else:\n+                    return env.toc_secnumbers[docname].get(anchorname)\n+\n+        else:\n+            try:\n+                figure_id = target_node['ids'][0]\n+                if builder.name == 'singlehtml':\n+                    # For singlehtml, use flattened structure with master_doc as key\n+                    master_doc = builder.config.master_doc\n+                    flattened_figtype = f\"{docname}/{figtype}\"\n+                    return env.toc_fignumbers[master_doc][flattened_figtype][figure_id]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..ac624ff67 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -308,8 +308,29 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n \n     def add_fignumber(self, node: Element) -> None:\n         def append_fignumber(figtype: str, figure_id: str) -> None:\n-            if self.builder.name == 'singlehtml':\n-                key = \"%s/%s\" % (self.docnames[-1], figtype)\n+\n+    def get_fignumber(self, env: \"BuildEnvironment\", builder: \"Builder\",\n+                      figtype: str, docname: str, target_node: Element) -> Tuple[int, ...]:\n+        if figtype == 'section':\n+            if builder.name == 'latex':\n+                return tuple()\n+            elif builder.name == 'singlehtml':\n+                return tuple()\n+            else:\n+                try:\n+                    return env.toc_secnumbers[docname][target_node['ids'][0]]\n+                except (KeyError, TypeError):\n+                    # XXX production lists??\n+                    return tuple()\n+        else:\n+            try:\n+                if builder.name == 'singlehtml':\n+                    key = \"%s/%s\" % (docname, figtype)\n+                    return env.toc_fignumbers[builder.config.master_doc][key][target_node['ids'][0]]\n+                else:\n+                    return env.toc_fignumbers[docname][figtype][target_node['ids'][0]]\n+            except (KeyError, TypeError):\n+                return tuple()\n             else:\n                 key = figtype\n \n"
  }
}