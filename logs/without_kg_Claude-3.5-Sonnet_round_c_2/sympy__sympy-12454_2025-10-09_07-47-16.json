{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sympy/sympy/matrices/matrices.py lines 1112-1115)": "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n",
    "Location 2 (/root/hy/projects_2/sympy/sympy/matrices/matrices.py lines 642-644)": "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sympy/sympy/matrices/matrices.py lines 1112-1115)": [
      "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n",
      "\n@property\ndef is_upper(self):\n    \"\"\"Checks if a matrix is an upper triangular matrix.\n\n    A matrix $M$ is upper triangular if $M_{i,j} = 0$\n    for $i > j$.\n\n    Examples\n    ========\n\n    >>> from sympy import Matrix\n    >>> m = Matrix(2, 2, [1, 0, 0, 1])\n    >>> m\n    Matrix([\n    [1, 0],\n    [0, 1]])\n    >>> m.is_upper\n    True\n\n    >>> m = Matrix(4, 3, [5, 1, 9, 0, 4, 6, 0, 0, 5, 0, 0, 0])\n    >>> m\n    Matrix([\n    [5, 1, 9],\n    [0, 4, 6],\n    [0, 0, 5],\n    [0, 0, 0]])\n    >>> m.is_upper\n    True\n\n    >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n    >>> m\n    Matrix([\n    [4, 2, 5],\n    [6, 1, 1]])\n    >>> m.is_upper\n    False\n\n    See Also\n    ========\n\n    is_lower\n    is_diagonal\n    is_upper_hessenberg\n    \"\"\"\n    return all(self[i, j].is_zero\n               for i in range(1, self.rows)\n               for j in range(min(i, self.cols)))\n",
      "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n",
      "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n",
      "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n",
      "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n",
      "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n",
      "\n        \"\"\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\n"
    ],
    "Location 2 (/root/hy/projects_2/sympy/sympy/matrices/matrices.py lines 642-644)": [
      "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n",
      "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n",
      "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n",
      "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n",
      "\ndef _eval_is_upper_hessenberg(self):\n    return all(self[i, j].is_zero\n               for i in range(2, self.rows)\n               for j in range(min(i - 1, self.cols)))\n",
      "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n",
      "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n",
      "\n    def _eval_is_upper_hessenberg(self):\n        return all(self[i, j].is_zero\n                   for i in range(2, self.rows)\n                   for j in range(min(i - 1, self.cols)))\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..4caa0f5267 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -639,9 +639,10 @@ def _eval_is_zero(self):\n         return True\n \n     def _eval_is_upper_hessenberg(self):\n+\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1110,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_0": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..ef479a76cb 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_1": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..ef479a76cb 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_2": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..44ba811790 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,54 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n-        \"\"\"\n-        return all(self[i, j].is_zero\n-                   for i in range(1, self.rows)\n-                   for j in range(i))\n+\n+@property\n+def is_upper(self):\n+    \"\"\"Checks if a matrix is an upper triangular matrix.\n+\n+    A matrix $M$ is upper triangular if $M_{i,j} = 0$\n+    for $i > j$.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Matrix\n+    >>> m = Matrix(2, 2, [1, 0, 0, 1])\n+    >>> m\n+    Matrix([\n+    [1, 0],\n+    [0, 1]])\n+    >>> m.is_upper\n+    True\n+\n+    >>> m = Matrix(4, 3, [5, 1, 9, 0, 4, 6, 0, 0, 5, 0, 0, 0])\n+    >>> m\n+    Matrix([\n+    [5, 1, 9],\n+    [0, 4, 6],\n+    [0, 0, 5],\n+    [0, 0, 0]])\n+    >>> m.is_upper\n+    True\n+\n+    >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n+    >>> m\n+    Matrix([\n+    [4, 2, 5],\n+    [6, 1, 1]])\n+    >>> m.is_upper\n+    False\n+\n+    See Also\n+    ========\n+\n+    is_lower\n+    is_diagonal\n+    is_upper_hessenberg\n+    \"\"\"\n+    return all(self[i, j].is_zero\n+               for i in range(1, self.rows)\n+               for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_3": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..ef479a76cb 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_4": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..ef479a76cb 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_5": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..28c476729d 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -639,9 +639,11 @@ def _eval_is_zero(self):\n         return True\n \n     def _eval_is_upper_hessenberg(self):\n-        return all(self[i, j].is_zero\n-                   for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+\n+def _eval_is_upper_hessenberg(self):\n+    return all(self[i, j].is_zero\n+               for i in range(2, self.rows)\n+               for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_6": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..ef479a76cb 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_7": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..ef479a76cb 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n",
    "variant_8": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..ef479a76cb 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -638,10 +638,12 @@ def _eval_is_zero(self):\n             return None\n         return True\n \n+    def _eval_is_upper_hessenberg(self):\n+\n     def _eval_is_upper_hessenberg(self):\n         return all(self[i, j].is_zero\n                    for i in range(2, self.rows)\n-                   for j in range(i - 1))\n+                   for j in range(min(i - 1, self.cols)))\n \n     def _eval_values(self):\n         return [i for i in self if not i.is_zero]\n@@ -1109,10 +1111,11 @@ def is_upper(self):\n         is_lower\n         is_diagonal\n         is_upper_hessenberg\n+\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n"
  }
}