{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/lookups.py lines 465-470)": "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/lookups.py lines 465-470)": [
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n",
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n",
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n",
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n",
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n",
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n",
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n",
      "\ndef as_sql(self, compiler, connection):\n    if not isinstance(self.rhs, bool):\n        raise TypeError(\n            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n            % (type(self.rhs).__name__, self.rhs)\n        )\n    sql, params = compiler.compile(self.lhs)\n    if self.rhs:\n        return \"%s IS NULL\" % sql, params\n    else:\n        return \"%s IS NOT NULL\" % sql, params\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..b9fb7f3f15 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,7 +462,13 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+\n     def as_sql(self, compiler, connection):\n+        if not isinstance(self.rhs, bool):\n+            raise TypeError(\n+                \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+                % (type(self.rhs).__name__, self.rhs)\n+            )\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n             return \"%s IS NULL\" % sql, params\n",
    "variant_0": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_1": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_2": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_3": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_4": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_5": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_6": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_7": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n",
    "variant_8": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6ad3700ace 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,12 +462,18 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n-    def as_sql(self, compiler, connection):\n-        sql, params = compiler.compile(self.lhs)\n-        if self.rhs:\n-            return \"%s IS NULL\" % sql, params\n-        else:\n-            return \"%s IS NOT NULL\" % sql, params\n+\n+def as_sql(self, compiler, connection):\n+    if not isinstance(self.rhs, bool):\n+        raise TypeError(\n+            \"The __isnull lookup requires a boolean value, got %s (%r).\" \n+            % (type(self.rhs).__name__, self.rhs)\n+        )\n+    sql, params = compiler.compile(self.lhs)\n+    if self.rhs:\n+        return \"%s IS NULL\" % sql, params\n+    else:\n+        return \"%s IS NOT NULL\" % sql, params\n \n \n @Field.register_lookup\n"
  }
}