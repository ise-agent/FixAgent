{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/flask/src/flask/cli.py lines 1016-1020)": "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    # Extract domain information for each rule\n    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n",
    "Location 2 (/root/hy/projects_2/flask/src/flask/cli.py lines 1021-1021)": "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
    "Location 3 (/root/hy/projects_2/flask/src/flask/cli.py lines 1022-1026)": "\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
    "Location 4 (/root/hy/projects_2/flask/src/flask/cli.py lines 1028-1028)": "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
    "Location 5 (/root/hy/projects_2/flask/src/flask/cli.py lines 1033-1034)": "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/flask/src/flask/cli.py lines 1016-1020)": [
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    # Extract domain information for each rule\n    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n",
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    # Construct domain information for each rule\n    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n",
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    rule_domains = [\n        f\"{rule.subdomain}.{current_app.config.get('SERVER_NAME', 'localhost')}\" \n        if getattr(rule, 'subdomain', None) \n        else current_app.config.get('SERVER_NAME', 'localhost')\n        for rule in rules\n    ]\n",
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    # Construct domain strings for each rule\n    server_name = current_app.config.get('SERVER_NAME', '')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain and server_name:\n            domain = f\"{subdomain}.{server_name}\"\n        elif server_name:\n            domain = server_name\n        else:\n            domain = \"\"\n        rule_domains.append(domain)\n",
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    # Construct domain strings for each rule\n    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n",
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    # Construct domain strings for each rule\n    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n",
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    # Extract domain information for each rule\n    server_name = current_app.config.get('SERVER_NAME', '')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n",
      "\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n    \n    # Extract domain information for each rule\n    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n    rule_domains = []\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n"
    ],
    "Location 2 (/root/hy/projects_2/flask/src/flask/cli.py lines 1021-1021)": [
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n"
    ],
    "Location 3 (/root/hy/projects_2/flask/src/flask/cli.py lines 1022-1026)": [
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    rule_domains = []\n    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    rule_domains = []\n    server_name = current_app.config.get('SERVER_NAME', '')\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\"\n        else:\n            domain = server_name\n        rule_domains.append(domain)\n\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    rule_domains = []\n    server_name = current_app.config.get('SERVER_NAME', '')\n    for rule in rules:\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            domain = f\"{subdomain}.{server_name}\" if server_name else subdomain\n        else:\n            domain = server_name if server_name else ''\n        rule_domains.append(domain)\n\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains) if rule_domains else 0,\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n"
    ],
    "Location 4 (/root/hy/projects_2/flask/src/flask/cli.py lines 1028-1028)": [
      "\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    rule_domains = [\n        f\"{rule.subdomain}.{current_app.config.get('SERVER_NAME', 'localhost')}\" if rule.subdomain \n        else current_app.config.get('SERVER_NAME', 'localhost')\n        for rule in rules\n    ]\n\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(domain) for domain in rule_domains),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n",
      "\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n"
    ],
    "Location 5 (/root/hy/projects_2/flask/src/flask/cli.py lines 1033-1034)": [
      "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    for rule, methods in zip(rules, rule_methods):\n        subdomain = getattr(rule, 'subdomain', None) or None\n        server_name = current_app.config.get('SERVER_NAME', 'localhost')\n        domain = f\"{subdomain}.{server_name}\" if subdomain else server_name\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..47f70b56 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,41 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Construct domain information for each rule\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_0": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..c352104a 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,41 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Extract domain information for each rule\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_1": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..ee1063f2 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,42 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Extract domain information for each rule\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_2": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..9d460694 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,72 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Construct domain information for each rule\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    rule_domains = []\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    rule_domains = [\n+        f\"{rule.subdomain}.{current_app.config.get('SERVER_NAME', 'localhost')}\" if rule.subdomain \n+        else current_app.config.get('SERVER_NAME', 'localhost')\n+        for rule in rules\n+    ]\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    widths = (\n+        max(len(domain) for domain in rule_domains),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_3": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..105709ca 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,38 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    rule_domains = [\n+        f\"{rule.subdomain}.{current_app.config.get('SERVER_NAME', 'localhost')}\" \n+        if getattr(rule, 'subdomain', None) \n+        else current_app.config.get('SERVER_NAME', 'localhost')\n+        for rule in rules\n+    ]\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_4": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..04b1d10b 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,54 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Construct domain strings for each rule\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain and server_name:\n+            domain = f\"{subdomain}.{server_name}\"\n+        elif server_name:\n+            domain = server_name\n+        else:\n+            domain = \"\"\n+        rule_domains.append(domain)\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    rule_domains = []\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_5": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..2d4784d5 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,42 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Construct domain strings for each rule\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_6": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..57022964 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,42 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Construct domain strings for each rule\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_7": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..ef62d09c 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,52 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Extract domain information for each rule\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    rule_domains = []\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\" if server_name else subdomain\n+        else:\n+            domain = server_name if server_name else ''\n+        rule_domains.append(domain)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains) if rule_domains else 0,\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_8": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..68035de1 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,45 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n+    \n+    # Extract domain information for each rule\n+    server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+    rule_domains = []\n+    for rule in rules:\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            domain = f\"{subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        rule_domains.append(domain)\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n+\n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        subdomain = getattr(rule, 'subdomain', None) or None\n+        server_name = current_app.config.get('SERVER_NAME', 'localhost')\n+        domain = f\"{subdomain}.{server_name}\" if subdomain else server_name\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n"
  }
}