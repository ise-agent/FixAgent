{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/serializer.py lines 124-131)": "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined enum flags (when name is None)\n        if self.value.name is None:\n            # Use _decompose to get individual flag components\n            flag_names = []\n            for flag in enum._decompose(enum_class, self.value)[0]:\n                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n            return \" | \".join(flag_names), {\"import %s\" % module}\n        \n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
    "Location 2 (/root/hy/projects_2/django/tests/migrations/test_writer.py lines 390-415)": "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flag\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        field_combined = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string_combined = MigrationWriter.serialize(field_combined)[0]\n        self.assertEqual(\n            string_combined,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/serializer.py lines 124-131)": [
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined enum flags (when name is None)\n        if self.value.name is None:\n            # Use _decompose to get individual flag names\n            flag_names = []\n            for flag in enum._decompose(enum_class, self.value)[0]:\n                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n            return (\n                \" | \".join(flag_names),\n                {\"import %s\" % module},\n            )\n        \n        # Handle simple enum values\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined enum flags (when name is None)\n        if self.value.name is None:\n            # Use _decompose to get individual flag names\n            flag_names = []\n            for flag in enum._decompose(enum_class, self.value)[0]:\n                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n            return (\n                \" | \".join(flag_names),\n                {\"import %s\" % module},\n            )\n        \n        # Handle simple enum values\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined enum flags (when name is None)\n        if self.value.name is None:\n            # Use _decompose to get individual flag names\n            flag_names = enum._decompose(enum_class, self.value)[1]\n            if flag_names:\n                # Create OR-ed expression of individual flags\n                flag_parts = [\"%s.%s[%r]\" % (module, enum_class.__qualname__, name) \n                             for name in flag_names]\n                return \" | \".join(flag_parts), {\"import %s\" % module}\n        \n        # Handle simple enum values (existing behavior)\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined enum flags (when name is None)\n        if self.value.name is None:\n            # Use _decompose to get individual flag names\n            individual_flags = enum._decompose(enum_class, self.value)[1]\n            if individual_flags:\n                flag_strings = [\n                    \"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name)\n                    for flag in individual_flags\n                ]\n                return (\n                    \" | \".join(flag_strings),\n                    {\"import %s\" % module},\n                )\n        \n        # Handle simple enum values (existing behavior)\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined enum flags (when name is None)\n        if self.value.name is None:\n            # Use _decompose to get individual flag names\n            flag_names = []\n            for flag in enum._decompose(enum_class, self.value)[0]:\n                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n            return (\n                \" | \".join(flag_names),\n                {\"import %s\" % module},\n            )\n        \n        # Handle simple enum values\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined flags where .name is None\n        if self.value.name is None:\n            # Use _decompose to get individual flag names\n            flag_names = enum._decompose(enum_class, self.value)[1]\n            if flag_names:\n                # Create OR expression for combined flags\n                flag_parts = [\"%s.%s[%r]\" % (module, enum_class.__qualname__, name) for name in flag_names]\n                return \" | \".join(flag_parts), {\"import %s\" % module}\n        \n        # Handle simple enum values with a name\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined enum flags (when name is None)\n        if self.value.name is None:\n            # Use enum._decompose to get individual flag names\n            flag_names = [flag.name for flag in enum._decompose(enum_class, self.value)[1]]\n            if flag_names:\n                # Create OR-ed expression for combined flags\n                flag_expressions = [\"%s.%s[%r]\" % (module, enum_class.__qualname__, name) for name in flag_names]\n                return \" | \".join(flag_expressions), {\"import %s\" % module}\n        \n        # Handle simple enum values (existing behavior)\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n",
      "\nclass EnumSerializer(BaseSerializer):\n    def serialize(self):\n        enum_class = self.value.__class__\n        module = enum_class.__module__\n        \n        # Handle combined flags (when name is None)\n        if self.value.name is None:\n            # Use _decompose to get individual flag names\n            decomposed_flags, _ = enum._decompose(enum_class, self.value)\n            if decomposed_flags:\n                flag_strings = []\n                for flag in decomposed_flags:\n                    flag_strings.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n                return \" | \".join(flag_strings), {\"import %s\" % module}\n        \n        # Handle simple enum values\n        return (\n            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n            {\"import %s\" % module},\n        )\n"
    ],
    "Location 2 (/root/hy/projects_2/django/tests/migrations/test_writer.py lines 390-415)": [
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        combined_field = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        combined_string = MigrationWriter.serialize(combined_field)[0]\n        self.assertEqual(\n            combined_string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n",
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined enum flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined enum flag default\n        combined_field = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        combined_string = MigrationWriter.serialize(combined_field)[0]\n        self.assertEqual(\n            combined_string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n",
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        field_combined = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string_combined = MigrationWriter.serialize(field_combined)[0]\n        self.assertEqual(\n            string_combined,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n",
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        field_combined = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string_combined = MigrationWriter.serialize(field_combined)[0]\n        self.assertEqual(\n            string_combined,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n",
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        combined_field = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        combined_string = MigrationWriter.serialize(combined_field)[0]\n        self.assertEqual(\n            combined_string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n",
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        combined_field = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        combined_string = MigrationWriter.serialize(combined_field)[0]\n        self.assertEqual(\n            combined_string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n",
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        field_combined = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string_combined = MigrationWriter.serialize(field_combined)[0]\n        self.assertEqual(\n            string_combined,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n",
      "\n    def test_serialize_enum_flags(self):\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A,\n            (\n                \"migrations.test_writer.IntFlagEnum['A']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        self.assertSerializedResultEqual(\n            IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        # Test combined flags\n        self.assertSerializedResultEqual(\n            IntFlagEnum.A | IntFlagEnum.B,\n            (\n                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n                {\"import migrations.test_writer\"},\n            ),\n        )\n        field = models.IntegerField(\n            default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string = MigrationWriter.serialize(field)[0]\n        self.assertEqual(\n            string,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'])\",\n        )\n        # Test field with combined flag default\n        field_combined = models.IntegerField(\n            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n        )\n        string_combined = MigrationWriter.serialize(field_combined)[0]\n        self.assertEqual(\n            string_combined,\n            \"models.IntegerField(choices=[\"\n            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..8214b000b4 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,25 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when .name is None)\n+        if self.value.name is None:\n+            # Use enum._decompose to get individual flag names\n+            decomposed_flags, _ = enum._decompose(enum_class, self.value)\n+            flag_parts = []\n+            for flag in decomposed_flags:\n+                flag_parts.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n+            return (\n+                \" | \".join(flag_parts),\n+                {\"import %s\" % module},\n+            )\n+        \n+        # Handle simple (non-combined) enum values\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..e696789f10 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,16 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        \n+        # Test combined enum flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n+        \n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +424,19 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        \n+        # Test field with combined enum flag default\n+        combined_field = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        combined_string = MigrationWriter.serialize(combined_field)[0]\n+        self.assertEqual(\n+            combined_string,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_0": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..fb45e28ee1 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,20 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when name is None)\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag components\n+            flag_names = []\n+            for flag in enum._decompose(enum_class, self.value)[0]:\n+                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n+            return \" | \".join(flag_names), {\"import %s\" % module}\n+        \n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..f3786d8acc 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flag\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        field_combined = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        string_combined = MigrationWriter.serialize(field_combined)[0]\n+        self.assertEqual(\n+            string_combined,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_1": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..2c67f18d90 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,24 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when name is None)\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag names\n+            flag_names = []\n+            for flag in enum._decompose(enum_class, self.value)[0]:\n+                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n+            return (\n+                \" | \".join(flag_names),\n+                {\"import %s\" % module},\n+            )\n+        \n+        # Handle simple enum values\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..7bbaaa83f9 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        combined_field = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        combined_string = MigrationWriter.serialize(combined_field)[0]\n+        self.assertEqual(\n+            combined_string,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_2": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..2c67f18d90 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,24 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when name is None)\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag names\n+            flag_names = []\n+            for flag in enum._decompose(enum_class, self.value)[0]:\n+                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n+            return (\n+                \" | \".join(flag_names),\n+                {\"import %s\" % module},\n+            )\n+        \n+        # Handle simple enum values\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..e1470ae1ce 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined enum flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined enum flag default\n+        combined_field = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        combined_string = MigrationWriter.serialize(combined_field)[0]\n+        self.assertEqual(\n+            combined_string,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_3": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..6598263a83 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,23 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when name is None)\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag names\n+            flag_names = enum._decompose(enum_class, self.value)[1]\n+            if flag_names:\n+                # Create OR-ed expression of individual flags\n+                flag_parts = [\"%s.%s[%r]\" % (module, enum_class.__qualname__, name) \n+                             for name in flag_names]\n+                return \" | \".join(flag_parts), {\"import %s\" % module}\n+        \n+        # Handle simple enum values (existing behavior)\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..1b94cca0ec 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        field_combined = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        string_combined = MigrationWriter.serialize(field_combined)[0]\n+        self.assertEqual(\n+            string_combined,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_4": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..6ba045dcbf 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,27 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when name is None)\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag names\n+            individual_flags = enum._decompose(enum_class, self.value)[1]\n+            if individual_flags:\n+                flag_strings = [\n+                    \"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name)\n+                    for flag in individual_flags\n+                ]\n+                return (\n+                    \" | \".join(flag_strings),\n+                    {\"import %s\" % module},\n+                )\n+        \n+        # Handle simple enum values (existing behavior)\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..1b94cca0ec 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        field_combined = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        string_combined = MigrationWriter.serialize(field_combined)[0]\n+        self.assertEqual(\n+            string_combined,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_5": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..2c67f18d90 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,24 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when name is None)\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag names\n+            flag_names = []\n+            for flag in enum._decompose(enum_class, self.value)[0]:\n+                flag_names.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n+            return (\n+                \" | \".join(flag_names),\n+                {\"import %s\" % module},\n+            )\n+        \n+        # Handle simple enum values\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..7bbaaa83f9 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        combined_field = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        combined_string = MigrationWriter.serialize(combined_field)[0]\n+        self.assertEqual(\n+            combined_string,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_6": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..90a8453e99 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,22 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined flags where .name is None\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag names\n+            flag_names = enum._decompose(enum_class, self.value)[1]\n+            if flag_names:\n+                # Create OR expression for combined flags\n+                flag_parts = [\"%s.%s[%r]\" % (module, enum_class.__qualname__, name) for name in flag_names]\n+                return \" | \".join(flag_parts), {\"import %s\" % module}\n+        \n+        # Handle simple enum values with a name\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..7bbaaa83f9 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        combined_field = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        combined_string = MigrationWriter.serialize(combined_field)[0]\n+        self.assertEqual(\n+            combined_string,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_7": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..cac0774076 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,22 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined enum flags (when name is None)\n+        if self.value.name is None:\n+            # Use enum._decompose to get individual flag names\n+            flag_names = [flag.name for flag in enum._decompose(enum_class, self.value)[1]]\n+            if flag_names:\n+                # Create OR-ed expression for combined flags\n+                flag_expressions = [\"%s.%s[%r]\" % (module, enum_class.__qualname__, name) for name in flag_names]\n+                return \" | \".join(flag_expressions), {\"import %s\" % module}\n+        \n+        # Handle simple enum values (existing behavior)\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..1b94cca0ec 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        field_combined = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        string_combined = MigrationWriter.serialize(field_combined)[0]\n+        self.assertEqual(\n+            string_combined,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
    "variant_8": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..c05a3570e2 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,10 +121,23 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        \n+        # Handle combined flags (when name is None)\n+        if self.value.name is None:\n+            # Use _decompose to get individual flag names\n+            decomposed_flags, _ = enum._decompose(enum_class, self.value)\n+            if decomposed_flags:\n+                flag_strings = []\n+                for flag in decomposed_flags:\n+                    flag_strings.append(\"%s.%s[%r]\" % (module, enum_class.__qualname__, flag.name))\n+                return \" | \".join(flag_strings), {\"import %s\" % module}\n+        \n+        # Handle simple enum values\n         return (\n             \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n             {\"import %s\" % module},\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bad8775d4e..1b94cca0ec 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -387,6 +387,7 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -402,6 +403,14 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+        # Test combined flags\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n@@ -413,6 +422,18 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        # Test field with combined flag default\n+        field_combined = models.IntegerField(\n+            default=IntFlagEnum.A | IntFlagEnum.B, choices=[(m.value, m) for m in IntFlagEnum]\n+        )\n+        string_combined = MigrationWriter.serialize(field_combined)[0]\n+        self.assertEqual(\n+            string_combined,\n+            \"models.IntegerField(choices=[\"\n+            \"(1, migrations.test_writer.IntFlagEnum['A']), \"\n+            \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n+            \"default=migrations.test_writer.IntFlagEnum['A'] | migrations.test_writer.IntFlagEnum['B'])\",\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n"
  }
}