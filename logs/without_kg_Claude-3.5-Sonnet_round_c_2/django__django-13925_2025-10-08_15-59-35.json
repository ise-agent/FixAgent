{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/options.py lines 271-283)": "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
    "Location 2 (/root/hy/projects_2/django/django/db/models/base.py lines 1314-1320)": "\n        # Promote the first parent's pk to concrete primary key.\n        if field.primary_key:\n            field.primary_key = True\n            field.auto_created = False\n            break\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/options.py lines 271-283)": [
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n",
      "\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/db/models/base.py lines 1314-1320)": [
      "\n        # Promote the first parent field with primary_key=True to be the child's\n        # primary key field.\n        if field.primary_key:\n            field.primary_key = True\n            field.auto_created = False\n            break\n",
      "\n        # Promote the first parent key field if no primary key was found.\n        if base_list:\n            field = base_list[0]\n            field.primary_key = True\n            field.auto_created = False\n            cls.add_to_class(field.name, field)\n",
      "\n        # Promote the first parent key\n        field = self.get_field(pkfield.name)\n        field.primary_key = True\n        field.auto_created = False\n        self.setup_pk(field)\n",
      "\n        if pk_class is None:\n            pk_class = self._get_default_pk_class()\n\n        pk = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n        pk.set_attributes_from_name('id')\n        self.add_field(pk, private=True)\n\n    def _prepare(self):\n        \"\"\"\n        Creates some methods once self._meta has been populated.\n        \"\"\"\n        opts = self._meta\n        opts._prepare(self)\n\n        if opts.order_with_respect_to:\n            opts.add_field(OrderWrt(), private=True)\n            opts.ordering = ('_order',)\n\n        if not opts.abstract:\n            if any(f.primary_key for f in opts.local_fields):\n                # The user provided a primary key\n                pass\n            elif not opts.parents:\n                # No parents and no user-provided primary key\n                if opts.auto_field:\n                    auto_field = opts.auto_field\n                    if isinstance(auto_field, str):\n                        auto_field = opts.get_field(auto_field)\n                    auto_field.primary_key = True\n                else:\n                    self.add_to_class('id', self._meta.pk_class())\n            else:\n                # This model is a child via multi-table inheritance;\n                # find the first parent field that can be promoted to PK.\n                for field in chain(opts.parents.values(), opts.local_fields):\n                    field.primary_key = True\n                    field.auto_created = False\n                    break\n",
      "\n        if pk_fields:\n            pk = pk_fields[0]\n            pk.primary_key = True\n            pk.auto_created = False\n            self.setup_pk(pk)\n",
      "\n    def _prepare(self, model):\n        if self.order_with_respect_to:\n            # The app registry will not be ready at this point, so we cannot\n            # use get_field().\n            query_name = None\n            try:\n                query_name = self.order_with_respect_to.related_query_name()\n            except AttributeError:\n                query_name = self.order_with_respect_to.name + 's'\n            self.ordering = ('_order',)\n            if not any(isinstance(field, OrderWrt) for field in model._meta.local_fields):\n                model.add_to_class('_order', OrderWrt())\n        else:\n            self.order_with_respect_to = None\n\n        if self.pk is None:\n            if self.parents:\n                # Promote the first parent link in lieu of adding yet another\n                # field.\n                field = next(iter(self.parents.values()))\n                # Look for a local field with the same name as the\n                # first parent link. If a local field has already been\n                # created, use it instead of promoting the parent\n                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                if already_created:\n                    field = already_created[0]\n                field.primary_key = True\n                field.auto_created = False\n                self.setup_pk(field)\n            else:\n                pk_class = self._get_default_pk_class()\n                pk = pk_class(name='id', primary_key=True, auto_created=True)\n                model.add_to_class('id', pk)\n",
      "\n        # Promote the first parent key field to be the new model's pk\n        # field.\n        if field.primary_key:\n            field.primary_key = False\n        field.primary_key = True\n        field.auto_created = False\n        opts.setup_pk(field)\n        return field\n",
      "\n        # Promote the first parent field with a matching name to a primary\n        # key, same as if it were declared with primary_key=True.\n        field = field_dict[pkfield.name]\n        field.primary_key = True\n        field.auto_created = False\n        self.setup_pk(field)\n        return\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..ad07449015 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,6 +1311,7 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n+\n                         f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                     ),\n                     obj=cls,\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_0": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..33ce6b7c3e 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,12 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        # Promote the first parent's pk to concrete primary key.\n+        if field.primary_key:\n+            field.primary_key = True\n+            field.auto_created = False\n+            break\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_1": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..f99c992eb9 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,13 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        # Promote the first parent field with primary_key=True to be the child's\n+        # primary key field.\n+        if field.primary_key:\n+            field.primary_key = True\n+            field.auto_created = False\n+            break\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_2": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..256a426a70 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,13 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        # Promote the first parent key field if no primary key was found.\n+        if base_list:\n+            field = base_list[0]\n+            field.primary_key = True\n+            field.auto_created = False\n+            cls.add_to_class(field.name, field)\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_3": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..f60bd63a80 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,12 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        # Promote the first parent key\n+        field = self.get_field(pkfield.name)\n+        field.primary_key = True\n+        field.auto_created = False\n+        self.setup_pk(field)\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_4": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..453bac74d5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,45 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        if pk_class is None:\n+            pk_class = self._get_default_pk_class()\n+\n+        pk = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n+        pk.set_attributes_from_name('id')\n+        self.add_field(pk, private=True)\n+\n+    def _prepare(self):\n+        \"\"\"\n+        Creates some methods once self._meta has been populated.\n+        \"\"\"\n+        opts = self._meta\n+        opts._prepare(self)\n+\n+        if opts.order_with_respect_to:\n+            opts.add_field(OrderWrt(), private=True)\n+            opts.ordering = ('_order',)\n+\n+        if not opts.abstract:\n+            if any(f.primary_key for f in opts.local_fields):\n+                # The user provided a primary key\n+                pass\n+            elif not opts.parents:\n+                # No parents and no user-provided primary key\n+                if opts.auto_field:\n+                    auto_field = opts.auto_field\n+                    if isinstance(auto_field, str):\n+                        auto_field = opts.get_field(auto_field)\n+                    auto_field.primary_key = True\n+                else:\n+                    self.add_to_class('id', self._meta.pk_class())\n+            else:\n+                # This model is a child via multi-table inheritance;\n+                # find the first parent field that can be promoted to PK.\n+                for field in chain(opts.parents.values(), opts.local_fields):\n+                    field.primary_key = True\n+                    field.auto_created = False\n+                    break\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_5": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..9c1cddadc1 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,12 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        if pk_fields:\n+            pk = pk_fields[0]\n+            pk.primary_key = True\n+            pk.auto_created = False\n+            self.setup_pk(pk)\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_6": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..e2155f61b1 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,40 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+    def _prepare(self, model):\n+        if self.order_with_respect_to:\n+            # The app registry will not be ready at this point, so we cannot\n+            # use get_field().\n+            query_name = None\n+            try:\n+                query_name = self.order_with_respect_to.related_query_name()\n+            except AttributeError:\n+                query_name = self.order_with_respect_to.name + 's'\n+            self.ordering = ('_order',)\n+            if not any(isinstance(field, OrderWrt) for field in model._meta.local_fields):\n+                model.add_to_class('_order', OrderWrt())\n+        else:\n+            self.order_with_respect_to = None\n+\n+        if self.pk is None:\n+            if self.parents:\n+                # Promote the first parent link in lieu of adding yet another\n+                # field.\n+                field = next(iter(self.parents.values()))\n+                # Look for a local field with the same name as the\n+                # first parent link. If a local field has already been\n+                # created, use it instead of promoting the parent\n+                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n+                if already_created:\n+                    field = already_created[0]\n+                field.primary_key = True\n+                field.auto_created = False\n+                self.setup_pk(field)\n+            else:\n+                pk_class = self._get_default_pk_class()\n+                pk = pk_class(name='id', primary_key=True, auto_created=True)\n+                model.add_to_class('id', pk)\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_7": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..b62d7bde04 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,15 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        # Promote the first parent key field to be the new model's pk\n+        # field.\n+        if field.primary_key:\n+            field.primary_key = False\n+        field.primary_key = True\n+        field.auto_created = False\n+        opts.setup_pk(field)\n+        return field\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n",
    "variant_8": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..2f6ed4d174 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1311,13 +1311,14 @@ class Model(metaclass=ModelBase):\n                         f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                         f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                         f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n-        return []\n+\n+        # Promote the first parent field with a matching name to a primary\n+        # key, same as if it were declared with primary_key=True.\n+        field = field_dict[pkfield.name]\n+        field.primary_key = True\n+        field.auto_created = False\n+        self.setup_pk(field)\n+        return\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..8fae06f705 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -280,6 +281,7 @@ class Options:\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n+                field.auto_created = False\n                 self.setup_pk(field)\n             else:\n                 pk_class = self._get_default_pk_class()\n"
  }
}