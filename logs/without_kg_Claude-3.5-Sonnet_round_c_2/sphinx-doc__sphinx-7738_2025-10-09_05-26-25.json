{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 320-329)": "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 879-894)": "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
    "Location 3 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 578-583)": "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
    "Location 4 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 250-258)": "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        is_attribute: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 320-329)": [
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n"
    ],
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 879-894)": [
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n"
    ],
    "Location 3 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 578-583)": [
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(field_type='attribute'):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(field_type='attribute'):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(field_type='attribute'):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n"
    ],
    "Location 4 (/root/hy/projects_2/sphinx/sphinx/ext/napoleon/docstring.py lines 250-258)": [
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        is_attribute: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        is_attribute: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        is_attribute: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n                        escape_trailing_underscore: bool = True\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type, escape_trailing_underscore)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..a1ac3718d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,14 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        escape_trailing_underscore: bool = True\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, escape_trailing_underscore)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +578,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +880,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +890,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_0": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..c0bd6028d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,14 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        is_attribute: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +578,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +880,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +890,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_1": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..bf487b3e6 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,13 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n-                        ) -> List[Tuple[str, str, List[str]]]:\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +318,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +577,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +879,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +889,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_2": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..4d67ebf9c 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,13 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n-                        ) -> List[Tuple[str, str, List[str]]]:\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +318,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +577,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(field_type='attribute'):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +879,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +889,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_3": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..4d67ebf9c 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,13 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n-                        ) -> List[Tuple[str, str, List[str]]]:\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +318,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +577,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(field_type='attribute'):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +879,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +889,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_4": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..bf487b3e6 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,13 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n-                        ) -> List[Tuple[str, str, List[str]]]:\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        field_type: str = 'parameter') -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, field_type)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +318,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +577,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +879,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +889,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_5": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..e5a8abdff 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,14 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        is_attribute: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +578,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(field_type='attribute'):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +880,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +890,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_6": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..c0bd6028d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,14 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        is_attribute: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +578,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +880,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +890,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_7": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..c0bd6028d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,14 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        is_attribute: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, is_attribute)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +578,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +880,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +890,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
    "variant_8": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..5f30e4687 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -247,12 +247,14 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False,\n+                        escape_trailing_underscore: bool = True\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n         fields = []\n         while not self._is_section_break():\n-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n+            _name, _type, _desc = self._consume_field(parse_type, prefer_type, escape_trailing_underscore)\n             if _name or _type or _desc:\n                 fields.append((_name, _type, _desc,))\n         return fields\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +578,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(is_attribute=True):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -876,7 +880,9 @@ class NumpyDocstring(GoogleDocstring):\n         self._directive_sections = ['.. index::']\n         super().__init__(docstring, config, app, what, name, obj, options)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -884,7 +890,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n"
  }
}