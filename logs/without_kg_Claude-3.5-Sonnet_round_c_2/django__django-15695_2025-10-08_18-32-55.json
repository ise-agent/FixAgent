{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/operations/models.py lines 968-986)": "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to rename back to the original auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Generate the original auto-generated name that would have been used\n            old_index = models.Index(fields=self.old_fields, name=\"\")\n            old_index.set_name_with_model(model)\n            \n            schema_editor.rename_index(model, new_index, old_index)\n        else:\n            # For named indexes, swap the names and call database_forwards\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/operations/models.py lines 968-986)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.old_fields:\n            # For unnamed index, we need to rename back to the auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            # Find the index with the new name\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Create the original auto-generated index with old_fields\n            old_index = models.Index(fields=self.old_fields)\n            # Generate the auto-generated name for the original index\n            old_index.set_name_with_model(model)\n            \n            schema_editor.rename_index(model, new_index, old_index)\n        else:\n            # For named index, swap names and call forwards\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.old_fields:\n            # For unnamed indexes, we need to rename back to the auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            to_model_state = to_state.models[app_label, self.model_name_lower]\n            # Find the auto-generated index that matches our old_fields\n            matching_index_name = to_model_state.get_index_by_name(None, self.old_fields)\n            old_index = to_model_state.get_index_by_name(matching_index_name[0])\n            \n            schema_editor.rename_index(model, new_index, old_index)\n        else:\n            # For named indexes, swap the names and call database_forwards\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.old_fields:\n            # For unnamed indexes, we need to find the index with the new name\n            # and rename it back to the original auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            to_model_state = to_state.models[app_label, self.model_name_lower]\n            \n            # Find the index with the new name in the from_state\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Get the original auto-generated index from to_state\n            old_index = None\n            for index in to_model_state.options.indexes:\n                if (\n                    not index.name and\n                    index.fields == self.old_fields and\n                    getattr(index, 'opclasses', []) == getattr(new_index, 'opclasses', []) and\n                    getattr(index, 'condition', None) == getattr(new_index, 'condition', None)\n                ):\n                    old_index = index.clone()\n                    old_index.set_name_with_model(model)\n                    break\n            \n            if old_index:\n                schema_editor.rename_index(model, new_index, old_index)\n        else:\n            # For named indexes, swap the names and call database_forwards\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.old_fields:\n            # For unnamed indexes, we need to rename back to the original auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            to_model_state = to_state.models[app_label, self.model_name_lower]\n            # Find the original auto-generated index name by looking for an index with matching fields\n            old_index = None\n            for index in to_model_state.options.get(\"indexes\", []):\n                if (\n                    list(index.fields) == self.old_fields\n                    and index.name != self.new_name\n                ):\n                    old_index = index\n                    break\n            \n            if old_index:\n                schema_editor.rename_index(model, new_index, old_index)\n        else:\n            # For named indexes, swap the names and call database_forwards\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    model = from_state.apps.get_model(app_label, self.model_name)\n    if self.old_fields:\n        # For unnamed indexes, we need to rename back to the original auto-generated name\n        from_model_state = from_state.models[app_label, self.model_name_lower]\n        # Get the index with the new name from the from_state\n        new_index = from_model_state.get_index_by_name(self.new_name)\n        \n        # Get the to_state to find what the original auto-generated name should be\n        to_model_state = to_state.models[app_label, self.model_name_lower]\n        # Find the index that matches our fields in the to_state\n        matching_index = None\n        for index in to_model_state.options.get(\"indexes\", []):\n            if (\n                index.fields == list(self.old_fields) and\n                not index.name\n            ):\n                matching_index = index\n                break\n        \n        if matching_index:\n            # Create the auto-generated name that would be used\n            old_index = matching_index.clone()\n            old_index.set_name_with_model(model)\n            schema_editor.rename_index(model, new_index, old_index)\n    else:\n        # For named indexes, swap the names and call database_forwards\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    if self.old_fields:\n        # For unnamed indexes, we need to restore the original auto-generated name\n        model = from_state.apps.get_model(app_label, self.model_name)\n        \n        # Find the current index with the new name\n        from_model_state = from_state.models[app_label, self.model_name_lower]\n        current_index = from_model_state.get_index_by_name(self.new_name)\n        \n        # Create the original auto-generated index with old_fields\n        original_index = models.Index(fields=self.old_fields)\n        original_index.set_name_with_model(model)\n        \n        # Rename from new_name back to the original auto-generated name\n        schema_editor.rename_index(model, current_index, original_index)\n    else:\n        # For named indexes, swap the names and call database_forwards\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to rename back to the original auto-generated name\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            # Find the index with the new name\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Create a temporary index with the old fields to get the original auto-generated name\n            temp_index = models.Index(fields=self.old_fields)\n            temp_index.set_name_with_model(model)\n            old_name = temp_index.name\n            \n            # Create an index object with the original auto-generated name\n            old_index = models.Index(fields=self.old_fields, name=old_name)\n            \n            schema_editor.rename_index(model, new_index, old_index)\n        else:\n            # For named indexes, swap the names and call database_forwards\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.old_fields:\n            # For unnamed indexes, we need to rename back to the auto-generated name\n            to_model_state = to_state.models[app_label, self.model_name_lower]\n            from_model_state = from_state.models[app_label, self.model_name_lower]\n            \n            # Find the index with the new name in the from_state\n            new_index = from_model_state.get_index_by_name(self.new_name)\n            \n            # Generate what the old auto-generated name would have been\n            old_index = models.Index(fields=self.old_fields, name=\"\")\n            old_index.set_name_with_model(model)\n            \n            schema_editor.rename_index(model, new_index, old_index)\n        else:\n            # For named indexes, swap the names and call database_forwards\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..a5087d7204 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,50 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n+        if self.old_fields:\n+            # For unnamed indexes, we need to rename back to the original auto-generated name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            # Find the original auto-generated index name that would exist in to_state\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            # Create index objects for the rename operation\n+            current_index = models.Index(\n+                fields=self.old_fields,\n+                name=self.new_name,\n+            )\n+            original_index = models.Index(\n+                fields=self.old_fields,\n+                name=matching_index_name[0],\n+            )\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, create the reverse operation without mutating instance\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            current_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            original_index = to_model_state.get_index_by_name(self.old_name)\n+            \n+            schema_editor.rename_index(model, current_index, original_index)\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..b975791c42 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,37 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        if self.old_fields:\n+            # For unnamed indexes, we need to rename back to the original auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Generate the original auto-generated name that would have been used\n+            old_index = models.Index(fields=self.old_fields, name=\"\")\n+            old_index.set_name_with_model(model)\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n+        else:\n+            # For named indexes, swap the names and call database_forwards\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..f840f45a19 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,36 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            # For unnamed index, we need to rename back to the auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            # Find the index with the new name\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Create the original auto-generated index with old_fields\n+            old_index = models.Index(fields=self.old_fields)\n+            # Generate the auto-generated name for the original index\n+            old_index.set_name_with_model(model)\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n+        else:\n+            # For named index, swap names and call forwards\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..da4a1d43ba 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,35 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            # For unnamed indexes, we need to rename back to the auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            # Find the auto-generated index that matches our old_fields\n+            matching_index_name = to_model_state.get_index_by_name(None, self.old_fields)\n+            old_index = to_model_state.get_index_by_name(matching_index_name[0])\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n+        else:\n+            # For named indexes, swap the names and call database_forwards\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..d6a719fe22 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,48 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            # For unnamed indexes, we need to find the index with the new name\n+            # and rename it back to the original auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            \n+            # Find the index with the new name in the from_state\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Get the original auto-generated index from to_state\n+            old_index = None\n+            for index in to_model_state.options.indexes:\n+                if (\n+                    not index.name and\n+                    index.fields == self.old_fields and\n+                    getattr(index, 'opclasses', []) == getattr(new_index, 'opclasses', []) and\n+                    getattr(index, 'condition', None) == getattr(new_index, 'condition', None)\n+                ):\n+                    old_index = index.clone()\n+                    old_index.set_name_with_model(model)\n+                    break\n+            \n+            if old_index:\n+                schema_editor.rename_index(model, new_index, old_index)\n+        else:\n+            # For named indexes, swap the names and call database_forwards\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..80b2ccbfe1 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,42 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            # For unnamed indexes, we need to rename back to the original auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            # Find the original auto-generated index name by looking for an index with matching fields\n+            old_index = None\n+            for index in to_model_state.options.get(\"indexes\", []):\n+                if (\n+                    list(index.fields) == self.old_fields\n+                    and index.name != self.new_name\n+                ):\n+                    old_index = index\n+                    break\n+            \n+            if old_index:\n+                schema_editor.rename_index(model, new_index, old_index)\n+        else:\n+            # For named indexes, swap the names and call database_forwards\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..f3c3321dcb 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,11 +965,34 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n \n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    model = from_state.apps.get_model(app_label, self.model_name)\n+    if self.old_fields:\n+        # For unnamed indexes, we need to rename back to the original auto-generated name\n+        from_model_state = from_state.models[app_label, self.model_name_lower]\n+        # Get the index with the new name from the from_state\n+        new_index = from_model_state.get_index_by_name(self.new_name)\n+        \n+        # Get the to_state to find what the original auto-generated name should be\n+        to_model_state = to_state.models[app_label, self.model_name_lower]\n+        # Find the index that matches our fields in the to_state\n+        matching_index = None\n+        for index in to_model_state.options.get(\"indexes\", []):\n+            if (\n+                index.fields == list(self.old_fields) and\n+                not index.name\n+            ):\n+                matching_index = index\n+                break\n+        \n+        if matching_index:\n+            # Create the auto-generated name that would be used\n+            old_index = matching_index.clone()\n+            old_index.set_name_with_model(model)\n+            schema_editor.rename_index(model, new_index, old_index)\n+    else:\n+        # For named indexes, swap the names and call database_forwards\n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n             self.new_name_lower,\n@@ -983,7 +1006,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..2bbd04b3a4 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,11 +965,24 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n \n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    if self.old_fields:\n+        # For unnamed indexes, we need to restore the original auto-generated name\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        \n+        # Find the current index with the new name\n+        from_model_state = from_state.models[app_label, self.model_name_lower]\n+        current_index = from_model_state.get_index_by_name(self.new_name)\n+        \n+        # Create the original auto-generated index with old_fields\n+        original_index = models.Index(fields=self.old_fields)\n+        original_index.set_name_with_model(model)\n+        \n+        # Rename from new_name back to the original auto-generated name\n+        schema_editor.rename_index(model, current_index, original_index)\n+    else:\n+        # For named indexes, swap the names and call database_forwards\n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n             self.new_name_lower,\n@@ -983,7 +996,6 @@ class RenameIndex(IndexOperation):\n             self.new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n-\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..27a40a9838 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,42 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        if self.old_fields:\n+            # For unnamed indexes, we need to rename back to the original auto-generated name\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            # Find the index with the new name\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Create a temporary index with the old fields to get the original auto-generated name\n+            temp_index = models.Index(fields=self.old_fields)\n+            temp_index.set_name_with_model(model)\n+            old_name = temp_index.name\n+            \n+            # Create an index object with the original auto-generated name\n+            old_index = models.Index(fields=self.old_fields, name=old_name)\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n+        else:\n+            # For named indexes, swap the names and call database_forwards\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..b6fe2f77d4 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,25 +965,37 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            # For unnamed indexes, we need to rename back to the auto-generated name\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            \n+            # Find the index with the new name in the from_state\n+            new_index = from_model_state.get_index_by_name(self.new_name)\n+            \n+            # Generate what the old auto-generated name would have been\n+            old_index = models.Index(fields=self.old_fields, name=\"\")\n+            old_index.set_name_with_model(model)\n+            \n+            schema_editor.rename_index(model, new_index, old_index)\n+        else:\n+            # For named indexes, swap the names and call database_forwards\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n"
  }
}