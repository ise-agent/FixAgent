{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/pylint/pylint/lint/pylinter.py lines 600-607)": "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [re.compile(pattern) for pattern in self.config.ignore_patterns],\n                        [re.compile(pattern) for pattern in self.config.ignore_paths],\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
    "Location 2 (/root/hy/projects_2/pylint/pylint/lint/pylinter.py lines 774-778)": "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/pylint/pylint/lint/pylinter.py lines 600-607)": [
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [re.compile(pattern) for pattern in self.config.ignore_patterns],\n                        [re.compile(pattern) for pattern in self.config.ignore_paths],\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [re.compile(pattern) for pattern in self.config.ignore_patterns] if isinstance(self.config.ignore_patterns, list) else self.config.ignore_patterns,\n                        [re.compile(pattern) for pattern in self.config.ignore_paths] if isinstance(self.config.ignore_paths, list) else self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [re.compile(pattern) for pattern in self.config.ignore_patterns] if isinstance(self.config.ignore_patterns[0], str) else self.config.ignore_patterns,\n                        [re.compile(pattern) for pattern in self.config.ignore_paths] if isinstance(self.config.ignore_paths[0], str) else self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [pattern.pattern for pattern in self.config.ignore_patterns] if hasattr(self.config.ignore_patterns, '__iter__') and all(hasattr(p, 'pattern') for p in self.config.ignore_patterns) else self.config.ignore_patterns,\n                        [pattern.pattern for pattern in self.config.ignore_paths] if hasattr(self.config.ignore_paths, '__iter__') and all(hasattr(p, 'pattern') for p in self.config.ignore_paths) else self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [re.compile(pattern) for pattern in self.config.ignore_patterns],\n                        [re.compile(pattern) for pattern in self.config.ignore_paths],\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [re.compile(pattern) for pattern in self.config.ignore_patterns] if self.config.ignore_patterns else [],\n                        [re.compile(pattern) for pattern in self.config.ignore_paths] if self.config.ignore_paths else [],\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        [pattern.pattern for pattern in self.config.ignore_patterns] if self.config.ignore_patterns else [],\n                        [pattern.pattern for pattern in self.config.ignore_paths] if self.config.ignore_paths else [],\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n",
      "\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        self.config.ignore_patterns,\n                        self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n"
    ],
    "Location 2 (/root/hy/projects_2/pylint/pylint/lint/pylinter.py lines 774-778)": [
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n",
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n",
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n",
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n",
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n",
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n",
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n",
      "\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self.config.ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..6ed015383 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,6 +597,7 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n@@ -771,11 +772,13 @@ class PyLinter(\n \n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_0": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..80c5d73ea 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [re.compile(pattern) for pattern in self.config.ignore_patterns],\n+                        [re.compile(pattern) for pattern in self.config.ignore_paths],\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_1": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..80c5d73ea 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [re.compile(pattern) for pattern in self.config.ignore_patterns],\n+                        [re.compile(pattern) for pattern in self.config.ignore_paths],\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_2": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..e84912b60 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [re.compile(pattern) for pattern in self.config.ignore_patterns] if isinstance(self.config.ignore_patterns, list) else self.config.ignore_patterns,\n+                        [re.compile(pattern) for pattern in self.config.ignore_paths] if isinstance(self.config.ignore_paths, list) else self.config.ignore_paths,\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_3": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..5fe6407a6 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [re.compile(pattern) for pattern in self.config.ignore_patterns] if isinstance(self.config.ignore_patterns[0], str) else self.config.ignore_patterns,\n+                        [re.compile(pattern) for pattern in self.config.ignore_paths] if isinstance(self.config.ignore_paths[0], str) else self.config.ignore_paths,\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_4": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..213955430 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [pattern.pattern for pattern in self.config.ignore_patterns] if hasattr(self.config.ignore_patterns, '__iter__') and all(hasattr(p, 'pattern') for p in self.config.ignore_patterns) else self.config.ignore_patterns,\n+                        [pattern.pattern for pattern in self.config.ignore_paths] if hasattr(self.config.ignore_paths, '__iter__') and all(hasattr(p, 'pattern') for p in self.config.ignore_paths) else self.config.ignore_paths,\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_5": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..80c5d73ea 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [re.compile(pattern) for pattern in self.config.ignore_patterns],\n+                        [re.compile(pattern) for pattern in self.config.ignore_paths],\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_6": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..f5a908514 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [re.compile(pattern) for pattern in self.config.ignore_patterns] if self.config.ignore_patterns else [],\n+                        [re.compile(pattern) for pattern in self.config.ignore_paths] if self.config.ignore_paths else [],\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
    "variant_7": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..8fea81103 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,11 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        [pattern.pattern for pattern in self.config.ignore_patterns] if self.config.ignore_patterns else [],\n+                        [pattern.pattern for pattern in self.config.ignore_paths] if self.config.ignore_paths else [],\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n@@ -769,6 +770,9 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n@@ -785,6 +789,15 @@ class PyLinter(\n                 message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n             self.add_message(key, args=message)\n         return result\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n \n     def set_current_module(\n         self, modname: str | None, filepath: str | None = None\n",
    "variant_8": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..d6da855b7 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,6 +597,7 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n+\n                     if _is_ignored_file(\n                         root,\n                         self.config.ignore,\n@@ -769,13 +770,25 @@ class PyLinter(\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n+    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n+        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n+        )\n+        for error in errors:\n+            message = modname = error[\"mod\"]\n+            key = error[\"key\"]\n+            self.set_current_module(modname)\n+            if key == \"fatal\":\n+                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            self.add_message(key, args=message)\n+        return result\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n"
  }
}