{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/serializer.py lines 164-189)": "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/serializer.py lines 164-189)": [
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n        # Further error checking\n        if self.value.__name__ == \"<lambda>\":\n            raise ValueError(\"Cannot serialize function: lambda\")\n        if self.value.__module__ is None:\n            raise ValueError(\"Cannot serialize function %r: No module\" % self.value)\n\n        module_name = self.value.__module__\n\n        if \"<\" not in self.value.__qualname__:  # Qualname can include <locals>\n            return \"%s.%s\" % (module_name, self.value.__qualname__), {\n                \"import %s\" % self.value.__module__\n            }\n\n        raise ValueError(\n            \"Could not find function %s in %s.\\n\" % (self.value.__name__, module_name)\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_0": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_1": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_2": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_3": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_4": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_5": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_6": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_7": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_8": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..80f6f0b3f0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,7 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +169,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n"
  }
}