{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1511-1511)": "\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
    "Location 2 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1559-1568)": "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
    "Location 3 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1552-1557)": "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
    "Location 4 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1543-1547)": "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n",
    "Location 5 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1497-1508)": "\ndef __init__(self, ref_artist, use_blit=False):\n    self.ref_artist = ref_artist\n    if not ref_artist.pickable():\n        ref_artist.set_picker(True)\n    self.got_artist = False\n    \n    # Defensive check for canvas availability\n    if self.canvas is None:\n        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n        \n    self._use_blit = use_blit and self.canvas.supports_blit\n    self.cids = [\n        self.canvas.callbacks._connect_picklable(\n            'pick_event', self.on_pick),\n        self.canvas.callbacks._connect_picklable(\n            'button_release_event', self.on_release),\n    ]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1511-1511)": [
      "\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n"
    ],
    "Location 2 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1559-1568)": [
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    canvas = self.canvas\n    if canvas is not None:\n        for cid in self.cids:\n            canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            canvas.mpl_disconnect(c1)\n"
    ],
    "Location 3 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1552-1557)": [
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n"
    ],
    "Location 4 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1543-1547)": [
      "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n",
      "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n",
      "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n",
      "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n",
      "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n",
      "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n",
      "\ndef on_release(self, event):\n    if self._check_still_parented() and self.got_artist:\n        self.finalize_offset()\n        self.got_artist = False\n        if hasattr(self, '_c1') and self.canvas is not None:\n            self.canvas.mpl_disconnect(self._c1)\n\n        if self._use_blit:\n            self.ref_artist.set_animated(False)\n",
      "\n    def on_release(self, event):\n        if self._check_still_parented() and self.got_artist:\n            self.finalize_offset()\n            self.got_artist = False\n            if hasattr(self, '_c1') and self.canvas is not None:\n                self.canvas.mpl_disconnect(self._c1)\n"
    ],
    "Location 5 (/root/hy/projects_2/matplotlib/lib/matplotlib/offsetbox.py lines 1497-1508)": [
      "\ndef __init__(self, ref_artist, use_blit=False):\n    self.ref_artist = ref_artist\n    if not ref_artist.pickable():\n        ref_artist.set_picker(True)\n    self.got_artist = False\n    \n    # Defensive check for canvas availability\n    if self.canvas is None:\n        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n        \n    self._use_blit = use_blit and self.canvas.supports_blit\n    self.cids = [\n        self.canvas.callbacks._connect_picklable(\n            'pick_event', self.on_pick),\n        self.canvas.callbacks._connect_picklable(\n            'button_release_event', self.on_release),\n    ]\n",
      "\ndef __init__(self, ref_artist, use_blit=False):\n    self.ref_artist = ref_artist\n    if not ref_artist.pickable():\n        ref_artist.set_picker(True)\n    self.got_artist = False\n    \n    # Defensive check for canvas availability\n    if self.canvas is None:\n        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n        \n    self._use_blit = use_blit and self.canvas.supports_blit\n    self.cids = [\n        self.canvas.callbacks._connect_picklable(\n            'pick_event', self.on_pick),\n        self.canvas.callbacks._connect_picklable(\n            'button_release_event', self.on_release),\n    ]\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Defensive check for canvas availability\n        if self.canvas is None:\n            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n            \n        self._use_blit = use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable(\n                'pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable(\n                'button_release_event', self.on_release),\n        ]\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Defensive check for canvas availability\n        if self.canvas is None:\n            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n            \n        self._use_blit = use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable(\n                'pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable(\n                'button_release_event', self.on_release),\n        ]\n",
      "\ndef __init__(self, ref_artist, use_blit=False):\n    self.ref_artist = ref_artist\n    if not ref_artist.pickable():\n        ref_artist.set_picker(True)\n    self.got_artist = False\n    \n    # Defensive check for canvas availability\n    if self.canvas is None:\n        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n        \n    self._use_blit = use_blit and self.canvas.supports_blit\n    self.cids = [\n        self.canvas.callbacks._connect_picklable(\n            'pick_event', self.on_pick),\n        self.canvas.callbacks._connect_picklable(\n            'button_release_event', self.on_release),\n    ]\n",
      "\ndef __init__(self, ref_artist, use_blit=False):\n    self.ref_artist = ref_artist\n    if not ref_artist.pickable():\n        ref_artist.set_picker(True)\n    self.got_artist = False\n    \n    # Defensive check for canvas availability\n    if self.canvas is None:\n        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n        \n    self._use_blit = use_blit and self.canvas.supports_blit\n    self.cids = [\n        self.canvas.callbacks._connect_picklable(\n            'pick_event', self.on_pick),\n        self.canvas.callbacks._connect_picklable(\n            'button_release_event', self.on_release),\n    ]\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Defensive check for canvas availability\n        if self.canvas is None:\n            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n            \n        self._use_blit = use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable(\n                'pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable(\n                'button_release_event', self.on_release),\n        ]\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Defensive check for canvas availability\n        if self.canvas is None:\n            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n            \n        self._use_blit = use_blit and self.canvas.supports_blit\n        self.cids = [\n            self.canvas.callbacks._connect_picklable(\n                'pick_event', self.on_pick),\n            self.canvas.callbacks._connect_picklable(\n                'button_release_event', self.on_release),\n        ]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..2cf9d73372 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,6 +1494,7 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n+\n     def __init__(self, ref_artist, use_blit=False):\n         self.ref_artist = ref_artist\n         if not ref_artist.pickable():\n@@ -1508,7 +1509,8 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,15 +1542,18 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,16 +1561,19 @@ class DraggableBase:\n         else:\n             return True\n \n+\n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        canvas = self.canvas\n+        if canvas is not None:\n+            for cid in self.cids:\n+                canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_0": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..50585398c7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,21 +1494,29 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+def __init__(self, ref_artist, use_blit=False):\n+    self.ref_artist = ref_artist\n+    if not ref_artist.pickable():\n+        ref_artist.set_picker(True)\n+    self.got_artist = False\n+    \n+    # Defensive check for canvas availability\n+    if self.canvas is None:\n+        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+        \n+    self._use_blit = use_blit and self.canvas.supports_blit\n+    self.cids = [\n+        self.canvas.callbacks._connect_picklable(\n+            'pick_event', self.on_pick),\n+        self.canvas.callbacks._connect_picklable(\n+            'button_release_event', self.on_release),\n+    ]\n+\n+    # A property, not an attribute, to maintain picklability.\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,15 +1548,18 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,16 +1567,19 @@ class DraggableBase:\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_1": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..9e868e8b33 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,21 +1494,29 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+def __init__(self, ref_artist, use_blit=False):\n+    self.ref_artist = ref_artist\n+    if not ref_artist.pickable():\n+        ref_artist.set_picker(True)\n+    self.got_artist = False\n+    \n+    # Defensive check for canvas availability\n+    if self.canvas is None:\n+        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+        \n+    self._use_blit = use_blit and self.canvas.supports_blit\n+    self.cids = [\n+        self.canvas.callbacks._connect_picklable(\n+            'pick_event', self.on_pick),\n+        self.canvas.callbacks._connect_picklable(\n+            'button_release_event', self.on_release),\n+    ]\n+\n+    # A property, not an attribute, to maintain picklability.\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,32 +1548,38 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_2": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..43ca64bd3f 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,21 +1494,28 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+def __init__(self, ref_artist, use_blit=False):\n+    self.ref_artist = ref_artist\n+    if not ref_artist.pickable():\n+        ref_artist.set_picker(True)\n+    self.got_artist = False\n+    \n+    # Defensive check for canvas availability\n+    if self.canvas is None:\n+        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+        \n+    self._use_blit = use_blit and self.canvas.supports_blit\n+    self.cids = [\n+        self.canvas.callbacks._connect_picklable(\n+            'pick_event', self.on_pick),\n+        self.canvas.callbacks._connect_picklable(\n+            'button_release_event', self.on_release),\n+    ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,15 +1547,18 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,16 +1566,19 @@ class DraggableBase:\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_3": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..3e150b69c5 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,11 +1494,17 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n+\n     def __init__(self, ref_artist, use_blit=False):\n         self.ref_artist = ref_artist\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n+        \n+        # Defensive check for canvas availability\n+        if self.canvas is None:\n+            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+            \n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n@@ -1508,7 +1514,8 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,32 +1547,38 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_4": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..c3aef7a32e 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,11 +1494,17 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n+\n     def __init__(self, ref_artist, use_blit=False):\n         self.ref_artist = ref_artist\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n+        \n+        # Defensive check for canvas availability\n+        if self.canvas is None:\n+            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+            \n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n@@ -1508,7 +1514,9 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+    # A property, not an attribute, to maintain picklability.\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,32 +1548,38 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_5": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..8a889e1548 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,21 +1494,28 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+def __init__(self, ref_artist, use_blit=False):\n+    self.ref_artist = ref_artist\n+    if not ref_artist.pickable():\n+        ref_artist.set_picker(True)\n+    self.got_artist = False\n+    \n+    # Defensive check for canvas availability\n+    if self.canvas is None:\n+        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+        \n+    self._use_blit = use_blit and self.canvas.supports_blit\n+    self.cids = [\n+        self.canvas.callbacks._connect_picklable(\n+            'pick_event', self.on_pick),\n+        self.canvas.callbacks._connect_picklable(\n+            'button_release_event', self.on_release),\n+    ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,32 +1547,38 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_6": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..50585398c7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,21 +1494,29 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n-    def __init__(self, ref_artist, use_blit=False):\n-        self.ref_artist = ref_artist\n-        if not ref_artist.pickable():\n-            ref_artist.set_picker(True)\n-        self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+def __init__(self, ref_artist, use_blit=False):\n+    self.ref_artist = ref_artist\n+    if not ref_artist.pickable():\n+        ref_artist.set_picker(True)\n+    self.got_artist = False\n+    \n+    # Defensive check for canvas availability\n+    if self.canvas is None:\n+        raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+        \n+    self._use_blit = use_blit and self.canvas.supports_blit\n+    self.cids = [\n+        self.canvas.callbacks._connect_picklable(\n+            'pick_event', self.on_pick),\n+        self.canvas.callbacks._connect_picklable(\n+            'button_release_event', self.on_release),\n+    ]\n+\n+    # A property, not an attribute, to maintain picklability.\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,15 +1548,18 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,16 +1567,19 @@ class DraggableBase:\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_7": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..03929f5cbf 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,11 +1494,17 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n+\n     def __init__(self, ref_artist, use_blit=False):\n         self.ref_artist = ref_artist\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n+        \n+        # Defensive check for canvas availability\n+        if self.canvas is None:\n+            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+            \n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n@@ -1508,7 +1514,8 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,32 +1547,41 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n-    def on_release(self, event):\n-        if self._check_still_parented() and self.got_artist:\n-            self.finalize_offset()\n-            self.got_artist = False\n+\n+def on_release(self, event):\n+    if self._check_still_parented() and self.got_artist:\n+        self.finalize_offset()\n+        self.got_artist = False\n+        if hasattr(self, '_c1') and self.canvas is not None:\n             self.canvas.mpl_disconnect(self._c1)\n \n+        if self._use_blit:\n+            self.ref_artist.set_animated(False)\n+\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_8": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..3e150b69c5 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1494,11 +1494,17 @@ class DraggableBase:\n     coordinate and set a relevant attribute.\n     \"\"\"\n \n+\n     def __init__(self, ref_artist, use_blit=False):\n         self.ref_artist = ref_artist\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n+        \n+        # Defensive check for canvas availability\n+        if self.canvas is None:\n+            raise ValueError(\"Cannot create DraggableBase: ref_artist has no valid figure/canvas\")\n+            \n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n@@ -1508,7 +1514,8 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1540,32 +1547,38 @@ class DraggableBase:\n                 \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n+\n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if hasattr(self, '_c1') and self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    canvas = self.canvas\n+    if canvas is not None:\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n"
  }
}