{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/checks/translation.py lines 58-60)": "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
    "Location 2 (/root/hy/projects_2/django/tests/check_framework/test_translation.py lines 78-86)": "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    \"\"\"Sublanguages should not raise E004 when base language is available.\"\"\"\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    with self.settings(LANGUAGE_CODE='es-mx', LANGUAGES=[('es', 'Spanish')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language_available(self):\n    \"\"\"Sublanguages should raise E004 when base language is not available.\"\"\"\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('es', 'Spanish')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_exact_language_match(self):\n    \"\"\"Exact language matches should not raise E004.\"\"\"\n    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/checks/translation.py lines 58-60)": [
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n    lang_code = settings.LANGUAGE_CODE\n    if lang_code not in available_tags:\n        # Check for base language fallback if it's a sublanguage\n        if '-' in lang_code:\n            base_lang = lang_code.split('-')[0]\n            if base_lang in available_tags:\n                return []  # Base language available, no error\n        return [E004]  # Neither exact nor base language available\n    return []\n"
    ],
    "Location 2 (/root/hy/projects_2/django/tests/check_framework/test_translation.py lines 78-86)": [
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    # Sublanguages should not raise errors when base language is available\n    test_cases = [\n        ('de-at', [('de', 'German')]),\n        ('en-gb', [('en', 'English')]),\n        ('zh-cn', [('zh', 'Chinese')]),\n        ('pt-br', [('pt', 'Portuguese'), ('en', 'English')]),\n    ]\n    for language_code, languages in test_cases:\n        with self.subTest(language_code=language_code):\n            with self.settings(LANGUAGE_CODE=language_code, LANGUAGES=languages):\n                self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language_available(self):\n    # Sublanguages should raise errors when base language is not available\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    test_cases = [\n        ('fr-ca', [('en', 'English')]),\n        ('de-at', [('es', 'Spanish')]),\n        ('zh-tw', [('ja', 'Japanese')]),\n    ]\n    for language_code, languages in test_cases:\n        with self.subTest(language_code=language_code):\n            with self.settings(LANGUAGE_CODE=language_code, LANGUAGES=languages):\n                self.assertEqual(check_language_settings_consistent(None), [\n                    Error(msg, id='translation.E004'),\n                ])\n\ndef test_exact_language_match(self):\n    # Exact matches should not raise errors\n    test_cases = [\n        ('en', [('en', 'English')]),\n        ('de-at', [('de-at', 'Austrian German')]),\n        ('zh-cn', [('zh-cn', 'Simplified Chinese'), ('en', 'English')]),\n    ]\n    for language_code, languages in test_cases:\n        with self.subTest(language_code=language_code):\n            with self.settings(LANGUAGE_CODE=language_code, LANGUAGES=languages):\n                self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language_available(self):\n    \"\"\"Test that sublanguages raise E004 when base language is not available.\"\"\"\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n    # de-at should not error when de is available\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # zh-hans should not error when zh is available\n    with self.settings(LANGUAGE_CODE='zh-hans', LANGUAGES=[('zh', 'Chinese'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language_available(self):\n    \"\"\"Test that sublanguages still raise E004 when base language is not available.\"\"\"\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # fr-ca should error when fr is not available\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_exact_language_match(self):\n    \"\"\"Test that exact language matches don't raise E004.\"\"\"\n    # Exact match should not error\n    with self.settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en-us', 'English (US)'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n    # de-at should not error when 'de' is available\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # en-gb should not error when 'en' is available\n    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language_available(self):\n    \"\"\"Test that sublanguages still raise E004 when base language is not available.\"\"\"\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # fr-ca should error when neither 'fr-ca' nor 'fr' is available\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_exact_language_match(self):\n    \"\"\"Test that exact language matches work correctly.\"\"\"\n    # Exact match should not error\n    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Exact sublanguage match should not error\n    with self.settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en-us', 'American English'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_consistent_sublanguage_settings(self):\n    \"\"\"Test that sublanguages with available base languages don't raise errors.\"\"\"\n    # Sublanguage with base language available should not error\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Another sublanguage case\n    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_inconsistent_sublanguage_settings(self):\n    \"\"\"Test that sublanguages without base languages still raise errors.\"\"\"\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # Sublanguage without base language should still error\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n    # de-at should not raise error when de is available\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # fr-ca should not raise error when fr is available\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('fr', 'French'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language(self):\n    \"\"\"Test that sublanguages raise E004 when base language is not available.\"\"\"\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # fr-ca should raise error when fr is not available\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_exact_language_match(self):\n    \"\"\"Test that exact language matches don't raise E004.\"\"\"\n    with self.settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en-us', 'English (US)'), ('fr', 'French')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    # Sublanguages should not error when base language is available\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_exact_language_match(self):\n    # Exact matches should not error\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_sublanguage_with_base_language_available(self):\n    # Sublanguage should not error when base language is available\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n\ndef test_sublanguage_without_base_language(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n\ndef test_exact_language_match(self):\n    # Exact matches should not error\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..00a5c740f5 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -55,7 +55,14 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..3331d2d81b 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,6 +75,7 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n@@ -84,3 +85,37 @@ class TranslationCheckTests(SimpleTestCase):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n             ])\n+\n+    def test_sublanguage_with_base_language_available(self):\n+        \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n+        # Test case: de-at should not error when de is available\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        # Test case: fr-ca should not error when fr is available\n+        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('fr', 'French'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    def test_sublanguage_without_base_language_available(self):\n+        \"\"\"Test that sublanguages still raise E004 when base language is not available.\"\"\"\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        # Test case: de-at should error when de is not available\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+        \n+        # Test case: fr-ca should error when fr is not available\n+        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+\n+    def test_exact_language_match(self):\n+        \"\"\"Test that exact language matches work correctly.\"\"\"\n+        # Test case: exact match should not error\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_0": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..abb52606ed 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,45 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    \"\"\"Sublanguages should not raise E004 when base language is available.\"\"\"\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    with self.settings(LANGUAGE_CODE='es-mx', LANGUAGES=[('es', 'Spanish')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language_available(self):\n+    \"\"\"Sublanguages should raise E004 when base language is not available.\"\"\"\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('es', 'Spanish')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_exact_language_match(self):\n+    \"\"\"Exact language matches should not raise E004.\"\"\"\n+    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_1": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..2b83ae0c9f 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,56 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    # Sublanguages should not raise errors when base language is available\n+    test_cases = [\n+        ('de-at', [('de', 'German')]),\n+        ('en-gb', [('en', 'English')]),\n+        ('zh-cn', [('zh', 'Chinese')]),\n+        ('pt-br', [('pt', 'Portuguese'), ('en', 'English')]),\n+    ]\n+    for language_code, languages in test_cases:\n+        with self.subTest(language_code=language_code):\n+            with self.settings(LANGUAGE_CODE=language_code, LANGUAGES=languages):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language_available(self):\n+    # Sublanguages should raise errors when base language is not available\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    test_cases = [\n+        ('fr-ca', [('en', 'English')]),\n+        ('de-at', [('es', 'Spanish')]),\n+        ('zh-tw', [('ja', 'Japanese')]),\n+    ]\n+    for language_code, languages in test_cases:\n+        with self.subTest(language_code=language_code):\n+            with self.settings(LANGUAGE_CODE=language_code, LANGUAGES=languages):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(msg, id='translation.E004'),\n+                ])\n+\n+def test_exact_language_match(self):\n+    # Exact matches should not raise errors\n+    test_cases = [\n+        ('en', [('en', 'English')]),\n+        ('de-at', [('de-at', 'Austrian German')]),\n+        ('zh-cn', [('zh-cn', 'Simplified Chinese'), ('en', 'English')]),\n+    ]\n+    for language_code, languages in test_cases:\n+        with self.subTest(language_code=language_code):\n+            with self.settings(LANGUAGE_CODE=language_code, LANGUAGES=languages):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_2": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..df40357c7b 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,32 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language_available(self):\n+    \"\"\"Test that sublanguages raise E004 when base language is not available.\"\"\"\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n",
    "variant_3": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..0847cf8c60 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,41 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n+    # de-at should not error when de is available\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # zh-hans should not error when zh is available\n+    with self.settings(LANGUAGE_CODE='zh-hans', LANGUAGES=[('zh', 'Chinese'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language_available(self):\n+    \"\"\"Test that sublanguages still raise E004 when base language is not available.\"\"\"\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # fr-ca should error when fr is not available\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_exact_language_match(self):\n+    \"\"\"Test that exact language matches don't raise E004.\"\"\"\n+    # Exact match should not error\n+    with self.settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en-us', 'English (US)'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_4": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..e2aea4b188 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,45 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n+    # de-at should not error when 'de' is available\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # en-gb should not error when 'en' is available\n+    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language_available(self):\n+    \"\"\"Test that sublanguages still raise E004 when base language is not available.\"\"\"\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # fr-ca should error when neither 'fr-ca' nor 'fr' is available\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_exact_language_match(self):\n+    \"\"\"Test that exact language matches work correctly.\"\"\"\n+    # Exact match should not error\n+    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Exact sublanguage match should not error\n+    with self.settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en-us', 'American English'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_5": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..6569d5e748 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,35 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_consistent_sublanguage_settings(self):\n+    \"\"\"Test that sublanguages with available base languages don't raise errors.\"\"\"\n+    # Sublanguage with base language available should not error\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Another sublanguage case\n+    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_inconsistent_sublanguage_settings(self):\n+    \"\"\"Test that sublanguages without base languages still raise errors.\"\"\"\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # Sublanguage without base language should still error\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n",
    "variant_6": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..9a4b802c90 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,40 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    \"\"\"Test that sublanguages don't raise E004 when base language is available.\"\"\"\n+    # de-at should not raise error when de is available\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # fr-ca should not raise error when fr is available\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('fr', 'French'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language(self):\n+    \"\"\"Test that sublanguages raise E004 when base language is not available.\"\"\"\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # fr-ca should raise error when fr is not available\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_exact_language_match(self):\n+    \"\"\"Test that exact language matches don't raise E004.\"\"\"\n+    with self.settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en-us', 'English (US)'), ('fr', 'French')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_7": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..2d0a336a7c 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,36 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    # Sublanguages should not error when base language is available\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_exact_language_match(self):\n+    # Exact matches should not error\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_8": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..214c126ef7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -52,10 +52,21 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    lang_code = settings.LANGUAGE_CODE\n+    if lang_code not in available_tags:\n+        # Check for base language fallback if it's a sublanguage\n+        if '-' in lang_code:\n+            base_lang = lang_code.split('-')[0]\n+            if base_lang in available_tags:\n+                return []  # Base language available, no error\n+        return [E004]  # Neither exact nor base language available\n+    return []\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..34c387e2fe 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,36 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_sublanguage_with_base_language_available(self):\n+    # Sublanguage should not error when base language is available\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+\n+def test_sublanguage_without_base_language(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+\n+def test_exact_language_match(self):\n+    # Exact matches should not error\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n"
  }
}