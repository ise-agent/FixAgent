{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/pylint/pylint/reporters/text.py lines 177-186)": "\n    def set_output_template(self) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Temporarily replace escaped braces to avoid confusion during validation\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as single literal braces\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/pylint/pylint/reporters/text.py lines 177-186)": [
      "\n    def set_output_format(self) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Preprocess template to handle escaped braces\n        # Replace {{ with placeholder to avoid regex matching across them\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as single braces for final template\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n",
      "\n    def set_output_format_template(self) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Temporarily replace escaped braces to avoid confusion during validation\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as literal braces in the final template\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n",
      "\n    def set_output_format_template(self, template_path: str | None) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Preprocess template to handle escaped braces\n        # Replace {{ and }} with placeholders to avoid regex confusion\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as single literal braces\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n",
      "\n    def set_output(self, output: TextIO | None) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Preprocess template to handle escaped braces\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as single literal braces\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n",
      "\n    def set_output(self, output: TextIO | None) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Temporarily replace escaped braces to avoid interference with regex\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as single literal braces\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n",
      "\n    def set_output_format(self) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Temporarily replace escaped braces to avoid regex confusion\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as single braces for final template\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n",
      "\n    def set_output_template(self) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Temporarily replace escaped braces to avoid matching them in regex\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as single literal braces\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n",
      "\n    def set_output_template(self) -> None:\n        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n        template = str(self.linter.config.msg_template or self._template)\n\n        # Return early if the template is the same as the previous one\n        if template == self._template:\n            return\n\n        # Set template to the currently selected template\n        self._template = template\n\n        # Preprocess template to handle escaped braces\n        # Replace {{ with placeholder to avoid regex confusion\n        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n        \n        # Check to see if all parameters in the template are attributes of the Message\n        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n        for argument in arguments:\n            if argument[0] not in MESSAGE_FIELDS:\n                warnings.warn(\n                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                    \"Are you sure it is supported on the current version of pylint?\"\n                )\n                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n        \n        # Restore escaped braces as literal braces\n        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..a126c97d4 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,22 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        # First, temporarily replace escaped braces to avoid parsing them as arguments\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n+        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single literal braces for the final template\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_0": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..c81c68923 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output_template(self) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Temporarily replace escaped braces to avoid confusion during validation\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single literal braces\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_1": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..fbfec955d 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,34 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output_format(self) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Preprocess template to handle escaped braces\n+        # Replace {{ with placeholder to avoid regex matching across them\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single braces for final template\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_2": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..8ecdcd30a 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output_format_template(self) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Temporarily replace escaped braces to avoid confusion during validation\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as literal braces in the final template\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_3": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..c9b52ae2b 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,34 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output_format_template(self, template_path: str | None) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Preprocess template to handle escaped braces\n+        # Replace {{ and }} with placeholders to avoid regex confusion\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single literal braces\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_4": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..7102a82f7 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output(self, output: TextIO | None) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Preprocess template to handle escaped braces\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single literal braces\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_5": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..bd0653976 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output(self, output: TextIO | None) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Temporarily replace escaped braces to avoid interference with regex\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single literal braces\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_6": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..d2d9ede6a 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output_format(self) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Temporarily replace escaped braces to avoid regex confusion\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single braces for final template\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_7": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..11a5a3bf1 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output_template(self) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Temporarily replace escaped braces to avoid matching them in regex\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as single literal braces\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n",
    "variant_8": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..40ea287a3 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,16 +174,34 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n+\n+    def set_output_template(self) -> None:\n+        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n+        template = str(self.linter.config.msg_template or self._template)\n+\n+        # Return early if the template is the same as the previous one\n+        if template == self._template:\n+            return\n+\n+        # Set template to the currently selected template\n+        self._template = template\n+\n+        # Preprocess template to handle escaped braces\n+        # Replace {{ with placeholder to avoid regex confusion\n+        temp_template = template.replace(\"{{\", \"__ESCAPED_OPEN__\").replace(\"}}\", \"__ESCAPED_CLOSE__\")\n+        \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:[^{}]*)?\\}\", temp_template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                temp_template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:[^{}]*)?\\}\", \"\", temp_template)\n+        \n+        # Restore escaped braces as literal braces\n+        self._fixed_template = temp_template.replace(\"__ESCAPED_OPEN__\", \"{\").replace(\"__ESCAPED_CLOSE__\", \"}\")\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n"
  }
}