{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/scikit-learn/sklearn/utils/_pprint.py lines 69-69)": "\nimport numpy as np\n",
    "Location 2 (/root/hy/projects_2/scikit-learn/sklearn/utils/_pprint.py lines 98-99)": "\n        if (not _arrays_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/scikit-learn/sklearn/utils/_pprint.py lines 69-69)": [
      "\nimport numpy as np\n",
      "\nimport numpy as np\n",
      "\nfrom inspect import signature\nimport pprint\nfrom collections import OrderedDict\nimport numpy as np\n\nfrom ..base import BaseEstimator\nfrom .._config import get_config\nfrom . import is_scalar_nan\n",
      "\nimport numpy as np\n",
      "\nfrom inspect import signature\nimport pprint\nfrom collections import OrderedDict\nimport numpy as np\n\nfrom ..base import BaseEstimator\nfrom .._config import get_config\nfrom . import is_scalar_nan\n",
      "\nimport numpy as np\n",
      "\nimport numpy as np\n",
      "\nimport numpy as np\n"
    ],
    "Location 2 (/root/hy/projects_2/scikit-learn/sklearn/utils/_pprint.py lines 98-99)": [
      "\n        if (not _arrays_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n",
      "\n        if (not _safe_array_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n",
      "\n        if (not _safe_compare(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n",
      "\n        if (not _compare_params(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n",
      "\n        if (not _safe_compare(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n",
      "\n        if (not _safe_array_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n",
      "\n        if (not _safe_params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n",
      "\n        if (not _safe_array_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..9c16106c2 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,20 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        # Safe comparison that handles both arrays and scalars\n+        try:\n+            # For numpy arrays, use array_equal and invert the result\n+            if hasattr(v, 'shape') or hasattr(init_params[k], 'shape'):\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                values_equal = v == init_params[k]\n+            values_different = not values_equal\n+        except (ValueError, TypeError):\n+            # Fallback for incompatible types (e.g., array vs scalar)\n+            values_different = True\n+        \n+        if (values_different and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_0": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..67e5db9b1 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _arrays_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_1": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..67e5db9b1 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _arrays_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_2": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..cafc3c460 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _safe_array_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_3": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..55df4ed59 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,14 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+from inspect import signature\n+import pprint\n+from collections import OrderedDict\n+import numpy as np\n+\n+from ..base import BaseEstimator\n+from .._config import get_config\n+from . import is_scalar_nan\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +103,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _safe_compare(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_4": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..5f2503298 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _compare_params(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_5": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..55df4ed59 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,14 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+from inspect import signature\n+import pprint\n+from collections import OrderedDict\n+import numpy as np\n+\n+from ..base import BaseEstimator\n+from .._config import get_config\n+from . import is_scalar_nan\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +103,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _safe_compare(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_6": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..cafc3c460 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _safe_array_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_7": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..23a041cee 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _safe_params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_8": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..cafc3c460 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+\n+        if (not _safe_array_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n"
  }
}