{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/scikit-learn/sklearn/cluster/_affinity_propagation.py lines 192-199)": "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose:\n                    if converged:\n                        print(\"Converged after %d iterations.\" % it)\n                    else:\n                        print(\"Did not converge\")\n                break\n",
    "Location 2 (/root/hy/projects_2/scikit-learn/sklearn/cluster/_affinity_propagation.py lines 204-227)": "\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    if K > 0 and not unconverged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/scikit-learn/sklearn/cluster/_affinity_propagation.py lines 192-199)": [
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n",
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n",
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n",
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n",
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n",
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n",
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n",
      "\n        # Check for convergence\n        E = (np.diag(A) + np.diag(R)) > 0\n        e[:, it % convergence_iter] = E\n        K = np.sum(E, axis=0)\n\n        if it >= convergence_iter:\n            se = np.sum(e, axis=1)\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            converged = not unconverged and (K > 0)\n            if converged or (it == max_iter):\n                if verbose and converged:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n"
    ],
    "Location 2 (/root/hy/projects_2/scikit-learn/sklearn/cluster/_affinity_propagation.py lines 204-227)": [
      "\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    # Check if we actually converged (not just reached max_iter)\n    converged = not unconverged\n    \n    if K > 0 and converged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n",
      "\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    if K > 0 and not unconverged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n",
      "\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    # Check if we converged or just hit max iterations\n    converged = (not unconverged and (K > 0)) if 'unconverged' in locals() else False\n    \n    if K > 0 and converged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n",
      "\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            if (not unconverged and (K > 0)) or (it == max_iter):\n                if verbose:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n    else:\n        if verbose:\n            print(\"Did not converge\")\n\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    # Check if algorithm converged (not just reached max_iter)\n    converged = not unconverged and (K > 0)\n    \n    if K > 0 and converged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n",
      "\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    if K > 0 and not unconverged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n",
      "\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            if (not unconverged and (K > 0)) or (it == max_iter):\n                if verbose:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n    else:\n        if verbose:\n            print(\"Did not converge\")\n\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    # Check if we actually converged (not just reached max_iter)\n    converged = not unconverged and (K > 0)\n    \n    if K > 0 and converged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n",
      "\n            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                           != n_samples)\n            if (not unconverged and (K > 0)) or (it == max_iter):\n                if verbose:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n    else:\n        if verbose:\n            print(\"Did not converge\")\n\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    # Check if algorithm converged - if max_iter reached, it didn't converge\n    converged = it < max_iter\n\n    if K > 0 and converged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n",
      "\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    if K > 0 and not unconverged:\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)  # Identify clusters\n        # Refine the final set of exemplars and clusters and return results\n        for k in range(K):\n            ii = np.where(c == k)[0]\n            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n            I[k] = ii[j]\n\n        c = np.argmax(S[:, I], axis=1)\n        c[I] = np.arange(K)\n        labels = I[c]\n        # Reduce labels to a sorted, gapless, list\n        cluster_centers_indices = np.unique(labels)\n        labels = np.searchsorted(cluster_centers_indices, labels)\n    else:\n        warnings.warn(\"Affinity propagation did not converge, this model \"\n                      \"will not have any cluster centers.\", ConvergenceWarning)\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..c765eb85f 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -189,22 +189,28 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         e[:, it % convergence_iter] = E\n         K = np.sum(E, axis=0)\n \n+\n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n             if (not unconverged and (K > 0)) or (it == max_iter):\n                 if verbose:\n-                    print(\"Converged after %d iterations.\" % it)\n+                    if not unconverged:\n+                        print(\"Converged after %d iterations.\" % it)\n+                    else:\n+                        print(\"Did not converge\")\n                 break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n \n+\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    # Check if algorithm converged - if not, return empty results regardless of K\n+    if K > 0 and not unconverged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +230,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_0": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..6228eb82d 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -193,18 +199,23 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n                 if verbose:\n-                    print(\"Converged after %d iterations.\" % it)\n+                    if converged:\n+                        print(\"Converged after %d iterations.\" % it)\n+                    else:\n+                        print(\"Did not converge\")\n                 break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n \n+\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    if K > 0 and not unconverged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +235,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_1": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..06e503c86 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -193,18 +199,23 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n-                if verbose:\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n \n+\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    # Check if we actually converged (not just reached max_iter)\n+    converged = not unconverged\n+    \n+    if K > 0 and converged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +235,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_2": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..0f858f1db 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -193,18 +199,20 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n-                if verbose:\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n \n+\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    if K > 0 and not unconverged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +232,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_3": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..6364690a3 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -193,18 +199,23 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n-                if verbose:\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n \n+\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    # Check if we converged or just hit max iterations\n+    converged = (not unconverged and (K > 0)) if 'unconverged' in locals() else False\n+    \n+    if K > 0 and converged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +235,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_4": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..0316cbfd1 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -191,6 +197,18 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n \n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n+            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n+                           != n_samples)\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n+                    print(\"Converged after %d iterations.\" % it)\n+                break\n+    else:\n+        if verbose:\n+            print(\"Did not converge\")\n+\n+\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n             if (not unconverged and (K > 0)) or (it == max_iter):\n@@ -204,7 +222,10 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    # Check if algorithm converged (not just reached max_iter)\n+    converged = not unconverged and (K > 0)\n+    \n+    if K > 0 and converged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +245,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_5": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..0f858f1db 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -193,18 +199,20 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n-                if verbose:\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n \n+\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    if K > 0 and not unconverged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +232,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_6": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..3f0824a32 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -191,6 +197,18 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n \n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n+            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n+                           != n_samples)\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n+                    print(\"Converged after %d iterations.\" % it)\n+                break\n+    else:\n+        if verbose:\n+            print(\"Did not converge\")\n+\n+\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n             if (not unconverged and (K > 0)) or (it == max_iter):\n@@ -204,7 +222,10 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    # Check if we actually converged (not just reached max_iter)\n+    converged = not unconverged and (K > 0)\n+    \n+    if K > 0 and converged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +245,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_7": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..e13c34d34 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -191,6 +197,18 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n \n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n+            unconverged = (np.sum((se == convergence_iter) + (se == 0))\n+                           != n_samples)\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n+                    print(\"Converged after %d iterations.\" % it)\n+                break\n+    else:\n+        if verbose:\n+            print(\"Did not converge\")\n+\n+\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n             if (not unconverged and (K > 0)) or (it == max_iter):\n@@ -204,7 +222,10 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    # Check if algorithm converged - if max_iter reached, it didn't converge\n+    converged = it < max_iter\n+\n+    if K > 0 and converged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +245,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n",
    "variant_8": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..0f858f1db 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -184,6 +184,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         A *= damping\n         A -= tmp\n \n+        # Check for convergence\n+        E = (np.diag(A) + np.diag(R)) > 0\n+        e[:, it % convergence_iter] = E\n+        K = np.sum(E, axis=0)\n+\n+\n         # Check for convergence\n         E = (np.diag(A) + np.diag(R)) > 0\n         e[:, it % convergence_iter] = E\n@@ -193,18 +199,20 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n-                if verbose:\n+            converged = not unconverged and (K > 0)\n+            if converged or (it == max_iter):\n+                if verbose and converged:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n \n+\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    if K > 0 and not unconverged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -224,7 +232,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-\n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n     else:\n"
  }
}