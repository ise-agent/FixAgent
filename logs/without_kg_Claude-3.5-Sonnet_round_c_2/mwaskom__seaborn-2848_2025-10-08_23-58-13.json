{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/seaborn/seaborn/_core/rules.py lines 143-144)": "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/seaborn/seaborn/_core/rules.py lines 143-144)": [
      "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n",
      "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n",
      "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n",
      "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n",
      "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n",
      "\ndef categorical_order(vector, order=None):\n    \"\"\"\n    Return a list of unique data values using seaborn's ordering rules.\n\n    Parameters\n    ----------\n    vector : array-like\n        Vector of \"categorical\" values whose order will be determined.\n    order : list\n        Desired order of category levels to override the order determined\n        from the `data` object.\n\n    Returns\n    -------\n    order : list\n        Ordered list of category levels not including null values.\n\n    \"\"\"\n    if order is not None:\n        return list(filter(pd.notnull, order))\n\n    if vector.dtype.name == \"category\":\n        order = list(vector.cat.categories)\n    else:\n        order = list(filter(pd.notnull, vector.unique()))\n        if variable_type(order) == \"numeric\":\n            order.sort()\n\n    return order\n",
      "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n",
      "\n    if order is not None:\n        return list(filter(pd.notnull, order))\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_0": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_1": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_2": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_3": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_4": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_5": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_6": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..dc4f4864 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,36 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n+def categorical_order(vector, order=None):\n+    \"\"\"\n+    Return a list of unique data values using seaborn's ordering rules.\n+\n+    Parameters\n+    ----------\n+    vector : array-like\n+        Vector of \"categorical\" values whose order will be determined.\n+    order : list\n+        Desired order of category levels to override the order determined\n+        from the `data` object.\n+\n+    Returns\n+    -------\n+    order : list\n+        Ordered list of category levels not including null values.\n+\n+    \"\"\"\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n+\n+    if vector.dtype.name == \"category\":\n+        order = list(vector.cat.categories)\n+    else:\n+        order = list(filter(pd.notnull, vector.unique()))\n+        if variable_type(order) == \"numeric\":\n+            order.sort()\n+\n+    return order\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_7": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n",
    "variant_8": "diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex d378fb2d..76bf95ba 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -140,8 +140,9 @@ def categorical_order(vector: Series, order: list | None = None) -> list:\n         Ordered list of category levels not including null values.\n \n     \"\"\"\n+\n     if order is not None:\n-        return order\n+        return list(filter(pd.notnull, order))\n \n     if vector.dtype.name == \"category\":\n         order = list(vector.cat.categories)\n"
  }
}