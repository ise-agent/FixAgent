{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 6-8)": "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
    "Location 2 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 12-12)": "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for model_index in model._meta.indexes:\n            indexes[model_index.name].append(model._meta.label)\n        for model_constraint in model._meta.constraints:\n            constraints[model_constraint.name].append(model._meta.label)\n\n    if settings.DATABASE_ROUTERS:\n        error_class, error_id = Warning, 'models.W035'\n        error_hint = (\n            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n            'are correctly routed to separate databases.'\n        )\n    else:\n        error_class, error_id = Error, 'models.E028'\n        error_hint = None\n\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                model_labels_str = ', '.join(model_labels)\n                errors.append(\n                    error_class(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, model_labels_str),\n                        obj=db_table,\n                        hint=(\n                            error_hint % model_labels_str\n                            if error_hint is not None else None\n                        ),\n                        id=error_id,\n                    )\n                )\n    for index_name, model_labels in indexes.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique %s %s.\"\n                    % (\n                        index_name,\n                        'for model' if len(model_labels) == 1 else 'among models:',\n                        ', '.join(model_labels),\n                    ),\n                    id='models.E029',\n                )\n            )\n\n    for constraint_name, model_labels in constraints.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique %s %s.\"\n                    % (\n                        constraint_name,\n                        'for model' if len(model_labels) == 1 else 'among models:',\n                        ', '.join(model_labels),\n                    ),\n                    id='models.E031',\n                )\n            )\n\n    return errors\n",
    "Location 3 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 20-23)": "\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        if not inspect.ismethod(model.check):\n",
    "Location 4 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 38-47)": "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 6-8)": [
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 12-12)": [
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for model_index in model._meta.indexes:\n            indexes[model_index.name].append(model._meta.label)\n        for model_constraint in model._meta.constraints:\n            constraints[model_constraint.name].append(model._meta.label)\n\n    for model_index, model_labels in indexes.items():\n        if len(model_labels) != 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique %s %s.\" % (\n                        model_index,\n                        'for model' if len(model_labels) == 1 else 'among models:',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E029',\n                ),\n            )\n\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n\n    for constraint_name, model_labels in constraints.items():\n        if len(model_labels) != 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique %s %s.\" % (\n                        constraint_name,\n                        'for model' if len(model_labels) == 1 else 'among models:',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E030',\n                ),\n            )\n\n    return errors\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for model_index in model._meta.indexes:\n            indexes[model_index.name].append(model._meta.label)\n        for model_constraint in model._meta.constraints:\n            constraints[model_constraint.name].append(model._meta.label)\n\n    for model_index, model_labels in indexes.items():\n        if len(model_labels) != 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique %s %s.\"\n                    % (\n                        model_index,\n                        'for model' if len(model_labels) == 1 else 'across models',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E029',\n                ),\n            )\n\n    for constraint, model_labels in constraints.items():\n        if len(model_labels) != 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique %s %s.\"\n                    % (\n                        constraint,\n                        'for model' if len(model_labels) == 1 else 'across models',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E031',\n                ),\n            )\n\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n    return errors\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for index in model._meta.indexes:\n            indexes[index.name].append(model._meta.label)\n        for constraint in model._meta.constraints:\n            constraints[constraint.name].append(model._meta.label)\n    if settings.DATABASE_ROUTERS:\n        error_class, error_id = DjangoWarning, 'models.W035'\n        error_hint = (\n            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n            'are correctly routed to separate databases.'\n        )\n    else:\n        error_class, error_id = Error, 'models.E028'\n        error_hint = None\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                model_labels_str = ', '.join(model_labels)\n                errors.append(\n                    error_class(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, model_labels_str),\n                        obj=db_table,\n                        hint=(\n                            error_hint % model_labels_str\n                            if error_hint else None\n                        ),\n                        id=error_id,\n                    )\n                )\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for model_index in model._meta.indexes:\n            indexes[model_index.name].append(model._meta.label)\n        for model_constraint in model._meta.constraints:\n            constraints[model_constraint.name].append(model._meta.label)\n\n    for model_index, model_labels in indexes.items():\n        if len(model_labels) != 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique %s %s.\" % (\n                        model_index,\n                        'for model' if len(model_labels) == 1 else 'among models:',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E029',\n                ),\n            )\n\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n\n    for model_constraint, model_labels in constraints.items():\n        if len(model_labels) != 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique %s %s.\" % (\n                        model_constraint,\n                        'for model' if len(model_labels) == 1 else 'among models:',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E030',\n                ),\n            )\n\n    return errors\n",
      "\nfrom django.db import router\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for index in model._meta.indexes:\n            indexes[index.name].append(model._meta.label)\n        for constraint in model._meta.constraints:\n            constraints[constraint.name].append(model._meta.label)\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n    for index_name, model_labels in indexes.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique amongst models: %s.\"\n                    % (index_name, ', '.join(model_labels)),\n                    obj=index_name,\n                    id='models.E029',\n                )\n            )\n    for constraint_name, model_labels in constraints.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique amongst models: %s.\"\n                    % (constraint_name, ', '.join(model_labels)),\n                    obj=constraint_name,\n                    id='models.E030',\n                )\n            )\n\n    return errors\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        indexes[model].extend(model._meta.indexes)\n        constraints[model].extend(model._meta.constraints)\n    for model, model_indexes in indexes.items():\n        errors.extend(model._check_indexes(exclude=exclude))\n    for model, model_constraints in constraints.items():\n        errors.extend(model._check_constraints(exclude=exclude))\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n    return errors\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for index in model._meta.indexes:\n            indexes[index.name].append(model._meta.label)\n        for constraint in model._meta.constraints:\n            constraints[constraint.name].append(model._meta.label)\n\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n    for index_name, model_labels in indexes.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique for model %s.\" % (index_name, model_labels[0]),\n                    id='models.E029',\n                )\n            )\n    for constraint_name, model_labels in constraints.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique for model %s.\" % (constraint_name, model_labels[0]),\n                    id='models.E030',\n                )\n            )\n    return errors\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(lambda: defaultdict(list))\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        for model_index in model._meta.indexes:\n            indexes[model_index.name].append(model._meta.label)\n        for model_constraint in model._meta.constraints:\n            constraints[model_constraint.name].append(model._meta.label)\n\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n    for index_name, model_labels in indexes.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique %s.\"\n                    % (index_name, 'for model %s' % model_labels[0] if len(model_labels) == 1 else 'amongst models: %s' % ', '.join(model_labels)),\n                    id='models.E029',\n                )\n            )\n    for constraint_name, model_labels in constraints.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique %s.\"\n                    % (constraint_name, 'for model %s' % model_labels[0] if len(model_labels) == 1 else 'amongst models: %s' % ', '.join(model_labels)),\n                    id='models.E030',\n                )\n            )\n    return errors\n"
    ],
    "Location 3 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 20-23)": [
      "\nfor model in models:\n    if model._meta.managed and not model._meta.proxy:\n        db_alias = router.db_for_read(model)\n        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n    if not inspect.ismethod(model.check):\n",
      "\nfor model in models:\n    if model._meta.managed and not model._meta.proxy:\n        db_alias = router.db_for_read(model)\n        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n    if not inspect.ismethod(model.check):\n",
      "\nfor model in models:\n    if model._meta.managed and not model._meta.proxy:\n        db_alias = router.db_for_read(model)\n        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n    if not inspect.ismethod(model.check):\n",
      "\nfor model in models:\n    if model._meta.managed and not model._meta.proxy:\n        db_alias = router.db_for_read(model)\n        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n    if not inspect.ismethod(model.check):\n",
      "\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_read(model)\n            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n        if not inspect.ismethod(model.check):\n",
      "\nfor model in models:\n    if model._meta.managed and not model._meta.proxy:\n        db_alias = router.db_for_read(model)\n        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n    if not inspect.ismethod(model.check):\n",
      "\nfor model in models:\n    if model._meta.managed and not model._meta.proxy:\n        db_alias = router.db_for_read(model)\n        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n    if not inspect.ismethod(model.check):\n",
      "\nfor model in models:\n    if model._meta.managed and not model._meta.proxy:\n        db_alias = router.db_for_read(model)\n        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n    if not inspect.ismethod(model.check):\n"
    ],
    "Location 4 (/root/hy/projects_2/django/django/core/checks/model_checks.py lines 38-47)": [
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n",
      "\n    for db_alias, tables in db_table_models.items():\n        for db_table, model_labels in tables.items():\n            if len(model_labels) != 1:\n                errors.append(\n                    Error(\n                        \"db_table '%s' is used by multiple models: %s.\"\n                        % (db_table, ', '.join(model_labels)),\n                        obj=db_table,\n                        id='models.E028',\n                    )\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..a18854b5ff 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,15 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n-\n+from django.db import router\n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -17,9 +19,11 @@ def check_all_models(app_configs=None, **kwargs):\n         models = apps.get_models()\n     else:\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +39,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_0": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..dc54201463 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,7 +33,80 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for model_index in model._meta.indexes:\n+            indexes[model_index.name].append(model._meta.label)\n+        for model_constraint in model._meta.constraints:\n+            constraints[model_constraint.name].append(model._meta.label)\n+\n+    if settings.DATABASE_ROUTERS:\n+        error_class, error_id = Warning, 'models.W035'\n+        error_hint = (\n+            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n+            'are correctly routed to separate databases.'\n+        )\n+    else:\n+        error_class, error_id = Error, 'models.E028'\n+        error_hint = None\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                model_labels_str = ', '.join(model_labels)\n+                errors.append(\n+                    error_class(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, model_labels_str),\n+                        obj=db_table,\n+                        hint=(\n+                            error_hint % model_labels_str\n+                            if error_hint is not None else None\n+                        ),\n+                        id=error_id,\n+                    )\n+                )\n+    for index_name, model_labels in indexes.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique %s %s.\"\n+                    % (\n+                        index_name,\n+                        'for model' if len(model_labels) == 1 else 'among models:',\n+                        ', '.join(model_labels),\n+                    ),\n+                    id='models.E029',\n+                )\n+            )\n+\n+    for constraint_name, model_labels in constraints.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique %s %s.\"\n+                    % (\n+                        constraint_name,\n+                        'for model' if len(model_labels) == 1 else 'among models:',\n+                        ', '.join(model_labels),\n+                    ),\n+                    id='models.E031',\n+                )\n+            )\n+\n+    return errors\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +122,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_1": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..18adba82e0 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,8 +33,67 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for model_index in model._meta.indexes:\n+            indexes[model_index.name].append(model._meta.label)\n+        for model_constraint in model._meta.constraints:\n+            constraints[model_constraint.name].append(model._meta.label)\n+\n+    for model_index, model_labels in indexes.items():\n+        if len(model_labels) != 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique %s %s.\" % (\n+                        model_index,\n+                        'for model' if len(model_labels) == 1 else 'among models:',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E029',\n+                ),\n+            )\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n+\n+    for constraint_name, model_labels in constraints.items():\n+        if len(model_labels) != 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique %s %s.\" % (\n+                        constraint_name,\n+                        'for model' if len(model_labels) == 1 else 'among models:',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E030',\n+                ),\n+            )\n+\n+    return errors\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+for model in models:\n+    if model._meta.managed and not model._meta.proxy:\n+        db_alias = router.db_for_read(model)\n+        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+    if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n                     \"The '%s.check()' class method is currently overridden by %r.\"\n@@ -35,16 +108,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_2": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..48b9a588bd 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,8 +33,68 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for model_index in model._meta.indexes:\n+            indexes[model_index.name].append(model._meta.label)\n+        for model_constraint in model._meta.constraints:\n+            constraints[model_constraint.name].append(model._meta.label)\n+\n+    for model_index, model_labels in indexes.items():\n+        if len(model_labels) != 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique %s %s.\"\n+                    % (\n+                        model_index,\n+                        'for model' if len(model_labels) == 1 else 'across models',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E029',\n+                ),\n+            )\n+\n+    for constraint, model_labels in constraints.items():\n+        if len(model_labels) != 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique %s %s.\"\n+                    % (\n+                        constraint,\n+                        'for model' if len(model_labels) == 1 else 'across models',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E031',\n+                ),\n+            )\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n+    return errors\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+for model in models:\n+    if model._meta.managed and not model._meta.proxy:\n+        db_alias = router.db_for_read(model)\n+        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+    if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n                     \"The '%s.check()' class method is currently overridden by %r.\"\n@@ -35,16 +109,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_3": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..31415d49e4 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,8 +33,50 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for index in model._meta.indexes:\n+            indexes[index.name].append(model._meta.label)\n+        for constraint in model._meta.constraints:\n+            constraints[constraint.name].append(model._meta.label)\n+    if settings.DATABASE_ROUTERS:\n+        error_class, error_id = DjangoWarning, 'models.W035'\n+        error_hint = (\n+            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n+            'are correctly routed to separate databases.'\n+        )\n+    else:\n+        error_class, error_id = Error, 'models.E028'\n+        error_hint = None\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                model_labels_str = ', '.join(model_labels)\n+                errors.append(\n+                    error_class(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, model_labels_str),\n+                        obj=db_table,\n+                        hint=(\n+                            error_hint % model_labels_str\n+                            if error_hint else None\n+                        ),\n+                        id=error_id,\n+                    )\n+                )\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+for model in models:\n+    if model._meta.managed and not model._meta.proxy:\n+        db_alias = router.db_for_read(model)\n+        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+    if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n                     \"The '%s.check()' class method is currently overridden by %r.\"\n@@ -35,16 +91,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_4": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..2e8af7b257 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,8 +33,67 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for model_index in model._meta.indexes:\n+            indexes[model_index.name].append(model._meta.label)\n+        for model_constraint in model._meta.constraints:\n+            constraints[model_constraint.name].append(model._meta.label)\n+\n+    for model_index, model_labels in indexes.items():\n+        if len(model_labels) != 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique %s %s.\" % (\n+                        model_index,\n+                        'for model' if len(model_labels) == 1 else 'among models:',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E029',\n+                ),\n+            )\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n+\n+    for model_constraint, model_labels in constraints.items():\n+        if len(model_labels) != 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique %s %s.\" % (\n+                        model_constraint,\n+                        'for model' if len(model_labels) == 1 else 'among models:',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E030',\n+                ),\n+            )\n+\n+    return errors\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+for model in models:\n+    if model._meta.managed and not model._meta.proxy:\n+        db_alias = router.db_for_read(model)\n+        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+    if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n                     \"The '%s.check()' class method is currently overridden by %r.\"\n@@ -35,16 +108,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_5": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..a07f0a9430 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,67 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+from django.db import router\n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for index in model._meta.indexes:\n+            indexes[index.name].append(model._meta.label)\n+        for constraint in model._meta.constraints:\n+            constraints[constraint.name].append(model._meta.label)\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n+    for index_name, model_labels in indexes.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique amongst models: %s.\"\n+                    % (index_name, ', '.join(model_labels)),\n+                    obj=index_name,\n+                    id='models.E029',\n+                )\n+            )\n+    for constraint_name, model_labels in constraints.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique amongst models: %s.\"\n+                    % (constraint_name, ', '.join(model_labels)),\n+                    obj=constraint_name,\n+                    id='models.E030',\n+                )\n+            )\n+\n+    return errors\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -17,9 +71,11 @@ def check_all_models(app_configs=None, **kwargs):\n         models = apps.get_models()\n     else:\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,16 +91,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_6": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..745bc01eba 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,8 +33,39 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        indexes[model].extend(model._meta.indexes)\n+        constraints[model].extend(model._meta.constraints)\n+    for model, model_indexes in indexes.items():\n+        errors.extend(model._check_indexes(exclude=exclude))\n+    for model, model_constraints in constraints.items():\n+        errors.extend(model._check_constraints(exclude=exclude))\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n+    return errors\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+for model in models:\n+    if model._meta.managed and not model._meta.proxy:\n+        db_alias = router.db_for_read(model)\n+        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+    if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n                     \"The '%s.check()' class method is currently overridden by %r.\"\n@@ -35,16 +80,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_7": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..3bd9e7b45f 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,8 +33,54 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for index in model._meta.indexes:\n+            indexes[index.name].append(model._meta.label)\n+        for constraint in model._meta.constraints:\n+            constraints[constraint.name].append(model._meta.label)\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n+    for index_name, model_labels in indexes.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique for model %s.\" % (index_name, model_labels[0]),\n+                    id='models.E029',\n+                )\n+            )\n+    for constraint_name, model_labels in constraints.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique for model %s.\" % (constraint_name, model_labels[0]),\n+                    id='models.E030',\n+                )\n+            )\n+    return errors\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+for model in models:\n+    if model._meta.managed and not model._meta.proxy:\n+        db_alias = router.db_for_read(model)\n+        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+    if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n                     \"The '%s.check()' class method is currently overridden by %r.\"\n@@ -35,16 +95,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "variant_8": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..d68cd126fe 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,13 +3,27 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n+    db_table_models = defaultdict(lambda: defaultdict(list))\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n@@ -19,8 +33,56 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n+            db_alias = router.db_for_read(model)\n+            db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+        for model_index in model._meta.indexes:\n+            indexes[model_index.name].append(model._meta.label)\n+        for model_constraint in model._meta.constraints:\n+            constraints[model_constraint.name].append(model._meta.label)\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n+    for index_name, model_labels in indexes.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique %s.\"\n+                    % (index_name, 'for model %s' % model_labels[0] if len(model_labels) == 1 else 'amongst models: %s' % ', '.join(model_labels)),\n+                    id='models.E029',\n+                )\n+            )\n+    for constraint_name, model_labels in constraints.items():\n+        if len(model_labels) != 1:\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique %s.\"\n+                    % (constraint_name, 'for model %s' % model_labels[0] if len(model_labels) == 1 else 'amongst models: %s' % ', '.join(model_labels)),\n+                    id='models.E030',\n+                )\n+            )\n+    return errors\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+\n+for model in models:\n+    if model._meta.managed and not model._meta.proxy:\n+        db_alias = router.db_for_read(model)\n+        db_table_models[db_alias][model._meta.db_table].append(model._meta.label)\n+    if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n                     \"The '%s.check()' class method is currently overridden by %r.\"\n@@ -35,16 +97,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+\n+    for db_alias, tables in db_table_models.items():\n+        for db_table, model_labels in tables.items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models: %s.\"\n+                        % (db_table, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n"
  }
}