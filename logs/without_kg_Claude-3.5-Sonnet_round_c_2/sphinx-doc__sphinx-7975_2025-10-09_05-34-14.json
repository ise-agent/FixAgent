{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/environment/adapters/indexentries.py lines 111-112)": "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/environment/adapters/indexentries.py lines 153-154)": "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/environment/adapters/indexentries.py lines 111-112)": [
      "\n        # sort the index entries; put all symbols at the front, even those\n        # following the letters in ASCII, this is where the chr(127) comes from\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                lckey = chr(127) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n"
    ],
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/environment/adapters/indexentries.py lines 153-154)": [
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if not (key[0:1].isalpha() or key.startswith('_')):\n                key = chr(127) + key\n            return key\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..4bd0baa94 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,7 +108,8 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n@@ -150,7 +151,8 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n \n",
    "variant_0": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_1": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..3b8897aa8 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,25 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        # sort the index entries; put all symbols at the front, even those\n+        # following the letters in ASCII, this is where the chr(127) comes from\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +164,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_2": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_3": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_4": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_5": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_6": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_7": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n",
    "variant_8": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..7343f86fe 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,11 +108,23 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n@@ -150,9 +162,16 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+\n+        # sort the sub-index entries\n+        def keyfunc2(entry: Tuple[str, List]) -> str:\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if not (key[0:1].isalpha() or key.startswith('_')):\n                 key = chr(127) + key\n             return key\n+            return key\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n"
  }
}