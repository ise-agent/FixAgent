{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/serializer.py lines 273-288)": "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
    "Location 2 (/root/hy/projects_2/django/django/db/migrations/writer.py lines 165-171)": "\n        # Special cases for common Django objects\n        BUILTIN_SEQUENCES = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), \"None\", []),\n        ]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/serializer.py lines 273-288)": [
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/db/migrations/writer.py lines 165-171)": [
      "\n    BUILTIN_SERIALIZERS = [\n        (bool, BooleanSerializer),\n        (bytearray, ByteArraySerializer),\n        (bytes, BytesSerializer),\n        (datetime.date, DateSerializer),\n        (datetime.datetime, DateTimeSerializer),\n        (datetime.time, TimeSerializer),\n        (datetime.timedelta, TimeDeltaSerializer),\n        (decimal.Decimal, DecimalSerializer),\n        (dict, DictSerializer),\n        (enum.Enum, EnumSerializer),\n        (float, FloatSerializer),\n        (frozenset, FrozensetSerializer),\n        (int, IntegerSerializer),\n        (list, SequenceSerializer),\n        (set, SetSerializer),\n        (tuple, TupleSerializer),\n        (type(None), NoneSerializer),\n        (uuid.UUID, UUIDSerializer),\n        # Django-specific type serializers.\n        (models.Model, \"models.Model\", [\"from django.db import models\"]),\n        (type, TypeSerializer),\n    ]\n",
      "\n        # Special cases for common Django field types.\n        BUILTIN_SEQUENCES = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), \"type(None)\", []),\n        ]\n",
      "\n        # Special cases for common things we don't deep-serialize.\n        if value in COMPILED_REGEX_TYPE:\n            return SerializerResult(\n                repr(value.pattern), {\"import re\"}\n            )\n        elif value is models.Model:\n            return SerializerResult(\n                \"models.Model\", {\"from django.db import models\"}\n            )\n        elif isinstance(value, type):\n            special_cases = [\n                (models.Model, \"models.Model\", {\"from django.db import models\"}),\n            ]\n            for case, string, imports in special_cases:\n                if case is value:\n                    return SerializerResult(string, imports)\n",
      "\n        # Special cases for common things we don't deep-serialize.\n        if isinstance(value, type):\n            special_cases = [\n                (models.Model, \"models.Model\", [\"from django.db import models\"]),\n                (type(None), \"type(None)\", []),\n            ]\n            for case, string, imports in special_cases:\n                if case is value:\n                    return string, set(imports)\n        if isinstance(value, models.Field):\n            attr_name = value.__class__.__name__\n            path = value.__class__.__module__\n            return \"%s.%s\" % (path, attr_name), {\"from %s import %s\" % (path, attr_name)}\n",
      "\n    BUILTIN_SERIALIZERS = [\n        (bool, BooleanSerializer),\n        (bytearray, ByteArraySerializer),\n        (bytes, BytesSerializer),\n        (datetime.datetime, DatetimeSerializer),\n        (datetime.date, DateSerializer),\n        (datetime.time, TimeSerializer),\n        (datetime.timedelta, TimedeltaSerializer),\n        (decimal.Decimal, DecimalSerializer),\n        (collections.abc.Iterable, IterableSerializer),\n        (enum.Enum, EnumSerializer),\n        (frozenset, FrozensetSerializer),\n        (functools.partial, FunctoolsPartialSerializer),\n        (functools.partialmethod, FunctoolsPartialMethodSerializer),\n        (type(lambda: None), FunctionTypeSerializer),\n        (models.Model, \"models.Model\", [\"from django.db import models\"]),\n        (type(None), NoneTypeSerializer),\n        (pathlib.PurePath, PathSerializer),\n        (re.Pattern, RegexSerializer),\n        (set, SetSerializer),\n        (tuple, TupleSerializer),\n        (type, TypeSerializer),\n        (uuid.UUID, UUIDSerializer),\n    ]\n",
      "\n        return (\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), \"type(None)\", []),\n            (tuple, \"tuple\", []),\n            (list, \"list\", []),\n            (dict, \"dict\", []),\n            (set, \"set\", []),\n            (frozenset, \"frozenset\", []),\n        )\n",
      "\n        # Special cases for common things we don't want to be fully qualified\n        # if it's used a lot.\n        if type_ is models.Model:\n            return \"models.Model\", {\"from django.db import models\"}\n        if isinstance(type_, type) and issubclass(type_, models.Model):\n            return type_.__name__, {\"from %s import %s\" % (type_.__module__, type_.__name__)}\n        \n        # Try to construct a serializer for the type, falling back to repr if it fails.\n        serializer = serializer_factory(type_)\n        if serializer:\n            return serializer.serialize()\n        if getattr(type_, \"__module__\", None) == \"builtins\":\n            return repr(type_), set()\n        else:\n            return \"%s.%s\" % (type_.__module__, type_.__qualname__), {\"import %s\" % type_.__module__}\n",
      "\n        # Special cases for common Django objects\n        BUILTIN_SEQUENCES = [\n            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n            (type(None), \"type(None)\", []),\n        ]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..ab0c433f56 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,6 +162,7 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n+\n         # django.db.migrations is always used, but models import may not be.\n         # If models import exists, merge it with migrations import.\n         if \"from django.db import models\" in imports:\n",
    "variant_0": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..722839943d 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,12 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+        # Special cases for common Django objects\n+        BUILTIN_SEQUENCES = [\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n+            (type(None), \"None\", []),\n+        ]\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_1": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..268339c172 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,30 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+    BUILTIN_SERIALIZERS = [\n+        (bool, BooleanSerializer),\n+        (bytearray, ByteArraySerializer),\n+        (bytes, BytesSerializer),\n+        (datetime.date, DateSerializer),\n+        (datetime.datetime, DateTimeSerializer),\n+        (datetime.time, TimeSerializer),\n+        (datetime.timedelta, TimeDeltaSerializer),\n+        (decimal.Decimal, DecimalSerializer),\n+        (dict, DictSerializer),\n+        (enum.Enum, EnumSerializer),\n+        (float, FloatSerializer),\n+        (frozenset, FrozensetSerializer),\n+        (int, IntegerSerializer),\n+        (list, SequenceSerializer),\n+        (set, SetSerializer),\n+        (tuple, TupleSerializer),\n+        (type(None), NoneSerializer),\n+        (uuid.UUID, UUIDSerializer),\n+        # Django-specific type serializers.\n+        (models.Model, \"models.Model\", [\"from django.db import models\"]),\n+        (type, TypeSerializer),\n+    ]\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_2": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..519f64c658 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,12 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+        # Special cases for common Django field types.\n+        BUILTIN_SEQUENCES = [\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n+            (type(None), \"type(None)\", []),\n+        ]\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_3": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..9cdb231cf2 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,23 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+        # Special cases for common things we don't deep-serialize.\n+        if value in COMPILED_REGEX_TYPE:\n+            return SerializerResult(\n+                repr(value.pattern), {\"import re\"}\n+            )\n+        elif value is models.Model:\n+            return SerializerResult(\n+                \"models.Model\", {\"from django.db import models\"}\n+            )\n+        elif isinstance(value, type):\n+            special_cases = [\n+                (models.Model, \"models.Model\", {\"from django.db import models\"}),\n+            ]\n+            for case, string, imports in special_cases:\n+                if case is value:\n+                    return SerializerResult(string, imports)\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_4": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..6a7cd9969d 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,20 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+        # Special cases for common things we don't deep-serialize.\n+        if isinstance(value, type):\n+            special_cases = [\n+                (models.Model, \"models.Model\", [\"from django.db import models\"]),\n+                (type(None), \"type(None)\", []),\n+            ]\n+            for case, string, imports in special_cases:\n+                if case is value:\n+                    return string, set(imports)\n+        if isinstance(value, models.Field):\n+            attr_name = value.__class__.__name__\n+            path = value.__class__.__module__\n+            return \"%s.%s\" % (path, attr_name), {\"from %s import %s\" % (path, attr_name)}\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_5": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..7bbb3519b5 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,31 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+    BUILTIN_SERIALIZERS = [\n+        (bool, BooleanSerializer),\n+        (bytearray, ByteArraySerializer),\n+        (bytes, BytesSerializer),\n+        (datetime.datetime, DatetimeSerializer),\n+        (datetime.date, DateSerializer),\n+        (datetime.time, TimeSerializer),\n+        (datetime.timedelta, TimedeltaSerializer),\n+        (decimal.Decimal, DecimalSerializer),\n+        (collections.abc.Iterable, IterableSerializer),\n+        (enum.Enum, EnumSerializer),\n+        (frozenset, FrozensetSerializer),\n+        (functools.partial, FunctoolsPartialSerializer),\n+        (functools.partialmethod, FunctoolsPartialMethodSerializer),\n+        (type(lambda: None), FunctionTypeSerializer),\n+        (models.Model, \"models.Model\", [\"from django.db import models\"]),\n+        (type(None), NoneTypeSerializer),\n+        (pathlib.PurePath, PathSerializer),\n+        (re.Pattern, RegexSerializer),\n+        (set, SetSerializer),\n+        (tuple, TupleSerializer),\n+        (type, TypeSerializer),\n+        (uuid.UUID, UUIDSerializer),\n+    ]\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_6": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..9a214294e0 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,16 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+        return (\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n+            (type(None), \"type(None)\", []),\n+            (tuple, \"tuple\", []),\n+            (list, \"list\", []),\n+            (dict, \"dict\", []),\n+            (set, \"set\", []),\n+            (frozenset, \"frozenset\", []),\n+        )\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_7": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..7a04a0c794 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,22 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n+\n+        # Special cases for common things we don't want to be fully qualified\n+        # if it's used a lot.\n+        if type_ is models.Model:\n+            return \"models.Model\", {\"from django.db import models\"}\n+        if isinstance(type_, type) and issubclass(type_, models.Model):\n+            return type_.__name__, {\"from %s import %s\" % (type_.__module__, type_.__name__)}\n+        \n+        # Try to construct a serializer for the type, falling back to repr if it fails.\n+        serializer = serializer_factory(type_)\n+        if serializer:\n+            return serializer.serialize()\n+        if getattr(type_, \"__module__\", None) == \"builtins\":\n+            return repr(type_), set()\n         else:\n-            imports.add(\"from django.db import migrations\")\n+            return \"%s.%s\" % (type_.__module__, type_.__qualname__), {\"import %s\" % type_.__module__}\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n",
    "variant_8": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..5a26470fb9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -270,10 +270,11 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n@@ -286,7 +287,6 @@ class TypeSerializer(BaseSerializer):\n             else:\n                 return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n-\n class UUIDSerializer(BaseSerializer):\n     def serialize(self):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..0a5a5eec21 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -162,13 +162,12 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n-        # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+\n+        # Special cases for common Django objects\n+        BUILTIN_SEQUENCES = [\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n+            (type(None), \"type(None)\", []),\n+        ]\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n"
  }
}