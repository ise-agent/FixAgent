{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/seaborn/seaborn/_core/scales.py lines 349-355)": "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/seaborn/seaborn/_core/scales.py lines 349-355)": [
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        a = forward(vmin)\n        b_val = forward(vmax)\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n            a = float(a)\n            b_val = float(b_val)\n        \n        b = b_val - a\n\n        def normalize(x):\n            return (x - a) / b\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..f48936c0 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n+\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            b_val = forward(vmax)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+                a = float(a)\n+                b_val = float(b_val)\n+            \n+            b = b_val - a\n \n             def normalize(x):\n                 return (x - a) / b\n-\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_0": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_1": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_2": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_3": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_4": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_5": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_6": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_7": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n",
    "variant_8": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..b56e63b3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,13 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-\n-            def normalize(x):\n-                return (x - a) / b\n \n+        vmin, vmax = axis.convert_units((vmin, vmax))\n+        a = forward(vmin)\n+        b_val = forward(vmax)\n+        \n+        # Convert boolean values to numeric for arithmetic operations\n+        if isinstance(a, (bool, np.bool_)) or isinstance(b_val, (bool, np.bool_)):\n+            a = float(a)\n+            b_val = float(b_val)\n+        \n+        b = b_val - a\n+\n+        def normalize(x):\n+            return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n \n"
  }
}