{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/management/commands/inspectdb.py lines 90-135)": "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships to generate related_name when needed\n                fk_target_counts = {}  # Track how many FKs point to each target model\n                \n                # First pass: count foreign keys per target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        if rel_to not in fk_target_counts:\n                            fk_target_counts[rel_to] = 0\n                        fk_target_counts[rel_to] += 1\n",
    "Location 2 (/root/hy/projects_2/django/django/core/management/commands/inspectdb.py lines 165-188)": "\n                if is_relation:\n                    ref_db_column, ref_db_table = relations[column_name]\n                    if extra_params.pop(\"unique\", False) or extra_params.get(\n                        \"primary_key\"\n                    ):\n                        rel_type = \"OneToOneField\"\n                    else:\n                        rel_type = \"ForeignKey\"\n                        ref_pk_column = (\n                            connection.introspection.get_primary_key_column(\n                                cursor, ref_db_table\n                            )\n                        )\n                        if ref_pk_column and ref_pk_column != ref_db_column:\n                            extra_params[\"to_field\"] = ref_db_column\n                    rel_to = (\n                        \"self\"\n                        if ref_db_table == table_name\n                        else table2model(ref_db_table)\n                    )\n                    \n                    # Count foreign keys pointing to the same target model\n                    fk_count_to_target = sum(\n                        1 for other_col in relations\n                        if relations[other_col][1] == ref_db_table\n                    )\n                    \n                    # Generate related_name if multiple FKs point to same target\n                    if fk_count_to_target > 1:\n                        related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                        extra_params[\"related_name\"] = related_name\n                    \n                    if rel_to in known_models:\n                        field_type = \"%s(%s\" % (rel_type, rel_to)\n                    else:\n                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
    "Location 3 (/root/hy/projects_2/django/django/core/management/commands/inspectdb.py lines 227-236)": "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/management/commands/inspectdb.py lines 90-135)": [
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships to generate related_name when needed\n                fk_target_counts = {}  # Track how many FKs point to each target model\n                \n                # First pass: count foreign keys per target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        if rel_to not in fk_target_counts:\n                            fk_target_counts[rel_to] = 0\n                        fk_target_counts[rel_to] += 1\n",
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships to determine when to add related_name\n                fk_target_counts = {}  # Count how many FKs point to each target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        if rel_to not in fk_target_counts:\n                            fk_target_counts[rel_to] = 0\n                        fk_target_counts[rel_to] += 1\n",
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships per target model\n                fk_target_counts = {}  # Track how many FKs point to each target model\n                \n                # First pass: count foreign keys per target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        if rel_to not in fk_target_counts:\n                            fk_target_counts[rel_to] = 0\n                        fk_target_counts[rel_to] += 1\n",
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships to generate related_name when needed\n                fk_target_counts = {}  # Track how many FKs point to each target model\n                \n                # First pass: count foreign keys per target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        if rel_to not in fk_target_counts:\n                            fk_target_counts[rel_to] = 0\n                        fk_target_counts[rel_to] += 1\n",
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships to generate related_name when needed\n                fk_target_counts = {}  # Count how many FKs point to each target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        fk_target_counts[rel_to] = fk_target_counts.get(rel_to, 0) + 1\n",
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships to determine when related_name is needed\n                fk_target_counts = {}  # Track how many FKs point to each target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        if rel_to not in fk_target_counts:\n                            fk_target_counts[rel_to] = 0\n                        fk_target_counts[rel_to] += 1\n",
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships per target model\n                fk_target_counts = {}  # Track how many FKs point to each target model\n                \n                # First pass: count foreign keys per target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        if rel_to not in fk_target_counts:\n                            fk_target_counts[rel_to] = 0\n                        fk_target_counts[rel_to] += 1\n",
      "\n            for table_name in options[\"table\"] or sorted(\n                info.name for info in table_info if info.type in types\n            ):\n                if table_name_filter is not None and callable(table_name_filter):\n                    if not table_name_filter(table_name):\n                        continue\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    try:\n                        constraints = connection.introspection.get_constraints(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        constraints = {}\n                    primary_key_columns = (\n                        connection.introspection.get_primary_key_columns(\n                            cursor, table_name\n                        )\n                    )\n                    primary_key_column = (\n                        primary_key_columns[0] if primary_key_columns else None\n                    )\n                    unique_columns = [\n                        c[\"columns\"][0]\n                        for c in constraints.values()\n                        if c[\"unique\"] and len(c[\"columns\"]) == 1\n                    ]\n                    table_description = connection.introspection.get_table_description(\n                        cursor, table_name\n                    )\n                except Exception as e:\n                    yield \"# Unable to inspect table '%s'\" % table_name\n                    yield \"# The error was: %s\" % e\n                    continue\n\n                yield \"\"\n                yield \"\"\n                yield \"class %s(models.Model):\" % table2model(table_name)\n                known_models.append(table2model(table_name))\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Track foreign key relationships to generate related_name when needed\n                fk_target_counts = {}  # Count how many FKs point to each target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n                        fk_target_counts[rel_to] = fk_target_counts.get(rel_to, 0) + 1\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/core/management/commands/inspectdb.py lines 165-188)": [
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Count foreign keys pointing to the same target model\n                        same_target_count = sum(\n                            1 for col_name in relations\n                            if (relations[col_name][1] == ref_db_table and\n                                table2model(relations[col_name][1]) == rel_to)\n                        )\n                        \n                        # Generate related_name if multiple FKs point to same target\n                        if same_target_count > 1:\n                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                            extra_params[\"related_name\"] = related_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Count foreign keys pointing to the same target model\n                        fk_count_to_target = sum(\n                            1 for other_col_name, (_, other_ref_table) in relations.items()\n                            if (other_ref_table == ref_db_table and \n                                other_col_name in [r.name for r in table_description])\n                        )\n                        \n                        # Generate related_name if multiple FKs point to same target\n                        if fk_count_to_target > 1:\n                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                            extra_params[\"related_name\"] = related_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Count foreign keys pointing to the same target model\n                        target_fk_count = sum(\n                            1 for col_name in relations\n                            if (relations[col_name][1] == ref_db_table and \n                                not (column_to_field_name.get(col_name, col_name) in primary_key_columns and \n                                     len([c for c in relations if relations[c][1] == ref_db_table and \n                                         column_to_field_name.get(c, c) in primary_key_columns]) == 1))\n                        )\n                        \n                        # Generate related_name if multiple FKs point to same target\n                        if target_fk_count > 1 and rel_type == \"ForeignKey\":\n                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                            extra_params[\"related_name\"] = related_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        \n                        # Count foreign keys pointing to the same target model\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Count how many FKs point to this target model\n                        fk_count = sum(\n                            1 for col_name in relations \n                            if (relations[col_name][1] == ref_db_table)\n                        )\n                        \n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        \n                        # Generate related_name if multiple FKs point to same target\n                        if fk_count > 1:\n                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                            extra_params[\"related_name\"] = related_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Count foreign keys pointing to the same target model\n                        fk_count_for_target = sum(\n                            1 for r in table_description\n                            if r.name in relations and (\n                                \"self\" if relations[r.name][1] == table_name \n                                else table2model(relations[r.name][1])\n                            ) == rel_to\n                        )\n                        \n                        # Generate related_name if multiple FKs point to same target\n                        if fk_count_for_target > 1:\n                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                            extra_params[\"related_name\"] = related_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                if is_relation:\n                    ref_db_column, ref_db_table = relations[column_name]\n                    if extra_params.pop(\"unique\", False) or extra_params.get(\n                        \"primary_key\"\n                    ):\n                        rel_type = \"OneToOneField\"\n                    else:\n                        rel_type = \"ForeignKey\"\n                        ref_pk_column = (\n                            connection.introspection.get_primary_key_column(\n                                cursor, ref_db_table\n                            )\n                        )\n                        if ref_pk_column and ref_pk_column != ref_db_column:\n                            extra_params[\"to_field\"] = ref_db_column\n                    rel_to = (\n                        \"self\"\n                        if ref_db_table == table_name\n                        else table2model(ref_db_table)\n                    )\n                    \n                    # Count foreign keys pointing to the same target model\n                    fk_count_for_target = sum(\n                        1 for rel_col, rel_table in relations.values()\n                        if (table2model(rel_table) if rel_table != table_name else \"self\") == rel_to\n                    )\n                    \n                    # Generate related_name if multiple FKs point to same target\n                    if fk_count_for_target > 1:\n                        related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                        extra_params[\"related_name\"] = related_name\n                    \n                    if rel_to in known_models:\n                        field_type = \"%s(%s\" % (rel_type, rel_to)\n                    else:\n                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Count foreign keys pointing to the same target model\n                        fk_count_to_target = sum(\n                            1 for col_name in relations\n                            if (table2model(relations[col_name][1]) if relations[col_name][1] != table_name else \"self\") == rel_to\n                        )\n                        \n                        # Generate related_name if multiple FKs point to same target\n                        if fk_count_to_target > 1:\n                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                            extra_params[\"related_name\"] = related_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Count foreign keys pointing to the same target model\n                        fk_count = sum(1 for rel_col, rel_table in relations.values() \n                                      if (table2model(rel_table) if rel_table != table_name else \"self\") == rel_to)\n                        \n                        # Generate related_name if multiple FKs point to same target\n                        if fk_count > 1:\n                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n                            extra_params[\"related_name\"] = related_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n"
    ],
    "Location 3 (/root/hy/projects_2/django/django/core/management/commands/inspectdb.py lines 227-236)": [
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n                    field_desc += \")\"\n                    if comment_notes:\n                        field_desc += \"  # \" + \" \".join(comment_notes)\n                    yield \"    %s\" % field_desc\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..c1666430bd 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,19 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships per target model\n+                fk_target_counts = {}  # Track how many FKs point to each target model\n+                \n+                # First pass: count foreign keys per target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +176,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +197,12 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if fk_target_counts.get(rel_to, 0) > 1:\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +245,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_0": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..3aa24c626b 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,19 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships to generate related_name when needed\n+                fk_target_counts = {}  # Track how many FKs point to each target model\n+                \n+                # First pass: count foreign keys per target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,30 +176,43 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n-                    if is_relation:\n-                        ref_db_column, ref_db_table = relations[column_name]\n-                        if extra_params.pop(\"unique\", False) or extra_params.get(\n-                            \"primary_key\"\n-                        ):\n-                            rel_type = \"OneToOneField\"\n-                        else:\n-                            rel_type = \"ForeignKey\"\n-                            ref_pk_column = (\n-                                connection.introspection.get_primary_key_column(\n-                                    cursor, ref_db_table\n-                                )\n+\n+                if is_relation:\n+                    ref_db_column, ref_db_table = relations[column_name]\n+                    if extra_params.pop(\"unique\", False) or extra_params.get(\n+                        \"primary_key\"\n+                    ):\n+                        rel_type = \"OneToOneField\"\n+                    else:\n+                        rel_type = \"ForeignKey\"\n+                        ref_pk_column = (\n+                            connection.introspection.get_primary_key_column(\n+                                cursor, ref_db_table\n                             )\n-                            if ref_pk_column and ref_pk_column != ref_db_column:\n-                                extra_params[\"to_field\"] = ref_db_column\n-                        rel_to = (\n-                            \"self\"\n-                            if ref_db_table == table_name\n-                            else table2model(ref_db_table)\n                         )\n-                        if rel_to in known_models:\n-                            field_type = \"%s(%s\" % (rel_type, rel_to)\n-                        else:\n-                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        if ref_pk_column and ref_pk_column != ref_db_column:\n+                            extra_params[\"to_field\"] = ref_db_column\n+                    rel_to = (\n+                        \"self\"\n+                        if ref_db_table == table_name\n+                        else table2model(ref_db_table)\n+                    )\n+                    \n+                    # Count foreign keys pointing to the same target model\n+                    fk_count_to_target = sum(\n+                        1 for other_col in relations\n+                        if relations[other_col][1] == ref_db_table\n+                    )\n+                    \n+                    # Generate related_name if multiple FKs point to same target\n+                    if fk_count_to_target > 1:\n+                        related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                        extra_params[\"related_name\"] = related_name\n+                    \n+                    if rel_to in known_models:\n+                        field_type = \"%s(%s\" % (rel_type, rel_to)\n+                    else:\n+                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n@@ -224,6 +251,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_1": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..a2b30bdf97 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,19 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships to generate related_name when needed\n+                fk_target_counts = {}  # Track how many FKs point to each target model\n+                \n+                # First pass: count foreign keys per target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +176,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +197,19 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Count foreign keys pointing to the same target model\n+                        same_target_count = sum(\n+                            1 for col_name in relations\n+                            if (relations[col_name][1] == ref_db_table and\n+                                table2model(relations[col_name][1]) == rel_to)\n+                        )\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if same_target_count > 1:\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +252,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_2": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..5fc42d305d 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,17 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships to determine when to add related_name\n+                fk_target_counts = {}  # Count how many FKs point to each target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +174,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +195,19 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Count foreign keys pointing to the same target model\n+                        fk_count_to_target = sum(\n+                            1 for other_col_name, (_, other_ref_table) in relations.items()\n+                            if (other_ref_table == ref_db_table and \n+                                other_col_name in [r.name for r in table_description])\n+                        )\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if fk_count_to_target > 1:\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +250,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_3": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..1688e1d9ca 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,19 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships per target model\n+                fk_target_counts = {}  # Track how many FKs point to each target model\n+                \n+                # First pass: count foreign keys per target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +176,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +197,21 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Count foreign keys pointing to the same target model\n+                        target_fk_count = sum(\n+                            1 for col_name in relations\n+                            if (relations[col_name][1] == ref_db_table and \n+                                not (column_to_field_name.get(col_name, col_name) in primary_key_columns and \n+                                     len([c for c in relations if relations[c][1] == ref_db_table and \n+                                         column_to_field_name.get(c, c) in primary_key_columns]) == 1))\n+                        )\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if target_fk_count > 1 and rel_type == \"ForeignKey\":\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +254,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_4": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..9c8fd82d3e 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,19 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships to generate related_name when needed\n+                fk_target_counts = {}  # Track how many FKs point to each target model\n+                \n+                # First pass: count foreign keys per target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,8 +176,23 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n+                        \n+                        # Count foreign keys pointing to the same target model\n+                        rel_to = (\n+                            \"self\"\n+                            if ref_db_table == table_name\n+                            else table2model(ref_db_table)\n+                        )\n+                        \n+                        # Count how many FKs point to this target model\n+                        fk_count = sum(\n+                            1 for col_name in relations \n+                            if (relations[col_name][1] == ref_db_table)\n+                        )\n+                        \n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n                             \"primary_key\"\n                         ):\n@@ -177,11 +206,12 @@ class Command(BaseCommand):\n                             )\n                             if ref_pk_column and ref_pk_column != ref_db_column:\n                                 extra_params[\"to_field\"] = ref_db_column\n-                        rel_to = (\n-                            \"self\"\n-                            if ref_db_table == table_name\n-                            else table2model(ref_db_table)\n-                        )\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if fk_count > 1:\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +254,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_5": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..9332a21848 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,15 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships to generate related_name when needed\n+                fk_target_counts = {}  # Count how many FKs point to each target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        fk_target_counts[rel_to] = fk_target_counts.get(rel_to, 0) + 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +172,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +193,21 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Count foreign keys pointing to the same target model\n+                        fk_count_for_target = sum(\n+                            1 for r in table_description\n+                            if r.name in relations and (\n+                                \"self\" if relations[r.name][1] == table_name \n+                                else table2model(relations[r.name][1])\n+                            ) == rel_to\n+                        )\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if fk_count_for_target > 1:\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +250,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_6": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..fbf6e10961 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,17 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships to determine when related_name is needed\n+                fk_target_counts = {}  # Track how many FKs point to each target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,30 +174,43 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n-                    if is_relation:\n-                        ref_db_column, ref_db_table = relations[column_name]\n-                        if extra_params.pop(\"unique\", False) or extra_params.get(\n-                            \"primary_key\"\n-                        ):\n-                            rel_type = \"OneToOneField\"\n-                        else:\n-                            rel_type = \"ForeignKey\"\n-                            ref_pk_column = (\n-                                connection.introspection.get_primary_key_column(\n-                                    cursor, ref_db_table\n-                                )\n+\n+                if is_relation:\n+                    ref_db_column, ref_db_table = relations[column_name]\n+                    if extra_params.pop(\"unique\", False) or extra_params.get(\n+                        \"primary_key\"\n+                    ):\n+                        rel_type = \"OneToOneField\"\n+                    else:\n+                        rel_type = \"ForeignKey\"\n+                        ref_pk_column = (\n+                            connection.introspection.get_primary_key_column(\n+                                cursor, ref_db_table\n                             )\n-                            if ref_pk_column and ref_pk_column != ref_db_column:\n-                                extra_params[\"to_field\"] = ref_db_column\n-                        rel_to = (\n-                            \"self\"\n-                            if ref_db_table == table_name\n-                            else table2model(ref_db_table)\n                         )\n-                        if rel_to in known_models:\n-                            field_type = \"%s(%s\" % (rel_type, rel_to)\n-                        else:\n-                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        if ref_pk_column and ref_pk_column != ref_db_column:\n+                            extra_params[\"to_field\"] = ref_db_column\n+                    rel_to = (\n+                        \"self\"\n+                        if ref_db_table == table_name\n+                        else table2model(ref_db_table)\n+                    )\n+                    \n+                    # Count foreign keys pointing to the same target model\n+                    fk_count_for_target = sum(\n+                        1 for rel_col, rel_table in relations.values()\n+                        if (table2model(rel_table) if rel_table != table_name else \"self\") == rel_to\n+                    )\n+                    \n+                    # Generate related_name if multiple FKs point to same target\n+                    if fk_count_for_target > 1:\n+                        related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                        extra_params[\"related_name\"] = related_name\n+                    \n+                    if rel_to in known_models:\n+                        field_type = \"%s(%s\" % (rel_type, rel_to)\n+                    else:\n+                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n@@ -224,6 +249,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_7": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..fad29466ff 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,19 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships per target model\n+                fk_target_counts = {}  # Track how many FKs point to each target model\n+                \n+                # First pass: count foreign keys per target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        if rel_to not in fk_target_counts:\n+                            fk_target_counts[rel_to] = 0\n+                        fk_target_counts[rel_to] += 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +176,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +197,18 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Count foreign keys pointing to the same target model\n+                        fk_count_to_target = sum(\n+                            1 for col_name in relations\n+                            if (table2model(relations[col_name][1]) if relations[col_name][1] != table_name else \"self\") == rel_to\n+                        )\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if fk_count_to_target > 1:\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +251,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_8": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..4543448159 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -87,6 +87,7 @@ class Command(BaseCommand):\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n \n+\n             for table_name in options[\"table\"] or sorted(\n                 info.name for info in table_info if info.type in types\n             ):\n@@ -133,6 +134,15 @@ class Command(BaseCommand):\n                 known_models.append(table2model(table_name))\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Track foreign key relationships to generate related_name when needed\n+                fk_target_counts = {}  # Count how many FKs point to each target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        ref_db_column, ref_db_table = relations[column_name]\n+                        rel_to = \"self\" if ref_db_table == table_name else table2model(ref_db_table)\n+                        fk_target_counts[rel_to] = fk_target_counts.get(rel_to, 0) + 1\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +172,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +193,16 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Count foreign keys pointing to the same target model\n+                        fk_count = sum(1 for rel_col, rel_table in relations.values() \n+                                      if (table2model(rel_table) if rel_table != table_name else \"self\") == rel_to)\n+                        \n+                        # Generate related_name if multiple FKs point to same target\n+                        if fk_count > 1:\n+                            related_name = f\"{table2model(table_name).lower()}_{att_name}_set\"\n+                            extra_params[\"related_name\"] = related_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +245,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n"
  }
}