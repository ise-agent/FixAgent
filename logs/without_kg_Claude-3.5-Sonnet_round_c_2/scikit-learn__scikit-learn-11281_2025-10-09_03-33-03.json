{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 67-67)": "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n",
    "Location 2 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 240-243)": "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
    "Location 3 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 74-77)": "\n    def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n                 max_iter=100, n_init=1, init_params='kmeans', \n                 random_state=None, warm_start=False,\n                 verbose=0, verbose_interval=10, n_clusters=None):\n        # Handle n_clusters/n_components compatibility\n        if n_clusters is not None and n_components is not None:\n            warnings.warn(\"Both n_clusters and n_components specified. \"\n                         \"Using n_clusters and ignoring n_components.\",\n                         UserWarning)\n            self.n_components = n_clusters\n        elif n_clusters is not None:\n            self.n_components = n_clusters\n        elif n_components is not None:\n            self.n_components = n_components\n        else:\n            raise ValueError(\"Either n_components or n_clusters must be specified\")\n",
    "Location 4 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 1-15)": "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
    "Location 5 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 68-72)": "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.base.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 67-67)": [
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.base.ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n"
    ],
    "Location 2 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 240-243)": [
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n"
    ],
    "Location 3 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 74-77)": [
      "\ndef __init__(self, n_components=1, tol=1e-3, reg_covar=1e-6,\n             max_iter=100, n_init=1, init_params='kmeans', random_state=None, warm_start=False,\n             verbose=0, verbose_interval=10, n_clusters=None):\n    # Handle n_clusters parameter for clusterer compatibility\n    if n_clusters is not None:\n        n_components = n_clusters\n    self.n_components = n_components\n",
      "\ndef __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n             max_iter=100, n_init=1, init_params='kmeans', \n             random_state=None, warm_start=False,\n             verbose=0, verbose_interval=10, n_clusters=None):\n    # Handle n_clusters/n_components compatibility\n    if n_clusters is not None:\n        self.n_components = n_clusters\n    elif n_components is not None:\n        self.n_components = n_components\n    else:\n        self.n_components = 1\n",
      "\ndef __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n             max_iter=100, n_init=1, init_params='kmeans', random_state=None, warm_start=False,\n             verbose=0, verbose_interval=10, n_clusters=None):\n    # Handle n_clusters/n_components compatibility\n    if n_clusters is not None and n_components is not None:\n        warnings.warn(\"Both n_clusters and n_components specified. Using n_clusters.\", \n                     UserWarning)\n        self.n_components = n_clusters\n    elif n_clusters is not None:\n        self.n_components = n_clusters\n    elif n_components is not None:\n        self.n_components = n_components\n    else:\n        self.n_components = 1\n",
      "\n    def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n                 max_iter=100, n_init=1, init_params='kmeans', \n                 random_state=None, warm_start=False,\n                 verbose=0, verbose_interval=10, n_clusters=None):\n        # Handle n_clusters/n_components compatibility\n        if n_clusters is not None and n_components is not None:\n            warnings.warn(\"Both n_clusters and n_components specified. \"\n                         \"Using n_clusters.\", UserWarning)\n            self.n_components = n_clusters\n        elif n_clusters is not None:\n            self.n_components = n_clusters\n        elif n_components is not None:\n            self.n_components = n_components\n        else:\n            self.n_components = 1\n",
      "\ndef __init__(self, n_components=1, tol=1e-3, reg_covar=1e-6,\n             max_iter=100, n_init=1, init_params='kmeans', \n             random_state=None, warm_start=False,\n             verbose=0, verbose_interval=10, n_clusters=None):\n    # Support n_clusters parameter for clusterer compatibility\n    if n_clusters is not None:\n        n_components = n_clusters\n    self.n_components = n_components\n",
      "\n    def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n                 max_iter=100, n_init=1, init_params='kmeans', \n                 random_state=None, warm_start=False,\n                 verbose=0, verbose_interval=10, n_clusters=None):\n        # Handle n_clusters/n_components compatibility\n        if n_clusters is not None and n_components is not None:\n            warnings.warn(\"Both n_clusters and n_components specified. \"\n                         \"Using n_clusters.\", UserWarning)\n            self.n_components = n_clusters\n        elif n_clusters is not None:\n            self.n_components = n_clusters\n        elif n_components is not None:\n            self.n_components = n_components\n        else:\n            raise ValueError(\"Either n_clusters or n_components must be specified\")\n",
      "\ndef __init__(self, n_components=None, tol=None, reg_covar=None,\n             max_iter=None, n_init=None, init_params=None, random_state=None, warm_start=None,\n             verbose=None, verbose_interval=None, n_clusters=None):\n    # Handle n_clusters parameter for clusterer compatibility\n    if n_clusters is not None:\n        self.n_components = n_clusters\n    elif n_components is not None:\n        self.n_components = n_components\n    else:\n        self.n_components = 1  # Default value\n",
      "\ndef __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n             max_iter=100, n_init=1, init_params='kmeans', random_state=None, warm_start=False,\n             verbose=0, verbose_interval=10, n_clusters=None):\n    # Handle n_clusters/n_components compatibility\n    if n_clusters is not None and n_components is not None:\n        warnings.warn(\"Both n_clusters and n_components specified. \"\n                     \"Using n_clusters value.\", UserWarning)\n        self.n_components = n_clusters\n    elif n_clusters is not None:\n        self.n_components = n_clusters\n    elif n_components is not None:\n        self.n_components = n_components\n    else:\n        self.n_components = 1\n"
    ],
    "Location 4 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 1-15)": [
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n",
      "\n\"\"\"Base class for mixture models.\"\"\"\n\n# Author: Wei Xue <xuewei4d@gmail.com>\n# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n# License: BSD 3 clause\n\nfrom __future__ import print_function\n\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom time import time\n\nimport numpy as np\n\nfrom .. import cluster\n"
    ],
    "Location 5 (/root/hy/projects_2/scikit-learn/sklearn/mixture/base.py lines 68-72)": [
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models. Mixture models can be\n    used as clusterers by utilizing their predict() method to assign samples\n    to mixture components.\n    \"\"\"\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, cluster.base.ClusterMixin, DensityMixin, BaseEstimator)):\n    \"\"\"Base class for mixture models.\n\n    This abstract class specifies an interface for all mixture classes and\n    provides basic common methods for mixture models.\n    \"\"\"\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..9ffa8aecb 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,18 +1,14 @@\n-\"\"\"Base class for mixture models.\"\"\"\n-\n-# Author: Wei Xue <xuewei4d@gmail.com>\n-# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n-# License: BSD 3 clause\n-\n-from __future__ import print_function\n-\n-import warnings\n-from abc import ABCMeta, abstractmethod\n-from time import time\n \n-import numpy as np\n-\n-from .. import cluster\n+    def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n+                 max_iter=100, n_init=1, init_params='kmeans', random_state=None, warm_start=False,\n+                 verbose=0, verbose_interval=10, n_clusters=None):\n+        # Support both n_clusters and n_components for compatibility\n+        if n_clusters is not None:\n+            self.n_components = n_clusters\n+        elif n_components is not None:\n+            self.n_components = n_components\n+        else:\n+            raise ValueError(\"Either n_components or n_clusters must be specified\")\n from ..base import BaseEstimator\n from ..base import DensityMixin\n from ..externals import six\n@@ -64,17 +60,41 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+\"\"\"Base class for mixture models.\"\"\"\n+\n+# Author: Wei Xue <xuewei4d@gmail.com>\n+# Modified by Thierry Guillemot <thierry.guillemot.work@gmail.com>\n+# License: BSD 3 clause\n+\n+from __future__ import print_function\n+\n+import warnings\n+from abc import ABCMeta, abstractmethod\n+from time import time\n+\n+import numpy as np\n+\n+from .. import cluster\n+from ..base import ClusterMixin\n+\n+        self._set_parameters(best_params)\n+        self.n_iter_ = best_n_iter\n+        \n+        # Store labels for clusterer interface compatibility\n+        self.labels_ = self.predict(X)\n+\n+        return self\n+\n+\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n+    \n+    This class implements the clusterer interface, making mixture models\n+    compatible with scikit-learn's clustering API.\n     \"\"\"\n-\n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n-        self.n_components = n_components\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,10 +257,8 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n-        self._set_parameters(best_params)\n-        self.n_iter_ = best_n_iter\n \n-        return self\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n \n     def _e_step(self, X):\n         \"\"\"E step.\n",
    "variant_0": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..70daf10e2 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,33 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.base.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n-        self.n_components = n_components\n+\n+    def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n+                 max_iter=100, n_init=1, init_params='kmeans', \n+                 random_state=None, warm_start=False,\n+                 verbose=0, verbose_interval=10, n_clusters=None):\n+        # Handle n_clusters/n_components compatibility\n+        if n_clusters is not None and n_components is not None:\n+            warnings.warn(\"Both n_clusters and n_components specified. \"\n+                         \"Using n_clusters and ignoring n_components.\",\n+                         UserWarning)\n+            self.n_components = n_clusters\n+        elif n_clusters is not None:\n+            self.n_components = n_clusters\n+        elif n_components is not None:\n+            self.n_components = n_components\n+        else:\n+            raise ValueError(\"Either n_components or n_clusters must be specified\")\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +254,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_1": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..59d5df3aa 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,26 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.base.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n-    provides basic common methods for mixture models.\n+    provides basic common methods for mixture models. Mixture models can be\n+    used as clusterers by utilizing their predict() method to assign samples\n+    to mixture components.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n-        self.n_components = n_components\n+\n+def __init__(self, n_components=1, tol=1e-3, reg_covar=1e-6,\n+             max_iter=100, n_init=1, init_params='kmeans', random_state=None, warm_start=False,\n+             verbose=0, verbose_interval=10, n_clusters=None):\n+    # Handle n_clusters parameter for clusterer compatibility\n+    if n_clusters is not None:\n+        n_components = n_clusters\n+    self.n_components = n_components\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +247,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_2": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..d89e8cbd6 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,28 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n+\n+def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n+             max_iter=100, n_init=1, init_params='kmeans', \n+             random_state=None, warm_start=False,\n+             verbose=0, verbose_interval=10, n_clusters=None):\n+    # Handle n_clusters/n_components compatibility\n+    if n_clusters is not None:\n+        self.n_components = n_clusters\n+    elif n_components is not None:\n         self.n_components = n_components\n+    else:\n+        self.n_components = 1\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +249,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_3": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..53515a043 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,31 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n+\n+def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n+             max_iter=100, n_init=1, init_params='kmeans', random_state=None, warm_start=False,\n+             verbose=0, verbose_interval=10, n_clusters=None):\n+    # Handle n_clusters/n_components compatibility\n+    if n_clusters is not None and n_components is not None:\n+        warnings.warn(\"Both n_clusters and n_components specified. Using n_clusters.\", \n+                     UserWarning)\n+        self.n_components = n_clusters\n+    elif n_clusters is not None:\n+        self.n_components = n_clusters\n+    elif n_components is not None:\n         self.n_components = n_components\n+    else:\n+        self.n_components = 1\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +252,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_4": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..78896eafc 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,32 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n-        self.n_components = n_components\n+\n+    def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n+                 max_iter=100, n_init=1, init_params='kmeans', \n+                 random_state=None, warm_start=False,\n+                 verbose=0, verbose_interval=10, n_clusters=None):\n+        # Handle n_clusters/n_components compatibility\n+        if n_clusters is not None and n_components is not None:\n+            warnings.warn(\"Both n_clusters and n_components specified. \"\n+                         \"Using n_clusters.\", UserWarning)\n+            self.n_components = n_clusters\n+        elif n_clusters is not None:\n+            self.n_components = n_clusters\n+        elif n_components is not None:\n+            self.n_components = n_components\n+        else:\n+            self.n_components = 1\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +253,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_5": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..bf64ac182 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,25 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n-        self.n_components = n_components\n+\n+def __init__(self, n_components=1, tol=1e-3, reg_covar=1e-6,\n+             max_iter=100, n_init=1, init_params='kmeans', \n+             random_state=None, warm_start=False,\n+             verbose=0, verbose_interval=10, n_clusters=None):\n+    # Support n_clusters parameter for clusterer compatibility\n+    if n_clusters is not None:\n+        n_components = n_clusters\n+    self.n_components = n_components\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +246,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_6": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..e174613a2 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,32 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n-        self.n_components = n_components\n+\n+    def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n+                 max_iter=100, n_init=1, init_params='kmeans', \n+                 random_state=None, warm_start=False,\n+                 verbose=0, verbose_interval=10, n_clusters=None):\n+        # Handle n_clusters/n_components compatibility\n+        if n_clusters is not None and n_components is not None:\n+            warnings.warn(\"Both n_clusters and n_components specified. \"\n+                         \"Using n_clusters.\", UserWarning)\n+            self.n_components = n_clusters\n+        elif n_clusters is not None:\n+            self.n_components = n_clusters\n+        elif n_components is not None:\n+            self.n_components = n_components\n+        else:\n+            raise ValueError(\"Either n_clusters or n_components must be specified\")\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +253,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_7": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..fb64da3a9 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,27 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n+\n+def __init__(self, n_components=None, tol=None, reg_covar=None,\n+             max_iter=None, n_init=None, init_params=None, random_state=None, warm_start=None,\n+             verbose=None, verbose_interval=None, n_clusters=None):\n+    # Handle n_clusters parameter for clusterer compatibility\n+    if n_clusters is not None:\n+        self.n_components = n_clusters\n+    elif n_components is not None:\n         self.n_components = n_components\n+    else:\n+        self.n_components = 1  # Default value\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +248,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_8": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..e51b0e4ec 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Base class for mixture models.\"\"\"\n \n # Author: Wei Xue <xuewei4d@gmail.com>\n@@ -64,17 +65,31 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.ClusterMixin, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, cluster.base.ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n-                 max_iter, n_init, init_params, random_state, warm_start,\n-                 verbose, verbose_interval):\n+\n+def __init__(self, n_components=None, tol=1e-3, reg_covar=1e-6,\n+             max_iter=100, n_init=1, init_params='kmeans', random_state=None, warm_start=False,\n+             verbose=0, verbose_interval=10, n_clusters=None):\n+    # Handle n_clusters/n_components compatibility\n+    if n_clusters is not None and n_components is not None:\n+        warnings.warn(\"Both n_clusters and n_components specified. \"\n+                     \"Using n_clusters value.\", UserWarning)\n+        self.n_components = n_clusters\n+    elif n_clusters is not None:\n+        self.n_components = n_clusters\n+    elif n_components is not None:\n         self.n_components = n_components\n+    else:\n+        self.n_components = 1\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -237,8 +252,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n"
  }
}