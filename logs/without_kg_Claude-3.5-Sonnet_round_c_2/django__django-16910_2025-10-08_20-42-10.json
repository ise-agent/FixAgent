{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 1247-1253)": "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
    "Location 2 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 1281-1286)": "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
    "Location 3 (/root/hy/projects_2/django/django/db/models/sql/query.py lines 780-782)": "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys in select_mask and must be obtained\n        # consistently using opts.get_field() to ensure proper lookups in compiler.\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
    "Location 4 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 993-994)": "\n            if select_mask and field not in select_mask:\n                continue\n",
    "Location 5 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 1252-1260)": "\n            for related_field, model in related_fields:\n                # Use opts.get_field() to get the same field object instance used in select_mask\n                try:\n                    normalized_field = opts.get_field(related_field.name)\n                except FieldError:\n                    # Fallback to original field if normalization fails\n                    normalized_field = related_field\n                \n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 1247-1253)": [
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n",
      "\n        if restricted:\n            related_fields = [\n                (opts.get_field(o.field.name), o.related_model)\n                for o in opts.related_objects\n                if o.field.unique and not o.many_to_many\n            ]\n            for related_field, model in related_fields:\n                related_select_mask = select_mask.get(related_field) or {}\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 1281-1286)": [
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n",
      "\n                columns = self.get_default_columns(\n                    related_select_mask,\n                    start_alias=alias,\n                    opts=model._meta,\n                    from_parent=opts.model,\n                )\n"
    ],
    "Location 3 (/root/hy/projects_2/django/django/db/models/sql/query.py lines 780-782)": [
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys and must be obtained consistently\n        # via opts.get_field() to match usage in get_related_selections()\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys in select_mask and must be\n        # obtained consistently via opts.get_field() throughout the codebase\n        # to ensure proper lookup matching in SQL compilation.\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys in select_mask and must be obtained\n        # consistently via opts.get_field() to ensure proper matching in SQL compiler.\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as dictionary keys and must be obtained\n        # consistently throughout the query compilation process.\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys in select_mask and must be obtained\n        # consistently via opts.get_field() to ensure proper matching in compiler.\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys in select_mask and must be obtained\n        # consistently using opts.get_field() to ensure proper matching in the SQL compiler.\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys in select_mask and must be obtained\n        # consistently via opts.get_field() to ensure proper matching in compiler.py\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n",
      "\n    def _get_only_select_mask(self, opts, mask, select_mask=None):\n        if select_mask is None:\n            select_mask = {}\n        select_mask[opts.pk] = {}\n        # Only include fields mentioned in the mask.\n        # Note: Field objects are used as keys in select_mask and must be obtained\n        # consistently using opts.get_field() to ensure proper matching in the compiler.\n        for field_name, field_mask in mask.items():\n            field = opts.get_field(field_name)\n            field_select_mask = select_mask.setdefault(field, {})\n"
    ],
    "Location 4 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 993-994)": [
      "\n            if select_mask and field not in select_mask:\n                continue\n",
      "\n            if select_mask and field not in select_mask:\n                continue\n",
      "\n            if select_mask and field not in select_mask:\n                continue\n",
      "\n            if select_mask and field not in select_mask:\n                continue\n",
      "\n            if select_mask and field not in select_mask:\n                continue\n",
      "\n            if select_mask and field not in select_mask:\n                continue\n",
      "\n            if select_mask and field not in select_mask:\n                continue\n",
      "\n            if select_mask and field not in select_mask:\n                continue\n"
    ],
    "Location 5 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 1252-1260)": [
      "\n            for related_field, model in related_fields:\n                # Ensure consistent field object usage by getting the field through opts.get_field()\n                # This matches the field objects used as keys in select_mask creation\n                try:\n                    normalized_field = opts.get_field(related_field.name)\n                except FieldError:\n                    normalized_field = related_field\n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n",
      "\n            for related_field, model in related_fields:\n                # Ensure field object consistency with select_mask keys\n                # by using the same field resolution method as _get_only_select_mask\n                try:\n                    normalized_field = opts.get_field(related_field.name)\n                except FieldError:\n                    normalized_field = related_field\n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n",
      "\n            for related_field, model in related_fields:\n                # Normalize field object to match select_mask keys which use opts.get_field()\n                try:\n                    normalized_field = opts.get_field(related_field.name)\n                    related_select_mask = select_mask.get(normalized_field) or {}\n                except FieldError:\n                    # Fallback to original field if normalization fails\n                    related_select_mask = select_mask.get(related_field) or {}\n                \n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n",
      "\n            for related_field, model in related_fields:\n                # Ensure field object consistency with select_mask keys\n                normalized_field = opts.get_field(related_field.name)\n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n",
      "\n            for related_field, model in related_fields:\n                # Use consistent field object from opts.get_field to match select_mask keys\n                try:\n                    normalized_field = opts.get_field(related_field.name)\n                except FieldDoesNotExist:\n                    normalized_field = related_field\n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n",
      "\n            for related_field, model in related_fields:\n                # Ensure field object consistency with select_mask keys\n                normalized_field = opts.get_field(related_field.name)\n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n",
      "\n            for related_field, model in related_fields:\n                # Ensure we use the same field object instance as used in select_mask keys\n                # to avoid lookup mismatches between field object instances\n                normalized_field = opts.get_field(related_field.name)\n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n",
      "\n            for related_field, model in related_fields:\n                # Ensure field object consistency with select_mask keys by using opts.get_field()\n                normalized_field = opts.get_field(related_field.name)\n                related_select_mask = select_mask.get(normalized_field) or {}\n                if not select_related_descend(\n                    related_field,\n                    restricted,\n                    requested,\n                    related_select_mask,\n                    reverse=True,\n                ):\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..b56ceca9e8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1244,12 +1245,14 @@ class SQLCompiler:\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n         if restricted:\n+\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n+                related_select_mask = select_mask.get(related_field) or {}\n                 related_select_mask = select_mask.get(related_field) or {}\n                 if not select_related_descend(\n                     related_field,\n@@ -1278,6 +1281,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..991560938d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,8 +777,10 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n+            # Field objects are used as keys in select_mask for consistency\n             field_select_mask = select_mask.setdefault(field, {})\n             if field_mask:\n                 if not field.is_relation:\n",
    "variant_0": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..d267dea6c8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,24 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Use opts.get_field() to get the same field object instance used in select_mask\n+                try:\n+                    normalized_field = opts.get_field(related_field.name)\n+                except FieldError:\n+                    # Fallback to original field if normalization fails\n+                    normalized_field = related_field\n+                \n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1289,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..77dec4cd0e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys in select_mask and must be obtained\n+        # consistently using opts.get_field() to ensure proper lookups in compiler.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_1": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..02814078bf 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,23 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Ensure consistent field object usage by getting the field through opts.get_field()\n+                # This matches the field objects used as keys in select_mask creation\n+                try:\n+                    normalized_field = opts.get_field(related_field.name)\n+                except FieldError:\n+                    normalized_field = related_field\n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1288,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..9a012d3328 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys and must be obtained consistently\n+        # via opts.get_field() to match usage in get_related_selections()\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_2": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..447e665043 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,23 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Ensure field object consistency with select_mask keys\n+                # by using the same field resolution method as _get_only_select_mask\n+                try:\n+                    normalized_field = opts.get_field(related_field.name)\n+                except FieldError:\n+                    normalized_field = related_field\n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1288,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..a38db21b82 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,15 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys in select_mask and must be\n+        # obtained consistently via opts.get_field() throughout the codebase\n+        # to ensure proper lookup matching in SQL compilation.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_3": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..20bca286ba 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,24 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Normalize field object to match select_mask keys which use opts.get_field()\n+                try:\n+                    normalized_field = opts.get_field(related_field.name)\n+                    related_select_mask = select_mask.get(normalized_field) or {}\n+                except FieldError:\n+                    # Fallback to original field if normalization fails\n+                    related_select_mask = select_mask.get(related_field) or {}\n+                \n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1289,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..acd888c174 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys in select_mask and must be obtained\n+        # consistently via opts.get_field() to ensure proper matching in SQL compiler.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_4": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..32f93fc1f6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,19 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Ensure field object consistency with select_mask keys\n+                normalized_field = opts.get_field(related_field.name)\n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1284,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..bf51826912 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as dictionary keys and must be obtained\n+        # consistently throughout the query compilation process.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_5": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..cf271a511b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,22 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Use consistent field object from opts.get_field to match select_mask keys\n+                try:\n+                    normalized_field = opts.get_field(related_field.name)\n+                except FieldDoesNotExist:\n+                    normalized_field = related_field\n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1287,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..b1a7888da8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys in select_mask and must be obtained\n+        # consistently via opts.get_field() to ensure proper matching in compiler.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_6": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..32f93fc1f6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,19 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Ensure field object consistency with select_mask keys\n+                normalized_field = opts.get_field(related_field.name)\n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1284,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..aebefbdfd5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys in select_mask and must be obtained\n+        # consistently using opts.get_field() to ensure proper matching in the SQL compiler.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_7": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..df3716e061 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,20 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Ensure we use the same field object instance as used in select_mask keys\n+                # to avoid lookup mismatches between field object instances\n+                normalized_field = opts.get_field(related_field.name)\n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1285,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..2a9c2452e5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys in select_mask and must be obtained\n+        # consistently via opts.get_field() to ensure proper matching in compiler.py\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n",
    "variant_8": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..73232e830a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -990,6 +990,7 @@ class SQLCompiler:\n                 # parent model data is already present in the SELECT clause,\n                 # and we want to avoid reloading the same data again.\n                 continue\n+\n             if select_mask and field not in select_mask:\n                 continue\n             alias = self.query.join_parent_model(opts, model, start_alias, seen_models)\n@@ -1243,14 +1244,19 @@ class SQLCompiler:\n             )\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n+        if restricted:\n+\n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (opts.get_field(o.field.name), o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n                 related_select_mask = select_mask.get(related_field) or {}\n+                # Ensure field object consistency with select_mask keys by using opts.get_field()\n+                normalized_field = opts.get_field(related_field.name)\n+                related_select_mask = select_mask.get(normalized_field) or {}\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n@@ -1278,6 +1284,7 @@ class SQLCompiler:\n                 }\n                 related_klass_infos.append(klass_info)\n                 select_fields = []\n+\n                 columns = self.get_default_columns(\n                     related_select_mask,\n                     start_alias=alias,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..80edf19167 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -777,6 +777,14 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n+\n+    def _get_only_select_mask(self, opts, mask, select_mask=None):\n+        if select_mask is None:\n+            select_mask = {}\n+        select_mask[opts.pk] = {}\n+        # Only include fields mentioned in the mask.\n+        # Note: Field objects are used as keys in select_mask and must be obtained\n+        # consistently using opts.get_field() to ensure proper matching in the compiler.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n             field_select_mask = select_mask.setdefault(field, {})\n"
  }
}