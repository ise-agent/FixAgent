{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/checks/templates.py lines 51-75)": "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/core/checks/templates.py lines 51-75)": [
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, module_paths in libraries.items():\n        if len(module_paths) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(module_paths)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, paths in libraries.items():\n        if len(paths) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(path) for path in sorted(paths)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, module_paths in libraries.items():\n        if len(module_paths) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(module_paths)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, module_paths in libraries.items():\n        if len(module_paths) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(module_paths)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, module_paths in libraries.items():\n        if len(module_paths) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(module_paths)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, module_paths in libraries.items():\n        if len(module_paths) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(module_paths)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, module_paths in libraries.items():\n        if len(module_paths) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(module_paths)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..0e15ff4145 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,18 +47,20 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
    "variant_0": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..e3c7205ef5 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,18 +47,20 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -66,7 +68,7 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(items)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_1": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..00b5339f4b 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,26 +47,28 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n+    for library_name, module_paths in libraries.items():\n+        if len(module_paths) > 1:\n             errors.append(\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(module_paths)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_2": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..03caaacb1f 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,26 +47,28 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n+    for library_name, paths in libraries.items():\n+        if len(paths) > 1:\n             errors.append(\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(path) for path in sorted(paths)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_3": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..00b5339f4b 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,26 +47,28 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n+    for library_name, module_paths in libraries.items():\n+        if len(module_paths) > 1:\n             errors.append(\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(module_paths)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_4": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..00b5339f4b 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,26 +47,28 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n+    for library_name, module_paths in libraries.items():\n+        if len(module_paths) > 1:\n             errors.append(\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(module_paths)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_5": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..00b5339f4b 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,26 +47,28 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n+    for library_name, module_paths in libraries.items():\n+        if len(module_paths) > 1:\n             errors.append(\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(module_paths)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_6": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..e3c7205ef5 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,18 +47,20 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -66,7 +68,7 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(items)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_7": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..00b5339f4b 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,26 +47,28 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n+    for library_name, module_paths in libraries.items():\n+        if len(module_paths) > 1:\n             errors.append(\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(module_paths)),\n                     ),\n                     id=E003.id,\n                 )\n",
    "variant_8": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..00b5339f4b 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -47,26 +47,28 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n     return errors\n \n \n+@register(Tags.templates)\n+\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n+    for library_name, module_paths in libraries.items():\n+        if len(module_paths) > 1:\n             errors.append(\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(module_paths)),\n                     ),\n                     id=E003.id,\n                 )\n"
  }
}