{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/views/debug.py lines 89-94)": "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
    "Location 2 (/root/hy/projects_2/django/django/views/debug.py lines 83-102)": "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/views/debug.py lines 89-94)": [
      "\ndef cleanse_setting(self, key, value, _seen_objects=None):\n    \"\"\"\n    Cleanse an individual setting key/value of sensitive content. If the value\n    is a dictionary, list, tuple, or set, recursively cleanse the values.\n    \"\"\"\n    if _seen_objects is None:\n        _seen_objects = set()\n    \n    # Prevent circular reference issues\n    value_id = id(value)\n    if value_id in _seen_objects:\n        return '[Circular Reference]'\n    \n    try:\n        if self.hidden_settings.search(key):\n            cleansed = self.cleansed_substitute\n        elif isinstance(value, dict):\n            _seen_objects.add(value_id)\n            cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n            _seen_objects.remove(value_id)\n        elif isinstance(value, (list, tuple)):\n            _seen_objects.add(value_id)\n            cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n            cleansed = type(value)(cleansed_items)\n            _seen_objects.remove(value_id)\n        elif isinstance(value, set):\n            _seen_objects.add(value_id)\n            cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n            _seen_objects.remove(value_id)\n        else:\n            cleansed = value\n    except (TypeError, ValueError):\n        # Handle non-serializable objects gracefully\n        cleansed = '[Unserializable Object]'\n\n    if callable(cleansed):\n        cleansed = CallableSettingWrapper(cleansed)\n\n    return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the value\n        is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the value\n        is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the value\n        is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the value\n        is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the value\n        is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/views/debug.py lines 83-102)": [
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\ndef cleanse_setting(self, key, value, _seen_objects=None):\n    \"\"\"\n    Cleanse an individual setting key/value of sensitive content. If the value\n    is a dictionary, list, tuple, or set, recursively cleanse the values.\n    \"\"\"\n    if _seen_objects is None:\n        _seen_objects = set()\n    \n    # Prevent circular reference issues\n    value_id = id(value)\n    if value_id in _seen_objects:\n        return '[Circular Reference]'\n    \n    try:\n        if self.hidden_settings.search(key):\n            cleansed = self.cleansed_substitute\n        elif isinstance(value, dict):\n            _seen_objects.add(value_id)\n            cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n            _seen_objects.remove(value_id)\n        elif isinstance(value, (list, tuple)):\n            _seen_objects.add(value_id)\n            cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n            cleansed = type(value)(cleansed_items)\n            _seen_objects.remove(value_id)\n        elif isinstance(value, set):\n            _seen_objects.add(value_id)\n            cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n            _seen_objects.remove(value_id)\n        else:\n            cleansed = value\n    except (TypeError, ValueError):\n        # Handle non-serializable objects gracefully\n        cleansed = '[Unserializable Object]'\n\n    if callable(cleansed):\n        cleansed = CallableSettingWrapper(cleansed)\n\n    return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value, _seen_objects=None):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n        \"\"\"\n        if _seen_objects is None:\n            _seen_objects = set()\n        \n        # Prevent circular reference issues\n        value_id = id(value)\n        if value_id in _seen_objects:\n            return '[Circular Reference]'\n        \n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                _seen_objects.add(value_id)\n                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n                _seen_objects.remove(value_id)\n            elif isinstance(value, (list, tuple)):\n                _seen_objects.add(value_id)\n                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n                cleansed = type(value)(cleansed_items)\n                _seen_objects.remove(value_id)\n            elif isinstance(value, set):\n                _seen_objects.add(value_id)\n                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n                _seen_objects.remove(value_id)\n            else:\n                cleansed = value\n        except (TypeError, ValueError):\n            # Handle non-serializable objects gracefully\n            cleansed = '[Unserializable Object]'\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\ndef cleanse_setting(self, key, value, _seen_objects=None):\n    \"\"\"\n    Cleanse an individual setting key/value of sensitive content. If the\n    value is a dictionary, list, tuple, or set, recursively cleanse the values.\n    \"\"\"\n    if _seen_objects is None:\n        _seen_objects = set()\n    \n    # Prevent circular reference issues\n    value_id = id(value)\n    if value_id in _seen_objects:\n        return '[Circular Reference]'\n    \n    try:\n        if self.hidden_settings.search(key):\n            cleansed = self.cleansed_substitute\n        elif isinstance(value, dict):\n            _seen_objects.add(value_id)\n            cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n            _seen_objects.remove(value_id)\n        elif isinstance(value, (list, tuple)):\n            _seen_objects.add(value_id)\n            cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n            cleansed = type(value)(cleansed_items)\n            _seen_objects.remove(value_id)\n        elif isinstance(value, set):\n            _seen_objects.add(value_id)\n            cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n            _seen_objects.remove(value_id)\n        else:\n            cleansed = value\n    except (TypeError, ValueError):\n        # Handle non-serializable objects gracefully\n        cleansed = '[Unserializable Object]'\n\n    if callable(cleansed):\n        cleansed = CallableSettingWrapper(cleansed)\n\n    return cleansed\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..8575573b91 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,46 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_0": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..1d1255400f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n+            else:\n+                cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_1": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..d5e4747065 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+    try:\n+        if self.hidden_settings.search(key):\n+            cleansed = self.cleansed_substitute\n+        elif isinstance(value, dict):\n+            _seen_objects.add(value_id)\n+            cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+            _seen_objects.remove(value_id)\n+        elif isinstance(value, (list, tuple)):\n+            _seen_objects.add(value_id)\n+            cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+            cleansed = type(value)(cleansed_items)\n+            _seen_objects.remove(value_id)\n+        elif isinstance(value, set):\n+            _seen_objects.add(value_id)\n+            cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+            _seen_objects.remove(value_id)\n+        else:\n+            cleansed = value\n+    except (TypeError, ValueError):\n+        # Handle non-serializable objects gracefully\n+        cleansed = '[Unserializable Object]'\n+\n+    if callable(cleansed):\n+        cleansed = CallableSettingWrapper(cleansed)\n+\n+    return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_2": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..b08ef4a992 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n-        \"\"\"\n-        Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n-        \"\"\"\n+\n+def cleanse_setting(self, key, value, _seen_objects=None):\n+    \"\"\"\n+    Cleanse an individual setting key/value of sensitive content. If the value\n+    is a dictionary, list, tuple, or set, recursively cleanse the values.\n+    \"\"\"\n+    if _seen_objects is None:\n+        _seen_objects = set()\n+    \n+    # Prevent circular reference issues\n+    value_id = id(value)\n+    if value_id in _seen_objects:\n+        return '[Circular Reference]'\n+    \n+    try:\n+        if self.hidden_settings.search(key):\n+            cleansed = self.cleansed_substitute\n+        elif isinstance(value, dict):\n+            _seen_objects.add(value_id)\n+            cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+            _seen_objects.remove(value_id)\n+        elif isinstance(value, (list, tuple)):\n+            _seen_objects.add(value_id)\n+            cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+            cleansed = type(value)(cleansed_items)\n+            _seen_objects.remove(value_id)\n+        elif isinstance(value, set):\n+            _seen_objects.add(value_id)\n+            cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+            _seen_objects.remove(value_id)\n+        else:\n+            cleansed = value\n+    except (TypeError, ValueError):\n+        # Handle non-serializable objects gracefully\n+        cleansed = '[Unserializable Object]'\n+\n+    if callable(cleansed):\n+        cleansed = CallableSettingWrapper(cleansed)\n+\n+    return cleansed\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_3": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..1d1255400f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n+            else:\n+                cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_4": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..1d1255400f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n+            else:\n+                cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_5": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..1d1255400f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n+            else:\n+                cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_6": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..1d1255400f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n+            else:\n+                cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_7": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..1d1255400f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n+\n+    def cleanse_setting(self, key, value, _seen_objects=None):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary, list, tuple, or set, recursively cleanse the values.\n         \"\"\"\n+        if _seen_objects is None:\n+            _seen_objects = set()\n+        \n+        # Prevent circular reference issues\n+        value_id = id(value)\n+        if value_id in _seen_objects:\n+            return '[Circular Reference]'\n+        \n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n+            else:\n+                cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n",
    "variant_8": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..29d114a176 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,18 +80,72 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n-    def cleanse_setting(self, key, value):\n-        \"\"\"\n-        Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n-        \"\"\"\n+\n+def cleanse_setting(self, key, value, _seen_objects=None):\n+    \"\"\"\n+    Cleanse an individual setting key/value of sensitive content. If the\n+    value is a dictionary, list, tuple, or set, recursively cleanse the values.\n+    \"\"\"\n+    if _seen_objects is None:\n+        _seen_objects = set()\n+    \n+    # Prevent circular reference issues\n+    value_id = id(value)\n+    if value_id in _seen_objects:\n+        return '[Circular Reference]'\n+    \n+    try:\n+        if self.hidden_settings.search(key):\n+            cleansed = self.cleansed_substitute\n+        elif isinstance(value, dict):\n+            _seen_objects.add(value_id)\n+            cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+            _seen_objects.remove(value_id)\n+        elif isinstance(value, (list, tuple)):\n+            _seen_objects.add(value_id)\n+            cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+            cleansed = type(value)(cleansed_items)\n+            _seen_objects.remove(value_id)\n+        elif isinstance(value, set):\n+            _seen_objects.add(value_id)\n+            cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+            _seen_objects.remove(value_id)\n+        else:\n+            cleansed = value\n+    except (TypeError, ValueError):\n+        # Handle non-serializable objects gracefully\n+        cleansed = '[Unserializable Object]'\n+\n+    if callable(cleansed):\n+        cleansed = CallableSettingWrapper(cleansed)\n+\n+    return cleansed\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                _seen_objects.add(value_id)\n+                cleansed = {k: self.cleanse_setting(k, v, _seen_objects) for k, v in value.items()}\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, (list, tuple)):\n+                _seen_objects.add(value_id)\n+                cleansed_items = [self.cleanse_setting('', item, _seen_objects) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+                _seen_objects.remove(value_id)\n+            elif isinstance(value, set):\n+                _seen_objects.add(value_id)\n+                cleansed = {self.cleanse_setting('', item, _seen_objects) for item in value}\n+                _seen_objects.remove(value_id)\n             else:\n                 cleansed = value\n+        except (TypeError, ValueError):\n+            # Handle non-serializable objects gracefully\n+            cleansed = '[Unserializable Object]'\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n"
  }
}