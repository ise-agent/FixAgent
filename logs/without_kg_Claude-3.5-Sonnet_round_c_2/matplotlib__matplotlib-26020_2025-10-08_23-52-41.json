{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": [
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n    if hasattr(ax.axis, '__getitem__'):\n        # Standard matplotlib axes with AxisDict\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    elif callable(ax.axis):\n        # Third-party axes where axis is a method - skip or handle gracefully\n        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n        # in the same way, so we skip this operation\n        pass\n    else:\n        # Fallback: try the original approach for unknown axis types\n        try:\n            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n        except (TypeError, KeyError):\n            # If it fails, skip the operation silently\n            pass\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_0": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_1": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_2": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_3": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_4": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_5": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_6": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_7": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n",
    "variant_8": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..81133325c6 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,29 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (dict-like) or callable (method)\n+    if hasattr(ax.axis, '__getitem__'):\n+        # Standard matplotlib axes with AxisDict\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    elif callable(ax.axis):\n+        # Third-party axes where axis is a method - skip or handle gracefully\n+        # For cartopy GeoAxes and similar, we can't directly toggle axis visibility\n+        # in the same way, so we skip this operation\n+        pass\n+    else:\n+        # Fallback: try the original approach for unknown axis types\n+        try:\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        except (TypeError, KeyError):\n+            # If it fails, skip the operation silently\n+            pass\n \n \n class CbarAxesBase:\n"
  }
}