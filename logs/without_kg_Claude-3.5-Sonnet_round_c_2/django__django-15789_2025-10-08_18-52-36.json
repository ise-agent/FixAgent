{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/utils/html.py lines 62-77)": "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n    JSON serialization.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
    "Location 2 (/root/hy/projects_2/django/tests/utils_tests/test_html.py lines 180-218)": "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        import json\n        from datetime import datetime\n        \n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n                return super().default(obj)\n        \n        # Test with custom encoder\n        test_date = datetime(2023, 1, 1, 12, 0, 0)\n        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n        expected = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n        )\n        self.assertEqual(result, expected)\n        \n        # Test that None encoder uses default behavior\n        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n        self.assertEqual(result_none, result_default)\n        \n        # Test custom encoder with HTML escaping\n        result_escape = json_script({\"html\": \"<script>\"}, \"test_id\", encoder=CustomEncoder)\n        expected_escape = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"html\": \"\\\\u003Cscript\\\\u003E\"}</script>'\n        )\n        self.assertEqual(result_escape, expected_escape)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/utils/html.py lines 62-77)": [
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, it will be used instead of the default\n    DjangoJSONEncoder for JSON serialization.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    Args:\n        value: The value to be JSON-encoded.\n        element_id: Optional ID attribute for the script tag.\n        encoder: Optional JSON encoder class. Defaults to DjangoJSONEncoder.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, it will be used for JSON serialization instead of\n    the default DjangoJSONEncoder.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The 'encoder' parameter allows specifying a custom JSON encoder class.\n    If not provided, DjangoJSONEncoder will be used by default.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The optional encoder parameter can be used to specify a custom JSON encoder\n    class. If not provided, DjangoJSONEncoder will be used.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, it will be used as the JSON encoder class instead\n    of the default DjangoJSONEncoder.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The 'encoder' parameter allows specifying a custom JSON encoder class.\n    If not provided, DjangoJSONEncoder is used by default.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    if encoder is None:\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n"
    ],
    "Location 2 (/root/hy/projects_2/django/tests/utils_tests/test_html.py lines 180-218)": [
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        import json\n        from datetime import datetime\n        \n        # Custom encoder that handles datetime objects\n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n                return super().default(obj)\n        \n        # Test with datetime object using custom encoder\n        test_date = datetime(2023, 1, 1, 12, 0, 0)\n        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n        expected = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n        )\n        self.assertEqual(result, expected)\n        \n        # Test that None encoder uses default behavior\n        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n        self.assertEqual(result_none, result_default)\n        \n        # Test custom encoder with HTML escaping\n        result_escape = json_script({\"html\": \"<script>alert('xss')</script>\"}, \"test_id\", encoder=CustomEncoder)\n        expected_escape = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}</script>'\n        )\n        self.assertEqual(result_escape, expected_escape)\n",
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test that json_script accepts and uses custom JSON encoders.\"\"\"\n        import json\n        from datetime import datetime\n        \n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n                return super().default(obj)\n        \n        # Test with custom encoder\n        test_date = datetime(2023, 1, 1, 12, 0, 0)\n        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n        expected = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n        )\n        self.assertEqual(result, expected)\n        \n        # Test that None encoder uses default behavior\n        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n        self.assertEqual(result_none, result_default)\n        \n        # Test that HTML escaping still works with custom encoder\n        result_escape = json_script({\"html\": \"<script>\"}, \"test_id\", encoder=CustomEncoder)\n        expected_escape = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"html\": \"\\\\u003Cscript\\\\u003E\"}</script>'\n        )\n        self.assertEqual(result_escape, expected_escape)\n",
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        import json\n        from datetime import datetime\n        \n        class CustomJSONEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n                return super().default(obj)\n        \n        # Test custom encoder with datetime\n        test_datetime = datetime(2023, 1, 1, 12, 0, 0)\n        result = json_script({\"date\": test_datetime}, \"test_id\", encoder=CustomJSONEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"date\": \"2023-01-01T12:00:00\"}</script>'\n        self.assertEqual(result, expected)\n        \n        # Test that None encoder uses default behavior\n        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n        self.assertEqual(result_none, result_default)\n        \n        # Test custom encoder still escapes dangerous characters\n        result_escape = json_script({\"script\": \"<script>alert('xss')</script>\"}, \"test_id\", encoder=CustomJSONEncoder)\n        self.assertIn(\"\\\\u003Cscript\\\\u003E\", result_escape)\n        self.assertIn(\"\\\\u003C/script\\\\u003E\", result_escape)\n",
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test that json_script accepts a custom encoder parameter.\"\"\"\n        import json\n        from datetime import datetime\n        \n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n                return super().default(obj)\n        \n        # Test with datetime object and custom encoder\n        test_date = datetime(2023, 1, 1, 12, 0, 0)\n        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"date\": \"2023-01-01T12:00:00\"}</script>'\n        self.assertEqual(result, expected)\n        \n        # Test that None encoder uses default behavior\n        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n        self.assertEqual(result_none, result_default)\n        \n        # Test custom encoder with escaping\n        result_escape = json_script({\"html\": \"<script>\"}, \"test_id\", encoder=CustomEncoder)\n        expected_escape = '<script id=\"test_id\" type=\"application/json\">{\"html\": \"\\\\u003Cscript\\\\u003E\"}</script>'\n        self.assertEqual(result_escape, expected_escape)\n",
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        import json\n        from decimal import Decimal\n\n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, Decimal):\n                    return float(obj)\n                return super().default(obj)\n\n        # Test custom encoder with Decimal\n        data = {\"price\": Decimal(\"19.99\")}\n        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"price\": 19.99}</script>'\n        self.assertEqual(result, expected)\n\n        # Test that None encoder uses default DjangoJSONEncoder\n        data = {\"key\": \"value\"}\n        result_none = json_script(data, \"test_id\", encoder=None)\n        result_default = json_script(data, \"test_id\")\n        self.assertEqual(result_none, result_default)\n\n        # Test custom encoder with HTML escaping\n        data = {\"content\": \"<script>&test</script>\"}\n        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n        expected = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"content\": \"\\\\u003Cscript\\\\u003E\\\\u0026test\\\\u003C/script\\\\u003E\"}'\n            '</script>'\n        )\n        self.assertEqual(result, expected)\n",
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        import json\n        from decimal import Decimal\n        \n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, Decimal):\n                    return str(obj)\n                return super().default(obj)\n        \n        # Test with custom encoder\n        data = {\"price\": Decimal(\"10.50\")}\n        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"price\": \"10.50\"}</script>'\n        self.assertEqual(result, expected)\n        \n        # Test that None encoder uses default behavior\n        data = {\"key\": \"value\"}\n        result_none = json_script(data, \"test_id\", encoder=None)\n        result_default = json_script(data, \"test_id\")\n        self.assertEqual(result_none, result_default)\n        \n        # Test custom encoder with HTML escaping\n        data = {\"html\": \"<script>alert('xss')</script>\"}\n        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}</script>'\n        self.assertEqual(result, expected)\n",
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        import json\n        \n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n                return super().default(obj)\n        \n        # Test with custom encoder\n        test_data = {\"date\": datetime(2023, 1, 1, 12, 0, 0)}\n        result = json_script(test_data, \"test_id\", encoder=CustomEncoder)\n        expected = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n        )\n        self.assertEqual(result, expected)\n        \n        # Test that default behavior is unchanged when encoder=None\n        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n        self.assertEqual(result_none, result_default)\n        \n        # Test custom encoder with HTML escaping\n        test_data_with_html = {\"html\": \"<script>alert('xss')</script>\"}\n        result_html = json_script(test_data_with_html, \"test_id\", encoder=CustomEncoder)\n        expected_html = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}'\n            '</script>'\n        )\n        self.assertEqual(result_html, expected_html)\n",
      "\n    def test_json_script(self):\n        tests = (\n            # \"<\", \">\" and \"&\" are quoted inside JSON strings\n            (\n                (\n                    \"&<>\",\n                    '<script id=\"test_id\" type=\"application/json\">'\n                    '\"\\\\u0026\\\\u003C\\\\u003E\"</script>',\n                )\n            ),\n            # \"<\", \">\" and \"&\" are quoted inside JSON objects\n            (\n                {\"a\": \"<script>test&ing</script>\"},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n            # Lazy strings are quoted\n            (\n                lazystr(\"&<>\"),\n                '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"'\n                \"</script>\",\n            ),\n            (\n                {\"a\": lazystr(\"<script>test&ing</script>\")},\n                '<script id=\"test_id\" type=\"application/json\">'\n                '{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}'\n                \"</script>\",\n            ),\n        )\n        for arg, expected in tests:\n            with self.subTest(arg=arg):\n                self.assertEqual(json_script(arg, \"test_id\"), expected)\n\n    def test_json_script_without_id(self):\n        self.assertHTMLEqual(\n            json_script({\"key\": \"value\"}),\n            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n    def test_json_script_custom_encoder(self):\n        import json\n        from datetime import datetime\n\n        # Custom encoder that handles datetime objects\n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n                return super().default(obj)\n\n        # Test with custom encoder\n        test_date = datetime(2023, 1, 1, 12, 0, 0)\n        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n        expected = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"date\": \"2023-01-01T12:00:00\"}'\n            '</script>'\n        )\n        self.assertEqual(result, expected)\n\n        # Test that default encoder still works when encoder=None\n        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        expected_none = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"key\": \"value\"}'\n            '</script>'\n        )\n        self.assertEqual(result_none, expected_none)\n\n        # Test that custom encoder still applies HTML escaping\n        result_escape = json_script({\"html\": \"<script>alert('xss')</script>\"}, \"test_id\", encoder=CustomEncoder)\n        expected_escape = (\n            '<script id=\"test_id\" type=\"application/json\">'\n            '{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}'\n            '</script>'\n        )\n        self.assertEqual(result_escape, expected_escape)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..2d12a111c9 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used for JSON serialization instead of\n+    the default DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..df3818170a 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,39 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"\n+        Test json_script with a custom encoder.\n+        \"\"\"\n+        import json\n+        from datetime import datetime\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+        \n+        # Test custom encoder with datetime\n+        test_date = datetime(2023, 1, 1, 12, 0, 0)\n+        result = json_script({\"date\": test_date}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test custom encoder with element_id\n+        result_with_id = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n+        expected_with_id = '<script id=\"test_id\" type=\"application/json\">{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        self.assertHTMLEqual(result_with_id, expected_with_id)\n+        \n+        # Test that None encoder uses default behavior\n+        result_none = json_script({\"key\": \"value\"}, encoder=None)\n+        expected_none = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result_none, expected_none)\n+        \n+        # Test backward compatibility - no encoder parameter should work the same\n+        result_default = json_script({\"key\": \"value\"})\n+        self.assertHTMLEqual(result_default, expected_none)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_0": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..9050107ac9 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n+    JSON serialization.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..a0741c8c14 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,38 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        import json\n+        from datetime import datetime\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+        \n+        # Test with custom encoder\n+        test_date = datetime(2023, 1, 1, 12, 0, 0)\n+        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n+        expected = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        )\n+        self.assertEqual(result, expected)\n+        \n+        # Test that None encoder uses default behavior\n+        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+        \n+        # Test custom encoder with HTML escaping\n+        result_escape = json_script({\"html\": \"<script>\"}, \"test_id\", encoder=CustomEncoder)\n+        expected_escape = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"html\": \"\\\\u003Cscript\\\\u003E\"}</script>'\n+        )\n+        self.assertEqual(result_escape, expected_escape)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_1": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..262d1f45fb 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used instead of the default\n+    DjangoJSONEncoder for JSON serialization.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..b0b24ce6f5 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,40 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        from datetime import datetime\n+        \n+        # Custom encoder that handles datetime objects\n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+        \n+        # Test with datetime object using custom encoder\n+        test_date = datetime(2023, 1, 1, 12, 0, 0)\n+        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n+        expected = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        )\n+        self.assertEqual(result, expected)\n+        \n+        # Test that None encoder uses default behavior\n+        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+        \n+        # Test custom encoder with HTML escaping\n+        result_escape = json_script({\"html\": \"<script>alert('xss')</script>\"}, \"test_id\", encoder=CustomEncoder)\n+        expected_escape = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}</script>'\n+        )\n+        self.assertEqual(result_escape, expected_escape)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_2": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..07940485ae 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,23 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    Args:\n+        value: The value to be JSON-encoded.\n+        element_id: Optional ID attribute for the script tag.\n+        encoder: Optional JSON encoder class. Defaults to DjangoJSONEncoder.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..1f065a994f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,39 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test that json_script accepts and uses custom JSON encoders.\"\"\"\n+        import json\n+        from datetime import datetime\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+        \n+        # Test with custom encoder\n+        test_date = datetime(2023, 1, 1, 12, 0, 0)\n+        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n+        expected = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        )\n+        self.assertEqual(result, expected)\n+        \n+        # Test that None encoder uses default behavior\n+        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+        \n+        # Test that HTML escaping still works with custom encoder\n+        result_escape = json_script({\"html\": \"<script>\"}, \"test_id\", encoder=CustomEncoder)\n+        expected_escape = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"html\": \"\\\\u003Cscript\\\\u003E\"}</script>'\n+        )\n+        self.assertEqual(result_escape, expected_escape)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_3": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..dc5ac5ad57 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used for JSON serialization instead of\n+    the default DjangoJSONEncoder.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..8e93f3b098 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        import json\n+        from datetime import datetime\n+        \n+        class CustomJSONEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+        \n+        # Test custom encoder with datetime\n+        test_datetime = datetime(2023, 1, 1, 12, 0, 0)\n+        result = json_script({\"date\": test_datetime}, \"test_id\", encoder=CustomJSONEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        self.assertEqual(result, expected)\n+        \n+        # Test that None encoder uses default behavior\n+        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+        \n+        # Test custom encoder still escapes dangerous characters\n+        result_escape = json_script({\"script\": \"<script>alert('xss')</script>\"}, \"test_id\", encoder=CustomJSONEncoder)\n+        self.assertIn(\"\\\\u003Cscript\\\\u003E\", result_escape)\n+        self.assertIn(\"\\\\u003C/script\\\\u003E\", result_escape)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_4": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..5959233d8b 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The 'encoder' parameter allows specifying a custom JSON encoder class.\n+    If not provided, DjangoJSONEncoder will be used by default.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..fca9d06c38 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,33 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test that json_script accepts a custom encoder parameter.\"\"\"\n+        import json\n+        from datetime import datetime\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+        \n+        # Test with datetime object and custom encoder\n+        test_date = datetime(2023, 1, 1, 12, 0, 0)\n+        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        self.assertEqual(result, expected)\n+        \n+        # Test that None encoder uses default behavior\n+        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+        \n+        # Test custom encoder with escaping\n+        result_escape = json_script({\"html\": \"<script>\"}, \"test_id\", encoder=CustomEncoder)\n+        expected_escape = '<script id=\"test_id\" type=\"application/json\">{\"html\": \"\\\\u003Cscript\\\\u003E\"}</script>'\n+        self.assertEqual(result_escape, expected_escape)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_5": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..ebf59ad914 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The optional encoder parameter can be used to specify a custom JSON encoder\n+    class. If not provided, DjangoJSONEncoder will be used.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..bcfc3b0202 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,38 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        import json\n+        from decimal import Decimal\n+\n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, Decimal):\n+                    return float(obj)\n+                return super().default(obj)\n+\n+        # Test custom encoder with Decimal\n+        data = {\"price\": Decimal(\"19.99\")}\n+        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"price\": 19.99}</script>'\n+        self.assertEqual(result, expected)\n+\n+        # Test that None encoder uses default DjangoJSONEncoder\n+        data = {\"key\": \"value\"}\n+        result_none = json_script(data, \"test_id\", encoder=None)\n+        result_default = json_script(data, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+\n+        # Test custom encoder with HTML escaping\n+        data = {\"content\": \"<script>&test</script>\"}\n+        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n+        expected = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"content\": \"\\\\u003Cscript\\\\u003E\\\\u0026test\\\\u003C/script\\\\u003E\"}'\n+            '</script>'\n+        )\n+        self.assertEqual(result, expected)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_6": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..cd76fdba68 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used as the JSON encoder class instead\n+    of the default DjangoJSONEncoder.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..42ab63bbce 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,35 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        from decimal import Decimal\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, Decimal):\n+                    return str(obj)\n+                return super().default(obj)\n+        \n+        # Test with custom encoder\n+        data = {\"price\": Decimal(\"10.50\")}\n+        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"price\": \"10.50\"}</script>'\n+        self.assertEqual(result, expected)\n+        \n+        # Test that None encoder uses default behavior\n+        data = {\"key\": \"value\"}\n+        result_none = json_script(data, \"test_id\", encoder=None)\n+        result_default = json_script(data, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+        \n+        # Test custom encoder with HTML escaping\n+        data = {\"html\": \"<script>alert('xss')</script>\"}\n+        result = json_script(data, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}</script>'\n+        self.assertEqual(result, expected)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_7": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..f5f4245a34 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The 'encoder' parameter allows specifying a custom JSON encoder class.\n+    If not provided, DjangoJSONEncoder is used by default.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..5098b013bf 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,40 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+        \n+        # Test with custom encoder\n+        test_data = {\"date\": datetime(2023, 1, 1, 12, 0, 0)}\n+        result = json_script(test_data, \"test_id\", encoder=CustomEncoder)\n+        expected = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"date\": \"2023-01-01T12:00:00\"}</script>'\n+        )\n+        self.assertEqual(result, expected)\n+        \n+        # Test that default behavior is unchanged when encoder=None\n+        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        result_default = json_script({\"key\": \"value\"}, \"test_id\")\n+        self.assertEqual(result_none, result_default)\n+        \n+        # Test custom encoder with HTML escaping\n+        test_data_with_html = {\"html\": \"<script>alert('xss')</script>\"}\n+        result_html = json_script(test_data_with_html, \"test_id\", encoder=CustomEncoder)\n+        expected_html = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}'\n+            '</script>'\n+        )\n+        self.assertEqual(result_html, expected_html)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_8": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..d1f484ca64 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,17 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..fd0f536632 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -177,6 +177,7 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n+\n     def test_json_script(self):\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n@@ -217,6 +218,45 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        import json\n+        from datetime import datetime\n+\n+        # Custom encoder that handles datetime objects\n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+\n+        # Test with custom encoder\n+        test_date = datetime(2023, 1, 1, 12, 0, 0)\n+        result = json_script({\"date\": test_date}, \"test_id\", encoder=CustomEncoder)\n+        expected = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"date\": \"2023-01-01T12:00:00\"}'\n+            '</script>'\n+        )\n+        self.assertEqual(result, expected)\n+\n+        # Test that default encoder still works when encoder=None\n+        result_none = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        expected_none = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"key\": \"value\"}'\n+            '</script>'\n+        )\n+        self.assertEqual(result_none, expected_none)\n+\n+        # Test that custom encoder still applies HTML escaping\n+        result_escape = json_script({\"html\": \"<script>alert('xss')</script>\"}, \"test_id\", encoder=CustomEncoder)\n+        expected_escape = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"html\": \"\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u003C/script\\\\u003E\"}'\n+            '</script>'\n+        )\n+        self.assertEqual(result_escape, expected_escape)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n"
  }
}