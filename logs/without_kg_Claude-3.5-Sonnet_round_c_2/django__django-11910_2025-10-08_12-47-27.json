{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/autodetector.py lines 925-930)": "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/autodetector.py lines 925-930)": [
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n",
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n",
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n",
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n",
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n",
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n",
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n",
      "\n            dependencies = []\n            # Implement any model renames on relations; these are handled by RenameModel\n            # so we need to exclude them from the comparison\n            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n                rename_key = (\n                    new_field.remote_field.model._meta.app_label,\n                    new_field.remote_field.model._meta.model_name,\n                )\n                if rename_key in self.renamed_models:\n                    new_field.remote_field.model = old_field.remote_field.model\n                # Handle ForeignKey which can only have a single to_field.\n                remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                if remote_field_name:\n                    to_field_rename_key = rename_key + (remote_field_name,)\n                    if to_field_rename_key in self.renamed_fields:\n                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..b9be09e7e3 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -922,12 +922,13 @@ class MigrationAutodetector:\n                 )\n                 if rename_key in self.renamed_models:\n                     new_field.remote_field.model = old_field.remote_field.model\n+\n                 # Handle ForeignKey which can only have a single to_field.\n                 remote_field_name = getattr(new_field.remote_field, 'field_name', None)\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_0": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_1": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_2": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_3": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_4": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_5": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_6": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_7": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n",
    "variant_8": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c40161c7f..209cc9ed61 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,17 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            dependencies = []\n+            # Implement any model renames on relations; these are handled by RenameModel\n+            # so we need to exclude them from the comparison\n+            if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n+                rename_key = (\n+                    new_field.remote_field.model._meta.app_label,\n+                    new_field.remote_field.model._meta.model_name,\n+                )\n+                if rename_key in self.renamed_models:\n+                    new_field.remote_field.model = old_field.remote_field.model\n+\n             dependencies = []\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n@@ -927,7 +938,7 @@ class MigrationAutodetector:\n                 if remote_field_name:\n                     to_field_rename_key = rename_key + (remote_field_name,)\n                     if to_field_rename_key in self.renamed_fields:\n-                        new_field.remote_field.field_name = old_field.remote_field.field_name\n+                        new_field.remote_field.field_name = self.renamed_fields[to_field_rename_key]\n                 # Handle ForeignObjects which can have multiple from_fields/to_fields.\n                 from_fields = getattr(new_field, 'from_fields', None)\n                 if from_fields:\n"
  }
}