{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/util/rst.py lines 28-28)": "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n",
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/util/rst.py lines 82-86)": "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/util/rst.py lines 28-28)": [
      "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n",
      "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n",
      "\ndocinfo_re = re.compile(r':\\w+:\\s')\n",
      "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n",
      "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n",
      "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n",
      "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n",
      "\ndocinfo_re = re.compile(':\\\\w+:\\\\s')\n"
    ],
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/util/rst.py lines 82-86)": [
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a2fce5174 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -79,6 +80,7 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n         pos = 0\n+\n         for line in content:\n             if docinfo_re.match(line):\n                 pos += 1\n",
    "variant_0": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_1": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_2": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_3": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..d9a6b4572 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r':\\w+:\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_4": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_5": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_6": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_7": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n",
    "variant_8": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..62f157425 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n"
  }
}