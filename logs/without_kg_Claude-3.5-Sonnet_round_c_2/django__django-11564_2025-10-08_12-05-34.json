{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/templatetags/static.py lines 39-47)": "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        prefix = iri_to_uri(getattr(settings, name, ''))\n        if prefix:\n            script_prefix = get_script_prefix()\n            if script_prefix and not prefix.startswith(script_prefix):\n                prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n    return prefix\n",
    "Location 2 (/root/hy/projects_2/django/django/templatetags/static.py lines 114-120)": "\n    @classmethod\n    def handle_simple(cls, path):\n        from django.urls import get_script_prefix\n        \n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            url = staticfiles_storage.url(path)\n        else:\n            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n        \n        # Prepend SCRIPT_NAME if it exists\n        script_prefix = get_script_prefix()\n        if script_prefix and script_prefix != '/':\n            # Remove leading slash from url to avoid double slashes\n            if url.startswith('/'):\n                url = url[1:]\n            url = urljoin(script_prefix, url)\n        \n        return url\n",
    "Location 3 (/root/hy/projects_2/django/django/templatetags/static.py lines 101-103)": "\n    def url(self, context):\n        path = self.path.resolve(context)\n        return self.handle_simple(path)\n",
    "Location 4 (/root/hy/projects_2/django/django/templatetags/static.py lines 162-167)": "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    return StaticNode.handle_simple(path)\n",
    "Location 5 (/root/hy/projects_2/django/django/templatetags/static.py lines 1-10)": "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/templatetags/static.py lines 39-47)": [
      "\n    @classmethod\n    def handle_simple(cls, name):\n        try:\n            from django.conf import settings\n            from django.urls import get_script_prefix\n        except ImportError:\n            prefix = ''\n        else:\n            prefix = iri_to_uri(getattr(settings, name, ''))\n            if prefix:\n                script_prefix = get_script_prefix()\n                if script_prefix and not prefix.startswith(script_prefix):\n                    prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n        return prefix\n",
      "\nfrom urllib.parse import quote, urljoin\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.urls import get_script_prefix\n",
      "\nfrom urllib.parse import quote, urljoin\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.urls import get_script_prefix\n",
      "\nfrom urllib.parse import quote, urljoin\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.urls import get_script_prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        setting_value = getattr(settings, name, '')\n        if setting_value:\n            prefix = iri_to_uri(get_script_prefix() + setting_value)\n        else:\n            prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        prefix = iri_to_uri(getattr(settings, name, ''))\n        if prefix:\n            script_prefix = get_script_prefix()\n            if script_prefix and not prefix.startswith(script_prefix):\n                prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n    return prefix\n",
      "\n    @classmethod\n    def handle_simple(cls, name):\n        try:\n            from django.conf import settings\n            from django.urls import get_script_prefix\n        except ImportError:\n            prefix = ''\n        else:\n            prefix = iri_to_uri(getattr(settings, name, ''))\n            if prefix:\n                script_prefix = get_script_prefix()\n                if script_prefix and not prefix.startswith(script_prefix):\n                    prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n        return prefix\n",
      "\n    @classmethod\n    def handle_simple(cls, name):\n        try:\n            from django.conf import settings\n            from django.urls import get_script_prefix\n        except ImportError:\n            prefix = ''\n        else:\n            prefix = iri_to_uri(getattr(settings, name, ''))\n            if prefix:\n                script_prefix = get_script_prefix()\n                if script_prefix and not prefix.startswith(script_prefix):\n                    prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n        return prefix\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/templatetags/static.py lines 114-120)": [
      "\n    @classmethod\n    def handle_simple(cls, path):\n        from django.urls import get_script_prefix\n        \n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            url = staticfiles_storage.url(path)\n        else:\n            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n        \n        # Prepend SCRIPT_NAME if it exists\n        script_prefix = get_script_prefix()\n        if script_prefix and script_prefix != '/':\n            # Remove leading slash from url to avoid double slashes\n            if url.startswith('/'):\n                url = url[1:]\n            url = urljoin(script_prefix, url)\n        \n        return url\n",
      "\n    @classmethod\n    def handle_simple(cls, path):\n        from django.urls import get_script_prefix\n        \n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            url = staticfiles_storage.url(path)\n        else:\n            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n        \n        # Prepend SCRIPT_NAME if it exists\n        script_prefix = get_script_prefix()\n        if script_prefix and script_prefix != '/':\n            # Remove leading slash from url if present to avoid double slashes\n            if url.startswith('/'):\n                url = url[1:]\n            url = script_prefix + url\n        \n        return url\n",
      "\nfrom urllib.parse import quote, urljoin\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.urls import get_script_prefix\n",
      "\n    @classmethod\n    def handle_simple(cls, path):\n        from django.urls import get_script_prefix\n        \n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            url = staticfiles_storage.url(path)\n        else:\n            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n        \n        # Prepend script prefix if it's not already included\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n        \n        return url\n",
      "\n    @classmethod\n    def handle_simple(cls, path):\n        from django.urls import get_script_prefix\n        \n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            url = staticfiles_storage.url(path)\n        else:\n            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n        \n        # Prepend SCRIPT_NAME if it exists\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(('http://', 'https://', '//')):\n            # Only prepend if URL is not already absolute\n            if url.startswith('/'):\n                url = script_prefix.rstrip('/') + url\n            else:\n                url = script_prefix + url\n        \n        return url\n",
      "\n    @classmethod\n    def handle_simple(cls, path):\n        from django.urls import get_script_prefix\n        \n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            url = staticfiles_storage.url(path)\n        else:\n            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n        \n        # Prepend script prefix if it's not already included\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = urljoin(script_prefix.rstrip('/') + '/', url.lstrip('/'))\n        \n        return url\n",
      "\n    @classmethod\n    def handle_simple(cls, path):\n        from django.urls import get_script_prefix\n        \n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            url = staticfiles_storage.url(path)\n        else:\n            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n        \n        # Prepend script prefix if it's not already included\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = urljoin(script_prefix.rstrip('/') + '/', url.lstrip('/'))\n        \n        return url\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        from django.urls import get_script_prefix\n        url = staticfiles_storage.url(path)\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(('http://', 'https://', '//')):\n            url = script_prefix.rstrip('/') + url\n        return url\n    else:\n        from django.urls import get_script_prefix\n        base_url = PrefixNode.handle_simple(\"STATIC_URL\")\n        script_prefix = get_script_prefix()\n        if script_prefix and not base_url.startswith(('http://', 'https://', '//')):\n            base_url = script_prefix.rstrip('/') + base_url\n        return urljoin(base_url, quote(path))\n"
    ],
    "Location 3 (/root/hy/projects_2/django/django/templatetags/static.py lines 101-103)": [
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        return self.handle_simple(path)\n",
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        return self.handle_simple(path)\n",
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        return self.handle_simple(path)\n",
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        return self.handle_simple(path)\n",
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        url = self.handle_simple(path)\n        from django.urls import get_script_prefix\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(('http://', 'https://', '//')):\n            url = script_prefix.rstrip('/') + url\n        return url\n",
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        return self.handle_simple(path)\n",
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        url = self.handle_simple(path)\n        # Prepend SCRIPT_NAME if it exists\n        from django.urls import get_script_prefix\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n        return url\n",
      "\n    def url(self, context):\n        path = self.path.resolve(context)\n        return self.handle_simple(path)\n"
    ],
    "Location 4 (/root/hy/projects_2/django/django/templatetags/static.py lines 162-167)": [
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    from django.urls import get_script_prefix\n    url = StaticNode.handle_simple(path)\n    if url and not url.startswith(('http://', 'https://', '//')):\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n    return url\n",
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    from django.urls import get_script_prefix\n    url = StaticNode.handle_simple(path)\n    if url and not url.startswith(('http://', 'https://', '//')):\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n    return url\n",
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    return StaticNode.handle_simple(path)\n",
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    from django.urls import get_script_prefix\n    url = StaticNode.handle_simple(path)\n    if url and not url.startswith(('http://', 'https://', '//')):\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n    return url\n",
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    from django.urls import get_script_prefix\n    url = StaticNode.handle_simple(path)\n    if url and not url.startswith(('http://', 'https://', '//')):\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n    return url\n",
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    return StaticNode.handle_simple(path)\n",
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    return StaticNode.handle_simple(path)\n",
      "\ndef static(path):\n    \"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"\n    from django.urls import get_script_prefix\n    url = StaticNode.handle_simple(path)\n    if url and not url.startswith(('http://', 'https://', '//')):\n        script_prefix = get_script_prefix()\n        if script_prefix and not url.startswith(script_prefix):\n            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n    return url\n"
    ],
    "Location 5 (/root/hy/projects_2/django/django/templatetags/static.py lines 1-10)": [
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n\n",
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n\n",
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n",
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n\n",
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n\n",
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n",
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n",
      "\nfrom urllib.parse import quote, urljoin\n\nfrom django import template\nfrom django.apps import apps\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.html import conditional_escape\nfrom django.urls import get_script_prefix\n\nregister = template.Library()\n\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..ecaba0c2c4 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,10 @@\n-from urllib.parse import quote, urljoin\n-\n-from django import template\n-from django.apps import apps\n-from django.utils.encoding import iri_to_uri\n-from django.utils.html import conditional_escape\n-\n-register = template.Library()\n-\n \n+def static(path):\n+    \"\"\"\n+    Given a relative path to a static asset, return the absolute path to the\n+    asset.\n+    \"\"\"\n+    return StaticNode.handle_simple(path)\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,15 +33,18 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n-    @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+from urllib.parse import quote, urljoin\n+\n+from django import template\n+from django.apps import apps\n+from django.urls import get_script_prefix\n+from django.utils.encoding import iri_to_uri\n+from django.utils.html import conditional_escape\n+\n+register = template.Library()\n+\n+\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -98,9 +98,14 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n-    def url(self, context):\n-        path = self.path.resolve(context)\n-        return self.handle_simple(path)\n+\n+    @classmethod\n+    def handle_simple(cls, path):\n+        if apps.is_installed('django.contrib.staticfiles'):\n+            from django.contrib.staticfiles.storage import staticfiles_storage\n+            return get_script_prefix() + staticfiles_storage.url(path)\n+        else:\n+            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     def render(self, context):\n         url = self.url(context)\n@@ -111,13 +116,16 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+    def handle_simple(cls, name):\n+        try:\n+            from django.conf import settings\n+        except ImportError:\n+            prefix = ''\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            prefix = iri_to_uri(getattr(settings, name, ''))\n+        return get_script_prefix() + prefix\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,9 +167,7 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n-def static(path):\n-    \"\"\"\n-    Given a relative path to a static asset, return the absolute path to the\n-    asset.\n-    \"\"\"\n-    return StaticNode.handle_simple(path)\n+\n+    def url(self, context):\n+        path = self.path.resolve(context)\n+        return self.handle_simple(path)\n",
    "variant_0": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..288488da30 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,14 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n \n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,15 +37,21 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n-    @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        prefix = iri_to_uri(getattr(settings, name, ''))\n+        if prefix:\n+            script_prefix = get_script_prefix()\n+            if script_prefix and not prefix.startswith(script_prefix):\n+                prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -98,6 +105,7 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n         return self.handle_simple(path)\n@@ -111,13 +119,26 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n     def handle_simple(cls, path):\n+        from django.urls import get_script_prefix\n+        \n         if apps.is_installed('django.contrib.staticfiles'):\n             from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+            url = staticfiles_storage.url(path)\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+        \n+        # Prepend SCRIPT_NAME if it exists\n+        script_prefix = get_script_prefix()\n+        if script_prefix and script_prefix != '/':\n+            # Remove leading slash from url to avoid double slashes\n+            if url.startswith('/'):\n+                url = url[1:]\n+            url = urljoin(script_prefix, url)\n+        \n+        return url\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,6 +180,7 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n",
    "variant_1": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..935f3039a0 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,14 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n \n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,14 +37,20 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n+\n     @classmethod\n     def handle_simple(cls, name):\n         try:\n             from django.conf import settings\n+            from django.urls import get_script_prefix\n         except ImportError:\n             prefix = ''\n         else:\n             prefix = iri_to_uri(getattr(settings, name, ''))\n+            if prefix:\n+                script_prefix = get_script_prefix()\n+                if script_prefix and not prefix.startswith(script_prefix):\n+                    prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n         return prefix\n \n     def render(self, context):\n@@ -98,6 +105,7 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n         return self.handle_simple(path)\n@@ -111,13 +119,26 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n     def handle_simple(cls, path):\n+        from django.urls import get_script_prefix\n+        \n         if apps.is_installed('django.contrib.staticfiles'):\n             from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+            url = staticfiles_storage.url(path)\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+        \n+        # Prepend SCRIPT_NAME if it exists\n+        script_prefix = get_script_prefix()\n+        if script_prefix and script_prefix != '/':\n+            # Remove leading slash from url to avoid double slashes\n+            if url.startswith('/'):\n+                url = url[1:]\n+            url = urljoin(script_prefix, url)\n+        \n+        return url\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,9 +180,16 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n     asset.\n     \"\"\"\n-    return StaticNode.handle_simple(path)\n+    from django.urls import get_script_prefix\n+    url = StaticNode.handle_simple(path)\n+    if url and not url.startswith(('http://', 'https://', '//')):\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n+    return url\n",
    "variant_2": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..000a075ec3 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,14 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n \n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,15 +37,15 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n-    @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+from urllib.parse import quote, urljoin\n+from django import template\n+from django.apps import apps\n+from django.utils.encoding import iri_to_uri\n+from django.utils.html import conditional_escape\n+from django.conf import settings\n+from django.contrib.staticfiles.storage import staticfiles_storage\n+from django.urls import get_script_prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -98,6 +99,7 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n         return self.handle_simple(path)\n@@ -111,13 +113,26 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n     def handle_simple(cls, path):\n+        from django.urls import get_script_prefix\n+        \n         if apps.is_installed('django.contrib.staticfiles'):\n             from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+            url = staticfiles_storage.url(path)\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+        \n+        # Prepend SCRIPT_NAME if it exists\n+        script_prefix = get_script_prefix()\n+        if script_prefix and script_prefix != '/':\n+            # Remove leading slash from url if present to avoid double slashes\n+            if url.startswith('/'):\n+                url = url[1:]\n+            url = script_prefix + url\n+        \n+        return url\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,9 +174,16 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n     asset.\n     \"\"\"\n-    return StaticNode.handle_simple(path)\n+    from django.urls import get_script_prefix\n+    url = StaticNode.handle_simple(path)\n+    if url and not url.startswith(('http://', 'https://', '//')):\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n+    return url\n",
    "variant_3": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..535815835d 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,13 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n-\n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,15 +36,15 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n-    @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+from urllib.parse import quote, urljoin\n+from django import template\n+from django.apps import apps\n+from django.utils.encoding import iri_to_uri\n+from django.utils.html import conditional_escape\n+from django.conf import settings\n+from django.contrib.staticfiles.storage import staticfiles_storage\n+from django.urls import get_script_prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -98,6 +98,7 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n         return self.handle_simple(path)\n@@ -111,13 +112,15 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n-    @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+from urllib.parse import quote, urljoin\n+from django import template\n+from django.apps import apps\n+from django.utils.encoding import iri_to_uri\n+from django.utils.html import conditional_escape\n+from django.conf import settings\n+from django.contrib.staticfiles.storage import staticfiles_storage\n+from django.urls import get_script_prefix\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,6 +162,7 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n",
    "variant_4": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..05a5cf1f0e 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,14 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n \n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,15 +37,15 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n-    @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+from urllib.parse import quote, urljoin\n+from django import template\n+from django.apps import apps\n+from django.utils.encoding import iri_to_uri\n+from django.utils.html import conditional_escape\n+from django.conf import settings\n+from django.contrib.staticfiles.storage import staticfiles_storage\n+from django.urls import get_script_prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -98,6 +99,7 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n         return self.handle_simple(path)\n@@ -111,13 +113,23 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n     def handle_simple(cls, path):\n+        from django.urls import get_script_prefix\n+        \n         if apps.is_installed('django.contrib.staticfiles'):\n             from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+            url = staticfiles_storage.url(path)\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+        \n+        # Prepend script prefix if it's not already included\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n+        \n+        return url\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,9 +171,16 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n     asset.\n     \"\"\"\n-    return StaticNode.handle_simple(path)\n+    from django.urls import get_script_prefix\n+    url = StaticNode.handle_simple(path)\n+    if url and not url.startswith(('http://', 'https://', '//')):\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n+    return url\n",
    "variant_5": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..c32eb4322e 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,14 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n \n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,15 +37,21 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n-    @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        setting_value = getattr(settings, name, '')\n+        if setting_value:\n+            prefix = iri_to_uri(get_script_prefix() + setting_value)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -98,9 +105,15 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n-        return self.handle_simple(path)\n+        url = self.handle_simple(path)\n+        from django.urls import get_script_prefix\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(('http://', 'https://', '//')):\n+            url = script_prefix.rstrip('/') + url\n+        return url\n \n     def render(self, context):\n         url = self.url(context)\n@@ -111,13 +124,27 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n     def handle_simple(cls, path):\n+        from django.urls import get_script_prefix\n+        \n         if apps.is_installed('django.contrib.staticfiles'):\n             from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+            url = staticfiles_storage.url(path)\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+        \n+        # Prepend SCRIPT_NAME if it exists\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(('http://', 'https://', '//')):\n+            # Only prepend if URL is not already absolute\n+            if url.startswith('/'):\n+                url = script_prefix.rstrip('/') + url\n+            else:\n+                url = script_prefix + url\n+        \n+        return url\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,9 +186,16 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n     asset.\n     \"\"\"\n-    return StaticNode.handle_simple(path)\n+    from django.urls import get_script_prefix\n+    url = StaticNode.handle_simple(path)\n+    if url and not url.startswith(('http://', 'https://', '//')):\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n+    return url\n",
    "variant_6": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..be6c523ade 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,13 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n-\n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,15 +36,21 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n-    @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        prefix = iri_to_uri(getattr(settings, name, ''))\n+        if prefix:\n+            script_prefix = get_script_prefix()\n+            if script_prefix and not prefix.startswith(script_prefix):\n+                prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -98,6 +104,7 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n         return self.handle_simple(path)\n@@ -111,13 +118,23 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n     def handle_simple(cls, path):\n+        from django.urls import get_script_prefix\n+        \n         if apps.is_installed('django.contrib.staticfiles'):\n             from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+            url = staticfiles_storage.url(path)\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+        \n+        # Prepend script prefix if it's not already included\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = urljoin(script_prefix.rstrip('/') + '/', url.lstrip('/'))\n+        \n+        return url\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,6 +176,7 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n",
    "variant_7": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..50864cb211 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,13 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n-\n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,14 +36,20 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n+\n     @classmethod\n     def handle_simple(cls, name):\n         try:\n             from django.conf import settings\n+            from django.urls import get_script_prefix\n         except ImportError:\n             prefix = ''\n         else:\n             prefix = iri_to_uri(getattr(settings, name, ''))\n+            if prefix:\n+                script_prefix = get_script_prefix()\n+                if script_prefix and not prefix.startswith(script_prefix):\n+                    prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n         return prefix\n \n     def render(self, context):\n@@ -98,9 +104,16 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n-        return self.handle_simple(path)\n+        url = self.handle_simple(path)\n+        # Prepend SCRIPT_NAME if it exists\n+        from django.urls import get_script_prefix\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n+        return url\n \n     def render(self, context):\n         url = self.url(context)\n@@ -111,13 +124,23 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+\n     @classmethod\n     def handle_simple(cls, path):\n+        from django.urls import get_script_prefix\n+        \n         if apps.is_installed('django.contrib.staticfiles'):\n             from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n+            url = staticfiles_storage.url(path)\n         else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+            url = urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+        \n+        # Prepend script prefix if it's not already included\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = urljoin(script_prefix.rstrip('/') + '/', url.lstrip('/'))\n+        \n+        return url\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,6 +182,7 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n",
    "variant_8": "diff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..2d0ee1fd10 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -1,13 +1,14 @@\n+\n from urllib.parse import quote, urljoin\n \n from django import template\n from django.apps import apps\n from django.utils.encoding import iri_to_uri\n from django.utils.html import conditional_escape\n+from django.urls import get_script_prefix\n \n register = template.Library()\n \n-\n class PrefixNode(template.Node):\n \n     def __repr__(self):\n@@ -36,14 +37,20 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n+\n     @classmethod\n     def handle_simple(cls, name):\n         try:\n             from django.conf import settings\n+            from django.urls import get_script_prefix\n         except ImportError:\n             prefix = ''\n         else:\n             prefix = iri_to_uri(getattr(settings, name, ''))\n+            if prefix:\n+                script_prefix = get_script_prefix()\n+                if script_prefix and not prefix.startswith(script_prefix):\n+                    prefix = script_prefix.rstrip('/') + '/' + prefix.lstrip('/')\n         return prefix\n \n     def render(self, context):\n@@ -98,6 +105,7 @@ class StaticNode(template.Node):\n         self.path = path\n         self.varname = varname\n \n+\n     def url(self, context):\n         path = self.path.resolve(context)\n         return self.handle_simple(path)\n@@ -111,13 +119,24 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n-    @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        from django.urls import get_script_prefix\n+        url = staticfiles_storage.url(path)\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(('http://', 'https://', '//')):\n+            url = script_prefix.rstrip('/') + url\n+        return url\n+    else:\n+        from django.urls import get_script_prefix\n+        base_url = PrefixNode.handle_simple(\"STATIC_URL\")\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not base_url.startswith(('http://', 'https://', '//')):\n+            base_url = script_prefix.rstrip('/') + base_url\n+        return urljoin(base_url, quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n@@ -159,9 +178,16 @@ def do_static(parser, token):\n     return StaticNode.handle_token(parser, token)\n \n \n+\n def static(path):\n     \"\"\"\n     Given a relative path to a static asset, return the absolute path to the\n     asset.\n     \"\"\"\n-    return StaticNode.handle_simple(path)\n+    from django.urls import get_script_prefix\n+    url = StaticNode.handle_simple(path)\n+    if url and not url.startswith(('http://', 'https://', '//')):\n+        script_prefix = get_script_prefix()\n+        if script_prefix and not url.startswith(script_prefix):\n+            url = script_prefix.rstrip('/') + '/' + url.lstrip('/')\n+    return url\n"
  }
}