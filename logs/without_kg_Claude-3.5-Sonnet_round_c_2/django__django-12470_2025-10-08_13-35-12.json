{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 340-341)": "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
    "Location 2 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 307-308)": "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n",
    "Location 3 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 706-707)": "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
    "Location 4 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 729-730)": "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
    "Location 5 (/root/hy/projects_2/django/django/db/models/sql/query.py lines 2256-2267)": "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 340-341)": [
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n            if not self.query.extra or col not in self.query.extra:\n                # 'col' is of the form 'field' or 'field1__field2' or\n                # '-field1__field2__field', etc.\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 307-308)": [
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n",
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n\n            if col in self.query.annotation_select:\n                # Reference to expression in SELECT clause\n                order_by.append((\n                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n                    True))\n                continue\n            if col in self.query.annotations:\n                # References to an expression which is masked out of the SELECT\n                # clause.\n                order_by.append((\n                    OrderBy(self.query.annotations[col], descending=descending),\n                    True))\n                continue\n\n            if '.' in col:\n                # This came in through an extra(order_by=...) addition. Pass it\n                # on verbatim.\n                table, col = col.split('.', 1)\n                order_by.append((\n                    OrderBy(\n                        RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),\n                        descending=descending\n                    ), False))\n                continue\n\n            if not self.query.extra or col not in self.query.extra:\n                # 'col' is of the form 'field' or 'field1__field2' or\n                # '-field1__field2__field', etc.\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n            else:\n                if col.startswith('-'):\n                    order_by.append((OrderBy(RawSQL(*self.query.extra[col[1:]]), descending=True), False))\n                else:\n                    order_by.append((OrderBy(RawSQL(*self.query.extra[col]), descending=False), False))\n",
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n",
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n",
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n",
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n",
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n\n            if col in self.query.annotation_select:\n                # Reference to expression in SELECT clause\n                order_by.append((\n                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n                    True))\n                continue\n            if col in self.query.annotations:\n                # References to an expression which is masked out of the SELECT\n                # clause.\n                order_by.append((\n                    OrderBy(self.query.annotations[col], descending=descending),\n                    True))\n                continue\n\n            if '.' in col:\n                # This came in through an extra(order_by=...) addition. Pass it\n                # on verbatim.\n                table, col = col.split('.', 1)\n                order_by.append((\n                    OrderBy(\n                        RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),\n                        descending=descending\n                    ), False))\n                continue\n\n            if not self.query._extra_select and col in self.query.extra_select:\n                order_by.append((\n                    OrderBy(RawSQL(*self.query.extra_select[col]), descending=descending),\n                    False))\n            else:\n                if col in self.query.extra_select:\n                    order_by.append((\n                        OrderBy(RawSQL(*self.query.extra_select[col]), descending=descending),\n                        False))\n                else:\n                    order_by.extend(self.find_ordering_name(\n                        col, self.query.get_meta(), default_order=order))\n",
      "\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n"
    ],
    "Location 3 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 706-707)": [
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n        if with_limits and self.query.low_mark == self.query.high_mark:\n            return '', ()\n\n        out = []\n        for field in ordering:\n            col, order = get_order_dir(field, asc)\n            descending = order == 'DESC'\n\n            if col in self.query.annotation_select:\n                # Reference to expression in SELECT clause\n                order_by.append((\n                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n                    False))\n                continue\n            if col in self.query.annotations:\n                # References to an expression which is masked out of the SELECT\n                # clause.\n                if self.query.group_by is True:\n                    # TODO: investigate adding the annotation to the SELECT in\n                    # this case.\n                    raise DatabaseError('ORDER BY term does not match any '\n                                        'column in the result set.')\n                order_by.append((\n                    OrderBy(self.query.annotations[col], descending=descending),\n                    False))\n                continue\n\n            if '.' in field:\n                # This came in through an extra(order_by=...) addition. Pass it\n                # on verbatim.\n                table, col = col.split('.', 1)\n                order_by.append((\n                    OrderBy(\n                        RawSQL('%s.%s' % (self.quote_name_unless_alias(table), self.quote_name_unless_alias(col)), []),\n                        descending=descending\n                    ), False))\n                continue\n\n            order_by.extend(self.find_ordering_name(\n                col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n"
    ],
    "Location 4 (/root/hy/projects_2/django/django/db/models/sql/compiler.py lines 729-730)": [
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n            order_by.extend(self.find_ordering_name(\n                col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n                order_by.extend(self.find_ordering_name(\n                    col, self.query.get_meta(), default_order=order))\n",
      "\n            order_by.extend(self.find_ordering_name(\n                col, self.query.get_meta(), default_order=order))\n",
      "\n                if not avail_only:\n                    order_by.extend(self.find_ordering_name(\n                        col, self.query.get_meta(), default_order=order))\n"
    ],
    "Location 5 (/root/hy/projects_2/django/django/db/models/sql/query.py lines 2256-2267)": [
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n",
      "\ndef get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..f8d0c944d6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,6 +705,7 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n+\n         name, order = get_order_dir(name, default_order)\n         descending = order == 'DESC'\n         pieces = name.split(LOOKUP_SEP)\n@@ -726,6 +729,7 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n+\n                 results.extend(self.find_ordering_name(item, opts, alias,\n                                                        order, already_seen))\n             return results\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_0": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..f78ecdca8a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +705,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +729,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_1": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..f78ecdca8a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +705,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +729,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_2": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..c16c03aab4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,9 +304,46 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n+            if col in self.query.annotation_select:\n+                # Reference to expression in SELECT clause\n+                order_by.append((\n+                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n+                    True))\n+                continue\n+            if col in self.query.annotations:\n+                # References to an expression which is masked out of the SELECT\n+                # clause.\n+                order_by.append((\n+                    OrderBy(self.query.annotations[col], descending=descending),\n+                    True))\n+                continue\n+\n+            if '.' in col:\n+                # This came in through an extra(order_by=...) addition. Pass it\n+                # on verbatim.\n+                table, col = col.split('.', 1)\n+                order_by.append((\n+                    OrderBy(\n+                        RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),\n+                        descending=descending\n+                    ), False))\n+                continue\n+\n+            if not self.query.extra or col not in self.query.extra:\n+                # 'col' is of the form 'field' or 'field1__field2' or\n+                # '-field1__field2__field', etc.\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n+            else:\n+                if col.startswith('-'):\n+                    order_by.append((OrderBy(RawSQL(*self.query.extra[col[1:]]), descending=True), False))\n+                else:\n+                    order_by.append((OrderBy(RawSQL(*self.query.extra[col]), descending=False), False))\n+\n             if col in self.query.annotation_select:\n                 # Reference to expression in SELECT clause\n                 order_by.append((\n@@ -337,8 +374,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +741,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +765,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_3": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..da49cbc081 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +705,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +729,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+            order_by.extend(self.find_ordering_name(\n+                col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_4": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..f78ecdca8a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +705,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +729,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_5": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..d30fab7dbb 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +705,47 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+        if with_limits and self.query.low_mark == self.query.high_mark:\n+            return '', ()\n+\n+        out = []\n+        for field in ordering:\n+            col, order = get_order_dir(field, asc)\n+            descending = order == 'DESC'\n+\n+            if col in self.query.annotation_select:\n+                # Reference to expression in SELECT clause\n+                order_by.append((\n+                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n+                    False))\n+                continue\n+            if col in self.query.annotations:\n+                # References to an expression which is masked out of the SELECT\n+                # clause.\n+                if self.query.group_by is True:\n+                    # TODO: investigate adding the annotation to the SELECT in\n+                    # this case.\n+                    raise DatabaseError('ORDER BY term does not match any '\n+                                        'column in the result set.')\n+                order_by.append((\n+                    OrderBy(self.query.annotations[col], descending=descending),\n+                    False))\n+                continue\n+\n+            if '.' in field:\n+                # This came in through an extra(order_by=...) addition. Pass it\n+                # on verbatim.\n+                table, col = col.split('.', 1)\n+                order_by.append((\n+                    OrderBy(\n+                        RawSQL('%s.%s' % (self.quote_name_unless_alias(table), self.quote_name_unless_alias(col)), []),\n+                        descending=descending\n+                    ), False))\n+                continue\n+\n+            order_by.extend(self.find_ordering_name(\n+                col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +767,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_6": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..f78ecdca8a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +705,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +729,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_7": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..a97757df58 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,9 +304,48 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n+            if col in self.query.annotation_select:\n+                # Reference to expression in SELECT clause\n+                order_by.append((\n+                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n+                    True))\n+                continue\n+            if col in self.query.annotations:\n+                # References to an expression which is masked out of the SELECT\n+                # clause.\n+                order_by.append((\n+                    OrderBy(self.query.annotations[col], descending=descending),\n+                    True))\n+                continue\n+\n+            if '.' in col:\n+                # This came in through an extra(order_by=...) addition. Pass it\n+                # on verbatim.\n+                table, col = col.split('.', 1)\n+                order_by.append((\n+                    OrderBy(\n+                        RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),\n+                        descending=descending\n+                    ), False))\n+                continue\n+\n+            if not self.query._extra_select and col in self.query.extra_select:\n+                order_by.append((\n+                    OrderBy(RawSQL(*self.query.extra_select[col]), descending=descending),\n+                    False))\n+            else:\n+                if col in self.query.extra_select:\n+                    order_by.append((\n+                        OrderBy(RawSQL(*self.query.extra_select[col]), descending=descending),\n+                        False))\n+                else:\n+                    order_by.extend(self.find_ordering_name(\n+                        col, self.query.get_meta(), default_order=order))\n+\n             if col in self.query.annotation_select:\n                 # Reference to expression in SELECT clause\n                 order_by.append((\n@@ -334,11 +373,15 @@ class SQLCompiler:\n                     ), False))\n                 continue\n \n+            if not self.query.extra or col not in self.query.extra:\n+                # 'col' is of the form 'field' or 'field1__field2' or\n+                # '-field1__field2__field', etc.\n+\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +746,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +770,9 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+            order_by.extend(self.find_ordering_name(\n+                col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n",
    "variant_8": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..bd20092523 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -304,6 +304,7 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n+\n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n@@ -337,8 +338,9 @@ class SQLCompiler:\n             if not self.query.extra or col not in self.query.extra:\n                 # 'col' is of the form 'field' or 'field1__field2' or\n                 # '-field1__field2__field', etc.\n+\n                 order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                    col, self.query.get_meta(), default_order=order))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n@@ -703,8 +705,9 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n-        name, order = get_order_dir(name, default_order)\n-        descending = order == 'DESC'\n+\n+                order_by.extend(self.find_ordering_name(\n+                    col, self.query.get_meta(), default_order=order))\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n@@ -726,8 +729,10 @@ class SQLCompiler:\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+\n+                if not avail_only:\n+                    order_by.extend(self.find_ordering_name(\n+                        col, self.query.get_meta(), default_order=order))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..58d5f98f65 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2253,6 +2253,7 @@ class Query(BaseExpression):\n         ) or field.null\n \n \n+\n def get_order_dir(field, default='ASC'):\n     \"\"\"\n     Return the field name and direction for an order specification. For\n"
  }
}