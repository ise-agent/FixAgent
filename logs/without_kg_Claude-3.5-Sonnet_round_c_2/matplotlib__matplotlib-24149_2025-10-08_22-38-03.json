{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2183-2183)": "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
    "Location 2 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2188-2188)": "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
    "Location 3 (/root/hy/projects_2/matplotlib/lib/matplotlib/cbook/__init__.py lines 1749-1749)": "\n        return next((val for val in obj if safe_isfinite(val)), None)\n",
    "Location 4 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2182-2182)": "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
    "Location 5 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2373-2373)": "\n            width = self._convert_dx(width, x0, x, self.convert_xunits)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2183-2183)": [
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n"
    ],
    "Location 2 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2188-2188)": [
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n",
      "\n            except (TypeError, IndexError, KeyError, StopIteration):\n"
    ],
    "Location 3 (/root/hy/projects_2/matplotlib/lib/matplotlib/cbook/__init__.py lines 1749-1749)": [
      "\n        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n",
      "\n        return next((val for val in obj if safe_isfinite(val)), None)\n",
      "\n        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n",
      "\n        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n",
      "\n        return next((val for val in obj if safe_isfinite(val)), None)\n",
      "\n        return next((val for val in obj if safe_isfinite(val)), None)\n",
      "\n        return next((val for val in obj if safe_isfinite(val)), None)\n",
      "\n        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n"
    ],
    "Location 4 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2182-2182)": [
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n",
      "\n            try:\n                x0 = cbook._safe_first_finite(x0)\n            except (TypeError, IndexError, KeyError, StopIteration):\n                pass\n"
    ],
    "Location 5 (/root/hy/projects_2/matplotlib/lib/matplotlib/axes/_axes.py lines 2373-2373)": [
      "\n        try:\n            x0_safe = _safe_first_finite(x0)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            x0_safe = None\n        try:\n            xconv_safe = _safe_first_finite(xconv)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            xconv_safe = None\n",
      "\n            width = self._convert_dx(width, x0, x, self.convert_xunits)\n",
      "\n            width = self._convert_dx(width, x0, x, self.convert_xunits)\n",
      "\n        try:\n            x0_is_datetime = isinstance(\n                _safe_first_finite(x0_safe), np.datetime64)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            x0_is_datetime = False\n",
      "\n            width = self._convert_dx(width, x0, x, self.convert_xunits)\n",
      "\n        try:\n            x0_safe = _safe_first_finite(x0)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            x0_safe = None\n        try:\n            xconv_safe = _safe_first_finite(xconv)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            xconv_safe = None\n",
      "\n        try:\n            x0_fin = cbook._safe_first_finite(x0)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            x0_fin = None\n        try:\n            xconv_fin = cbook._safe_first_finite(xconv)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            xconv_fin = None\n",
      "\n        try:\n            x0_is_datetime = isinstance(\n                _safe_first_finite(x0), np.datetime64)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            # pandas raises TypeError\n            # Sparse matrices raise IndexError\n            # Pandas raises KeyError on categories\n            # _safe_first_finite raises StopIteration when no finite values\n            x0_is_datetime = False\n\n        try:\n            xconv_is_datetime = isinstance(\n                _safe_first_finite(xconv), np.datetime64)\n        except (TypeError, IndexError, KeyError, StopIteration):\n            xconv_is_datetime = False\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..307d52b2d5 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2179,13 +2179,16 @@ class Axes(_AxesBase):\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n             try:\n+\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,6 +2373,7 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n+\n             width = self._convert_dx(width, x0, x, self.convert_xunits)\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..1c74aa629f 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,6 +1746,7 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n+\n         return next(val for val in obj if safe_isfinite(val))\n \n \n",
    "variant_0": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..0cf74f7fbe 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,23 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n+            try:\n+                x0 = cbook._safe_first_finite(x0)\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,6 +2379,7 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n+\n             width = self._convert_dx(width, x0, x, self.convert_xunits)\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..ca003e9a8f 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), None)\n \n \n def sanitize_sequence(data):\n",
    "variant_1": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..0f0bde3814 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,23 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n+            try:\n+                x0 = cbook._safe_first_finite(x0)\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,7 +2379,15 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n-            width = self._convert_dx(width, x0, x, self.convert_xunits)\n+\n+        try:\n+            x0_safe = _safe_first_finite(x0)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            x0_safe = None\n+        try:\n+            xconv_safe = _safe_first_finite(xconv)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            xconv_safe = None\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n         if self.yaxis is not None:\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..a6c3434351 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n \n \n def sanitize_sequence(data):\n",
    "variant_2": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..c115579119 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,20 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,6 +2376,7 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n+\n             width = self._convert_dx(width, x0, x, self.convert_xunits)\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..ca003e9a8f 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), None)\n \n \n def sanitize_sequence(data):\n",
    "variant_3": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..c115579119 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,20 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,6 +2376,7 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n+\n             width = self._convert_dx(width, x0, x, self.convert_xunits)\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..a6c3434351 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n \n \n def sanitize_sequence(data):\n",
    "variant_4": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..88d26e1bd3 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,23 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n+            try:\n+                x0 = cbook._safe_first_finite(x0)\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,7 +2379,12 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n-            width = self._convert_dx(width, x0, x, self.convert_xunits)\n+\n+        try:\n+            x0_is_datetime = isinstance(\n+                _safe_first_finite(x0_safe), np.datetime64)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            x0_is_datetime = False\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n         if self.yaxis is not None:\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..a6c3434351 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n \n \n def sanitize_sequence(data):\n",
    "variant_5": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..c115579119 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,20 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,6 +2376,7 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n+\n             width = self._convert_dx(width, x0, x, self.convert_xunits)\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..ca003e9a8f 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), None)\n \n \n def sanitize_sequence(data):\n",
    "variant_6": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..0f0bde3814 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,23 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n+            try:\n+                x0 = cbook._safe_first_finite(x0)\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,7 +2379,15 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n-            width = self._convert_dx(width, x0, x, self.convert_xunits)\n+\n+        try:\n+            x0_safe = _safe_first_finite(x0)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            x0_safe = None\n+        try:\n+            xconv_safe = _safe_first_finite(xconv)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            xconv_safe = None\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n         if self.yaxis is not None:\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..ca003e9a8f 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), None)\n \n \n def sanitize_sequence(data):\n",
    "variant_7": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..ec7316a1c4 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,20 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,7 +2376,15 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n-            width = self._convert_dx(width, x0, x, self.convert_xunits)\n+\n+        try:\n+            x0_fin = cbook._safe_first_finite(x0)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            x0_fin = None\n+        try:\n+            xconv_fin = cbook._safe_first_finite(xconv)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            xconv_fin = None\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n         if self.yaxis is not None:\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..ca003e9a8f 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), None)\n \n \n def sanitize_sequence(data):\n",
    "variant_8": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..49b4d51385 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,14 +2178,23 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n+            try:\n+\n+            try:\n+                x0 = cbook._safe_first_finite(x0)\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n+\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                pass\n                 pass\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n@@ -2370,7 +2379,22 @@ class Axes(_AxesBase):\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n-            width = self._convert_dx(width, x0, x, self.convert_xunits)\n+\n+        try:\n+            x0_is_datetime = isinstance(\n+                _safe_first_finite(x0), np.datetime64)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            # pandas raises TypeError\n+            # Sparse matrices raise IndexError\n+            # Pandas raises KeyError on categories\n+            # _safe_first_finite raises StopIteration when no finite values\n+            x0_is_datetime = False\n+\n+        try:\n+            xconv_is_datetime = isinstance(\n+                _safe_first_finite(xconv), np.datetime64)\n+        except (TypeError, IndexError, KeyError, StopIteration):\n+            xconv_is_datetime = False\n             if xerr is not None:\n                 xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n         if self.yaxis is not None:\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..a6c3434351 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+\n+        return next((val for val in obj if safe_isfinite(val)), float('nan'))\n \n \n def sanitize_sequence(data):\n"
  }
}