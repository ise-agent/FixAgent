{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sympy/sympy/combinatorics/permutations.py lines 897-903)": "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sympy/sympy/combinatorics/permutations.py lines 897-903)": [
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n",
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n",
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n",
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n",
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n",
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n",
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n",
      "\n        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n            # For cycle form, allow duplicates and let composition logic handle it\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..dc5fdc7218 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,12 +894,10 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n",
    "variant_0": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_1": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_2": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_3": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_4": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_5": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_6": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_7": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n",
    "variant_8": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..0b4e96eb8b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,13 +894,12 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n+\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n+            # For cycle form, allow duplicates and let composition logic handle it\n         temp = set(temp)\n \n         if not is_cycle and \\\n"
  }
}