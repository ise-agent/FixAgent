{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 93-96)": "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
    "Location 2 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 114-117)": "\n        if os.path.isdir(something):\n            # Check if this is a package directory (contains __init__.py)\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package directory\n                filepath = init_file\n            else:\n                # It's a regular directory containing Python files\n                filepath = something\n        else:\n",
    "Location 3 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 119-123)": "\n        if os.path.isdir(something):\n            filepath = something\n            # Check if this is a Python package (has __init__.py)\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package, use the __init__.py file\n                filepath = init_file\n            # If no __init__.py, treat as regular directory (filepath remains as directory)\n",
    "Location 4 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 125-132)": "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package - use __init__.py\n                filepath = init_file\n            else:\n                # It's a regular directory - use the directory path itself\n                filepath = something\n        else:\n            filepath = something\n",
    "Location 5 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 134-162)": "\n        if os.path.isdir(filepath):\n            # Check if this is a package (has __init__.py) or just a directory with Python files\n            init_file = os.path.join(filepath, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package - use the __init__.py file\n                filepath = init_file\n            else:\n                # It's a regular directory - keep the directory path for traversal\n                # but mark it appropriately for later processing\n                is_directory = True\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 93-96)": [
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    filepath = init_file\n                else:\n                    filepath = something\n            else:\n                filepath = something\n"
    ],
    "Location 2 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 114-117)": [
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.isfile(init_file):\n                    # It's a package, use __init__.py\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path itself\n                    filepath = something\n",
      "\n                if os.path.isdir(something):\n                    # Check if this is a Python package (has __init__.py) or just a directory with Python files\n                    init_file = os.path.join(something, \"__init__.py\")\n                    if os.path.isfile(init_file):\n                        # It's a package, use __init__.py\n                        filepath = init_file\n                    else:\n                        # It's a regular directory, use the directory path itself\n                        filepath = something\n                else:\n                    filepath = something\n",
      "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # This is a package, use __init__.py\n                filepath = init_file\n            else:\n                # This is a regular directory, use the directory path itself\n                filepath = something\n        else:\n",
      "\n                # Check if it's a directory and handle appropriately\n                if os.path.isdir(something):\n                    # Check if it's a Python package (has __init__.py)\n                    init_file = os.path.join(something, \"__init__.py\")\n                    if os.path.isfile(init_file):\n                        # It's a package, use __init__.py\n                        filepath = init_file\n                    else:\n                        # It's a regular directory, use the directory path directly\n                        filepath = something\n                else:\n                    filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if it's a package (has __init__.py) or just a directory with Python files\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.isfile(init_file):\n                    # It's a package, use __init__.py\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path itself\n                    filepath = something\n",
      "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package - use __init__.py\n                filepath = init_file\n            else:\n                # It's a regular directory - use the directory path itself\n                filepath = something\n",
      "\n        if os.path.isdir(something):\n            filepath = something\n            # Check if this is a package (has __init__.py) or just a directory with Python files\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package, use the __init__.py file\n                filepath = init_file\n            # If no __init__.py, keep filepath as the directory itself\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.isfile(init_file):\n                    # It's a package, use __init__.py\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path itself\n                    filepath = something\n"
    ],
    "Location 3 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 119-123)": [
      "\n                # Check if it's a package directory (has __init__.py) or regular directory\n                if os.path.isdir(something):\n                    init_file = os.path.join(something, \"__init__.py\")\n                    if os.path.isfile(init_file):\n                        # It's a package directory\n                        filepath = init_file\n                    else:\n                        # It's a regular directory, use as-is\n                        filepath = something\n                else:\n                    filepath = something\n",
      "\n            # Check if it's a package directory (has __init__.py) or regular directory\n            if os.path.isdir(something):\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.exists(init_file):\n                    # It's a package directory\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path directly\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.isfile(init_file):\n                    # It's a package, use __init__.py\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path directly\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a package directory (has __init__.py)\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.isfile(init_file):\n                    # It's a package, use __init__.py\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n                # Check if it's a directory and handle appropriately\n                if os.path.isdir(something):\n                    # Check if it's a package (has __init__.py)\n                    init_file = os.path.join(something, \"__init__.py\")\n                    if os.path.isfile(init_file):\n                        # It's a package, use __init__.py\n                        filepath = init_file\n                    else:\n                        # It's a regular directory, use the directory path\n                        filepath = something\n                else:\n                    filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if this is a Python package (has __init__.py) or just a directory\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.isfile(init_file):\n                    # It's a package, use __init__.py\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path\n                    filepath = something\n            else:\n                filepath = something\n",
      "\n        if os.path.isdir(something):\n            filepath = something\n            # Check if this directory is a Python package\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package, use the __init__.py file\n                filepath = init_file\n            # If no __init__.py, treat as regular directory (filepath remains the directory)\n        else:\n            filepath = something\n",
      "\n            if os.path.isdir(something):\n                # Check if it's a package (has __init__.py) or just a directory with Python files\n                init_file = os.path.join(something, \"__init__.py\")\n                if os.path.isfile(init_file):\n                    # It's a package, use __init__.py\n                    filepath = init_file\n                else:\n                    # It's a regular directory, use the directory path\n                    filepath = something\n            else:\n                filepath = something\n"
    ],
    "Location 4 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 125-132)": [
      "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory\n            init_path = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_path):\n                # It's a package, use __init__.py\n                filepath = init_path\n            else:\n                # It's a regular directory, use the directory path\n                filepath = something\n        else:\n            filepath = something\n",
      "\n        if os.path.isdir(something):\n            filepath = something\n            modname = \".\".join(modparts)\n            # Check if this is actually a Python package (has __init__.py)\n            init_path = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_path):\n                # It's a package, use the __init__.py file\n                filepath = init_path\n        else:\n            filepath = something\n            modname = \".\".join(modparts)\n",
      "\n        if os.path.isdir(something):\n            filepath = something\n            if os.path.exists(os.path.join(something, \"__init__.py\")):\n                # It's a package directory\n                modname = \".\".join(modparts)\n            else:\n                # It's a regular directory, use directory name as module\n                modname = os.path.basename(something)\n        else:\n            filepath = something\n            modname = \".\".join(modparts)\n",
      "\n        if os.path.isdir(something):\n            # Check if this is a package (has __init__.py) or just a directory with Python files\n            init_path = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_path):\n                # It's a package, use __init__.py\n                filepath = init_path\n            else:\n                # It's a regular directory, use the directory path directly\n                filepath = something\n",
      "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package - use __init__.py\n                filepath = init_file\n            else:\n                # It's a regular directory - use the directory path directly\n                filepath = something\n",
      "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n            init_path = os.path.join(something, \"__init__.py\")\n            if os.path.exists(init_path):\n                # It's a package, use __init__.py\n                filepath = init_path\n            else:\n                # It's a regular directory, use the directory path itself\n                filepath = something\n",
      "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n            init_file = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package, use __init__.py\n                filepath = init_file\n            else:\n                # It's a regular directory, use the directory path itself\n                filepath = something\n",
      "\n        if os.path.isdir(something):\n            # Check if this is a Python package (has __init__.py) or just a directory\n            init_path = os.path.join(something, \"__init__.py\")\n            if os.path.isfile(init_path):\n                # It's a package - use __init__.py\n                filepath = init_path\n            else:\n                # It's a regular directory - use the directory path directly\n                filepath = something\n"
    ],
    "Location 5 (/root/hy/projects_2/pylint/pylint/lint/expand_modules.py lines 134-162)": [
      "\n        if os.path.isdir(filepath):\n            # Check if this directory is a Python package (has __init__.py)\n            init_file = os.path.join(filepath, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # This is a package directory, use __init__.py\n                filepath = init_file\n            else:\n                # This is a regular directory, keep the directory path\n                # The directory traversal logic will handle finding Python files within it\n                pass\n",
      "\n        if os.path.isdir(filepath):\n            # Check if this is actually a Python package (has __init__.py)\n            init_path = os.path.join(filepath, \"__init__.py\")\n            if os.path.isfile(init_path):\n                # This is a package directory, use __init__.py\n                filepath = init_path\n            else:\n                # This is a regular directory, keep the directory path\n                # The directory traversal logic will handle finding Python files within it\n                pass\n",
      "\n        if os.path.isdir(filepath):\n            # Check if this is a package directory (has __init__.py)\n            init_file = os.path.join(filepath, \"__init__.py\")\n            if os.path.exists(init_file):\n                # This is a package, use __init__.py\n                filepath = init_file\n            else:\n                # This is a regular directory, keep the directory path\n                # Directory traversal will handle finding Python files within it\n                pass\n",
      "\n        if is_directory:\n            # Check if directory is a package (has __init__.py) or just a regular directory\n            init_path = os.path.join(filepath, \"__init__.py\")\n            if os.path.exists(init_path):\n                # It's a package directory, use __init__.py\n                filepath = init_path\n            # If no __init__.py, keep filepath as the directory path for traversal\n",
      "\n        if is_directory:\n            # Check if this directory is actually a Python package\n            init_file = os.path.join(filepath, \"__init__.py\")\n            if os.path.isfile(init_file):\n                # It's a package - use the __init__.py file\n                filepath = init_file\n            else:\n                # It's just a directory with Python files - keep the directory path\n                # We'll handle the individual files in the traversal logic below\n                pass\n",
      "\n        # Check if this is actually a package directory or just a regular directory\n        init_path = os.path.join(filepath, \"__init__.py\")\n        if os.path.isfile(init_path):\n            # It's a package - use __init__.py\n            filepath = init_path\n        else:\n            # It's a regular directory - keep the directory path for traversal\n            pass\n",
      "\n        if os.path.isdir(filepath):\n            # Check if this is a Python package (has __init__.py) or just a directory\n            init_path = os.path.join(filepath, \"__init__.py\")\n            if os.path.exists(init_path):\n                # It's a package, use the __init__.py file\n                filepath = init_path\n            else:\n                # It's a regular directory, keep the directory path for traversal\n                is_directory = True\n",
      "\n        if is_directory:\n            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n            init_path = os.path.join(filepath, \"__init__.py\")\n            if os.path.isfile(init_path):\n                # It's a package - use __init__.py path\n                filepath = init_path\n            # If no __init__.py, keep filepath as the directory path for traversal\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..84c17ff7a 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,13 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                init_path = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_path):\n+                    filepath = init_path  # It's a package\n+                else:\n+                    filepath = something  # It's a regular directory\n             else:\n                 filepath = something\n         else:\n@@ -111,17 +116,20 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n+\n             spec = modutils.file_info_from_modpath(\n                 modparts, path=additional_search_path\n             )\n         except ImportError:\n             # Might not be acceptable, don't crash.\n+\n             is_namespace = False\n             is_directory = os.path.isdir(something)\n         else:\n             is_namespace = modutils.is_namespace(spec)\n             is_directory = modutils.is_directory(spec)\n         if not is_namespace:\n+\n             result.append(\n                 {\n                     \"path\": filepath,\n@@ -131,6 +139,7 @@ def expand_modules(\n                     \"basename\": modname,\n                 }\n             )\n+\n         has_init = (\n             not (modname.endswith(\".__init__\") or modname == \"__init__\")\n             and os.path.basename(filepath) == \"__init__.py\"\n",
    "variant_0": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..9f414d950 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,49 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n-            # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n+\n+        if os.path.isdir(something):\n+            # Check if this is a package directory (contains __init__.py)\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package directory\n+                filepath = init_file\n+            else:\n+                # It's a regular directory containing Python files\n+                filepath = something\n         else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+            # Might not be acceptable, don't crash.\n+\n+        if os.path.isdir(something):\n+            filepath = something\n+            # Check if this is a Python package (has __init__.py)\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package, use the __init__.py file\n+                filepath = init_file\n+            # If no __init__.py, treat as regular directory (filepath remains as directory)\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package - use __init__.py\n+                filepath = init_file\n+            else:\n+                # It's a regular directory - use the directory path itself\n+                filepath = something\n+        else:\n+            filepath = something\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if os.path.isdir(filepath):\n+            # Check if this is a package (has __init__.py) or just a directory with Python files\n+            init_file = os.path.join(filepath, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package - use the __init__.py file\n+                filepath = init_file\n+            else:\n+                # It's a regular directory - keep the directory path for traversal\n+                # but mark it appropriately for later processing\n+                is_directory = True\n",
    "variant_1": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..b1aecb576 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,51 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n+\n+            if os.path.isdir(something):\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.isfile(init_file):\n+                    # It's a package, use __init__.py\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path itself\n+                    filepath = something\n             # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n-        else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+\n+                # Check if it's a package directory (has __init__.py) or regular directory\n+                if os.path.isdir(something):\n+                    init_file = os.path.join(something, \"__init__.py\")\n+                    if os.path.isfile(init_file):\n+                        # It's a package directory\n+                        filepath = init_file\n+                    else:\n+                        # It's a regular directory, use as-is\n+                        filepath = something\n+                else:\n+                    filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory\n+            init_path = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_path):\n+                # It's a package, use __init__.py\n+                filepath = init_path\n+            else:\n+                # It's a regular directory, use the directory path\n+                filepath = something\n+        else:\n+            filepath = something\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if os.path.isdir(filepath):\n+            # Check if this directory is a Python package (has __init__.py)\n+            init_file = os.path.join(filepath, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # This is a package directory, use __init__.py\n+                filepath = init_file\n+            else:\n+                # This is a regular directory, keep the directory path\n+                # The directory traversal logic will handle finding Python files within it\n+                pass\n",
    "variant_2": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..441b09aa7 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,53 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n+\n+                if os.path.isdir(something):\n+                    # Check if this is a Python package (has __init__.py) or just a directory with Python files\n+                    init_file = os.path.join(something, \"__init__.py\")\n+                    if os.path.isfile(init_file):\n+                        # It's a package, use __init__.py\n+                        filepath = init_file\n+                    else:\n+                        # It's a regular directory, use the directory path itself\n+                        filepath = something\n+                else:\n+                    filepath = something\n             # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n-        else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+\n+            # Check if it's a package directory (has __init__.py) or regular directory\n+            if os.path.isdir(something):\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    # It's a package directory\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path directly\n+                    filepath = something\n+            else:\n+                filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            filepath = something\n+            modname = \".\".join(modparts)\n+            # Check if this is actually a Python package (has __init__.py)\n+            init_path = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_path):\n+                # It's a package, use the __init__.py file\n+                filepath = init_path\n+        else:\n+            filepath = something\n+            modname = \".\".join(modparts)\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if os.path.isdir(filepath):\n+            # Check if this is actually a Python package (has __init__.py)\n+            init_path = os.path.join(filepath, \"__init__.py\")\n+            if os.path.isfile(init_path):\n+                # This is a package directory, use __init__.py\n+                filepath = init_path\n+            else:\n+                # This is a regular directory, keep the directory path\n+                # The directory traversal logic will handle finding Python files within it\n+                pass\n",
    "variant_3": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..4acc38346 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,52 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n-            # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # This is a package, use __init__.py\n+                filepath = init_file\n+            else:\n+                # This is a regular directory, use the directory path itself\n+                filepath = something\n         else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+            # Might not be acceptable, don't crash.\n+\n+            if os.path.isdir(something):\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.isfile(init_file):\n+                    # It's a package, use __init__.py\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path directly\n+                    filepath = something\n+            else:\n+                filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            filepath = something\n+            if os.path.exists(os.path.join(something, \"__init__.py\")):\n+                # It's a package directory\n+                modname = \".\".join(modparts)\n+            else:\n+                # It's a regular directory, use directory name as module\n+                modname = os.path.basename(something)\n+        else:\n+            filepath = something\n+            modname = \".\".join(modparts)\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if os.path.isdir(filepath):\n+            # Check if this is a package directory (has __init__.py)\n+            init_file = os.path.join(filepath, \"__init__.py\")\n+            if os.path.exists(init_file):\n+                # This is a package, use __init__.py\n+                filepath = init_file\n+            else:\n+                # This is a regular directory, keep the directory path\n+                # Directory traversal will handle finding Python files within it\n+                pass\n",
    "variant_4": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..5ce37c651 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,49 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n+\n+                # Check if it's a directory and handle appropriately\n+                if os.path.isdir(something):\n+                    # Check if it's a Python package (has __init__.py)\n+                    init_file = os.path.join(something, \"__init__.py\")\n+                    if os.path.isfile(init_file):\n+                        # It's a package, use __init__.py\n+                        filepath = init_file\n+                    else:\n+                        # It's a regular directory, use the directory path directly\n+                        filepath = something\n+                else:\n+                    filepath = something\n             # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n-        else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+\n+            if os.path.isdir(something):\n+                # Check if this is a package directory (has __init__.py)\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.isfile(init_file):\n+                    # It's a package, use __init__.py\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path\n+                    filepath = something\n+            else:\n+                filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            # Check if this is a package (has __init__.py) or just a directory with Python files\n+            init_path = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_path):\n+                # It's a package, use __init__.py\n+                filepath = init_path\n+            else:\n+                # It's a regular directory, use the directory path directly\n+                filepath = something\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if is_directory:\n+            # Check if directory is a package (has __init__.py) or just a regular directory\n+            init_path = os.path.join(filepath, \"__init__.py\")\n+            if os.path.exists(init_path):\n+                # It's a package directory, use __init__.py\n+                filepath = init_path\n+            # If no __init__.py, keep filepath as the directory path for traversal\n",
    "variant_5": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..4871d0ad2 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,50 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n+\n+            if os.path.isdir(something):\n+                # Check if it's a package (has __init__.py) or just a directory with Python files\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.isfile(init_file):\n+                    # It's a package, use __init__.py\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path itself\n+                    filepath = something\n             # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n-        else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+\n+                # Check if it's a directory and handle appropriately\n+                if os.path.isdir(something):\n+                    # Check if it's a package (has __init__.py)\n+                    init_file = os.path.join(something, \"__init__.py\")\n+                    if os.path.isfile(init_file):\n+                        # It's a package, use __init__.py\n+                        filepath = init_file\n+                    else:\n+                        # It's a regular directory, use the directory path\n+                        filepath = something\n+                else:\n+                    filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package - use __init__.py\n+                filepath = init_file\n+            else:\n+                # It's a regular directory - use the directory path directly\n+                filepath = something\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if is_directory:\n+            # Check if this directory is actually a Python package\n+            init_file = os.path.join(filepath, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package - use the __init__.py file\n+                filepath = init_file\n+            else:\n+                # It's just a directory with Python files - keep the directory path\n+                # We'll handle the individual files in the traversal logic below\n+                pass\n",
    "variant_6": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..77f9019e9 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,47 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package - use __init__.py\n+                filepath = init_file\n+            else:\n+                # It's a regular directory - use the directory path itself\n+                filepath = something\n             # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n-        else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+\n+            if os.path.isdir(something):\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.isfile(init_file):\n+                    # It's a package, use __init__.py\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path\n+                    filepath = something\n+            else:\n+                filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n+            init_path = os.path.join(something, \"__init__.py\")\n+            if os.path.exists(init_path):\n+                # It's a package, use __init__.py\n+                filepath = init_path\n+            else:\n+                # It's a regular directory, use the directory path itself\n+                filepath = something\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        # Check if this is actually a package directory or just a regular directory\n+        init_path = os.path.join(filepath, \"__init__.py\")\n+        if os.path.isfile(init_path):\n+            # It's a package - use __init__.py\n+            filepath = init_path\n+        else:\n+            # It's a regular directory - keep the directory path for traversal\n+            pass\n",
    "variant_7": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..515fb1c27 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,46 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n+\n+        if os.path.isdir(something):\n+            filepath = something\n+            # Check if this is a package (has __init__.py) or just a directory with Python files\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package, use the __init__.py file\n+                filepath = init_file\n+            # If no __init__.py, keep filepath as the directory itself\n             # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n+\n+        if os.path.isdir(something):\n+            filepath = something\n+            # Check if this directory is a Python package\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package, use the __init__.py file\n+                filepath = init_file\n+            # If no __init__.py, treat as regular directory (filepath remains the directory)\n         else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+            filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n+            init_file = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_file):\n+                # It's a package, use __init__.py\n+                filepath = init_file\n+            else:\n+                # It's a regular directory, use the directory path itself\n+                filepath = something\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if os.path.isdir(filepath):\n+            # Check if this is a Python package (has __init__.py) or just a directory\n+            init_path = os.path.join(filepath, \"__init__.py\")\n+            if os.path.exists(init_path):\n+                # It's a package, use the __init__.py file\n+                filepath = init_path\n+            else:\n+                # It's a regular directory, keep the directory path for traversal\n+                is_directory = True\n",
    "variant_8": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..b22b13af3 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -90,8 +90,14 @@ def expand_modules(\n                 )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n+\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.exists(init_file):\n+                    filepath = init_file\n+                else:\n+                    filepath = something\n             else:\n                 filepath = something\n         else:\n@@ -111,52 +117,46 @@ def expand_modules(\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n-            spec = modutils.file_info_from_modpath(\n-                modparts, path=additional_search_path\n-            )\n-        except ImportError:\n+\n+            if os.path.isdir(something):\n+                # Check if this is a Python package (has __init__.py) or just a directory\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.isfile(init_file):\n+                    # It's a package, use __init__.py\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path itself\n+                    filepath = something\n             # Might not be acceptable, don't crash.\n-            is_namespace = False\n-            is_directory = os.path.isdir(something)\n-        else:\n-            is_namespace = modutils.is_namespace(spec)\n-            is_directory = modutils.is_directory(spec)\n+\n+            if os.path.isdir(something):\n+                # Check if it's a package (has __init__.py) or just a directory with Python files\n+                init_file = os.path.join(something, \"__init__.py\")\n+                if os.path.isfile(init_file):\n+                    # It's a package, use __init__.py\n+                    filepath = init_file\n+                else:\n+                    # It's a regular directory, use the directory path\n+                    filepath = something\n+            else:\n+                filepath = something\n         if not is_namespace:\n-            result.append(\n-                {\n-                    \"path\": filepath,\n-                    \"name\": modname,\n-                    \"isarg\": True,\n-                    \"basepath\": filepath,\n-                    \"basename\": modname,\n-                }\n+\n+        if os.path.isdir(something):\n+            # Check if this is a Python package (has __init__.py) or just a directory\n+            init_path = os.path.join(something, \"__init__.py\")\n+            if os.path.isfile(init_path):\n+                # It's a package - use __init__.py\n+                filepath = init_path\n+            else:\n+                # It's a regular directory - use the directory path directly\n+                filepath = something\n             )\n-        has_init = (\n-            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n-            and os.path.basename(filepath) == \"__init__.py\"\n-        )\n-        if has_init or is_namespace or is_directory:\n-            for subfilepath in modutils.get_module_files(\n-                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n-            ):\n-                if filepath == subfilepath:\n-                    continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n-                    continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n-                submodname = \".\".join(modpath)\n-                result.append(\n-                    {\n-                        \"path\": subfilepath,\n-                        \"name\": submodname,\n-                        \"isarg\": False,\n-                        \"basepath\": filepath,\n-                        \"basename\": modname,\n-                    }\n-                )\n-    return result, errors\n+        if is_directory:\n+            # Check if this is a Python package (has __init__.py) or just a directory with Python files\n+            init_path = os.path.join(filepath, \"__init__.py\")\n+            if os.path.isfile(init_path):\n+                # It's a package - use __init__.py path\n+                filepath = init_path\n+            # If no __init__.py, keep filepath as the directory path for traversal\n"
  }
}