{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/operations/models.py lines 324-328)": "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
    "Location 2 (/root/hy/projects_2/django/django/db/migrations/operations/models.py lines 357-361)": "\n                # Only alter M2M table if the table names are actually different\n                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                    schema_editor.alter_db_table(\n                        new_m2m_model,\n                        old_m2m_model._meta.db_table,\n                        new_m2m_model._meta.db_table,\n                    )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/operations/models.py lines 324-328)": [
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            # Only alter table if the table names are actually different\n            if old_model._meta.db_table != new_model._meta.db_table:\n                schema_editor.alter_db_table(\n                    new_model,\n                    old_model._meta.db_table,\n                    new_model._meta.db_table,\n                )\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/db/migrations/operations/models.py lines 357-361)": [
      "\n                # Rename M2M fields whose name is based on this model's name.\n                fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n                for (old_field, new_field) in fields:\n                    # Skip self-referential fields as these are renamed above.\n                    if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                        continue\n                    # Rename the M2M table that's based on this model's name.\n                    old_m2m_model = old_field.remote_field.through\n                    new_m2m_model = new_field.remote_field.through\n                    # Only alter M2M table if the table names are actually different\n                    if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                        schema_editor.alter_db_table(\n                            new_m2m_model,\n                            old_m2m_model._meta.db_table,\n                            new_m2m_model._meta.db_table,\n                        )\n",
      "\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                # Only alter M2M table if the table names are actually different\n                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                    schema_editor.alter_db_table(\n                        new_m2m_model,\n                        old_m2m_model._meta.db_table,\n                        new_m2m_model._meta.db_table,\n                    )\n",
      "\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                # Only alter M2M table if the table names are actually different\n                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                    schema_editor.alter_db_table(\n                        new_m2m_model,\n                        old_m2m_model._meta.db_table,\n                        new_m2m_model._meta.db_table,\n                    )\n",
      "\n                # Only alter M2M table if the table names are actually different\n                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                    schema_editor.alter_db_table(\n                        new_m2m_model,\n                        old_m2m_model._meta.db_table,\n                        new_m2m_model._meta.db_table,\n                    )\n",
      "\n                # Only alter M2M table if the table names are actually different\n                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                    schema_editor.alter_db_table(\n                        new_m2m_model,\n                        old_m2m_model._meta.db_table,\n                        new_m2m_model._meta.db_table,\n                    )\n",
      "\n                # Only alter M2M table if the table names are actually different\n                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                    schema_editor.alter_db_table(\n                        new_m2m_model,\n                        old_m2m_model._meta.db_table,\n                        new_m2m_model._meta.db_table,\n                    )\n",
      "\n                # Rename M2M fields whose name is based on this model's name.\n                fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n                for (old_field, new_field) in fields:\n                    # Skip self-referential fields as these are renamed above.\n                    if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                        continue\n                    # Rename the M2M table that's based on this model's name.\n                    old_m2m_model = old_field.remote_field.through\n                    new_m2m_model = new_field.remote_field.through\n                    # Only alter M2M table if the table names are actually different\n                    if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                        schema_editor.alter_db_table(\n                            new_m2m_model,\n                            old_m2m_model._meta.db_table,\n                            new_m2m_model._meta.db_table,\n                        )\n",
      "\n                # Only alter M2M table if the table names are actually different\n                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n                    schema_editor.alter_db_table(\n                        new_m2m_model,\n                        old_m2m_model._meta.db_table,\n                        new_m2m_model._meta.db_table,\n                    )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..cd8539909b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,15 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +358,17 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3384490eeb 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,14 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3b078b22f8 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,23 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Rename M2M fields whose name is based on this model's name.\n+                fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+                for (old_field, new_field) in fields:\n+                    # Skip self-referential fields as these are renamed above.\n+                    if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                        continue\n+                    # Rename the M2M table that's based on this model's name.\n+                    old_m2m_model = old_field.remote_field.through\n+                    new_m2m_model = new_field.remote_field.through\n+                    # Only alter M2M table if the table names are actually different\n+                    if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                        schema_editor.alter_db_table(\n+                            new_m2m_model,\n+                            old_m2m_model._meta.db_table,\n+                            new_m2m_model._meta.db_table,\n+                        )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..063662d4f3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,24 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n+\n                 )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..063662d4f3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,24 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n+\n                 )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3384490eeb 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,14 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3384490eeb 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,14 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3384490eeb 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,14 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3b078b22f8 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,23 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Rename M2M fields whose name is based on this model's name.\n+                fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+                for (old_field, new_field) in fields:\n+                    # Skip self-referential fields as these are renamed above.\n+                    if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                        continue\n+                    # Rename the M2M table that's based on this model's name.\n+                    old_m2m_model = old_field.remote_field.through\n+                    new_m2m_model = new_field.remote_field.through\n+                    # Only alter M2M table if the table names are actually different\n+                    if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                        schema_editor.alter_db_table(\n+                            new_m2m_model,\n+                            old_m2m_model._meta.db_table,\n+                            new_m2m_model._meta.db_table,\n+                        )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3384490eeb 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,19 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Move the main table\n+            # Only alter table if the table names are actually different\n+            if old_model._meta.db_table != new_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +362,14 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+\n+                # Only alter M2M table if the table names are actually different\n+                if old_m2m_model._meta.db_table != new_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n"
  }
}