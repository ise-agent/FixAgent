{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/builders/manpage.py lines 11-12)": "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/builders/manpage.py lines 83-87)": "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
    "Location 3 (/root/hy/projects_2/sphinx/tests/test_build_manpage.py lines 20-22)": "\nassert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\ncontent = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
    "Location 4 (/root/hy/projects_2/sphinx/tests/test_build_manpage.py lines 36-36)": "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
    "Location 5 (/root/hy/projects_2/sphinx/tests/test_build_manpage.py lines 67-67)": "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/builders/manpage.py lines 11-12)": [
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n",
      "\nfrom os import path\nfrom typing import Any, Dict, List, Set, Tuple, Union\n\nfrom docutils.frontend import OptionParser\nfrom docutils.io import FileOutput\n\nfrom sphinx import addnodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util import progress_message\nfrom sphinx.util.console import darkgreen  # type: ignore\nfrom sphinx.util.nodes import inline_all_toctrees\nfrom sphinx.util.osutil import make_filename_from_project, ensuredir\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n"
    ],
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/builders/manpage.py lines 83-87)": [
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            section_dir = path.join(self.outdir, 'man%s' % section)\n            from sphinx.util.osutil import ensuredir\n            ensuredir(section_dir)\n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n"
    ],
    "Location 3 (/root/hy/projects_2/sphinx/tests/test_build_manpage.py lines 20-22)": [
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n\n    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n"
    ],
    "Location 4 (/root/hy/projects_2/sphinx/tests/test_build_manpage.py lines 36-36)": [
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n"
    ],
    "Location 5 (/root/hy/projects_2/sphinx/tests/test_build_manpage.py lines 67-67)": [
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..69546998e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,6 +8,7 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n@@ -80,10 +81,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_0": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..db4872367 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_1": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_2": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_3": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_4": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_5": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_6": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_7": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_8": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..afff8621e 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,12 +8,29 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+\n from os import path\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n from docutils.io import FileOutput\n \n+from sphinx import addnodes\n+from sphinx.application import Sphinx\n+from sphinx.builders import Builder\n+from sphinx.config import Config\n+from sphinx.errors import NoUri\n+from sphinx.locale import __\n+from sphinx.util import logging\n+from sphinx.util import progress_message\n+from sphinx.util.console import darkgreen  # type: ignore\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.util.osutil import make_filename_from_project, ensuredir\n+from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n+\n+from docutils.frontend import OptionParser\n+from docutils.io import FileOutput\n+\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -80,10 +97,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            section_dir = path.join(self.outdir, 'man%s' % section)\n+            from sphinx.util.osutil import ensuredir\n+            ensuredir(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..cbbe6c5c4 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,9 +17,10 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n \n-    content = (app.outdir / 'sphinxtests.1').read_text()\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n+\n+    content = (app.outdir / 'man1' / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n     assert r'\\fBmanpage\\en\\fP' in content\n \n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n"
  }
}