{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 59-70)": "\ndef ensure_schema(self, app_label=None):\n    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n    # Check if router allows migrations for this app on this database\n    if app_label and not router.allow_migrate(self.connection.alias, app_label):\n        return\n    # If the table's there, that's fine - we've never changed its schema\n    # in the codebase.\n    if self.has_table():\n        return\n    # Make the table\n    try:\n        with self.connection.schema_editor() as editor:\n            editor.create_model(self.Migration)\n    except DatabaseError as exc:\n        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
    "Location 2 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 84-87)": "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.create(app=app, name=name)\n",
    "Location 3 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 89-92)": "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
    "Location 4 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 1-6)": "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
    "Location 5 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 72-82)": "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 59-70)": [
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations for this app on this database\n        if app_label:\n            from django.db import router\n            if not router.allow_migrate(self.connection.alias, app_label):\n                return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations for this app on this database\n        if app_label:\n            from django.db import router\n            if not router.allow_migrate(self.connection.alias, app_label):\n                return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations for this app on this database\n        if app_label:\n            from django.db import router\n            if not router.allow_migrate(self.connection.alias, app_label):\n                return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations on this database for the given app\n        if app_label:\n            from django.db import router\n            if not router.allow_migrate(self.connection.alias, app_label):\n                return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations on this database for the given app\n        if app_label and not router.allow_migrate(self.connection.alias, app_label):\n            return\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations on this database for the given app\n        if app_label:\n            from django.db import router\n            if not router.allow_migrate(self.connection.alias, app_label):\n                return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations for this app on this database\n        if app_label and not router.allow_migrate(self.connection.alias, app_label):\n            return\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self, app_label=None):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # Check if router allows migrations for this app on this database\n        if app_label:\n            from django.db import router\n            if not router.allow_migrate(self.connection.alias, app_label):\n                return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n"
    ],
    "Location 2 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 84-87)": [
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.create(app=app, name=name)\n",
      "\ndef record_applied(self, app, name):\n    \"\"\"Record that a migration was applied.\"\"\"\n    self.ensure_schema(app)\n    self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.create(app=app, name=name)\n",
      "\ndef record_applied(self, app, name):\n    \"\"\"Record that a migration was applied.\"\"\"\n    self.ensure_schema(app)\n    self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.create(app=app, name=name)\n"
    ],
    "Location 3 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 89-92)": [
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        self.ensure_schema(app)\n        self.migration_qs.filter(app=app, name=name).delete()\n"
    ],
    "Location 4 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 1-6)": [
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n",
      "\nfrom django.apps.registry import Apps\nfrom django.db import DatabaseError, models, router\nfrom django.utils.functional import classproperty\nfrom django.utils.timezone import now\n\nfrom .exceptions import MigrationSchemaMissing\n"
    ],
    "Location 5 (/root/hy/projects_2/django/django/db/migrations/recorder.py lines 72-82)": [
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\ndef applied_migrations(self):\n    \"\"\"\n    Return a dict mapping (app_name, migration_name) to Migration instances\n    for all applied migrations.\n    \"\"\"\n    if self.has_table():\n        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n    else:\n        # If the django_migrations table doesn't exist, then no migrations\n        # are applied.\n        return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..43703fefc8 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,3 +1,4 @@\n+\n from django.apps.registry import Apps\n from django.db import DatabaseError, models\n from django.utils.functional import classproperty\n@@ -56,12 +57,18 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if router allows migration on this database\n+        if app_label:\n+            from django.db import router\n+            if not router.allow_migrate(self.connection.alias, app_label):\n+                return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -69,6 +76,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +89,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_0": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..0cf6f36811 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,18 +57,23 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n-        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n-        # If the table's there, that's fine - we've never changed its schema\n-        # in the codebase.\n-        if self.has_table():\n-            return\n-        # Make the table\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+\n+def ensure_schema(self, app_label=None):\n+    \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+    # Check if router allows migrations for this app on this database\n+    if app_label and not router.allow_migrate(self.connection.alias, app_label):\n+        return\n+    # If the table's there, that's fine - we've never changed its schema\n+    # in the codebase.\n+    if self.has_table():\n+        return\n+    # Make the table\n+    try:\n+        with self.connection.schema_editor() as editor:\n+            editor.create_model(self.Migration)\n+    except DatabaseError as exc:\n+        raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+\n \n     def applied_migrations(self):\n         \"\"\"\n@@ -81,14 +87,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_1": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..c02963840c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations for this app on this database\n+        if app_label:\n+            from django.db import router\n+            if not router.allow_migrate(self.connection.alias, app_label):\n+                return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,6 +77,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +90,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_2": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..17ac536668 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations for this app on this database\n+        if app_label:\n+            from django.db import router\n+            if not router.allow_migrate(self.connection.alias, app_label):\n+                return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,6 +77,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +90,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n-    def record_applied(self, app, name):\n-        \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.create(app=app, name=name)\n+\n+def record_applied(self, app, name):\n+    \"\"\"Record that a migration was applied.\"\"\"\n+    self.ensure_schema(app)\n+    self.migration_qs.create(app=app, name=name)\n+\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_3": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..c02963840c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations for this app on this database\n+        if app_label:\n+            from django.db import router\n+            if not router.allow_migrate(self.connection.alias, app_label):\n+                return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,6 +77,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +90,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_4": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..d72e9163bc 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations on this database for the given app\n+        if app_label:\n+            from django.db import router\n+            if not router.allow_migrate(self.connection.alias, app_label):\n+                return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,26 +77,29 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n-    def applied_migrations(self):\n-        \"\"\"\n-        Return a dict mapping (app_name, migration_name) to Migration instances\n-        for all applied migrations.\n-        \"\"\"\n-        if self.has_table():\n-            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n-        else:\n-            # If the django_migrations table doesn't exist, then no migrations\n-            # are applied.\n-            return {}\n+\n+def applied_migrations(self):\n+    \"\"\"\n+    Return a dict mapping (app_name, migration_name) to Migration instances\n+    for all applied migrations.\n+    \"\"\"\n+    if self.has_table():\n+        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n+    else:\n+        # If the django_migrations table doesn't exist, then no migrations\n+        # are applied.\n+        return {}\n+\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_5": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..3ff4740628 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,12 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations on this database for the given app\n+        if app_label and not router.allow_migrate(self.connection.alias, app_label):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,6 +74,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +87,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n-    def record_applied(self, app, name):\n-        \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.create(app=app, name=name)\n+\n+def record_applied(self, app, name):\n+    \"\"\"Record that a migration was applied.\"\"\"\n+    self.ensure_schema(app)\n+    self.migration_qs.create(app=app, name=name)\n+\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_6": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..b94ffcde7c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations on this database for the given app\n+        if app_label:\n+            from django.db import router\n+            if not router.allow_migrate(self.connection.alias, app_label):\n+                return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,6 +77,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +90,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_7": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..a36df84984 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,12 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations for this app on this database\n+        if app_label and not router.allow_migrate(self.connection.alias, app_label):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,6 +74,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +87,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n",
    "variant_8": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..c02963840c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,6 @@\n+\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -56,8 +57,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n-    def ensure_schema(self):\n+\n+    def ensure_schema(self, app_label=None):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if router allows migrations for this app on this database\n+        if app_label:\n+            from django.db import router\n+            if not router.allow_migrate(self.connection.alias, app_label):\n+                return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,6 +77,7 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n@@ -81,14 +90,16 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        self.ensure_schema(app)\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n"
  }
}