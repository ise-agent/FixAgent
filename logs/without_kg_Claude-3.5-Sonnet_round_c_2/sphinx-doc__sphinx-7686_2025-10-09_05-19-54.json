{
  "zero_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 249-249)": "\n    if doc.objtype == 'module':\n        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 250-255)": "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name for name in all_members[1] if name in dir(obj)]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
    "Location 3 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 195-220)": "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
    "Location 4 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 257-257)": "\n    if doc.objtype == 'module':\n        # Get all members but filter based on imported_members setting\n        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = all_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 249-249)": [
      "\n        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n",
      "\n    if doc.objtype == 'module':\n        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = all_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n",
      "\n    if doc.objtype == 'module':\n        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n",
      "\n        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n"
    ],
    "Location 2 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 250-255)": [
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        # Get all members with proper filtering for imported members\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name for name, _ in all_members[1]]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        # Get all members with proper filtering based on imported_members setting\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name for name, _ in all_members[1]]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        # Get all members with proper filtering based on imported_members setting\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n        ns['members'] = [name.split('.')[-1] for name in all_members]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        # Get all members with proper filtering based on imported_members setting\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = [name for name in all_members[1] if name in dir(obj)]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n"
    ],
    "Location 3 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 195-220)": [
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n"
    ],
    "Location 4 (/root/hy/projects_2/sphinx/sphinx/ext/autosummary/generate.py lines 257-257)": [
      "\n    if doc.objtype == 'module':\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = all_members[1]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        # Get all members excluding imported ones if configured\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n        ns['members'] = all_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = all_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        # Get all members respecting the imported_members setting\n        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = all_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        # Get all members, respecting the imported_members setting\n        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n        ns['members'] = all_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        # Get all members excluding imported ones when autosummary_imported_members = False\n        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n        ns['members'] = all_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..3ee13a6d0 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,9 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n+\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -254,6 +257,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ns['exceptions'], ns['all_exceptions'] = \\\n             get_members(obj, {'exception'}, imported=imported_members)\n         ns['attributes'], ns['all_attributes'] = \\\n+\n             get_module_attrs(ns['members'])\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n",
    "variant_0": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..6edc8579c 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,38 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+    if doc.objtype == 'module':\n+        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name for name in all_members[1] if name in dir(obj)]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        # Get all members but filter based on imported_members setting\n+        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = all_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_1": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..1b5f830ee 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,29 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        # Get all members with proper filtering for imported members\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name for name, _ in all_members[1]]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = all_members[1]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_2": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..4c0942c83 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,36 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+    if doc.objtype == 'module':\n+        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_3": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..418b9b05d 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,41 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+    if doc.objtype == 'module':\n+        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = all_members\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ispackage = hasattr(obj, '__path__')\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        # Get all members with proper filtering based on imported_members setting\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        # Get all members excluding imported ones if configured\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n+        ns['members'] = all_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_4": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..9448fa305 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,37 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+    if doc.objtype == 'module':\n+        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name for name, _ in all_members[1]]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = all_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_5": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..cdaf01979 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,37 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+    if doc.objtype == 'module':\n+        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        # Get all members with proper filtering based on imported_members setting\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n+        ns['members'] = [name.split('.')[-1] for name in all_members]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        # Get all members respecting the imported_members setting\n+        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = all_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_6": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..c2ed688a2 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,43 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+    if doc.objtype == 'module':\n+        _, ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ispackage = hasattr(obj, '__path__')\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        # Get all members with proper filtering based on imported_members setting\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        # Get all members, respecting the imported_members setting\n+        _, all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = all_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_7": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..555c85915 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,39 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+    if doc.objtype == 'module':\n+        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ispackage = hasattr(obj, '__path__')\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name.split('.')[-1] for name in all_members[1]]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        # Get all members excluding imported ones when autosummary_imported_members = False\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n+        ns['members'] = all_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_8": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..388a31c6e 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -246,7 +247,27 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+\n+        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)\n+        ns['members'] = [name for name in all_members[1] if name in dir(obj)]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+\n+    if doc.objtype == 'module':\n+        ns['members'] = get_members(obj, {'module', 'function', 'class', 'exception', 'attribute', 'data'}, imported=imported_members)[1]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n"
  }
}