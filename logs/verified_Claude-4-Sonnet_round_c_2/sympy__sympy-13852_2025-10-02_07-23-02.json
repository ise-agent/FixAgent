{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/functions/special/zeta_functions.py lines 290-301)": "\n    def _eval_expand_func(self, **hints):\n        from sympy import log, expand_mul, Dummy, exp_polar, I\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        if s == 2 and z == S(1)/2:\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/functions/special/zeta_functions.py lines 290-301)": [
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import log, expand_mul, Dummy, exp_polar, I\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        if s == 2 and z == S.Half:\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n",
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import Rational\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        if s == 2 and z == Rational(1, 2):\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n",
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import log, expand_mul, Dummy, exp_polar, I\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        elif s == 2 and z == S.Half:\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n",
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import Rational\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        elif s == 2 and z == Rational(1, 2):\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n",
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import log, expand_mul, Dummy, exp_polar, I\n        from sympy.core import Rational\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        if s == 2 and z == Rational(1, 2):\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n",
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import log, expand_mul, Dummy, exp_polar, I\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        elif s == 2 and z == S.Half:\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n",
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import Rational\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        if s == 2 and z == Rational(1, 2):\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n",
      "\n    def _eval_expand_func(self, **hints):\n        from sympy import log, expand_mul, Dummy, exp_polar, I\n        s, z = self.args\n        if s == 1:\n            return -log(1 - z)\n        elif s == 2 and z == S.Half:\n            return -log(2)**2/2 + pi**2/12\n        if s.is_Integer and s <= 0:\n            u = Dummy('u')\n            start = u/(1 - u)\n            for _ in range(-s):\n                start = u*start.diff(u)\n            return expand_mul(start).subs(u, z)\n        return polylog(s, z)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..806e78d267 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n-        from sympy import log, expand_mul, Dummy, exp_polar, I\n+        from sympy import log, expand_mul, Dummy, exp_polar, I, Rational\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        if s == 2 and z == Rational(1, 2):\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_0": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..c6baeb0a86 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        if s == 2 and z == S(1)/2:\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_1": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..97d5ab84e1 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        if s == 2 and z == S.Half:\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_2": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..7f849485a1 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n-        from sympy import log, expand_mul, Dummy, exp_polar, I\n+        from sympy import Rational\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        if s == 2 and z == Rational(1, 2):\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_3": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..5b79c44ff1 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        elif s == 2 and z == S.Half:\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_4": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..d32e5791cc 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n-        from sympy import log, expand_mul, Dummy, exp_polar, I\n+        from sympy import Rational\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        elif s == 2 and z == Rational(1, 2):\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_5": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..9747e44d10 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,15 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n+        from sympy.core import Rational\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        if s == 2 and z == Rational(1, 2):\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_6": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..5b79c44ff1 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        elif s == 2 and z == S.Half:\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_7": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..7f849485a1 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n-        from sympy import log, expand_mul, Dummy, exp_polar, I\n+        from sympy import Rational\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        if s == 2 and z == Rational(1, 2):\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "variant_8": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..5b79c44ff1 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -287,11 +287,14 @@ def fdiff(self, argindex=1):\n     def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n+\n     def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n+        elif s == 2 and z == S.Half:\n+            return -log(2)**2/2 + pi**2/12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n"
  }
}