{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/simplify/radsimp.py lines 1116-1117)": "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/simplify/radsimp.py lines 1116-1117)": [
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n",
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n",
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n",
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n",
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n",
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n",
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n",
      "\ndef _split_gcd(*a):\n    \"\"\"\n    split the list of integers ``a`` into a list of integers, ``a1`` having\n    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n    ``g``.  Returns ``g, a1, a2``\n\n    Examples\n    ========\n\n    >>> from sympy.simplify.radsimp import _split_gcd\n    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n    (5, [55, 35, 10], [22, 14, 77])\n    \"\"\"\n    if not a:  # Handle empty tuple case\n        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n    g = a[0]\n    b1 = [g]\n    b2 = []\n    for x in a[1:]:\n        g1 = gcd(g, x)\n        if g1 == 1:\n            b2.append(x)\n        else:\n            g = g1\n            b1.append(x)\n    return g, b1, b2\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..dcb0d66174 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,9 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n     g = a[0]\n     b1 = [g]\n     b2 = []\n",
    "variant_0": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..b21abe3652 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_1": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..b21abe3652 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_2": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..b21abe3652 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_3": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..b21abe3652 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_4": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..bda12d3f16 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_5": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..b21abe3652 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_6": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..bda12d3f16 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_7": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..bda12d3f16 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n",
    "variant_8": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..bda12d3f16 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,22 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+\n+def _split_gcd(*a):\n+    \"\"\"\n+    split the list of integers ``a`` into a list of integers, ``a1`` having\n+    ``g = gcd(a1)``, and a list ``a2`` whose elements are not divisible by\n+    ``g``.  Returns ``g, a1, a2``\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.simplify.radsimp import _split_gcd\n+    >>> _split_gcd(55, 35, 22, 14, 77, 10)\n+    (5, [55, 35, 10], [22, 14, 77])\n+    \"\"\"\n+    if not a:  # Handle empty tuple case\n+        return 1, [], []  # GCD of empty set is 1, empty lists for both groups\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1124,3 +1140,12 @@ def _split_gcd(*a):\n             g = g1\n             b1.append(x)\n     return g, b1, b2\n+    b2 = []\n+    for x in a[1:]:\n+        g1 = gcd(g, x)\n+        if g1 == 1:\n+            b2.append(x)\n+        else:\n+            g = g1\n+            b1.append(x)\n+    return g, b1, b2\n"
  }
}