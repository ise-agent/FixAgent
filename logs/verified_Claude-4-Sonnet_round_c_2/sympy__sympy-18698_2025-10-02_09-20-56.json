{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 5-10)": "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
    "Location 2 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 324-326)": "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
    "Location 3 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 330-332)": "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
    "Location 4 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 412-414)": "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
    "Location 5 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 418-420)": "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine the factors by multiplication\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 5-10)": [
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n",
      "\nfrom sympy.polys.densearith import (\n    dup_neg, dmp_neg,\n    dup_sub, dmp_sub,\n    dup_mul, dmp_mul,\n    dup_quo, dmp_quo,\n    dup_mul_ground, dmp_mul_ground)\n"
    ],
    "Location 2 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 324-326)": [
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if not h:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, p, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n"
    ],
    "Location 3 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 330-332)": [
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with this multiplicity already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with the same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dup_degree(g) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dup_mul(existing_factor, g, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n"
    ],
    "Location 4 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 412-414)": [
      "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if dmp_zero_p(h, u):\n            # Check if there's already a factor with multiplicity i\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n",
      "\n        if dmp_zero_p(h, u):\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((p, i))\n            break\n"
    ],
    "Location 5 (/root/hy/projects/sympy/sympy/polys/sqfreetools.py lines 418-420)": [
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine the factors by multiplication\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine the factors by multiplication\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            \n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n",
      "\n        if all or dmp_degree(g, u) > 0:\n            # Check if a factor with multiplicity i already exists\n            found = False\n            for j, (existing_factor, existing_mult) in enumerate(result):\n                if existing_mult == i:\n                    # Combine factors with same multiplicity\n                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n                    found = True\n                    break\n            if not found:\n                result.append((g, i))\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..7b18649bf9 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_0": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..a4f5e7fb18 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine the factors by multiplication\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_1": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..a4f5e7fb18 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine the factors by multiplication\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_2": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..e5c7ed17bc 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with this multiplicity already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,35 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine the factors by multiplication\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            \n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_3": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..d3b55cfd9e 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with the same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_4": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..6b1eabfac5 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if there's already a factor with multiplicity i\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_5": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..7b18649bf9 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_6": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..7b18649bf9 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_7": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..7b18649bf9 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n",
    "variant_8": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 1783a7744a..7b18649bf9 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -2,10 +2,11 @@\n \n from __future__ import print_function, division\n \n+\n from sympy.polys.densearith import (\n     dup_neg, dmp_neg,\n     dup_sub, dmp_sub,\n-    dup_mul,\n+    dup_mul, dmp_mul,\n     dup_quo, dmp_quo,\n     dup_mul_ground, dmp_mul_ground)\n from sympy.polys.densebasic import (\n@@ -321,15 +322,34 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n+\n         if not h:\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n \n+        if all or dup_degree(g) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dup_mul(existing_factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n@@ -409,15 +429,34 @@ def dmp_sqf_list(f, u, K, all=False):\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n+\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, p, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n-        if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n \n+        if all or dmp_degree(g, u) > 0:\n+            # Check if a factor with multiplicity i already exists\n+            found = False\n+            for j, (existing_factor, existing_mult) in enumerate(result):\n+                if existing_mult == i:\n+                    # Combine factors with same multiplicity\n+                    result[j] = (dmp_mul(existing_factor, g, u, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n \n     return coeff, result\n"
  }
}