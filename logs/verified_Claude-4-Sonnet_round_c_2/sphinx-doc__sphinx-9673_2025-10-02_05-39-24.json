{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 152-153)": "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
    "Location 2 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 167-173)": "\n    elif parts[0] in ('return', 'returns'):\n        has_description.add('return')\n",
    "Location 3 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 64-67)": "\n            elif parts[0] in ('return', 'returns'):\n                has_description.add('return')\n",
    "Location 4 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 788-792)": "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
    "Location 5 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 130-156)": "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 152-153)": [
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n"
    ],
    "Location 2 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 167-173)": [
      "\n    for field in node:\n        if field.tagname != 'field':\n            continue\n        parts = str(field[0].astext()).split()\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # typed parameter\n                has_type.add(parts[1])\n            else:\n                # untyped parameter\n                has_description.add(parts[1])\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\n    for field in field_list:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # typed parameter\n                has_type.add(parts[1])\n            else:\n                # untyped parameter\n                has_description.add(parts[1])\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: Element, obj: Any, config: Config, app: Sphinx, what: str, name: str\n) -> None:\n    \"\"\"Augment existing parameter/return descriptions with type information.\"\"\"\n    try:\n        signature = inspect.signature(obj, type_aliases=config.autodoc_type_aliases)\n    except (TypeError, ValueError):\n        return\n\n    annotations = app.env.temp_data.setdefault('annotations', {})\n    if annotations.get(name, {}):\n        field_lists = [n for n in node if isinstance(n, nodes.field_list)]\n        if field_lists == []:\n            field_list = insert_field_list(node)\n            field_lists.append(field_list)\n\n        # Determine if parameter/return information is already documented\n        # without type information.\n        has_description = set()\n        has_type = set()\n        for field_list in field_lists:\n            if app.config.autodoc_typehints_format == \"short\":\n                override_app = app\n                override_app.config.python_use_unqualified_type_names = True\n            else:\n                override_app = app\n            for field in field_list:\n                field_name = field[0].astext()\n                parts = re.split(' +', field_name)\n                if parts[0] == 'param':\n                    if len(parts) == 2:\n                        # :param xxx:\n                        has_description.add(parts[1])\n                    elif len(parts) > 2:\n                        # :param xxx yyy:\n                        name = ' '.join(parts[1:])\n                        has_description.add(name)\n                elif parts[0] == 'type':\n                    name = ' '.join(parts[1:])\n                    has_type.add(name)\n                elif parts[0] in ('return', 'returns'):\n                    has_description.add('return')\n                elif parts[0] == 'rtype':\n                    has_type.add('return')\n\n    # Add 'type' for parameters with a description but no declared type.\n    for name in annotations:\n        if name == 'return':\n            continue\n        if name in has_description and name not in has_type:\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n            node += field\n\n    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n    if 'return' in annotations:\n        if 'return' in has_description and 'return' not in has_type:\n            field = nodes.field()\n            field += nodes.field_name('', 'rtype')\n            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n            node += field\n",
      "\n    elif parts[0] in ('return', 'returns'):\n        has_description.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: Element, obj: Any, config: Config, app: Sphinx, what: str, name: str\n) -> None:\n    \"\"\"Inject type info into field lists.\"\"\"\n    # Skip if not in documentation mode or if this object type should be skipped\n    if config.autodoc_typehints_description_target != \"documented\":\n        return\n\n    try:\n        annotations = app.env.temp_data['annotations'][name]\n    except (AttributeError, KeyError):\n        return\n\n    if hasattr(obj, '__annotations__'):\n        annotations.update(obj.__annotations__)\n\n    # Determine what's already documented\n    has_description: Set[str] = set()\n    has_type: Set[str] = set()\n    for node_child in node:\n        if isinstance(node_child, nodes.field_list):\n            for field in cast(Iterable[nodes.field], node_child):\n                field_name = cast(nodes.field_name, field[0])\n                parts = re.split(' +', str(field_name).strip())\n                if parts[0] == 'param':\n                    if len(parts) == 2:\n                        # :param xxx:\n                        has_description.add(parts[1])\n                    elif len(parts) > 2:\n                        # :param xxx yyy:\n                        name = ' '.join(parts[2:])\n                        has_description.add(name)\n                elif parts[0] in ('return', 'returns'):\n                    has_description.add('return')\n                elif parts[0] == 'type':\n                    name = ' '.join(parts[1:])\n                    has_type.add(name)\n                elif parts[0] == 'rtype':\n                    has_type.add('return')\n\n    # Add 'type' for parameters with a description but no declared type.\n    for name in annotations:\n        if name == 'return':\n            continue\n        if name in has_description and name not in has_type:\n            field = nodes.field()\n            field += nodes.field_name('', 'type ' + name)\n            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n            node += field\n\n    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n    if 'return' in annotations:\n        if 'return' in has_description and 'return' not in has_type:\n            field = nodes.field()\n            field += nodes.field_name('', 'rtype')\n            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n            node += field\n",
      "\n    for node in field_list:\n        field_name = node[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # typed parameter\n                has_type.add(parts[1])\n            else:\n                # unknown field name\n                has_description.add(field_name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n        else:\n            has_description.add(field_name)\n",
      "\n    for field in field_list.children:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                arg_name = parts[1]\n                has_description.add(arg_name)\n            elif len(parts) > 2:\n                # :param type xxx: or :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_type.add(name)\n                has_description.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\n    for field in node:\n        if field.tagname != 'field':\n            continue\n        parts = str(field[0].astext()).split()\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[1:])\n                has_description.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n"
    ],
    "Location 3 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 64-67)": [
      "\n            elif parts[0] in ('return', 'returns'):\n                has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n            elif parts[0] in ('return', 'returns'):\n                has_description.add('return')\n",
      "\n            elif parts[0] in ('return', 'returns'):\n                has_description.add('return')\n",
      "\n            elif parts[0] in ('return', 'returns'):\n                has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n"
    ],
    "Location 4 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 788-792)": [
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n",
      "\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n"
    ],
    "Location 5 (/root/hy/projects/sphinx/sphinx/ext/autodoc/typehints.py lines 130-156)": [
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n",
      "\ndef augment_descriptions_with_types(\n    node: nodes.field_list,\n    annotations: Dict[str, str],\n) -> None:\n    fields = cast(Iterable[nodes.field], node)\n    has_description = set()  # type: Set[str]\n    has_type = set()  # type: Set[str]\n    for field in fields:\n        field_name = field[0].astext()\n        parts = re.split(' +', field_name)\n        if parts[0] == 'param':\n            if len(parts) == 2:\n                # :param xxx:\n                has_description.add(parts[1])\n            elif len(parts) > 2:\n                # :param xxx yyy:\n                name = ' '.join(parts[2:])\n                has_description.add(name)\n                has_type.add(name)\n        elif parts[0] == 'type':\n            name = ' '.join(parts[1:])\n            has_type.add(name)\n        elif parts[0] in ('return', 'returns'):\n            has_description.add('return')\n        elif parts[0] == 'rtype':\n            has_type.add('return')\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..be262fc7e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,6 +61,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n+\n             if app.config.autodoc_typehints_description_target == \"all\":\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n@@ -127,6 +128,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +151,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,6 +166,7 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n+\n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..16d11f803 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,6 +785,7 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n+\n                     lines.extend(self._format_block(':returns: * ', field))\n             else:\n                 lines.extend(self._format_block(':returns: ', field))\n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..890786b06 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+            elif parts[0] in ('return', 'returns'):\n+                has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,13 +164,9 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+\n+    elif parts[0] in ('return', 'returns'):\n+        has_description.add('return')\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..fe2234469 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+            elif parts[0] in ('return', 'returns'):\n+                has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,13 +164,22 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+\n+    for field in node:\n+        if field.tagname != 'field':\n+            continue\n+        parts = str(field[0].astext()).split()\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                # typed parameter\n+                has_type.add(parts[1])\n+            else:\n+                # untyped parameter\n+                has_description.add(parts[1])\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n+        elif parts[0] == 'rtype':\n+            has_type.add('return')\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..4e30e5db6 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,13 +164,21 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+\n+    for field in field_list:\n+        field_name = field[0].astext()\n+        parts = re.split(' +', field_name)\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                # typed parameter\n+                has_type.add(parts[1])\n+            else:\n+                # untyped parameter\n+                has_description.add(parts[1])\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n+        elif parts[0] == 'rtype':\n+            has_type.add('return')\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..7d899386f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,6 +164,62 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n+\n+def augment_descriptions_with_types(\n+    node: Element, obj: Any, config: Config, app: Sphinx, what: str, name: str\n+) -> None:\n+    \"\"\"Augment existing parameter/return descriptions with type information.\"\"\"\n+    try:\n+        signature = inspect.signature(obj, type_aliases=config.autodoc_type_aliases)\n+    except (TypeError, ValueError):\n+        return\n+\n+    annotations = app.env.temp_data.setdefault('annotations', {})\n+    if annotations.get(name, {}):\n+        field_lists = [n for n in node if isinstance(n, nodes.field_list)]\n+        if field_lists == []:\n+            field_list = insert_field_list(node)\n+            field_lists.append(field_list)\n+\n+        # Determine if parameter/return information is already documented\n+        # without type information.\n+        has_description = set()\n+        has_type = set()\n+        for field_list in field_lists:\n+            if app.config.autodoc_typehints_format == \"short\":\n+                override_app = app\n+                override_app.config.python_use_unqualified_type_names = True\n+            else:\n+                override_app = app\n+            for field in field_list:\n+                field_name = field[0].astext()\n+                parts = re.split(' +', field_name)\n+                if parts[0] == 'param':\n+                    if len(parts) == 2:\n+                        # :param xxx:\n+                        has_description.add(parts[1])\n+                    elif len(parts) > 2:\n+                        # :param xxx yyy:\n+                        name = ' '.join(parts[1:])\n+                        has_description.add(name)\n+                elif parts[0] == 'type':\n+                    name = ' '.join(parts[1:])\n+                    has_type.add(name)\n+                elif parts[0] in ('return', 'returns'):\n+                    has_description.add('return')\n+                elif parts[0] == 'rtype':\n+                    has_type.add('return')\n+\n+    # Add 'type' for parameters with a description but no declared type.\n+    for name in annotations:\n+        if name == 'return':\n+            continue\n+        if name in has_description and name not in has_type:\n+            field = nodes.field()\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            node += field\n+\n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..727261cab 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,13 +164,9 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+\n+    elif parts[0] in ('return', 'returns'):\n+        has_description.add('return')\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..af3db2640 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+            elif parts[0] in ('return', 'returns'):\n+                has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,6 +164,57 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n+\n+def augment_descriptions_with_types(\n+    node: Element, obj: Any, config: Config, app: Sphinx, what: str, name: str\n+) -> None:\n+    \"\"\"Inject type info into field lists.\"\"\"\n+    # Skip if not in documentation mode or if this object type should be skipped\n+    if config.autodoc_typehints_description_target != \"documented\":\n+        return\n+\n+    try:\n+        annotations = app.env.temp_data['annotations'][name]\n+    except (AttributeError, KeyError):\n+        return\n+\n+    if hasattr(obj, '__annotations__'):\n+        annotations.update(obj.__annotations__)\n+\n+    # Determine what's already documented\n+    has_description: Set[str] = set()\n+    has_type: Set[str] = set()\n+    for node_child in node:\n+        if isinstance(node_child, nodes.field_list):\n+            for field in cast(Iterable[nodes.field], node_child):\n+                field_name = cast(nodes.field_name, field[0])\n+                parts = re.split(' +', str(field_name).strip())\n+                if parts[0] == 'param':\n+                    if len(parts) == 2:\n+                        # :param xxx:\n+                        has_description.add(parts[1])\n+                    elif len(parts) > 2:\n+                        # :param xxx yyy:\n+                        name = ' '.join(parts[2:])\n+                        has_description.add(name)\n+                elif parts[0] in ('return', 'returns'):\n+                    has_description.add('return')\n+                elif parts[0] == 'type':\n+                    name = ' '.join(parts[1:])\n+                    has_type.add(name)\n+                elif parts[0] == 'rtype':\n+                    has_type.add('return')\n+\n+    # Add 'type' for parameters with a description but no declared type.\n+    for name in annotations:\n+        if name == 'return':\n+            continue\n+        if name in has_description and name not in has_type:\n+            field = nodes.field()\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            node += field\n+\n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..e14e500fd 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+            elif parts[0] in ('return', 'returns'):\n+                has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,13 +164,26 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+\n+    for node in field_list:\n+        field_name = node[0].astext()\n+        parts = re.split(' +', field_name)\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                # typed parameter\n+                has_type.add(parts[1])\n+            else:\n+                # unknown field name\n+                has_description.add(field_name)\n+        elif parts[0] == 'type':\n+            name = ' '.join(parts[1:])\n+            has_type.add(name)\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n+        elif parts[0] == 'rtype':\n+            has_type.add('return')\n+        else:\n+            has_description.add(field_name)\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..ddb3345f9 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+            elif parts[0] in ('return', 'returns'):\n+                has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,13 +164,27 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+\n+    for field in field_list.children:\n+        field_name = field[0].astext()\n+        parts = re.split(' +', field_name)\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                # :param xxx:\n+                arg_name = parts[1]\n+                has_description.add(arg_name)\n+            elif len(parts) > 2:\n+                # :param type xxx: or :param xxx yyy:\n+                name = ' '.join(parts[2:])\n+                has_type.add(name)\n+                has_description.add(name)\n+        elif parts[0] == 'type':\n+            name = ' '.join(parts[1:])\n+            has_type.add(name)\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n+        elif parts[0] == 'rtype':\n+            has_type.add('return')\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..0e63f130e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -61,10 +61,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n-            else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -127,6 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -164,13 +164,26 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+\n+    for field in node:\n+        if field.tagname != 'field':\n+            continue\n+        parts = str(field[0].astext()).split()\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                # :param xxx:\n+                has_description.add(parts[1])\n+            elif len(parts) > 2:\n+                # :param xxx yyy:\n+                name = ' '.join(parts[1:])\n+                has_description.add(name)\n+        elif parts[0] == 'type':\n+            name = ' '.join(parts[1:])\n+            has_type.add(name)\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n+        elif parts[0] == 'rtype':\n+            has_type.add('return')\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..bdd4e8688 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -785,11 +785,9 @@ class GoogleDocstring:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n-                lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        elif parts[0] in ('return', 'returns'):\n+            has_description.add('return')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n"
  }
}