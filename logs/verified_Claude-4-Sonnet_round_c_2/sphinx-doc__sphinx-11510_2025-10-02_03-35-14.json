{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/directives/other.py lines 371-379)": "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file through Sphinx's system to fire source-read event\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except (OSError, UnicodeError) as err:\n        raise self.severe(f'Problems with \"{filename}\" directive path:\\n{err}')\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Create a new document and parse the modified content\n    from docutils.utils import new_document\n    from docutils.core import publish_doctree\n    \n    # Use docutils to parse the modified content\n    doctree = publish_doctree(modified_content, \n                            source_path=filename,\n                            settings_overrides={'input_encoding': 'utf-8'})\n    \n    return doctree.children\n",
    "Location 2 (/root/hy/projects/sphinx/sphinx/io.py lines 108-115)": "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    from sphinx.util.docutils import new_document\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/directives/other.py lines 371-379)": [
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event for content modification\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except OSError as err:\n        raise self.severe(f'Problems with \"{filename}\" directive path:\\n{err}')\n    \n    # Fire the source-read event to allow content modification\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Temporarily replace the file content with modified content\n    from docutils.io import StringInput\n    original_input_class = self.state.document.settings.input_class\n    original_source = self.arguments[0]\n    \n    # Create a StringInput with the modified content\n    self.state.document.settings.input_class = StringInput\n    self.arguments[0] = modified_content\n    \n    try:\n        result = super().run()\n    finally:\n        # Restore original settings\n        self.state.document.settings.input_class = original_input_class\n        self.arguments[0] = original_source\n    \n    return result\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event for included content\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except OSError as err:\n        raise self.severe(f'Problems with \"{filename}\" directive:\\n{err}')\n    \n    # Fire the source-read event to allow content modification\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content\n    from docutils.parsers.rst import Parser\n    from docutils.utils import new_document\n    \n    parser = Parser()\n    parser.set_application(self.env.app)\n    document = new_document('<included-file>', settings=self.state.document.settings)\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file through Sphinx's event system\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to allow modifications\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    from sphinx.util.docutils import new_document\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file through Sphinx's event system\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except (OSError, UnicodeError) as err:\n        raise self.severe(f'Problems with \"{filename}\" directive path:\\n{err}')\n    \n    # Fire the source-read event to allow content modification\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Create a new document and parse the modified content\n    from docutils.utils import new_document\n    from docutils.frontend import OptionParser\n    from docutils.parsers.rst import Parser\n    \n    # Use the same settings as the current document\n    document = new_document(filename, settings=self.state.document.settings)\n    \n    # Parse the modified content\n    parser = Parser()\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file through Sphinx's event system\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except OSError as err:\n        raise self.severe(f'Problems with \"{self.arguments[0]}\" directive path:\\n{err}')\n    \n    # Fire the source-read event to allow content modification\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using docutils parser\n    include_lines = modified_content.splitlines(True)\n    self.state_machine.insert_input(include_lines, filename)\n    \n    return []\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event to get modified content\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except OSError as err:\n        raise self.severe('Problems with \"%s\" directive path:\\n%s.' % (self.name, err))\n    \n    # Fire the source-read event to allow modifications\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Create a temporary include directive with modified content\n    from docutils.utils import new_document\n    from docutils.parsers.rst import Parser\n    \n    # Create a new document for parsing the modified content\n    settings = self.state.document.settings\n    document = new_document(filename, settings=settings)\n    \n    # Parse the modified content\n    parser = Parser()\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event for content modification\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except (OSError, UnicodeError) as err:\n        raise self.severe('Problems with \"%s\" directive path:\\n%s.' %\n                         (self.name, err))\n    \n    # Fire source-read event to allow content modification\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Create a temporary document to parse the modified content\n    from docutils.utils import new_document\n    from docutils.parsers.rst import Parser\n    \n    settings = self.state.document.settings\n    document = new_document(filename, settings=settings)\n    parser = Parser()\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and \\\n       self.arguments[0].endswith('>'):\n        # docutils \"standard\" includes, do not do path processing\n        return super().run()\n    \n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event to get modified content\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            source = f.read()\n    except OSError as err:\n        return [self.state.document.reporter.warning(\n            'Problems with \"%s\" directive path:\\n%s.' % (self.name, err),\n            nodes.literal_block(self.block_text, self.block_text),\n            line=self.lineno)]\n    \n    # Fire the source-read event to allow modifications\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Create a temporary document to parse the modified content\n    from docutils.utils import new_document\n    from docutils.parsers.rst import Parser\n    \n    settings = self.state.document.settings\n    document = new_document(filename, settings=settings)\n    parser = Parser()\n    parser.parse(modified_content, document)\n    \n    return document.children\n"
    ],
    "Location 2 (/root/hy/projects/sphinx/sphinx/io.py lines 108-115)": [
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file content\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file through Sphinx's system (fires source-read event)\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event manually to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire the source-read event\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file content\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire the source-read event\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire source-read event\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n",
      "\ndef run(self) -> list[Node]:\n    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n        return super().run()  # Keep docutils standard includes as-is\n    \n    # Use Sphinx's path resolution and tracking\n    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n    self.env.note_included(filename)\n    \n    # Read the file and fire the source-read event to get modified content\n    with open(filename, 'r', encoding='utf-8') as f:\n        source = f.read()\n    \n    # Fire the source-read event manually to get modified content\n    arg = [source]\n    self.env.events.emit('source-read', rel_filename, arg)\n    modified_content = arg[0]\n    \n    # Parse the modified content using Sphinx's parser\n    document = new_document(filename, settings=self.state.document.settings)\n    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n    parser.parse(modified_content, document)\n    \n    return document.children\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..9e725ffc3 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,40 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n+\n     def run(self) -> list[Node]:\n         if self.arguments[0].startswith('<') and \\\n            self.arguments[0].endswith('>'):\n             # docutils \"standard\" includes, do not do path processing\n             return super().run()\n         rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n         self.env.note_included(filename)\n-        return super().run()\n+        \n+        # Read file content and fire source-read event to get modifications\n+        try:\n+            with open(filename, 'r', encoding='utf-8') as f:\n+                content = f.read()\n+        except OSError as err:\n+            raise self.severe(f'Problems with \"{filename}\" directive path:\\n{err}.')\n+        \n+        # Fire the source-read event to allow modifications\n+        arg = [content]\n+        self.env.events.emit('source-read', rel_filename, arg)\n+        modified_content = arg[0]\n+        \n+        # Parse the modified content using docutils\n+        from docutils.utils import new_document\n+        from docutils.parsers.rst import Parser\n+        \n+        # Create a new document for parsing the included content\n+        settings = self.state.document.settings\n+        document = new_document(filename, settings=settings)\n+        \n+        # Parse the modified content\n+        parser = Parser()\n+        parser.parse(modified_content, document)\n+        \n+        return document.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..3a2ec032d 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,6 +105,7 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n+\n     def read_source(self, env: BuildEnvironment) -> str:\n         \"\"\"Read content from source and do post-process.\"\"\"\n         content = self.source.read()\n",
    "variant_0": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..3957daa0a 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,38 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file through Sphinx's system to fire source-read event\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except (OSError, UnicodeError) as err:\n+        raise self.severe(f'Problems with \"{filename}\" directive path:\\n{err}')\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Create a new document and parse the modified content\n+    from docutils.utils import new_document\n+    from docutils.core import publish_doctree\n+    \n+    # Use docutils to parse the modified content\n+    doctree = publish_doctree(modified_content, \n+                            source_path=filename,\n+                            settings_overrides={'input_encoding': 'utf-8'})\n+    \n+    return doctree.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..132170556 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,31 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    from sphinx.util.docutils import new_document\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_1": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..08359c5dc 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,45 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event for content modification\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except OSError as err:\n+        raise self.severe(f'Problems with \"{filename}\" directive path:\\n{err}')\n+    \n+    # Fire the source-read event to allow content modification\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Temporarily replace the file content with modified content\n+    from docutils.io import StringInput\n+    original_input_class = self.state.document.settings.input_class\n+    original_source = self.arguments[0]\n+    \n+    # Create a StringInput with the modified content\n+    self.state.document.settings.input_class = StringInput\n+    self.arguments[0] = modified_content\n+    \n+    try:\n+        result = super().run()\n+    finally:\n+        # Restore original settings\n+        self.state.document.settings.input_class = original_input_class\n+        self.arguments[0] = original_source\n+    \n+    return result\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..ebb461355 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_2": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..0d93724ed 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,38 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event for included content\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except OSError as err:\n+        raise self.severe(f'Problems with \"{filename}\" directive:\\n{err}')\n+    \n+    # Fire the source-read event to allow content modification\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content\n+    from docutils.parsers.rst import Parser\n+    from docutils.utils import new_document\n+    \n+    parser = Parser()\n+    parser.set_application(self.env.app)\n+    document = new_document('<included-file>', settings=self.state.document.settings)\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..0ce418a93 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file content\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_3": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..e80be7928 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,32 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file through Sphinx's event system\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to allow modifications\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    from sphinx.util.docutils import new_document\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..607f2c317 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file through Sphinx's system (fires source-read event)\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event manually to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_4": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..88d3bbddd 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,41 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file through Sphinx's event system\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except (OSError, UnicodeError) as err:\n+        raise self.severe(f'Problems with \"{filename}\" directive path:\\n{err}')\n+    \n+    # Fire the source-read event to allow content modification\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Create a new document and parse the modified content\n+    from docutils.utils import new_document\n+    from docutils.frontend import OptionParser\n+    from docutils.parsers.rst import Parser\n+    \n+    # Use the same settings as the current document\n+    document = new_document(filename, settings=self.state.document.settings)\n+    \n+    # Parse the modified content\n+    parser = Parser()\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..6322c40c8 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire the source-read event\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_5": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..229efe8ff 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,33 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file through Sphinx's event system\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except OSError as err:\n+        raise self.severe(f'Problems with \"{self.arguments[0]}\" directive path:\\n{err}')\n+    \n+    # Fire the source-read event to allow content modification\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using docutils parser\n+    include_lines = modified_content.splitlines(True)\n+    self.state_machine.insert_input(include_lines, filename)\n+    \n+    return []\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..0ce418a93 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file content\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_6": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..3863e5739 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,41 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event to get modified content\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except OSError as err:\n+        raise self.severe('Problems with \"%s\" directive path:\\n%s.' % (self.name, err))\n+    \n+    # Fire the source-read event to allow modifications\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Create a temporary include directive with modified content\n+    from docutils.utils import new_document\n+    from docutils.parsers.rst import Parser\n+    \n+    # Create a new document for parsing the modified content\n+    settings = self.state.document.settings\n+    document = new_document(filename, settings=settings)\n+    \n+    # Parse the modified content\n+    parser = Parser()\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..6322c40c8 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire the source-read event\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_7": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..3a4e8a0a9 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,39 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event for content modification\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except (OSError, UnicodeError) as err:\n+        raise self.severe('Problems with \"%s\" directive path:\\n%s.' %\n+                         (self.name, err))\n+    \n+    # Fire source-read event to allow content modification\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Create a temporary document to parse the modified content\n+    from docutils.utils import new_document\n+    from docutils.parsers.rst import Parser\n+    \n+    settings = self.state.document.settings\n+    document = new_document(filename, settings=settings)\n+    parser = Parser()\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..ebb461355 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n",
    "variant_8": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..8c092f436 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -368,15 +368,41 @@ class Include(BaseInclude, SphinxDirective):\n     \"correctly\", i.e. relative to source directory.\n     \"\"\"\n \n-    def run(self) -> list[Node]:\n-        if self.arguments[0].startswith('<') and \\\n-           self.arguments[0].endswith('>'):\n-            # docutils \"standard\" includes, do not do path processing\n-            return super().run()\n-        rel_filename, filename = self.env.relfn2path(self.arguments[0])\n-        self.arguments[0] = filename\n-        self.env.note_included(filename)\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and \\\n+       self.arguments[0].endswith('>'):\n+        # docutils \"standard\" includes, do not do path processing\n         return super().run()\n+    \n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire source-read event to get modified content\n+    try:\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            source = f.read()\n+    except OSError as err:\n+        return [self.state.document.reporter.warning(\n+            'Problems with \"%s\" directive path:\\n%s.' % (self.name, err),\n+            nodes.literal_block(self.block_text, self.block_text),\n+            line=self.lineno)]\n+    \n+    # Fire the source-read event to allow modifications\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Create a temporary document to parse the modified content\n+    from docutils.utils import new_document\n+    from docutils.parsers.rst import Parser\n+    \n+    settings = self.state.document.settings\n+    document = new_document(filename, settings=settings)\n+    parser = Parser()\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..ae12b307a 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -105,14 +105,30 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n-        \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n-\n-        # emit \"source-read\" event\n-        arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n-        return arg[0]\n+\n+def run(self) -> list[Node]:\n+    if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):\n+        return super().run()  # Keep docutils standard includes as-is\n+    \n+    # Use Sphinx's path resolution and tracking\n+    rel_filename, filename = self.env.relfn2path(self.arguments[0])\n+    self.env.note_included(filename)\n+    \n+    # Read the file and fire the source-read event to get modified content\n+    with open(filename, 'r', encoding='utf-8') as f:\n+        source = f.read()\n+    \n+    # Fire the source-read event manually to get modified content\n+    arg = [source]\n+    self.env.events.emit('source-read', rel_filename, arg)\n+    modified_content = arg[0]\n+    \n+    # Parse the modified content using Sphinx's parser\n+    document = new_document(filename, settings=self.state.document.settings)\n+    parser = self.env.app.registry.create_source_parser(self.env.app, 'restructuredtext')\n+    parser.parse(modified_content, document)\n+    \n+    return document.children\n \n \n class SphinxI18nReader(SphinxBaseReader):\n"
  }
}