{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 973-976)": "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
    "Location 2 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 981-984)": "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    if self.old_fields:\n        return\n\n    # Store original values\n    original_old_name = self.old_name\n    original_new_name = self.new_name\n\n    # Swap for backwards operation\n    self.old_name, self.new_name = self.new_name, self.old_name\n\n    # Execute the operation\n    self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    # Restore original values\n    self.old_name = original_old_name\n    self.new_name = original_new_name\n",
    "Location 3 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 968-985)": "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    if self.old_fields:\n        # Backward operation with unnamed index is a no-op.\n        return\n\n    # Store original values\n    original_old_name = self.old_name\n    original_new_name = self.new_name\n    \n    # Swap for backwards operation\n    self.old_name, self.new_name = self.new_name, self.old_name\n    \n    # Execute the operation\n    self.database_forwards(app_label, schema_editor, from_state, to_state)\n    \n    # Restore original values\n    self.old_name = original_old_name\n    self.new_name = original_new_name\n",
    "Location 4 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 897-903)": "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n\n    @cached_property\n    def new_name_lower(self):\n        return self.new_name.lower()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 973-976)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n"
    ],
    "Location 2 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 981-984)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n\n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n\n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n\n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n\n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n"
    ],
    "Location 3 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 968-985)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # Backward operation with unnamed index is a no-op.\n            return\n\n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n"
    ],
    "Location 4 (/root/hy/projects/django/django/db/migrations/operations/models.py lines 897-903)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n        \n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n        \n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n        \n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n\n    @cached_property\n    def new_name_lower(self):\n        return self.new_name.lower() if self.new_name else None\n",
      "\n    @cached_property\n    def old_name_lower(self):\n        return self.old_name.lower() if self.old_name else None\n\n    @cached_property\n    def new_name_lower(self):\n        return self.new_name.lower() if self.new_name else None\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n        \n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n        \n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            return\n        \n        # Store original values\n        original_old_name = self.old_name\n        original_new_name = self.new_name\n        \n        # Swap for backwards operation\n        self.old_name, self.new_name = self.new_name, self.old_name\n        \n        # Execute the operation\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n        \n        # Restore original values\n        self.old_name = original_old_name\n        self.new_name = original_new_name\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..8838ff4f34 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,6 +894,7 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n         return self.old_name.lower()\n@@ -965,26 +966,25 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        # Store original values to restore later\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        # Swap attributes for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        # Execute the forwards operation with swapped names\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-    def describe(self):\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         if self.old_name:\n             return (\n                 f\"Rename index {self.old_name} on {self.model_name} to {self.new_name}\"\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..c9ed267246 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,9 +894,10 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -965,23 +966,52 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    if self.old_fields:\n+        # Backward operation with unnamed index is a no-op.\n+        return\n+\n+    # Store original values\n+    original_old_name = self.old_name\n+    original_new_name = self.new_name\n+    \n+    # Swap for backwards operation\n+    self.old_name, self.new_name = self.new_name, self.old_name\n+    \n+    # Execute the operation\n+    self.database_forwards(app_label, schema_editor, from_state, to_state)\n+    \n+    # Restore original values\n+    self.old_name = original_old_name\n+    self.new_name = original_new_name\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    if self.old_fields:\n+        return\n+\n+    # Store original values\n+    original_old_name = self.old_name\n+    original_new_name = self.new_name\n+\n+    # Swap for backwards operation\n+    self.old_name, self.new_name = self.new_name, self.old_name\n+\n+    # Execute the operation\n+    self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    # Restore original values\n+    self.old_name = original_old_name\n+    self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..bfa19a9495 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,24 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n-    @cached_property\n-    def old_name_lower(self):\n-        return self.old_name.lower()\n \n-    @cached_property\n-    def new_name_lower(self):\n-        return self.new_name.lower()\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+        \n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +976,52 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+\n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..bfa19a9495 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,24 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n-    @cached_property\n-    def old_name_lower(self):\n-        return self.old_name.lower()\n \n-    @cached_property\n-    def new_name_lower(self):\n-        return self.new_name.lower()\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+        \n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +976,52 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+\n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..f31f38db01 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,24 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n-    @cached_property\n-    def old_name_lower(self):\n-        return self.old_name.lower()\n \n-    @cached_property\n-    def new_name_lower(self):\n-        return self.new_name.lower()\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+        \n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +976,52 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+\n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..6c5e20cf8c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,14 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n-        return self.new_name.lower()\n+        return self.new_name.lower() if self.new_name else None\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +966,50 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..a71a8df5ce 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,14 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n+\n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n-        return self.new_name.lower()\n+        return self.new_name.lower() if self.new_name else None\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +966,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..a461d09a51 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,24 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n-    @cached_property\n-    def old_name_lower(self):\n-        return self.old_name.lower()\n \n-    @cached_property\n-    def new_name_lower(self):\n-        return self.new_name.lower()\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+        \n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +976,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..a461d09a51 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,24 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n-    @cached_property\n-    def old_name_lower(self):\n-        return self.old_name.lower()\n \n-    @cached_property\n-    def new_name_lower(self):\n-        return self.new_name.lower()\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+        \n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +976,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..c3797929f3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -894,13 +894,24 @@ class RenameIndex(IndexOperation):\n         self.old_name = old_name\n         self.old_fields = old_fields\n \n-    @cached_property\n-    def old_name_lower(self):\n-        return self.old_name.lower()\n \n-    @cached_property\n-    def new_name_lower(self):\n-        return self.new_name.lower()\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+        \n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n \n     def deconstruct(self):\n         kwargs = {\n@@ -965,23 +976,53 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+        \n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        \n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        \n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        if self.old_fields:\n+            return\n+\n+        # Store original values\n+        original_old_name = self.old_name\n+        original_new_name = self.new_name\n+\n+        # Swap for backwards operation\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+\n+        # Execute the operation\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        # Restore original values\n+        self.old_name = original_old_name\n+        self.new_name = original_new_name\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n"
  }
}