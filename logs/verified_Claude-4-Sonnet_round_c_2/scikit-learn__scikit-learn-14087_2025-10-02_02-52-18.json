{
  "zero_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/linear_model/logistic.py lines 2125-2130)": "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n",
    "Location 2 (/root/hy/projects/scikit-learn/sklearn/linear_model/logistic.py lines 2177-2178)": "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/linear_model/logistic.py lines 2125-2130)": [
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n",
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n",
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                coefs_paths = self.coefs_paths_[cls]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n",
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n",
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n",
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n",
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n",
      "\n            else:\n                # For multinomial, all scores are the same across classes\n                scores = scores[0]\n                # coefs_paths will keep its original shape because\n                # logistic_regression_path expects it this way\n                coefs_paths = self.coefs_paths_[cls]\n"
    ],
    "Location 2 (/root/hy/projects/scikit-learn/sklearn/linear_model/logistic.py lines 2177-2178)": [
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4b86e3e95 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2174,6 +2175,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n+\n                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n",
    "variant_0": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_1": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_2": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_3": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..51975a9a7 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n+                coefs_paths = self.coefs_paths_[cls]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_4": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_5": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_6": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_7": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n",
    "variant_8": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..4e1498cca 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2122,12 +2122,13 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'ovr':\n                 scores = self.scores_[cls]\n                 coefs_paths = self.coefs_paths_[cls]\n+\n             else:\n                 # For multinomial, all scores are the same across classes\n                 scores = scores[0]\n                 # coefs_paths will keep its original shape because\n                 # logistic_regression_path expects it this way\n-\n+                coefs_paths = self.coefs_paths_[cls]\n             if self.refit:\n                 # best_index is between 0 and (n_Cs . n_l1_ratios - 1)\n                 # for example, with n_cs=2 and n_l1_ratios=3\n@@ -2166,6 +2167,15 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n"
  }
}