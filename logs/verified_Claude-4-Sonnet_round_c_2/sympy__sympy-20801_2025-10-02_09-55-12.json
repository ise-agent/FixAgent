{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/core/numbers.py lines 1389-1392)": "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/core/numbers.py lines 1389-1392)": [
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n",
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n",
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n",
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n",
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n",
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n",
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n",
      "\n    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if isinstance(other, Boolean):\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..d1b870d6f9 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,11 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_0": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_1": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_2": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_3": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_4": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_5": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_6": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_7": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n",
    "variant_8": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..504f26fd72 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,27 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n+\n+    def __eq__(self, other):\n+        from sympy.logic.boolalg import Boolean\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n+        if other.is_NumberSymbol:\n+            if other.is_irrational:\n+                return False\n+            return other.__eq__(self)\n+        if other.is_Float:\n+            # comparison is exact\n+            # so Float(.1, 3) != Float(.1, 33)\n+            return self._mpf_ == other._mpf_\n+        if other.is_Rational:\n+            return other.__eq__(self)\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n"
  }
}