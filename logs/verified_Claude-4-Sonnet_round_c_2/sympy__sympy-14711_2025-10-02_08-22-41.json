{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/physics/vector/vector.py lines 58-61)": "\ndef __add__(self, other):\n    \"\"\"The add operator for Vector. \"\"\"\n    if other == 0:\n        return self\n    other = _check_vector(other)\n    return Vector(self.args + other.args)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/physics/vector/vector.py lines 58-61)": [
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n",
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n",
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n",
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n",
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n",
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n",
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n",
      "\n    def __add__(self, other):\n        \"\"\"The add operator for Vector. \"\"\"\n        if other == 0:\n            return self\n        other = _check_vector(other)\n        return Vector(self.args + other.args)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_0": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..089a00c8ca 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,10 +55,13 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n-    def __add__(self, other):\n-        \"\"\"The add operator for Vector. \"\"\"\n-        other = _check_vector(other)\n-        return Vector(self.args + other.args)\n+\n+def __add__(self, other):\n+    \"\"\"The add operator for Vector. \"\"\"\n+    if other == 0:\n+        return self\n+    other = _check_vector(other)\n+    return Vector(self.args + other.args)\n \n     def __and__(self, other):\n         \"\"\"Dot product of two vectors.\n",
    "variant_1": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_2": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_3": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_4": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_5": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_6": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_7": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n",
    "variant_8": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..e898738f28 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -55,8 +55,11 @@ def __init__(self, inlist):\n     def __hash__(self):\n         return hash(tuple(self.args))\n \n+\n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n"
  }
}