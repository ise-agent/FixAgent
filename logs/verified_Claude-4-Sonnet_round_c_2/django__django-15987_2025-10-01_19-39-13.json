{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/core/management/commands/loaddata.py lines 365-366)": "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/core/management/commands/loaddata.py lines 365-366)": [
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n",
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n",
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n",
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n",
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n",
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n",
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n",
      "\n    @cached_property\n    def fixture_dirs(self):\n        \"\"\"\n        Return a list of fixture directories.\n\n        The list contains the 'fixtures' subdirectory of each installed\n        application, if it exists, the directories in FIXTURE_DIRS, and the\n        current directory.\n        \"\"\"\n        dirs = []\n        fixture_dirs = settings.FIXTURE_DIRS\n        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n        for app_config in apps.get_app_configs():\n            app_label = app_config.label\n            app_dir = os.path.join(app_config.path, \"fixtures\")\n            if app_dir in fixture_dirs:\n                raise ImproperlyConfigured(\n                    \"'%s' is a default fixture directory for the '%s' app \"\n                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                    % (app_dir, app_label)\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..9aa38e9b63 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,7 +362,9 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n",
    "variant_0": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_1": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_2": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_3": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_4": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_5": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_6": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_7": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n",
    "variant_8": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..ef351ab183 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,8 +362,30 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+    @cached_property\n+    def fixture_dirs(self):\n+        \"\"\"\n+        Return a list of fixture directories.\n+\n+        The list contains the 'fixtures' subdirectory of each installed\n+        application, if it exists, the directories in FIXTURE_DIRS, and the\n+        current directory.\n+        \"\"\"\n+        dirs = []\n+        fixture_dirs = settings.FIXTURE_DIRS\n+        normalized_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+        for app_config in apps.get_app_configs():\n+            app_label = app_config.label\n+            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            if app_dir in fixture_dirs:\n+                raise ImproperlyConfigured(\n+                    \"'%s' is a default fixture directory for the '%s' app \"\n+                    \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+                    % (app_dir, app_label)\n+                )\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n"
  }
}