{
  "zero_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/mpl_toolkits/axes_grid1/inset_locator.py lines 71-73)": "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/mpl_toolkits/axes_grid1/inset_locator.py lines 71-73)": [
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n",
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n",
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n",
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n",
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n",
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n",
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n",
      "\n    def __call__(self, ax, renderer):\n        self.axes = ax\n        self.figure = ax.figure\n        bbox = self.get_window_extent(renderer)\n        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n        tr = ax.figure.transSubfigure.inverted()\n        return TransformedBbox(bbox_canvas, tr)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..5f5182377e 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,8 +68,10 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n",
    "variant_0": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_1": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_2": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_3": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_4": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_5": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_6": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_7": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n",
    "variant_8": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..7688e39cb6 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -68,13 +68,19 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n     def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n+\n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n         tr = ax.figure.transSubfigure.inverted()\n         return TransformedBbox(bbox_canvas, tr)\n+        px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n+        bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n+        tr = ax.figure.transSubfigure.inverted()\n+        return TransformedBbox(bbox_canvas, tr)\n \n \n class AnchoredSizeLocator(AnchoredLocatorBase):\n"
  }
}