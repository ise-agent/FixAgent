{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 392-394)": "\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 392-394)": [
      "\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n",
      "\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n",
      "\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n",
      "\ndef object_description(object: Any) -> str:\n    \"\"\"A repr() implementation that returns text safe to use in reST context.\"\"\"\n    if isinstance(object, dict):\n        try:\n            sorted_keys = sorted(object)\n        except Exception:\n            pass  # Cannot sort dict keys, fall back to generic repr\n        else:\n            items = (\"%s: %s\" % (object_description(key), object_description(object[key]))\n                     for key in sorted_keys)\n            return \"{%s}\" % \", \".join(items)\n    if isinstance(object, set):\n        try:\n            sorted_values = sorted(object)\n        except TypeError:\n            pass  # Cannot sort set values, fall back to generic repr\n        else:\n            return \"{%s}\" % \", \".join(object_description(x) for x in sorted_values)\n    if isinstance(object, frozenset):\n        try:\n            sorted_values = sorted(object)\n        except TypeError:\n            pass  # Cannot sort frozenset values, fall back to generic repr\n        else:\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n    except Exception as exc:\n        raise ValueError from exc\n    # Strip non-deterministic memory addresses such as\n    # ``<__main__.A at 0x7f68cb685710>``\n    s = memory_address_re.sub('', s)\n    return s.replace('\\n', ' ')\n",
      "\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n",
      "\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n",
      "\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n",
      "\n            return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                 for x in sorted_values)\n    if isinstance(object, tuple):\n        if len(object) == 0:\n            return \"()\"\n        elif len(object) == 1:\n            return \"(%s,)\" % object_description(object[0])\n        else:\n            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n    try:\n        s = repr(object)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..e97c1f3fc 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -389,7 +389,15 @@ def object_description(object: Any) -> str:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_0": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..4657c65a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -388,8 +388,17 @@ def object_description(object: Any) -> str:\n         except TypeError:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_1": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..4657c65a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -388,8 +388,17 @@ def object_description(object: Any) -> str:\n         except TypeError:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_2": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..aa40e77ed 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -389,7 +389,14 @@ def object_description(object: Any) -> str:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n-                                                 for x in sorted_values)\n+\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_3": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..4657c65a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -388,8 +388,17 @@ def object_description(object: Any) -> str:\n         except TypeError:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_4": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..a0d3e21f2 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -382,6 +382,32 @@ def object_description(object: Any) -> str:\n             pass  # Cannot sort set values, fall back to generic repr\n         else:\n             return \"{%s}\" % \", \".join(object_description(x) for x in sorted_values)\n+    if isinstance(object, frozenset):\n+        try:\n+            sorted_values = sorted(object)\n+        except TypeError:\n+            pass  # Cannot sort frozenset values, fall back to generic repr\n+        else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n+def object_description(object: Any) -> str:\n+    \"\"\"A repr() implementation that returns text safe to use in reST context.\"\"\"\n+    if isinstance(object, dict):\n+        try:\n+            sorted_keys = sorted(object)\n+        except Exception:\n+            pass  # Cannot sort dict keys, fall back to generic repr\n+        else:\n+            items = (\"%s: %s\" % (object_description(key), object_description(object[key]))\n+                     for key in sorted_keys)\n+            return \"{%s}\" % \", \".join(items)\n+    if isinstance(object, set):\n+        try:\n+            sorted_values = sorted(object)\n+        except TypeError:\n+            pass  # Cannot sort set values, fall back to generic repr\n+        else:\n+            return \"{%s}\" % \", \".join(object_description(x) for x in sorted_values)\n     if isinstance(object, frozenset):\n         try:\n             sorted_values = sorted(object)\n@@ -390,6 +416,13 @@ def object_description(object: Any) -> str:\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n@@ -398,6 +431,12 @@ def object_description(object: Any) -> str:\n     # ``<__main__.A at 0x7f68cb685710>``\n     s = memory_address_re.sub('', s)\n     return s.replace('\\n', ' ')\n+    except Exception as exc:\n+        raise ValueError from exc\n+    # Strip non-deterministic memory addresses such as\n+    # ``<__main__.A at 0x7f68cb685710>``\n+    s = memory_address_re.sub('', s)\n+    return s.replace('\\n', ' ')\n \n \n def is_builtin_class_method(obj: Any, attr_name: str) -> bool:\n",
    "variant_5": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..4657c65a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -388,8 +388,17 @@ def object_description(object: Any) -> str:\n         except TypeError:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_6": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..4657c65a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -388,8 +388,17 @@ def object_description(object: Any) -> str:\n         except TypeError:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_7": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..4657c65a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -388,8 +388,17 @@ def object_description(object: Any) -> str:\n         except TypeError:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n",
    "variant_8": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..4657c65a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -388,8 +388,17 @@ def object_description(object: Any) -> str:\n         except TypeError:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n+            return \"frozenset({%s})\" % \", \".join(object_description(x)\n+\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        if len(object) == 0:\n+            return \"()\"\n+        elif len(object) == 1:\n+            return \"(%s,)\" % object_description(object[0])\n+        else:\n+            return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n"
  }
}