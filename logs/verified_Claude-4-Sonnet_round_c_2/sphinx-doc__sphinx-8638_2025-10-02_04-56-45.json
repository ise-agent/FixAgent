{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/domains/python.py lines 1157-1162)": "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/domains/python.py lines 1157-1162)": [
      "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n",
      "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n",
      "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n",
      "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n",
      "\n                else:\n                    # \"fuzzy\" searching mode - prioritize context-aware matches\n                    searchname = '.' + name\n                    all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                   if oname.endswith(searchname) and\n                                   self.objects[oname].objtype in objtypes]\n                    \n                    if all_matches:\n                        # Priority 1: Same class context (if classname provided)\n                        if classname:\n                            class_context_matches = [match for match in all_matches \n                                                   if match[0].startswith(modname + '.' + classname + '.')]\n                            if class_context_matches:\n                                matches = class_context_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            # Priority 2: Same module context (if modname provided)\n                            if modname:\n                                module_context_matches = [match for match in all_matches \n                                                        if match[0].startswith(modname + '.')]\n                                if module_context_matches:\n                                    matches = module_context_matches\n                                else:\n                                    # Priority 3: Cross-module matches as fallback\n                                    matches = all_matches\n                            else:\n                                matches = all_matches\n                    else:\n                        matches = []\n",
      "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n",
      "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n",
      "\n                    else:\n                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                        searchname = '.' + name\n                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                       if oname.endswith(searchname) and\n                                       self.objects[oname].objtype in objtypes]\n                        \n                        if all_matches:\n                            # Priority 1: Same class context (if classname provided)\n                            if classname:\n                                class_context_matches = [match for match in all_matches \n                                                       if match[0].startswith(modname + '.' + classname + '.')]\n                                if class_context_matches:\n                                    matches = class_context_matches\n                                else:\n                                    # Priority 2: Same module context (if modname provided)\n                                    if modname:\n                                        module_context_matches = [match for match in all_matches \n                                                                if match[0].startswith(modname + '.')]\n                                        if module_context_matches:\n                                            matches = module_context_matches\n                                        else:\n                                            # Priority 3: Cross-module matches as fallback\n                                            matches = all_matches\n                                    else:\n                                        matches = all_matches\n                            else:\n                                # Priority 2: Same module context (if modname provided)\n                                if modname:\n                                    module_context_matches = [match for match in all_matches \n                                                            if match[0].startswith(modname + '.')]\n                                    if module_context_matches:\n                                        matches = module_context_matches\n                                    else:\n                                        # Priority 3: Cross-module matches as fallback\n                                        matches = all_matches\n                                else:\n                                    matches = all_matches\n                        else:\n                            matches = []\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..bc10a70be 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname and modname:\n+                                class_prefix = modname + '.' + classname + '.'\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(class_prefix)]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    module_prefix = modname + '.'\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(module_prefix)]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                            elif modname:\n+                                # Priority 2: Same module context (if modname provided)\n+                                module_prefix = modname + '.'\n+                                module_context_matches = [match for match in all_matches \n+                                                        if match[0].startswith(module_prefix)]\n+                                if module_context_matches:\n+                                    matches = module_context_matches\n+                                else:\n+                                    # Priority 3: Cross-module matches as fallback\n+                                    matches = all_matches\n+                            else:\n+                                # No context available, use all matches\n+                                matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_0": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_1": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_2": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_3": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_4": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_5": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..3cccf3fbf 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n+\n+                else:\n+                    # \"fuzzy\" searching mode - prioritize context-aware matches\n+                    searchname = '.' + name\n+                    all_matches = [(oname, self.objects[oname]) for oname in self.objects\n                                    if oname.endswith(searchname) and\n                                    self.objects[oname].objtype in objtypes]\n+                    \n+                    if all_matches:\n+                        # Priority 1: Same class context (if classname provided)\n+                        if classname:\n+                            class_context_matches = [match for match in all_matches \n+                                                   if match[0].startswith(modname + '.' + classname + '.')]\n+                            if class_context_matches:\n+                                matches = class_context_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            # Priority 2: Same module context (if modname provided)\n+                            if modname:\n+                                module_context_matches = [match for match in all_matches \n+                                                        if match[0].startswith(modname + '.')]\n+                                if module_context_matches:\n+                                    matches = module_context_matches\n+                                else:\n+                                    # Priority 3: Cross-module matches as fallback\n+                                    matches = all_matches\n+                            else:\n+                                matches = all_matches\n+                    else:\n+                        matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_6": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_7": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n",
    "variant_8": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..c9b4aa112 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1154,12 +1154,47 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize context-aware matches\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        all_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        \n+                        if all_matches:\n+                            # Priority 1: Same class context (if classname provided)\n+                            if classname:\n+                                class_context_matches = [match for match in all_matches \n+                                                       if match[0].startswith(modname + '.' + classname + '.')]\n+                                if class_context_matches:\n+                                    matches = class_context_matches\n+                                else:\n+                                    # Priority 2: Same module context (if modname provided)\n+                                    if modname:\n+                                        module_context_matches = [match for match in all_matches \n+                                                                if match[0].startswith(modname + '.')]\n+                                        if module_context_matches:\n+                                            matches = module_context_matches\n+                                        else:\n+                                            # Priority 3: Cross-module matches as fallback\n+                                            matches = all_matches\n+                                    else:\n+                                        matches = all_matches\n+                            else:\n+                                # Priority 2: Same module context (if modname provided)\n+                                if modname:\n+                                    module_context_matches = [match for match in all_matches \n+                                                            if match[0].startswith(modname + '.')]\n+                                    if module_context_matches:\n+                                        matches = module_context_matches\n+                                    else:\n+                                        # Priority 3: Cross-module matches as fallback\n+                                        matches = all_matches\n+                                else:\n+                                    matches = all_matches\n+                        else:\n+                            matches = []\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n"
  }
}