{
  "zero_patches": {
    "Location 1 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 173-174)": "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
    "Location 2 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 179-184)": "\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
    "Location 3 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 176-185)": "\n        # TODO We need some way of ensuring that we sample enough values\n        # to populate the major locator in the case of a log scale.\n        # We could always seed with the full dataset? But that doesn't seem right.\n        # We could seed with the axis limit range? But that doesn't account\n        # for the fact that we'll show ticks outside that range.\n        # We could have a separate \"update ticks\" step and, if the axis limits\n        # have changed, update the locator/formatter. But that's complicated.\n        # Actually, we should think carefully about how to coordinate between\n        # an axis object that gets passed around and the property that's\n        # getting scaled. Currently we're passing a units dictionary which\n        # is not getting updated. We should probably have the Coordinate hold\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
    "Location 4 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 192-194)": "\n            # Use unit categories for tick positions and labels\n            units = categorical_order(data, order)\n            if reverse:\n                units = units[::-1]\n\n            # TODO array cast necessary to handle float/int mixture, which we need\n            # to solve in a more systematic way probably\n            # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n            units_seed = np.array(units)\n\n            major_locator = mpl.ticker.FixedLocator(np.arange(len(units)))\n            major_formatter = mpl.ticker.FixedFormatter(units)\n\n            class CatScale(mpl.scale.LinearScale):\n                name = None  # To work around mpl<3.4 compat issues\n\n                def set_default_locators_and_formatters(self, axis):\n                    axis.set_major_locator(major_locator)\n                    axis.set_major_formatter(major_formatter)\n                    # TODO we could make this configurable\n                    # if minor_locator is not None:\n                    #     axis.set_minor_locator(minor_locator)\n                    # axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
    "Location 5 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 149-228)": "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 173-174)": [
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n"
    ],
    "Location 2 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 179-184)": [
      "\n        # TODO We want to support user-specified major/minor breaks and labels\n        # We probably want to add this to the Parameter class\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n        # TODO We want to support user-specified major/minor locators/formatters\n        # but we don't want to override the defaults if the user has specified\n        # them through the matplotlib interface. So we need to be more careful.\n\n        # We may also want to use a different default formatter for a Coordinate\n        # (where we want to format the tick labels with the original data values)\n        # vs. in Property contexts (where we may want to format the labels to\n        # reflect the mapping, e.g. in a legend)\n\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We need some way to ensure that axis limits are set properly\n        # on the Coordinate, both with and without Coordinate.zoom()\n        # When we have a categorical coordinate, we could think about\n        # auto-wrapping long tick labels (or, if the Coordinate is paired with\n        # an axis that has limited room, perhaps doing some kind of staggering)\n\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We'll want to support customizing this in some cases\n        # But it's not clear what the right API is for that.\n        # If we draw ticks/labels on a heatmap, we'd want to customize\n        # the formatter to add a prefix indicating the variable.\n        # We'll need some way to go from a data value to a string.\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We want to support a `values` parameter that constrains the mapping\n        # such that we can do, e.g. Nominal(values=list(\"abc\")) and know that \"a\"\n        # will always map to 0. Currently, the first value to appear in the data\n        # would be assigned to 0, but if that first value is \"b\", then \"a\" gets 1.\n        # This could be accomplished by, in that case, setting `units_seed` to\n        # [\"a\", \"b\", \"c\"] and ignoring the data. But we'd need to make sure that\n        # specifying `values` doesn't break anything in _setup_ticks.\n\n        # TODO Currently, Nominal allows values to be strings or numbers (or any\n        # hashable), but Ordinal requires numbers. This is a historical artifact,\n        # and we should be more consistent. (It also makes the typing harder).\n\n        # We need to populate the locators and formatters before defining CatScale\n        # so they are available in the proper scope\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We need some way to communicate the tick params to matplotlib\n        # We could do this by setting them on the Axis object, but that would\n        # require us to pass the Axis object around, which is not ideal.\n        # We could also do this by setting them on the Scale object, but that\n        # would require us to define our own Scale subclass, which is not ideal.\n        # We could also do this by setting them on the Property object, but that\n        # would require us to pass the Property object around, which is not ideal.\n        # We could also do this by setting them on the data object, but that\n        # would require us to define our own data object, which is not ideal.\n        # We could also do this by setting them on the units_seed object, but that\n        # would require us to define our own units_seed object, which is not ideal.\n\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n"
    ],
    "Location 3 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 176-185)": [
      "\n        # TODO We need some way to configure the locator and formatter. The\n        # current approach is to have the Coordinate object pass information to\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We need some sort of comprehensive rethink of how to go from\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We need some sort of transform of the spaces between the\n        # different categories. For now, we'll just use a linear scale\n        # with some padding. This is a bit of a hack, but it should work\n        # for now. We'll need to revisit this when we have a better\n        # understanding of how we want to handle categorical scales.\n        # The issue is that we need to know the number of categories\n        # in order to set up the scale properly. We could potentially\n        # pass a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We need some decision about whether/how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We need some decision about whether/how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We want to distinguish between a user explicitly setting 0 / 1\n        # limits and an explicit specification that should be honored.\n        # We should also be able to accomplish this at the Coordinate level\n        # We may also want to allow expand margins different from 0\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We need some sort of FixedLocator for the ticks, I think?\n        # TODO ideally matplotlib would expose the margin setting on a\n        # scale object, but it's currently only accessible through Axes\n        # But we don't get an axes object passed here...\n        # We might be able to work around this by setting the view limits\n        # on the PseudoAxis (may need to enhance that class)\n\n        # For now, we'll construct the locators and formatters here\n        # TODO Note that this needs to be coordinated with the logic in Grid.apply\n        # and it needs to use the tick() interface that is defined on Scale\n        # We may decide we don't want to have this interface if we can push\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n",
      "\n        # TODO We'll want to add logic for computing an appropriate margin,\n        # especially for text that may extend beyond the nominal coordinates.\n        # We may also want to have some vertical spacing between axis labels\n        # and a plot when we aren't drawing a full box.\n        # More broadly, we'll need to have some way of ensuring that we have\n        # sufficient margin on a subplot when we have ticklabels. Maybe that\n        # is where we add the margin (since that's about the coordinate system\n        # that's getting mapped to screen space), or maybe it's at the level of\n        # the Subplots object. Hard to say at this point.\n\n        # TODO array casting? Currently assuming int/string, but what about\n        # more exotic data types (e.g. datetime)\n\n        # TODO This all needs to be thought through more carefully.\n        # Especially, do we want to pass a unit dictionary down to these methods,\n        # along with how much we want to invest in their API. What is it useful\n        # for tick() to do here? (Ordinal may be different if we draw that\n        # contrast). Any customization we do to allow, e.g., label wrapping will\n        # probably require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n"
    ],
    "Location 4 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 192-194)": [
      "\n        if axis is not None:\n            major_locator = mpl.ticker.FixedLocator(np.arange(len(units_seed)))\n            major_formatter = mpl.ticker.FixedFormatter(units_seed)\n\n            class CatScale(mpl.scale.LinearScale):\n                name = \"category\"\n\n                def set_default_locators_and_formatters(self, axis):\n                    axis.set_major_locator(major_locator)\n                    axis.set_major_formatter(major_formatter)\n                    # Suppress minor ticks and grid for categorical scales\n                    axis.set_minor_locator(mpl.ticker.NullLocator())\n\n        else:\n            class CatScale(mpl.scale.LinearScale):\n                name = \"category\"\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            # Set categorical margins: extend by 0.5 units on each side\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n        # Use a pseudo-continuous scale to compute the ticks, but then replace\n        # the axis formatter / locator with categorical versions\n\n        # TODO we want to allow the user to control this\n        # (specifically to turn off ticks / labels)\n        locator = mpl.ticker.FixedLocator(range(len(units_seed)))\n        formatter = mpl.ticker.FixedFormatter(stringify(np.array(units_seed)))\n        \n        class CatScale(mpl.scale.LinearScale):\n            name = \"categorical\"\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(locator)\n                axis.set_major_formatter(formatter)\n                # Suppress minor ticks for categorical data\n                axis.set_minor_locator(mpl.ticker.NullLocator())\n                # Suppress grid lines for categorical data\n                axis.grid(False)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            # Set view interval with 0.5 margin on each side for categorical spacing\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n            if axis is not None:\n                major_locator = mpl.ticker.FixedLocator(locs)\n                major_formatter = mpl.ticker.FixedFormatter([f\"{x}\" for x in units_seed])\n                \n                class CatScale(mpl.scale.LinearScale):\n                    name = \"categorical\"\n                    \n                    def set_default_locators_and_formatters(self, axis):\n                        axis.set_major_locator(major_locator)\n                        axis.set_major_formatter(major_formatter)\n                        # Suppress minor ticks for categorical data\n                        axis.set_minor_locator(mpl.ticker.NullLocator())\n                \n                # if minor_locator is not None:\n                #     axis.set_minor_locator(minor_locator)\n                # axis.set_major_formatter(major_formatter)\n            else:\n                class CatScale(mpl.scale.LinearScale):\n                    name = \"categorical\"\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            # Set view interval with categorical margins (-0.5 to n-0.5)\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n        # Create the locators and formatters in the proper scope\n        major_locator = mpl.ticker.FixedLocator(np.arange(len(units_seed)))\n        major_formatter = mpl.ticker.FixedFormatter(stringify(units_seed))\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                # if minor_locator is not None:\n                #     axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n                # if minor_locator is not None:\n                #     axis.set_minor_locator(minor_locator)\n                # axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n        if axis is not None:\n            major_locator = mpl.ticker.FixedLocator(locs)\n            major_formatter = mpl.ticker.FixedFormatter(labels)\n\n            class CatScale(mpl.scale.LinearScale):\n                name = \"category\"\n\n                def set_default_locators_and_formatters(self, axis):\n                    axis.set_major_locator(major_locator)\n                    axis.set_major_formatter(major_formatter)\n                    # Suppress minor ticks and grid for categorical data\n                    axis.set_minor_locator(mpl.ticker.NullLocator())\n\n            mpl_scale = CatScale(data.name)\n        else:\n            # For PseudoAxis case, create a simpler version\n            class CatScale(mpl.scale.LinearScale):\n                name = \"category\"\n\n            mpl_scale = CatScale(data.name)\n\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            # Set view interval with categorical margins (+/- 0.5 from first/last)\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n        # Use fixed locator/formatter for categorical data\n        major_locator = mpl.ticker.FixedLocator(locs)\n        major_formatter = mpl.ticker.FixedFormatter(labels)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = \"categorical\"\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                axis.set_major_formatter(major_formatter)\n                # Suppress minor ticks for categorical data\n                axis.set_minor_locator(mpl.ticker.NullLocator())\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            # Set view interval with 0.5 margin on each side for categorical spacing\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n",
      "\n        major_locator = mpl.ticker.FixedLocator(locs)\n        major_formatter = mpl.ticker.FixedFormatter([str(x) for x in order])\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                # if minor_locator is not None:\n                #     axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n"
    ],
    "Location 5 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 149-228)": [
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n",
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n",
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n",
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n",
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n",
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n",
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n",
      "\n    def _setup(\n        self, data: Series, prop: Property, axis: Axis | None = None,\n    ) -> Scale:\n\n        new = copy(self)\n        if new._tick_params is None:\n            new = new.tick()\n        if new._label_params is None:\n            new = new.label()\n\n        # TODO flexibility over format() which isn't great for numbers / dates\n        stringify = np.vectorize(format)\n\n        units_seed = categorical_order(data, new.order)\n\n        # TODO move to Nominal._get_scale?\n        # TODO this needs some more complicated rethinking about how to pass\n        # a unit dictionary down to these methods, along with how much we want\n        # to invest in their API. What is it useful for tick() to do here?\n        # (Ordinal may be different if we draw that contrast).\n        # Any customization we do to allow, e.g., label wrapping will probably\n        # require defining our own Formatter subclass.\n        # We could also potentially implement auto-wrapping in an Axis subclass\n        # (see Axis.draw ... it already is computing the bboxes).\n        major_locator, minor_locator = new._get_locators(**new._tick_params)\n        major_formatter = new._get_formatter(major_locator, **new._label_params)\n\n        class CatScale(mpl.scale.LinearScale):\n            name = None  # To work around mpl<3.4 compat issues\n\n            def set_default_locators_and_formatters(self, axis):\n                axis.set_major_locator(major_locator)\n                if minor_locator is not None:\n                    axis.set_minor_locator(minor_locator)\n                axis.set_major_formatter(major_formatter)\n\n        mpl_scale = CatScale(data.name)\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n\n            # TODO Currently just used in non-Coordinate contexts, but should\n            # we use this to (A) set the padding we want for categorial plots\n            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n\n        new._matplotlib_scale = mpl_scale\n\n        # TODO array cast necessary to handle float/int mixture, which we need\n        # to solve in a more systematic way probably\n        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n        axis.update_units(stringify(np.array(units_seed)))\n\n        # TODO define this more centrally\n        def convert_units(x):\n            # TODO only do this with explicit order?\n            # (But also category dtype?)\n            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n            # keep = x.isin(units_seed)\n            keep = np.array([x_ in units_seed for x_ in x], bool)\n            out = np.full(len(x), np.nan)\n            out[keep] = axis.convert_units(stringify(x[keep]))\n            return out\n\n        new._pipeline = [\n            convert_units,\n            prop.get_mapping(new, data),\n            # TODO how to handle color representation consistency?\n        ]\n\n        def spacer(x):\n            return 1\n\n        new._spacer = spacer\n\n        if prop.legend:\n            new._legend = units_seed, list(stringify(units_seed))\n\n        return new\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..519fbf8a 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,17 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,7 +190,7 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n \n         new._matplotlib_scale = mpl_scale\n \n",
    "variant_0": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..1bdf2fa7 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,17 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +190,87 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+            def set_default_locators_and_formatters(self, axis):\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+            # Use unit categories for tick positions and labels\n+            units = categorical_order(data, order)\n+            if reverse:\n+                units = units[::-1]\n+\n+            # TODO array cast necessary to handle float/int mixture, which we need\n+            # to solve in a more systematic way probably\n+            # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+            units_seed = np.array(units)\n+\n+            major_locator = mpl.ticker.FixedLocator(np.arange(len(units)))\n+            major_formatter = mpl.ticker.FixedFormatter(units)\n+\n+            class CatScale(mpl.scale.LinearScale):\n+                name = None  # To work around mpl<3.4 compat issues\n \n+                def set_default_locators_and_formatters(self, axis):\n+                    axis.set_major_locator(major_locator)\n+                    axis.set_major_formatter(major_formatter)\n+                    # TODO we could make this configurable\n+                    # if minor_locator is not None:\n+                    #     axis.set_minor_locator(minor_locator)\n+                    # axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_1": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..1d6372c0 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,17 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +190,83 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n \n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+        if axis is not None:\n+            major_locator = mpl.ticker.FixedLocator(np.arange(len(units_seed)))\n+            major_formatter = mpl.ticker.FixedFormatter(units_seed)\n+\n+            class CatScale(mpl.scale.LinearScale):\n+                name = \"category\"\n+\n+                def set_default_locators_and_formatters(self, axis):\n+                    axis.set_major_locator(major_locator)\n+                    axis.set_major_formatter(major_formatter)\n+                    # Suppress minor ticks and grid for categorical scales\n+                    axis.set_minor_locator(mpl.ticker.NullLocator())\n+\n+        else:\n+            class CatScale(mpl.scale.LinearScale):\n+                name = \"category\"\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            # Set categorical margins: extend by 0.5 units on each side\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_2": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..34dd5ebe 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,17 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +190,82 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n \n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+        # Use a pseudo-continuous scale to compute the ticks, but then replace\n+        # the axis formatter / locator with categorical versions\n+\n+        # TODO we want to allow the user to control this\n+        # (specifically to turn off ticks / labels)\n+        locator = mpl.ticker.FixedLocator(range(len(units_seed)))\n+        formatter = mpl.ticker.FixedFormatter(stringify(np.array(units_seed)))\n+        \n+        class CatScale(mpl.scale.LinearScale):\n+            name = \"categorical\"\n+\n+            def set_default_locators_and_formatters(self, axis):\n+                axis.set_major_locator(locator)\n+                axis.set_major_formatter(formatter)\n+                # Suppress minor ticks for categorical data\n+                axis.set_minor_locator(mpl.ticker.NullLocator())\n+                # Suppress grid lines for categorical data\n+                axis.grid(False)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            # Set view interval with 0.5 margin on each side for categorical spacing\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_3": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..9dd72f57 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,89 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+            if axis is not None:\n+                major_locator = mpl.ticker.FixedLocator(locs)\n+                major_formatter = mpl.ticker.FixedFormatter([f\"{x}\" for x in units_seed])\n+                \n+                class CatScale(mpl.scale.LinearScale):\n+                    name = \"categorical\"\n+                    \n+                    def set_default_locators_and_formatters(self, axis):\n+                        axis.set_major_locator(major_locator)\n+                        axis.set_major_formatter(major_formatter)\n+                        # Suppress minor ticks for categorical data\n+                        axis.set_minor_locator(mpl.ticker.NullLocator())\n+                \n                 # if minor_locator is not None:\n                 #     axis.set_minor_locator(minor_locator)\n                 # axis.set_major_formatter(major_formatter)\n+            else:\n+                class CatScale(mpl.scale.LinearScale):\n+                    name = \"categorical\"\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +262,8 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n-\n+            # Set view interval with categorical margins (-0.5 to n-0.5)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_4": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..a71e5aa1 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,82 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+        # Create the locators and formatters in the proper scope\n+        major_locator = mpl.ticker.FixedLocator(np.arange(len(units_seed)))\n+        major_formatter = mpl.ticker.FixedFormatter(stringify(units_seed))\n+\n+        class CatScale(mpl.scale.LinearScale):\n+            name = None  # To work around mpl<3.4 compat issues\n+\n+            def set_default_locators_and_formatters(self, axis):\n+                axis.set_major_locator(major_locator)\n                 # if minor_locator is not None:\n                 #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +255,7 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n-\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_5": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..fbaa1aef 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,15 +171,64 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n                 # if minor_locator is not None:\n                 #     axis.set_minor_locator(minor_locator)\n                 # axis.set_major_formatter(major_formatter)\n@@ -190,8 +240,7 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n-\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_6": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..7011ce1c 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,17 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +190,82 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n \n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+        if axis is not None:\n+            major_locator = mpl.ticker.FixedLocator(locs)\n+            major_formatter = mpl.ticker.FixedFormatter(labels)\n+\n+            class CatScale(mpl.scale.LinearScale):\n+                name = \"category\"\n+\n+                def set_default_locators_and_formatters(self, axis):\n+                    axis.set_major_locator(major_locator)\n+                    axis.set_major_formatter(major_formatter)\n+                    # Suppress minor ticks and grid for categorical data\n+                    axis.set_minor_locator(mpl.ticker.NullLocator())\n+\n+            mpl_scale = CatScale(data.name)\n+        else:\n+            # For PseudoAxis case, create a simpler version\n+            class CatScale(mpl.scale.LinearScale):\n+                name = \"category\"\n+\n+            mpl_scale = CatScale(data.name)\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            # Set view interval with categorical margins (+/- 0.5 from first/last)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_7": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..28836957 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,17 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +190,87 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n \n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+        # and we should be more consistent. (It also makes the typing harder).\n+\n+        # We need to populate the locators and formatters before defining CatScale\n+        # so they are available in the proper scope\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n+\n+        class CatScale(mpl.scale.LinearScale):\n+            name = None  # To work around mpl<3.4 compat issues\n+\n+            def set_default_locators_and_formatters(self, axis):\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+        # Use fixed locator/formatter for categorical data\n+        major_locator = mpl.ticker.FixedLocator(locs)\n+        major_formatter = mpl.ticker.FixedFormatter(labels)\n+\n+        class CatScale(mpl.scale.LinearScale):\n+            name = \"categorical\"\n+\n+            def set_default_locators_and_formatters(self, axis):\n+                axis.set_major_locator(major_locator)\n+                axis.set_major_formatter(major_formatter)\n+                # Suppress minor ticks for categorical data\n+                axis.set_minor_locator(mpl.ticker.NullLocator())\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            # Set view interval with 0.5 margin on each side for categorical spacing\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n",
    "variant_8": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..340ce67c 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -146,6 +146,7 @@ class Nominal(Scale):\n \n     _priority: ClassVar[int] = 3\n \n+\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n@@ -170,18 +171,100 @@ class Nominal(Scale):\n         # require defining our own Formatter subclass.\n         # We could also potentially implement auto-wrapping in an Axis subclass\n         # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n+\n+        class CatScale(mpl.scale.LinearScale):\n+            name = None  # To work around mpl<3.4 compat issues\n+\n+            def set_default_locators_and_formatters(self, axis):\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+\n+        new._matplotlib_scale = mpl_scale\n+\n+        # TODO array cast necessary to handle float/int mixture, which we need\n+        # to solve in a more systematic way probably\n+        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n+        axis.update_units(stringify(np.array(units_seed)))\n+\n+        # TODO define this more centrally\n+        def convert_units(x):\n+            # TODO only do this with explicit order?\n+            # (But also category dtype?)\n+            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n+            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n+            # keep = x.isin(units_seed)\n+            keep = np.array([x_ in units_seed for x_ in x], bool)\n+            out = np.full(len(x), np.nan)\n+            out[keep] = axis.convert_units(stringify(x[keep]))\n+            return out\n+\n+        new._pipeline = [\n+            convert_units,\n+            prop.get_mapping(new, data),\n+            # TODO how to handle color representation consistency?\n+        ]\n+\n+        def spacer(x):\n+            return 1\n+\n+        new._spacer = spacer\n+\n+        if prop.legend:\n+            new._legend = units_seed, list(stringify(units_seed))\n+\n+        return new\n+        # We could also do this by setting them on the data object, but that\n+        # would require us to define our own data object, which is not ideal.\n+        # We could also do this by setting them on the units_seed object, but that\n+        # would require us to define our own units_seed object, which is not ideal.\n+\n+        # Any customization we do to allow, e.g., label wrapping will probably\n+        # require defining our own Formatter subclass.\n+        # We could also potentially implement auto-wrapping in an Axis subclass\n+        # (see Axis.draw ... it already is computing the bboxes).\n+        major_locator, minor_locator = new._get_locators(**new._tick_params)\n+        major_formatter = new._get_formatter(major_locator, **new._label_params)\n \n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+        mpl_scale = CatScale(data.name)\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+\n+            # TODO Currently just used in non-Coordinate contexts, but should\n+            # we use this to (A) set the padding we want for categorial plots\n+\n+        major_locator = mpl.ticker.FixedLocator(locs)\n+        major_formatter = mpl.ticker.FixedFormatter([str(x) for x in order])\n+\n+        class CatScale(mpl.scale.LinearScale):\n+            name = None  # To work around mpl<3.4 compat issues\n+\n+            def set_default_locators_and_formatters(self, axis):\n+                axis.set_major_locator(major_locator)\n                 # if minor_locator is not None:\n                 #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,8 +273,7 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n-\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n \n         # TODO array cast necessary to handle float/int mixture, which we need\n"
  }
}