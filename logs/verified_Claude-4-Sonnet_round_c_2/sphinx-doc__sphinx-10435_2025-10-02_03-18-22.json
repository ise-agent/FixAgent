{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 1704-1704)": "\n    def visit_literal(self, node: Element) -> None:\n        if self.in_title:\n            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n            return\n        elif 'kbd' in node['classes']:\n            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n            return\n        lang = node.get(\"language\", None)\n        if 'code' not in node['classes'] or not lang:\n            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n            return\n\n        opts = self.config.highlight_options.get(lang, {})\n        hlcode = self.highlighter.highlight_block(\n            node.astext(), lang, opts=opts, location=node)\n        # TODO: Use nowrap option once LaTeX formatter supports it\n        # https://github.com/pygments/pygments/pull/1343\n        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                                r'\\sphinxcode{\\sphinxupquote{')\n        # get consistent trailer\n",
    "Location 2 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 1721-1721)": "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
    "Location 3 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 724-724)": "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
    "Location 4 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 727-727)": "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
    "Location 5 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 741-745)": "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 1704-1704)": [
      "\n    def visit_literal(self, node: Element) -> None:\n        if self.in_title:\n            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n            return\n        elif 'kbd' in node['classes']:\n            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n            return\n        lang = node.get(\"language\", None)\n        if 'code' not in node['classes'] or not lang:\n            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n            return\n\n        opts = self.config.highlight_options.get(lang, {})\n        hlcode = self.highlighter.highlight_block(\n            node.astext(), lang, opts=opts, location=node)\n        # TODO: Use nowrap option once LaTeX formatter supports it\n        # https://github.com/pygments/pygments/pull/1343\n        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                                r'\\sphinxcode{\\sphinxupquote{')\n        # get consistent trailer\n",
      "\ndef visit_literal(self, node: Element) -> None:\n    if self.in_title:\n        self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n        return\n    elif 'kbd' in node['classes']:\n        self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n        return\n    lang = node.get(\"language\", None)\n    if 'code' not in node['classes'] or not lang:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        return\n\n    opts = self.config.highlight_options.get(lang, {})\n    hlcode = self.highlighter.highlight_block(\n        node.astext(), lang, opts=opts, location=node)\n    # TODO: Use nowrap option once LaTeX formatter supports it\n    # https://github.com/pygments/pygments/pull/1343\n    hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                            r'\\sphinxcode{\\sphinxupquote{')\n    # get consistent trailer\n",
      "\ndef visit_literal(self, node: Element) -> None:\n    if self.in_title:\n        self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n        return\n    elif 'kbd' in node['classes']:\n        self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n        return\n    lang = node.get(\"language\", None)\n    if 'code' not in node['classes'] or not lang:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        return\n\n    opts = self.config.highlight_options.get(lang, {})\n    hlcode = self.highlighter.highlight_block(\n        node.astext(), lang, opts=opts, location=node)\n    # TODO: Use nowrap option once LaTeX formatter supports it\n    # https://github.com/pygments/pygments/pull/1343\n    hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                            r'\\sphinxcode{\\sphinxupquote{')\n    # get consistent trailer\n",
      "\ndef visit_literal(self, node: Element) -> None:\n    if self.in_title:\n        self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n        return\n    elif 'kbd' in node['classes']:\n        self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n        return\n    lang = node.get(\"language\", None)\n    if 'code' not in node['classes'] or not lang:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        return\n\n    opts = self.config.highlight_options.get(lang, {})\n    hlcode = self.highlighter.highlight_block(\n        node.astext(), lang, opts=opts, location=node)\n    # TODO: Use nowrap option once LaTeX formatter supports it\n    # https://github.com/pygments/pygments/pull/1343\n    hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                            r'\\sphinxcode{\\sphinxupquote{')\n    # get consistent trailer\n",
      "\n    def visit_literal(self, node: Element) -> None:\n        if self.in_title:\n            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n            return\n        elif 'kbd' in node['classes']:\n            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n            return\n        lang = node.get(\"language\", None)\n        if 'code' not in node['classes'] or not lang:\n            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n            return\n\n        opts = self.config.highlight_options.get(lang, {})\n        hlcode = self.highlighter.highlight_block(\n            node.astext(), lang, opts=opts, location=node)\n        # TODO: Use nowrap option once LaTeX formatter supports it\n        # https://github.com/pygments/pygments/pull/1343\n        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                                r'\\sphinxcode{\\sphinxupquote{')\n        # get consistent trailer\n",
      "\n    def visit_literal(self, node: Element) -> None:\n        if self.in_title:\n            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n            return\n        elif 'kbd' in node['classes']:\n            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n            return\n        lang = node.get(\"language\", None)\n        if 'code' not in node['classes'] or not lang:\n            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n            return\n\n        opts = self.config.highlight_options.get(lang, {})\n        hlcode = self.highlighter.highlight_block(\n            node.astext(), lang, opts=opts, location=node)\n        # TODO: Use nowrap option once LaTeX formatter supports it\n        # https://github.com/pygments/pygments/pull/1343\n        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                                r'\\sphinxcode{\\sphinxupquote{')\n        # get consistent trailer\n",
      "\n    def visit_literal(self, node: Element) -> None:\n        if self.in_title:\n            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n            return\n        elif 'kbd' in node['classes']:\n            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n            return\n        lang = node.get(\"language\", None)\n        if 'code' not in node['classes'] or not lang:\n            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n            return\n\n        opts = self.config.highlight_options.get(lang, {})\n        hlcode = self.highlighter.highlight_block(\n            node.astext(), lang, opts=opts, location=node)\n        # TODO: Use nowrap option once LaTeX formatter supports it\n        # https://github.com/pygments/pygments/pull/1343\n        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                                r'\\sphinxcode{\\sphinxupquote{')\n        # get consistent trailer\n",
      "\n    def visit_literal(self, node: Element) -> None:\n        if self.in_title:\n            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n            return\n        elif 'kbd' in node['classes']:\n            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n            return\n        lang = node.get(\"language\", None)\n        if 'code' not in node['classes'] or not lang:\n            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n            return\n\n        opts = self.config.highlight_options.get(lang, {})\n        hlcode = self.highlighter.highlight_block(\n            node.astext(), lang, opts=opts, location=node)\n        # TODO: Use nowrap option once LaTeX formatter supports it\n        # https://github.com/pygments/pygments/pull/1343\n        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                                r'\\sphinxcode{\\sphinxupquote{')\n        # get consistent trailer\n"
    ],
    "Location 2 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 1721-1721)": [
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_literal(self, node: Element) -> None:\n        self.body.append('%}}')\n"
    ],
    "Location 3 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 724-724)": [
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n",
      "\n    def visit_desc_inline(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n"
    ],
    "Location 4 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 727-727)": [
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n",
      "\n    def depart_desc_inline(self, node: Element) -> None:\n        self.body.append('%}}')\n"
    ],
    "Location 5 (/root/hy/projects/sphinx/sphinx/writers/latex.py lines 741-745)": [
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n",
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n",
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n",
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n",
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n",
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n",
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n",
      "\n    def visit_desc_addname(self, node: Element) -> None:\n        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n        self.literal_whitespace += 1\n\n    def depart_desc_addname(self, node: Element) -> None:\n        self.body.append('%}}')\n        self.literal_whitespace -= 1\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..1dfe68f9e 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,12 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +740,12 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1704,8 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1722,8 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_0": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..120da8db7 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_literal(self, node: Element) -> None:\n+        if self.in_title:\n+            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+            return\n+        elif 'kbd' in node['classes']:\n+            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+            return\n+        lang = node.get(\"language\", None)\n+        if 'code' not in node['classes'] or not lang:\n+            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+            return\n+\n+        opts = self.config.highlight_options.get(lang, {})\n+        hlcode = self.highlighter.highlight_block(\n+            node.astext(), lang, opts=opts, location=node)\n+        # TODO: Use nowrap option once LaTeX formatter supports it\n+        # https://github.com/pygments/pygments/pull/1343\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                                r'\\sphinxcode{\\sphinxupquote{')\n+        # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_1": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..120da8db7 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_literal(self, node: Element) -> None:\n+        if self.in_title:\n+            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+            return\n+        elif 'kbd' in node['classes']:\n+            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+            return\n+        lang = node.get(\"language\", None)\n+        if 'code' not in node['classes'] or not lang:\n+            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+            return\n+\n+        opts = self.config.highlight_options.get(lang, {})\n+        hlcode = self.highlighter.highlight_block(\n+            node.astext(), lang, opts=opts, location=node)\n+        # TODO: Use nowrap option once LaTeX formatter supports it\n+        # https://github.com/pygments/pygments/pull/1343\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                                r'\\sphinxcode{\\sphinxupquote{')\n+        # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_2": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..17f8f6390 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+def visit_literal(self, node: Element) -> None:\n+    if self.in_title:\n+        self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+        return\n+    elif 'kbd' in node['classes']:\n+        self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+        return\n+    lang = node.get(\"language\", None)\n+    if 'code' not in node['classes'] or not lang:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+        return\n+\n+    opts = self.config.highlight_options.get(lang, {})\n+    hlcode = self.highlighter.highlight_block(\n+        node.astext(), lang, opts=opts, location=node)\n+    # TODO: Use nowrap option once LaTeX formatter supports it\n+    # https://github.com/pygments/pygments/pull/1343\n+    hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                            r'\\sphinxcode{\\sphinxupquote{')\n+    # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_3": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..17f8f6390 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+def visit_literal(self, node: Element) -> None:\n+    if self.in_title:\n+        self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+        return\n+    elif 'kbd' in node['classes']:\n+        self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+        return\n+    lang = node.get(\"language\", None)\n+    if 'code' not in node['classes'] or not lang:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+        return\n+\n+    opts = self.config.highlight_options.get(lang, {})\n+    hlcode = self.highlighter.highlight_block(\n+        node.astext(), lang, opts=opts, location=node)\n+    # TODO: Use nowrap option once LaTeX formatter supports it\n+    # https://github.com/pygments/pygments/pull/1343\n+    hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                            r'\\sphinxcode{\\sphinxupquote{')\n+    # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_4": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..17f8f6390 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+def visit_literal(self, node: Element) -> None:\n+    if self.in_title:\n+        self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+        return\n+    elif 'kbd' in node['classes']:\n+        self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+        return\n+    lang = node.get(\"language\", None)\n+    if 'code' not in node['classes'] or not lang:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+        return\n+\n+    opts = self.config.highlight_options.get(lang, {})\n+    hlcode = self.highlighter.highlight_block(\n+        node.astext(), lang, opts=opts, location=node)\n+    # TODO: Use nowrap option once LaTeX formatter supports it\n+    # https://github.com/pygments/pygments/pull/1343\n+    hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                            r'\\sphinxcode{\\sphinxupquote{')\n+    # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_5": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..120da8db7 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_literal(self, node: Element) -> None:\n+        if self.in_title:\n+            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+            return\n+        elif 'kbd' in node['classes']:\n+            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+            return\n+        lang = node.get(\"language\", None)\n+        if 'code' not in node['classes'] or not lang:\n+            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+            return\n+\n+        opts = self.config.highlight_options.get(lang, {})\n+        hlcode = self.highlighter.highlight_block(\n+            node.astext(), lang, opts=opts, location=node)\n+        # TODO: Use nowrap option once LaTeX formatter supports it\n+        # https://github.com/pygments/pygments/pull/1343\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                                r'\\sphinxcode{\\sphinxupquote{')\n+        # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_6": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..120da8db7 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_literal(self, node: Element) -> None:\n+        if self.in_title:\n+            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+            return\n+        elif 'kbd' in node['classes']:\n+            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+            return\n+        lang = node.get(\"language\", None)\n+        if 'code' not in node['classes'] or not lang:\n+            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+            return\n+\n+        opts = self.config.highlight_options.get(lang, {})\n+        hlcode = self.highlighter.highlight_block(\n+            node.astext(), lang, opts=opts, location=node)\n+        # TODO: Use nowrap option once LaTeX formatter supports it\n+        # https://github.com/pygments/pygments/pull/1343\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                                r'\\sphinxcode{\\sphinxupquote{')\n+        # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_7": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..120da8db7 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_literal(self, node: Element) -> None:\n+        if self.in_title:\n+            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+            return\n+        elif 'kbd' in node['classes']:\n+            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+            return\n+        lang = node.get(\"language\", None)\n+        if 'code' not in node['classes'] or not lang:\n+            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+            return\n+\n+        opts = self.config.highlight_options.get(lang, {})\n+        hlcode = self.highlighter.highlight_block(\n+            node.astext(), lang, opts=opts, location=node)\n+        # TODO: Use nowrap option once LaTeX formatter supports it\n+        # https://github.com/pygments/pygments/pull/1343\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                                r'\\sphinxcode{\\sphinxupquote{')\n+        # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n",
    "variant_8": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..120da8db7 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,14 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_inline(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_desc_inline(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n@@ -738,11 +742,14 @@ class LaTeXTranslator(SphinxTranslator):\n         self.literal_whitespace -= 1\n \n     def visit_desc_addname(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_desc_addname(self, node: Element) -> None:\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.literal_whitespace += 1\n \n     def depart_desc_addname(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('%}}')\n+        self.literal_whitespace -= 1\n         self.literal_whitespace -= 1\n \n     def visit_desc_type(self, node: Element) -> None:\n@@ -1701,7 +1708,27 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         lang = node.get(\"language\", None)\n         if 'code' not in node['classes'] or not lang:\n-            self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+\n+    def visit_literal(self, node: Element) -> None:\n+        if self.in_title:\n+            self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n+            return\n+        elif 'kbd' in node['classes']:\n+            self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n+            return\n+        lang = node.get(\"language\", None)\n+        if 'code' not in node['classes'] or not lang:\n+            self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n+            return\n+\n+        opts = self.config.highlight_options.get(lang, {})\n+        hlcode = self.highlighter.highlight_block(\n+            node.astext(), lang, opts=opts, location=node)\n+        # TODO: Use nowrap option once LaTeX formatter supports it\n+        # https://github.com/pygments/pygments/pull/1343\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n+                                r'\\sphinxcode{\\sphinxupquote{')\n+        # get consistent trailer\n             return\n \n         opts = self.config.highlight_options.get(lang, {})\n@@ -1718,7 +1745,9 @@ class LaTeXTranslator(SphinxTranslator):\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n-        self.body.append('}}')\n+\n+    def depart_literal(self, node: Element) -> None:\n+        self.body.append('%}}')\n \n     def visit_footnote_reference(self, node: Element) -> None:\n         raise nodes.SkipNode\n"
  }
}