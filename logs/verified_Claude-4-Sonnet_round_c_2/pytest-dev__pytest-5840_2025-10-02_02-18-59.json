{
  "zero_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/pathlib.py lines 340-346)": "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
    "Location 2 (/root/hy/projects/pytest/src/_pytest/config/__init__.py lines 434-446)": "\n    def _importconftest(self, conftestpath):\n        # Use realpath to avoid loading the same conftest twice\n        # with build systems that create build directories containing\n        # symlinks to actual files.\n        conftestpath = unique_path(conftestpath)\n        try:\n            return self._conftestpath2mod[conftestpath]\n        except KeyError:\n            pkgpath = conftestpath.pypkgpath()\n            if pkgpath is None:\n                _ensure_removed_sysmodule(conftestpath.purebasename)\n            try:\n                mod = conftestpath.pyimport()\n",
    "Location 3 (/root/hy/projects/pytest/src/_pytest/config/__init__.py lines 367-373)": "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
    "Location 4 (/root/hy/projects/pytest/src/_pytest/config/__init__.py lines 406-412)": "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/pathlib.py lines 340-346)": [
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n",
      "\ndef unique_path(path):\n    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n    systems such as Windows.\n\n    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n    natively with ``resolve()``.\"\"\"\n    return type(path)(str(path.realpath()))\n"
    ],
    "Location 2 (/root/hy/projects/pytest/src/_pytest/config/__init__.py lines 434-446)": [
      "\n    def _importconftest(self, conftestpath):\n        # Use realpath to avoid loading the same conftest twice\n        # with build systems that create build directories containing\n        # symlinks to actual files.\n        conftestpath = unique_path(conftestpath)\n        try:\n            return self._conftestpath2mod[conftestpath]\n        except KeyError:\n            pkgpath = conftestpath.pypkgpath()\n            if pkgpath is None:\n                _ensure_removed_sysmodule(conftestpath.purebasename)\n            try:\n                mod = conftestpath.pyimport()\n",
      "\ndef _importconftest(self, conftestpath):\n    # Use realpath to avoid loading the same conftest twice\n    # with build systems that create build directories containing\n    # symlinks to actual files.\n    conftestpath = unique_path(conftestpath)\n    try:\n        return self._conftestpath2mod[conftestpath]\n    except KeyError:\n        pkgpath = conftestpath.pypkgpath()\n        if pkgpath is None:\n            _ensure_removed_sysmodule(conftestpath.purebasename)\n        try:\n            mod = conftestpath.pyimport()\n",
      "\n    def _importconftest(self, conftestpath):\n        # Use realpath to avoid loading the same conftest twice\n        # with build systems that create build directories containing\n        # symlinks to actual files.\n        conftestpath = unique_path(conftestpath)\n        try:\n            return self._conftestpath2mod[conftestpath]\n        except KeyError:\n            pkgpath = conftestpath.pypkgpath()\n            if pkgpath is None:\n                _ensure_removed_sysmodule(conftestpath.purebasename)\n            try:\n                mod = conftestpath.pyimport()\n",
      "\n    def _importconftest(self, conftestpath):\n        # Use realpath to avoid loading the same conftest twice\n        # with build systems that create build directories containing\n        # symlinks to actual files.\n        conftestpath = unique_path(conftestpath)\n        try:\n            return self._conftestpath2mod[conftestpath]\n        except KeyError:\n            pkgpath = conftestpath.pypkgpath()\n            if pkgpath is None:\n                _ensure_removed_sysmodule(conftestpath.purebasename)\n            try:\n                mod = conftestpath.pyimport()\n",
      "\ndef _importconftest(self, conftestpath):\n    # Use realpath to avoid loading the same conftest twice\n    # with build systems that create build directories containing\n    # symlinks to actual files.\n    conftestpath = unique_path(conftestpath)\n    try:\n        return self._conftestpath2mod[conftestpath]\n    except KeyError:\n        pkgpath = conftestpath.pypkgpath()\n        if pkgpath is None:\n            _ensure_removed_sysmodule(conftestpath.purebasename)\n        try:\n            mod = conftestpath.pyimport()\n",
      "\ndef _importconftest(self, conftestpath):\n    # Use realpath to avoid loading the same conftest twice\n    # with build systems that create build directories containing\n    # symlinks to actual files.\n    conftestpath = unique_path(conftestpath)\n    try:\n        return self._conftestpath2mod[conftestpath]\n    except KeyError:\n        pkgpath = conftestpath.pypkgpath()\n        if pkgpath is None:\n            _ensure_removed_sysmodule(conftestpath.purebasename)\n        try:\n            mod = conftestpath.pyimport()\n",
      "\n    def _importconftest(self, conftestpath):\n        # Use realpath to avoid loading the same conftest twice\n        # with build systems that create build directories containing\n        # symlinks to actual files.\n        conftestpath = unique_path(conftestpath)\n        try:\n            return self._conftestpath2mod[conftestpath]\n        except KeyError:\n            pkgpath = conftestpath.pypkgpath()\n            if pkgpath is None:\n                _ensure_removed_sysmodule(conftestpath.purebasename)\n            try:\n                mod = conftestpath.pyimport()\n",
      "\ndef _importconftest(self, conftestpath):\n    # Use realpath to avoid loading the same conftest twice\n    # with build systems that create build directories containing\n    # symlinks to actual files.\n    conftestpath = unique_path(conftestpath)\n    try:\n        return self._conftestpath2mod[conftestpath]\n    except KeyError:\n        pkgpath = conftestpath.pypkgpath()\n        if pkgpath is None:\n            _ensure_removed_sysmodule(conftestpath.purebasename)\n        try:\n            mod = conftestpath.pyimport()\n"
    ],
    "Location 3 (/root/hy/projects/pytest/src/_pytest/config/__init__.py lines 367-373)": [
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n",
      "\n    def _set_initial_conftests(self, namespace):\n        \"\"\" load initial conftest files given a preparsed \"namespace\".\n            As conftest files may add their own command line options\n            which have arguments ('--my-opt somepath') we might get some\n            false positives.  All builtin and 3rd party plugins will have\n            been loaded, however, so common options will not confuse our logic\n            here.\n        \"\"\"\n        current = py.path.local()\n        self._confcutdir = (\n            unique_path(current.join(namespace.confcutdir, abs=True))\n            if namespace.confcutdir\n            else None\n        )\n"
    ],
    "Location 4 (/root/hy/projects/pytest/src/_pytest/config/__init__.py lines 406-412)": [
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n",
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n",
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n",
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n",
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n",
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n",
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n",
      "\n        else:\n            directory = path\n\n        directory = unique_path(directory)\n\n        # XXX these days we may rather want to use config.rootdir\n        # and allow users to opt into looking into the rootdir parent\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..92f8503be 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -364,6 +364,7 @@ class PytestPluginManager(PluginManager):\n             false positives.  All builtin and 3rd party plugins will have\n             been loaded, however, so common options will not confuse our logic\n             here.\n+\n         \"\"\"\n         current = py.path.local()\n         self._confcutdir = (\n@@ -403,6 +404,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,6 +433,7 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n+\n     def _importconftest(self, conftestpath):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_0": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..a5e82124f 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,6 +440,7 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n+\n     def _importconftest(self, conftestpath):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_1": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..a5e82124f 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,6 +440,7 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n+\n     def _importconftest(self, conftestpath):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_2": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..426f1260c 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,19 +440,20 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n-    def _importconftest(self, conftestpath):\n-        # Use realpath to avoid loading the same conftest twice\n-        # with build systems that create build directories containing\n-        # symlinks to actual files.\n-        conftestpath = unique_path(conftestpath)\n+\n+def _importconftest(self, conftestpath):\n+    # Use realpath to avoid loading the same conftest twice\n+    # with build systems that create build directories containing\n+    # symlinks to actual files.\n+    conftestpath = unique_path(conftestpath)\n+    try:\n+        return self._conftestpath2mod[conftestpath]\n+    except KeyError:\n+        pkgpath = conftestpath.pypkgpath()\n+        if pkgpath is None:\n+            _ensure_removed_sysmodule(conftestpath.purebasename)\n         try:\n-            return self._conftestpath2mod[conftestpath]\n-        except KeyError:\n-            pkgpath = conftestpath.pypkgpath()\n-            if pkgpath is None:\n-                _ensure_removed_sysmodule(conftestpath.purebasename)\n-            try:\n-                mod = conftestpath.pyimport()\n+            mod = conftestpath.pyimport()\n                 if (\n                     hasattr(mod, \"pytest_plugins\")\n                     and self._configured\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_3": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..a5e82124f 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,6 +440,7 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n+\n     def _importconftest(self, conftestpath):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_4": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..a5e82124f 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,6 +440,7 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n+\n     def _importconftest(self, conftestpath):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_5": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..426f1260c 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,19 +440,20 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n-    def _importconftest(self, conftestpath):\n-        # Use realpath to avoid loading the same conftest twice\n-        # with build systems that create build directories containing\n-        # symlinks to actual files.\n-        conftestpath = unique_path(conftestpath)\n+\n+def _importconftest(self, conftestpath):\n+    # Use realpath to avoid loading the same conftest twice\n+    # with build systems that create build directories containing\n+    # symlinks to actual files.\n+    conftestpath = unique_path(conftestpath)\n+    try:\n+        return self._conftestpath2mod[conftestpath]\n+    except KeyError:\n+        pkgpath = conftestpath.pypkgpath()\n+        if pkgpath is None:\n+            _ensure_removed_sysmodule(conftestpath.purebasename)\n         try:\n-            return self._conftestpath2mod[conftestpath]\n-        except KeyError:\n-            pkgpath = conftestpath.pypkgpath()\n-            if pkgpath is None:\n-                _ensure_removed_sysmodule(conftestpath.purebasename)\n-            try:\n-                mod = conftestpath.pyimport()\n+            mod = conftestpath.pyimport()\n                 if (\n                     hasattr(mod, \"pytest_plugins\")\n                     and self._configured\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_6": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..426f1260c 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,19 +440,20 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n-    def _importconftest(self, conftestpath):\n-        # Use realpath to avoid loading the same conftest twice\n-        # with build systems that create build directories containing\n-        # symlinks to actual files.\n-        conftestpath = unique_path(conftestpath)\n+\n+def _importconftest(self, conftestpath):\n+    # Use realpath to avoid loading the same conftest twice\n+    # with build systems that create build directories containing\n+    # symlinks to actual files.\n+    conftestpath = unique_path(conftestpath)\n+    try:\n+        return self._conftestpath2mod[conftestpath]\n+    except KeyError:\n+        pkgpath = conftestpath.pypkgpath()\n+        if pkgpath is None:\n+            _ensure_removed_sysmodule(conftestpath.purebasename)\n         try:\n-            return self._conftestpath2mod[conftestpath]\n-        except KeyError:\n-            pkgpath = conftestpath.pypkgpath()\n-            if pkgpath is None:\n-                _ensure_removed_sysmodule(conftestpath.purebasename)\n-            try:\n-                mod = conftestpath.pyimport()\n+            mod = conftestpath.pyimport()\n                 if (\n                     hasattr(mod, \"pytest_plugins\")\n                     and self._configured\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_7": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..a5e82124f 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,6 +440,7 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n+\n     def _importconftest(self, conftestpath):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n",
    "variant_8": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..426f1260c 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -357,6 +357,14 @@ class PytestPluginManager(PluginManager):\n     #\n     # internal API for local conftest plugin handling\n     #\n+    def _set_initial_conftests(self, namespace):\n+        \"\"\" load initial conftest files given a preparsed \"namespace\".\n+            As conftest files may add their own command line options\n+            which have arguments ('--my-opt somepath') we might get some\n+            false positives.  All builtin and 3rd party plugins will have\n+            been loaded, however, so common options will not confuse our logic\n+            here.\n+\n     def _set_initial_conftests(self, namespace):\n         \"\"\" load initial conftest files given a preparsed \"namespace\".\n             As conftest files may add their own command line options\n@@ -403,6 +411,7 @@ class PytestPluginManager(PluginManager):\n \n         if path.isfile():\n             directory = path.dirpath()\n+\n         else:\n             directory = path\n \n@@ -431,19 +440,20 @@ class PytestPluginManager(PluginManager):\n                 continue\n         raise KeyError(name)\n \n-    def _importconftest(self, conftestpath):\n-        # Use realpath to avoid loading the same conftest twice\n-        # with build systems that create build directories containing\n-        # symlinks to actual files.\n-        conftestpath = unique_path(conftestpath)\n+\n+def _importconftest(self, conftestpath):\n+    # Use realpath to avoid loading the same conftest twice\n+    # with build systems that create build directories containing\n+    # symlinks to actual files.\n+    conftestpath = unique_path(conftestpath)\n+    try:\n+        return self._conftestpath2mod[conftestpath]\n+    except KeyError:\n+        pkgpath = conftestpath.pypkgpath()\n+        if pkgpath is None:\n+            _ensure_removed_sysmodule(conftestpath.purebasename)\n         try:\n-            return self._conftestpath2mod[conftestpath]\n-        except KeyError:\n-            pkgpath = conftestpath.pypkgpath()\n-            if pkgpath is None:\n-                _ensure_removed_sysmodule(conftestpath.purebasename)\n-            try:\n-                mod = conftestpath.pyimport()\n+            mod = conftestpath.pyimport()\n                 if (\n                     hasattr(mod, \"pytest_plugins\")\n                     and self._configured\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..5aa43e198 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -337,10 +337,11 @@ def parts(s):\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n \n \n+\n def unique_path(path):\n     \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n     systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return type(path)(str(path.realpath()))\n"
  }
}