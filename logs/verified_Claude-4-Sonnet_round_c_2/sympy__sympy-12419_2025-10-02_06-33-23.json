{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/concrete/summations.py lines 177-178)": "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/concrete/summations.py lines 177-178)": [
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n",
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n",
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n",
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n",
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n",
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n",
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n",
      "\n    def doit(self, **hints):\n        if hints.get('deep', True):\n            f = self.function.doit(**hints)\n        else:\n            f = self.function\n\n        if self.function.is_Matrix and not isinstance(self.function, Sum):\n            return self.expand().doit()\n\n        for n, limit in enumerate(self.limits):\n            i, a, b = limit\n            dif = b - a\n            if dif.is_integer and (dif < 0) == True:\n                a, b = b + 1, a - 1\n                f = -f\n\n            newf = eval_sum(f, (i, a, b))\n            if newf is None:\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..410f906640 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,7 +174,8 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n         for n, limit in enumerate(self.limits):\n",
    "variant_0": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_1": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_2": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_3": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_4": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_5": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_6": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_7": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n",
    "variant_8": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..cf32eef5f3 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -174,9 +174,26 @@ def doit(self, **hints):\n         else:\n             f = self.function\n \n-        if self.function.is_Matrix:\n+\n+    def doit(self, **hints):\n+        if hints.get('deep', True):\n+            f = self.function.doit(**hints)\n+        else:\n+            f = self.function\n+\n+        if self.function.is_Matrix and not isinstance(self.function, Sum):\n             return self.expand().doit()\n \n+        for n, limit in enumerate(self.limits):\n+            i, a, b = limit\n+            dif = b - a\n+            if dif.is_integer and (dif < 0) == True:\n+                a, b = b + 1, a - 1\n+                f = -f\n+\n+            newf = eval_sum(f, (i, a, b))\n+            if newf is None:\n+\n         for n, limit in enumerate(self.limits):\n             i, a, b = limit\n             dif = b - a\n"
  }
}