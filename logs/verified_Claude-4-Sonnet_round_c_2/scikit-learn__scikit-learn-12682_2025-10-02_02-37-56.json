{
  "zero_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 992-993)": "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n",
    "Location 2 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 999-1000)": "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
    "Location 3 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 864-867)": "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
    "Location 4 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 875-875)": "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
    "Location 5 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 899-903)": "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 992-993)": [
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n"
    ],
    "Location 2 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 999-1000)": [
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n",
      "\n    def __init__(self, dictionary, transform_algorithm='omp',\n                 transform_n_nonzero_coefs=None, transform_alpha=None,\n                 split_sign=False, n_jobs=None, positive_code=False,\n                 max_iter=1000):\n        self._set_sparse_coding_params(dictionary.shape[0],\n                                       transform_algorithm,\n                                       transform_n_nonzero_coefs,\n                                       transform_alpha, split_sign, n_jobs,\n                                       positive_code, max_iter)\n        self.components_ = dictionary\n"
    ],
    "Location 3 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 864-867)": [
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n    def _set_sparse_coding_params(self, n_components,\n                                  transform_algorithm='omp',\n                                  transform_n_nonzero_coefs=None,\n                                  transform_alpha=None, split_sign=False,\n                                  n_jobs=None, positive_code=False,\n                                  max_iter=1000):\n        self.n_components = n_components\n        self.transform_algorithm = transform_algorithm\n        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n        self.transform_alpha = transform_alpha\n        self.split_sign = split_sign\n        self.n_jobs = n_jobs\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n"
    ],
    "Location 4 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 875-875)": [
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n",
      "\n        self.positive_code = positive_code\n        self.max_iter = max_iter\n"
    ],
    "Location 5 (/root/hy/projects/scikit-learn/sklearn/decomposition/dict_learning.py lines 899-903)": [
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n",
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n",
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n",
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n",
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n",
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n",
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n",
      "\n        code = sparse_encode(\n            X, self.components_, algorithm=self.transform_algorithm,\n            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n            positive=self.positive_code, max_iter=self.max_iter)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..86972e0d4 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,13 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +875,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +901,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +995,22 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_0": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..db7431863 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,26 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_1": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..10edbc0e0 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,32 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n+        self.components_ = dictionary\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_2": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..10edbc0e0 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,32 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n+        self.components_ = dictionary\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_3": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..db7431863 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,26 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_4": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..10edbc0e0 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,32 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n+        self.components_ = dictionary\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_5": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..10edbc0e0 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,32 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n+        self.components_ = dictionary\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_6": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..db7431863 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,26 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_7": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..10edbc0e0 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,32 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n+        self.components_ = dictionary\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n",
    "variant_8": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..db7431863 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -861,10 +861,21 @@ def dict_learning_online(X, n_components=2, alpha=1, n_iter=100,\n class SparseCodingMixin(TransformerMixin):\n     \"\"\"Sparse coding mixin\"\"\"\n \n+\n     def _set_sparse_coding_params(self, n_components,\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n+        self.n_components = n_components\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n+        self.max_iter = max_iter\n                                   n_jobs=None, positive_code=False):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n@@ -872,7 +883,9 @@ class SparseCodingMixin(TransformerMixin):\n         self.transform_alpha = transform_alpha\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n+\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -896,11 +909,12 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n+\n         code = sparse_encode(\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -989,14 +1003,26 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     \"\"\"\n     _required_parameters = [\"dictionary\"]\n \n+\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n                  split_sign=False, n_jobs=None, positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+\n+    def __init__(self, dictionary, transform_algorithm='omp',\n+                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self._set_sparse_coding_params(dictionary.shape[0],\n+                                       transform_algorithm,\n+                                       transform_n_nonzero_coefs,\n+                                       transform_alpha, split_sign, n_jobs,\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n"
  }
}