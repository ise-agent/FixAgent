{
  "zero_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 3483-3485)": "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
    "Location 2 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 3494-3495)": "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n",
    "Location 3 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 3531-3531)": "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 3483-3485)": [
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n",
      "\n    def integrate(\n        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n    ) -> \"DataArray\":\n"
    ],
    "Location 2 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 3494-3495)": [
      "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n",
      "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n",
      "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n",
      "\ndef integrate(\n    self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n) -> \"DataArray\":\n    \"\"\" integrate the array with the trapezoidal rule.\n\n    .. note::\n        This feature is limited to simple cartesian geometry, i.e. coord\n        must be one dimensional.\n\n    Parameters\n    ----------\n    coord : hashable, or sequence of hashable\n        Coordinate(s) used for the integration.\n    datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                     \"ps\", \"fs\", \"as\"}, optional\n        Can be used to specify the unit if datetime coordinate is used.\n\n    Returns\n    -------\n    integrated: DataArray\n\n    See also\n    --------\n    Dataset.integrate\n    numpy.trapz: corresponding numpy function\n\n    Examples\n    --------\n    >>> da = xr.DataArray(\n    ...     np.arange(12).reshape(4, 3),\n    ...     coords=[(\"x\", np.arange(4)), (\"y\", np.arange(3))],\n    ... )\n    >>> da\n    <xarray.DataArray (x: 4, y: 3)>\n    array([[ 0,  1,  2],\n           [ 3,  4,  5],\n           [ 6,  7,  8],\n           [ 9, 10, 11]])\n    Coordinates:\n      * x        (x) int64 0 1 2 3\n      * y        (y) int64 0 1 2\n    >>> da.integrate(\"x\")\n    <xarray.DataArray (y: 3)>\n    array([13.5, 16.5, 19.5])\n    Coordinates:\n      * y        (y) int64 0 1 2\n    \"\"\"\n    ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n    return self._from_temp_dataset(ds)\n",
      "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n",
      "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n",
      "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n",
      "\n        coord : hashable, or sequence of hashable\n            Coordinate(s) used for the integration.\n"
    ],
    "Location 3 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 3531-3531)": [
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n",
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n",
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n",
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n",
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n",
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n",
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n",
      "\n        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_0": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_1": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_2": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_3": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_4": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..4722b152 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,8 +3492,56 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n-            Coordinate(s) used for the integration.\n+\n+def integrate(\n+    self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+) -> \"DataArray\":\n+    \"\"\" integrate the array with the trapezoidal rule.\n+\n+    .. note::\n+        This feature is limited to simple cartesian geometry, i.e. coord\n+        must be one dimensional.\n+\n+    Parameters\n+    ----------\n+    coord : hashable, or sequence of hashable\n+        Coordinate(s) used for the integration.\n+    datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n+                     \"ps\", \"fs\", \"as\"}, optional\n+        Can be used to specify the unit if datetime coordinate is used.\n+\n+    Returns\n+    -------\n+    integrated: DataArray\n+\n+    See also\n+    --------\n+    Dataset.integrate\n+    numpy.trapz: corresponding numpy function\n+\n+    Examples\n+    --------\n+    >>> da = xr.DataArray(\n+    ...     np.arange(12).reshape(4, 3),\n+    ...     coords=[(\"x\", np.arange(4)), (\"y\", np.arange(3))],\n+    ... )\n+    >>> da\n+    <xarray.DataArray (x: 4, y: 3)>\n+    array([[ 0,  1,  2],\n+           [ 3,  4,  5],\n+           [ 6,  7,  8],\n+           [ 9, 10, 11]])\n+    Coordinates:\n+      * x        (x) int64 0 1 2 3\n+      * y        (y) int64 0 1 2\n+    >>> da.integrate(\"x\")\n+    <xarray.DataArray (y: 3)>\n+    array([13.5, 16.5, 19.5])\n+    Coordinates:\n+      * y        (y) int64 0 1 2\n+    \"\"\"\n+    ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n+    return self._from_temp_dataset(ds)\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n             Can be used to specify the unit if datetime coordinate is used.\n@@ -3528,7 +3577,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_5": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_6": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_7": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n",
    "variant_8": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..f2d73187 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,8 +3480,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n+\n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3492,8 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3530,8 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n"
  }
}