{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/ext/autodoc/importer.py lines 310-316)": "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/ext/autodoc/importer.py lines 310-316)": [
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n",
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n",
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n",
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # append instance attributes from parent classes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n",
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # Also check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n",
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # Also check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n",
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # Also check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n",
      "\n    if analyzer:\n        # append instance attributes (cf. self.attr1) if analyzer knows\n        namespace = '.'.join(objpath)\n        for (ns, name), docstring in analyzer.attr_docs.items():\n            if namespace == ns and name not in members:\n                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                               '\\n'.join(docstring))\n        \n        # check parent class namespaces for inherited attributes\n        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n            try:\n                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n                parent_namespace = '.'.join(parent_objpath)\n                for (ns, name), docstring in analyzer.attr_docs.items():\n                    if parent_namespace == ns and name not in members:\n                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                       '\\n'.join(docstring))\n            except AttributeError:\n                # Skip classes that don't have proper module/qualname attributes\n                continue\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..8f7399c72 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,13 +307,29 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n+        \n+        # First, check current class namespace (existing behavior)\n         for (ns, name), docstring in analyzer.attr_docs.items():\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # Then, check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..3095f0023 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..3095f0023 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..3095f0023 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..3095f0023 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..e9e9b1098 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # append instance attributes from parent classes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..6b07dd047 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # Also check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..6b07dd047 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # Also check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..6b07dd047 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # Also check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..3095f0023 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -307,6 +307,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n+\n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n@@ -314,6 +315,19 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n+        \n+        # check parent class namespaces for inherited attributes\n+        for parent_cls in getmro(subject)[1:]:  # Skip first (current class)\n+            try:\n+                parent_objpath = parent_cls.__module__.split('.') + [parent_cls.__qualname__]\n+                parent_namespace = '.'.join(parent_objpath)\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if parent_namespace == ns and name not in members:\n+                        members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except AttributeError:\n+                # Skip classes that don't have proper module/qualname attributes\n+                continue\n \n     return members\n \n"
  }
}