{
  "zero_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/matplotlib/figure.py lines 2275-2287)": "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the transSubfigure bbox relative to Figure transform.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        \n        # Get properly spaced grid positions that respect wspace/hspace\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n            gs.get_grid_positions(self._parent)\n        \n        # Extract the position for this subfigure's span\n        rows = range(self._subplotspec.rowspan.start, self._subplotspec.rowspan.stop)\n        cols = range(self._subplotspec.colspan.start, self._subplotspec.colspan.stop)\n        \n        x0 = fig_lefts[cols].min()\n        x1 = fig_rights[cols].max()\n        y0 = fig_bottoms[rows].min()\n        y1 = fig_tops[rows].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n        else:\n            self.bbox_relative.p0 = (x0, y0)\n            self.bbox_relative.p1 = (x1, y1)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/matplotlib/figure.py lines 2275-2287)": [
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the relative bbox of the subplotspec.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        \n        # Use proper grid positioning that respects wspace/hspace\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self._parent)\n        \n        # Extract position based on subplot specification\n        rows = self._subplotspec.rowspan\n        cols = self._subplotspec.colspan\n        \n        x0 = fig_lefts[cols].min()\n        x1 = fig_rights[cols].max()\n        y0 = fig_bottoms[rows].min()\n        y1 = fig_tops[rows].max()\n        \n        dx = x1 - x0\n        dy = y1 - y0\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n        else:\n            self.bbox_relative.p0 = (x0, y0)\n            self.bbox_relative.p1 = (x1, y1)\n",
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the layout of this subfigure relative to the parent figure.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self._parent)\n        \n        rows = self._subplotspec.rowspan\n        cols = self._subplotspec.colspan\n        \n        x0 = fig_lefts[cols].min()\n        x1 = fig_rights[cols].max()\n        y0 = fig_bottoms[rows].min()\n        y1 = fig_tops[rows].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n        else:\n            self.bbox_relative.p0 = (x0, y0)\n            self.bbox_relative.p1 = (x1, y1)\n",
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the SubFigure bbox relative to Figure bbox.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self._parent)\n        \n        rows = self._subplotspec.rowspan\n        cols = self._subplotspec.colspan\n        \n        x0 = fig_lefts[cols].min()\n        x1 = fig_rights[cols].max()\n        y0 = fig_bottoms[rows].min()\n        y1 = fig_tops[rows].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n        else:\n            self.bbox_relative.p0 = (x0, y0)\n            self.bbox_relative.p1 = (x1, y1)\n",
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the SubFigure transform relative to the parent fig.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n            gs.get_grid_positions(self._parent)\n        \n        rows, cols = np.unravel_index([self._subplotspec.num1, \n                                       self._subplotspec.num2], (gs._nrows, gs._ncols))\n        if self._subplotspec.num2 is None:\n            rows = rows[:1]\n            cols = cols[:1]\n        \n        fig_bottom = fig_bottoms[rows].min()\n        fig_top = fig_tops[rows].max()\n        fig_left = fig_lefts[cols].min()\n        fig_right = fig_rights[cols].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(fig_left, fig_bottom,\n                                                   fig_right, fig_top)\n        else:\n            self.bbox_relative.p0 = (fig_left, fig_bottom)\n            self.bbox_relative.p1 = (fig_right, fig_top)\n",
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the SubFigure bbox relative to Figure transform.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n            gs.get_grid_positions(self._parent)\n        \n        rows, cols = np.unravel_index([self._subplotspec.num1,\n                                       self._subplotspec.num2],\n                                      (gs._nrows, gs._ncols))\n        if self._subplotspec.num2 is None:\n            rows = cols = [rows]\n        \n        x0 = fig_lefts[cols].min()\n        y0 = fig_bottoms[rows].min()\n        x1 = fig_rights[cols].max()\n        y1 = fig_tops[rows].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n        else:\n            self.bbox_relative.p0 = (x0, y0)\n            self.bbox_relative.p1 = (x1, y1)\n",
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the SubFigure bbox relative to Figure bbox.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n            gs.get_grid_positions(self._parent)\n        \n        rows, cols = np.unravel_index([self._subplotspec.num1,\n                                       self._subplotspec.num2],\n                                      (gs.get_geometry()[0],\n                                       gs.get_geometry()[1]))\n        if self._subplotspec.num2 is None:\n            rows = cols = [rows]\n        else:\n            rows = rows.tolist()\n            cols = cols.tolist()\n\n        fig_bottom = fig_bottoms[rows].min()\n        fig_top = fig_tops[rows].max()\n        fig_left = fig_lefts[cols].min()\n        fig_right = fig_rights[cols].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(fig_left, fig_bottom, \n                                                   fig_right, fig_top)\n        else:\n            self.bbox_relative.p0 = (fig_left, fig_bottom)\n            self.bbox_relative.p1 = (fig_right, fig_top)\n",
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the relative bbox of the subfigure.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n            gs.get_grid_positions(self._parent)\n        \n        rows, cols = np.unravel_index([self._subplotspec.num1,\n                                       self._subplotspec.num2],\n                                      (gs._nrows, gs._ncols))\n        if self._subplotspec.num2 is None:\n            rows = cols = [rows]\n        \n        x0 = fig_lefts[cols].min()\n        x1 = fig_rights[cols].max()\n        y0 = fig_bottoms[rows].min()\n        y1 = fig_tops[rows].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n        else:\n            self.bbox_relative.p0 = (x0, y0)\n            self.bbox_relative.p1 = (x1, y1)\n",
      "\n    def _redo_transform_rel_fig(self, bbox=None):\n        \"\"\"\n        Make the relative bbox relative to the correct transform.\n\n        Parameters\n        ----------\n        bbox : bbox or None\n            If not None, then the bbox is used for relative bounding box.\n            Otherwise, it is calculated from the subplotspec.\n        \"\"\"\n        if bbox is not None:\n            self.bbox_relative.p0 = bbox.p0\n            self.bbox_relative.p1 = bbox.p1\n            return\n        # need to figure out *where* this subplotspec is.\n        gs = self._subplotspec.get_gridspec()\n        fig_lefts, fig_bottoms, fig_rights, fig_tops = gs.get_grid_positions(self._parent)\n        \n        rows = self._subplotspec.rowspan\n        cols = self._subplotspec.colspan\n        \n        x0 = fig_lefts[cols].min()\n        y0 = fig_bottoms[rows].min()\n        x1 = fig_rights[cols].max()\n        y1 = fig_tops[rows].max()\n        \n        if self.bbox_relative is None:\n            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n        else:\n            self.bbox_relative.p0 = (x0, y0)\n            self.bbox_relative.p1 = (x1, y1)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..0afdd3c175 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2272,19 +2272,27 @@ class SubFigure(FigureBase):\n             self.bbox_relative.p0 = bbox.p0\n             self.bbox_relative.p1 = bbox.p1\n             return\n+\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        # Use proper grid positioning that respects wspace/hspace parameters\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self._parent)\n+        \n+        # Extract the correct bounds based on the subplot specification\n+        rows = range(self._subplotspec.rowspan.start, self._subplotspec.rowspan.stop)\n+        cols = range(self._subplotspec.colspan.start, self._subplotspec.colspan.stop)\n+        \n+        # Get the bounding box coordinates with proper spacing\n+        x0 = fig_lefts[cols[0]]\n+        x1 = fig_rights[cols[-1]]\n+        y0 = fig_bottoms[rows[-1]]  # Note: rows are inverted in matplotlib\n+        y1 = fig_tops[rows[0]]\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_0": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..23f9f2ac7b 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2258,6 +2258,21 @@ class SubFigure(FigureBase):\n     def _get_renderer(self):\n         return self._parent._get_renderer()\n \n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the transSubfigure bbox relative to Figure transform.\n+\n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n     def _redo_transform_rel_fig(self, bbox=None):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n@@ -2274,17 +2289,25 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        \n+        # Get properly spaced grid positions that respect wspace/hspace\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n+            gs.get_grid_positions(self._parent)\n+        \n+        # Extract the position for this subfigure's span\n+        rows = range(self._subplotspec.rowspan.start, self._subplotspec.rowspan.stop)\n+        cols = range(self._subplotspec.colspan.start, self._subplotspec.colspan.stop)\n+        \n+        x0 = fig_lefts[cols].min()\n+        x1 = fig_rights[cols].max()\n+        y0 = fig_bottoms[rows].min()\n+        y1 = fig_tops[rows].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_1": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..1ccb2e2201 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the relative bbox of the subplotspec.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,27 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        \n+        # Use proper grid positioning that respects wspace/hspace\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self._parent)\n+        \n+        # Extract position based on subplot specification\n+        rows = self._subplotspec.rowspan\n+        cols = self._subplotspec.colspan\n+        \n+        x0 = fig_lefts[cols].min()\n+        x1 = fig_rights[cols].max()\n+        y0 = fig_bottoms[rows].min()\n+        y1 = fig_tops[rows].max()\n+        \n+        dx = x1 - x0\n+        dy = y1 - y0\n+        \n         if self.bbox_relative is None:\n             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_2": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..e6b47f086a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the layout of this subfigure relative to the parent figure.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,21 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self._parent)\n+        \n+        rows = self._subplotspec.rowspan\n+        cols = self._subplotspec.colspan\n+        \n+        x0 = fig_lefts[cols].min()\n+        x1 = fig_rights[cols].max()\n+        y0 = fig_bottoms[rows].min()\n+        y1 = fig_tops[rows].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_3": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..7a7d4e86e7 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the SubFigure bbox relative to Figure bbox.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,21 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self._parent)\n+        \n+        rows = self._subplotspec.rowspan\n+        cols = self._subplotspec.colspan\n+        \n+        x0 = fig_lefts[cols].min()\n+        x1 = fig_rights[cols].max()\n+        y0 = fig_bottoms[rows].min()\n+        y1 = fig_tops[rows].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_4": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..2a0f597075 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the SubFigure transform relative to the parent fig.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,26 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n+            gs.get_grid_positions(self._parent)\n+        \n+        rows, cols = np.unravel_index([self._subplotspec.num1, \n+                                       self._subplotspec.num2], (gs._nrows, gs._ncols))\n+        if self._subplotspec.num2 is None:\n+            rows = rows[:1]\n+            cols = cols[:1]\n+        \n+        fig_bottom = fig_bottoms[rows].min()\n+        fig_top = fig_tops[rows].max()\n+        fig_left = fig_lefts[cols].min()\n+        fig_right = fig_rights[cols].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(fig_left, fig_bottom,\n+                                                   fig_right, fig_top)\n         else:\n-            self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p0 = (fig_left, fig_bottom)\n+            self.bbox_relative.p1 = (fig_right, fig_top)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_5": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..2ff0cc2e7a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the SubFigure bbox relative to Figure transform.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,25 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n+            gs.get_grid_positions(self._parent)\n+        \n+        rows, cols = np.unravel_index([self._subplotspec.num1,\n+                                       self._subplotspec.num2],\n+                                      (gs._nrows, gs._ncols))\n+        if self._subplotspec.num2 is None:\n+            rows = cols = [rows]\n+        \n+        x0 = fig_lefts[cols].min()\n+        y0 = fig_bottoms[rows].min()\n+        x1 = fig_rights[cols].max()\n+        y1 = fig_tops[rows].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_6": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..3037796136 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the SubFigure bbox relative to Figure bbox.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,30 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n+            gs.get_grid_positions(self._parent)\n+        \n+        rows, cols = np.unravel_index([self._subplotspec.num1,\n+                                       self._subplotspec.num2],\n+                                      (gs.get_geometry()[0],\n+                                       gs.get_geometry()[1]))\n+        if self._subplotspec.num2 is None:\n+            rows = cols = [rows]\n+        else:\n+            rows = rows.tolist()\n+            cols = cols.tolist()\n+\n+        fig_bottom = fig_bottoms[rows].min()\n+        fig_top = fig_tops[rows].max()\n+        fig_left = fig_lefts[cols].min()\n+        fig_right = fig_rights[cols].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(fig_left, fig_bottom, \n+                                                   fig_right, fig_top)\n         else:\n-            self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p0 = (fig_left, fig_bottom)\n+            self.bbox_relative.p1 = (fig_right, fig_top)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_7": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..0022c1bcbf 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the relative bbox of the subfigure.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,25 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = \\\n+            gs.get_grid_positions(self._parent)\n+        \n+        rows, cols = np.unravel_index([self._subplotspec.num1,\n+                                       self._subplotspec.num2],\n+                                      (gs._nrows, gs._ncols))\n+        if self._subplotspec.num2 is None:\n+            rows = cols = [rows]\n+        \n+        x0 = fig_lefts[cols].min()\n+        x1 = fig_rights[cols].max()\n+        y0 = fig_bottoms[rows].min()\n+        y1 = fig_tops[rows].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n",
    "variant_8": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..b23cfc51c7 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2262,6 +2262,21 @@ class SubFigure(FigureBase):\n         \"\"\"\n         Make the transSubfigure bbox relative to Figure transform.\n \n+        Parameters\n+        ----------\n+        bbox : bbox or None\n+            If not None, then the bbox is used for relative bounding box.\n+            Otherwise, it is calculated from the subplotspec.\n+        \"\"\"\n+        if bbox is not None:\n+            self.bbox_relative.p0 = bbox.p0\n+            self.bbox_relative.p1 = bbox.p1\n+            return\n+\n+    def _redo_transform_rel_fig(self, bbox=None):\n+        \"\"\"\n+        Make the relative bbox relative to the correct transform.\n+\n         Parameters\n         ----------\n         bbox : bbox or None\n@@ -2274,17 +2289,21 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_lefts, fig_bottoms, fig_rights, fig_tops = gs.get_grid_positions(self._parent)\n+        \n+        rows = self._subplotspec.rowspan\n+        cols = self._subplotspec.colspan\n+        \n+        x0 = fig_lefts[cols].min()\n+        y0 = fig_bottoms[rows].min()\n+        x1 = fig_rights[cols].max()\n+        y1 = fig_tops[rows].max()\n+        \n         if self.bbox_relative is None:\n-            self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n+            self.bbox_relative = Bbox.from_extents(x0, y0, x1, y1)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n"
  }
}