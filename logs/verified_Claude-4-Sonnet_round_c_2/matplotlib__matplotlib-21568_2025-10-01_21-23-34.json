{
  "zero_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/matplotlib/dates.py lines 594-601)": "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/matplotlib/dates.py lines 594-601)": [
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n",
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n",
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n",
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n",
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n",
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n",
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n",
      "\ndef _wrap_in_tex(text):\n    # Simplified approach: wrap the entire text in mathdefault without nested switches\n    # Handle dashes to prevent them from being spaced like binary operators\n    text_with_dashes = text.replace('-', '{-}')\n    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_0": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_1": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_2": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_3": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_4": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_5": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_6": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_7": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n",
    "variant_8": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..16903f84e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -591,14 +591,12 @@ def drange(dstart, dend, delta):\n     return np.linspace(f1, f2, num + 1)\n \n \n-def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+def _wrap_in_tex(text):\n+    # Simplified approach: wrap the entire text in mathdefault without nested switches\n+    # Handle dashes to prevent them from being spaced like binary operators\n+    text_with_dashes = text.replace('-', '{-}')\n+    return f'$\\\\mathdefault{{{text_with_dashes}}}$'\n \n \n ## date tickers and formatters ###\n"
  }
}