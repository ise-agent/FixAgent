{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/printing/str.py lines 314-316)": "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, term in enumerate(expr.args):\n            term_str = self.parenthesize(term, precedence(expr))\n            if i == 0:\n                terms.append(term_str)\n            else:\n                if term_str.startswith('-'):\n                    terms.append(' - ' + term_str[1:])\n                else:\n                    terms.append(' + ' + term_str)\n        return ''.join(terms)\n",
    "Location 2 (/root/hy/projects/sympy/sympy/printing/pretty/pretty.py lines 1450-1460)": "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if this term should be treated as negative\n                if str(pform).startswith('-'):\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n\n        if indices:\n            large = True\n\n            for pform in pforms:\n                if pform is not None and pform.height() > 1:\n                    break\n",
    "Location 3 (/root/hy/projects/sympy/sympy/printing/latex.py lines 1650-1670)": "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, term in enumerate(expr.args):\n            term_str = self._print(term)\n            if i == 0:\n                terms.append(term_str)\n            else:\n                if term_str.startswith('-'):\n                    terms.append(' - ' + term_str[1:])\n                else:\n                    terms.append(' + ' + term_str)\n        return ''.join(terms)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n        return self._print_set(items)\n",
    "Location 4 (/root/hy/projects/sympy/sympy/printing/str.py lines 49-71)": "\ndef _print_Add(self, expr, order=None):\n    if self.order == 'none':\n        terms = list(expr.args)\n    else:\n        terms = self._as_ordered_terms(expr, order=order)\n\n    PREC = precedence(expr)\n    l = []\n    for term in terms:\n        t = self._print(term)\n        if t.startswith('-'):\n            sign = \"-\"\n            t = t[1:]\n        else:\n            sign = \"+\"\n        if precedence(term) < PREC:\n            l.extend([sign, \"(%s)\" % t])\n        else:\n            l.extend([sign, t])\n    sign = l.pop(0)\n    if sign == '+':\n        sign = \"\"\n    return sign + ' '.join(l)\n",
    "Location 5 (/root/hy/projects/sympy/sympy/printing/tests/test_str.py lines 743-746)": "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    X = MatrixSymbol(\"X\", 2, 2)\n    Y = MatrixSymbol(\"Y\", 2, 2)\n    assert str(2*(X + Y)) == \"2*(X + Y)\"\n    assert str(X - Y) == \"X - Y\"\n    assert str(X - X*Y - Y) == \"X - X*Y - Y\"\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/printing/str.py lines 314-316)": [
      "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, arg in enumerate(expr.args):\n            arg_str = self.parenthesize(arg, precedence(expr))\n            if i == 0:\n                terms.append(arg_str)\n            else:\n                if arg_str.startswith('-'):\n                    terms.append(' - ' + arg_str[1:])\n                else:\n                    terms.append(' + ' + arg_str)\n        return ''.join(terms)\n",
      "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for arg in expr.args:\n            term_str = self.parenthesize(arg, precedence(expr))\n            terms.append(term_str)\n        \n        if not terms:\n            return \"\"\n        \n        result = terms[0]\n        for term in terms[1:]:\n            if term.startswith('-'):\n                result += ' - ' + term[1:]\n            else:\n                result += ' + ' + term\n        \n        return result\n",
      "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, term in enumerate(expr.args):\n            term_str = self.parenthesize(term, precedence(expr))\n            if i == 0:\n                terms.append(term_str)\n            else:\n                if term_str.startswith('-'):\n                    terms.append(' - ' + term_str[1:])\n                else:\n                    terms.append(' + ' + term_str)\n        return ''.join(terms)\n",
      "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, term in enumerate(expr.args):\n            term_str = self.parenthesize(term, precedence(expr))\n            if i == 0:\n                terms.append(term_str)\n            else:\n                if term_str.startswith('-'):\n                    terms.append(' - ' + term_str[1:])\n                else:\n                    terms.append(' + ' + term_str)\n        return ''.join(terms)\n",
      "\ndef _print_MatAdd(self, expr):\n    terms = []\n    for i, arg in enumerate(expr.args):\n        term_str = self.parenthesize(arg, precedence(expr))\n        if i == 0:\n            terms.append(term_str)\n        else:\n            if term_str.startswith('-'):\n                terms.append(' - ' + term_str[1:])\n            else:\n                terms.append(' + ' + term_str)\n    return ''.join(terms)\n",
      "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, term in enumerate(expr.args):\n            term_str = self.parenthesize(term, precedence(expr))\n            if i == 0:\n                terms.append(term_str)\n            else:\n                if term_str.startswith('-'):\n                    terms.append(' - ' + term_str[1:])\n                else:\n                    terms.append(' + ' + term_str)\n        return ''.join(terms)\n",
      "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, arg in enumerate(expr.args):\n            s = self.parenthesize(arg, precedence(expr))\n            if i == 0:\n                terms.append(s)\n            elif s.startswith('-'):\n                terms.append(' - ' + s[1:])\n            else:\n                terms.append(' + ' + s)\n        return ''.join(terms)\n",
      "\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, term in enumerate(expr.args):\n            term_str = self.parenthesize(term, precedence(expr))\n            if i == 0:\n                terms.append(term_str)\n            else:\n                if term_str.startswith('-'):\n                    terms.append(' - ' + term_str[1:])\n                else:\n                    terms.append(' + ' + term_str)\n        return ''.join(terms)\n"
    ],
    "Location 2 (/root/hy/projects/sympy/sympy/printing/pretty/pretty.py lines 1450-1460)": [
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if the printed form starts with a minus sign\n                if pform.s and pform.s.startswith('-'):\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n\n        if indices:\n            large = True\n\n            for pform in pforms:\n                if pform is not None and pform.height() > 1:\n                    break\n",
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if the printed form starts with a minus sign\n                if pform.s.startswith('-'):\n                    # Convert to proper subtraction notation\n                    pform = prettyForm(pform.s[1:])  # Remove the leading minus\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n\n        if indices:\n            large = True\n\n            for pform in pforms:\n                if pform is not None and pform.height() > 1:\n                    break\n",
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if the printed form starts with a minus sign\n                if pform.s and pform.s.startswith('-'):\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n\n        if indices:\n            large = True\n\n            for pform in pforms:\n                if pform is not None and pform.height() > 1:\n                    break\n",
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                # Check if the printed term starts with a minus sign\n                pform = self._print(term)\n                if pform.s.startswith('-'):\n                    # Remove the minus sign and mark as negative\n                    pform = prettyForm(pform.s[1:])\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n",
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if the printed form starts with a negative sign\n                if pform.s.startswith('-'):\n                    # Remove the leading minus and mark as negative\n                    pform = prettyForm(pform.s[1:])\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n\n        if indices:\n            large = True\n\n            for pform in pforms:\n                if pform is not None and pform.height() > 1:\n                    break\n",
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if the printed form starts with a minus sign\n                if pform.s.startswith('-'):\n                    pform = prettyForm(pform.s[1:], baseline=pform.baseline, binding=pform.binding)\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n\n        if indices:\n            large = True\n\n            for pform in pforms:\n                if pform is not None and pform.height() > 1:\n                    break\n",
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if the term starts with a negative sign\n                if pform.s and pform.s.startswith('-'):\n                    # Remove the negative sign and mark for subtraction\n                    pform_str = pform.s[1:]\n                    pform = prettyForm(pform_str, pform.baseline, pform.binding)\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n",
      "\n            elif term.is_Relational:\n                pforms.append(prettyForm(*self._print(term).parens()))\n            else:\n                pform = self._print(term)\n                # Check if the printed form starts with a minus sign\n                if pform.s.startswith('-'):\n                    pforms.append(pretty_negative(pform, i))\n                else:\n                    pforms.append(pform)\n\n        if indices:\n            large = True\n\n            for pform in pforms:\n                if pform is not None and pform.height() > 1:\n                    break\n"
    ],
    "Location 3 (/root/hy/projects/sympy/sympy/printing/latex.py lines 1650-1670)": [
      "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n",
      "\n    def _print_MatAdd(self, expr):\n        from sympy.matrices.expressions.matexpr import MatrixSymbol\n        \n        def partition(p, l):\n            return reduce(lambda x, y: (x[0]+[y], x[1]) if p(y) else (x[0], x[1]+[y]), l, ([], []))\n        \n        def _print_term(term):\n            s = self._print(term)\n            if s.startswith('-'):\n                return s\n            else:\n                return '+' + s\n        \n        terms = list(expr.args)\n        if not terms:\n            return '0'\n        \n        # Print first term without sign\n        tex = self._print(terms[0])\n        \n        # Handle remaining terms\n        for term in terms[1:]:\n            term_str = self._print(term)\n            if term_str.startswith('-'):\n                tex += ' - ' + term_str[1:]\n            else:\n                tex += ' + ' + term_str\n                \n        return tex\n",
      "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n        return self._print_set(items)\n",
      "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^{%d}\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n",
      "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^{%d}\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n",
      "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_MatAdd(self, expr):\n        terms = []\n        for i, term in enumerate(expr.args):\n            term_str = self._print(term)\n            if i == 0:\n                terms.append(term_str)\n            else:\n                if term_str.startswith('-'):\n                    terms.append(' - ' + term_str[1:])\n                else:\n                    terms.append(' + ' + term_str)\n        return ''.join(terms)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n        return self._print_set(items)\n",
      "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^{%d}\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n",
      "\n    def _print_ProductSet(self, p):\n        if len(p.sets) > 1 and not has_variety(p.sets):\n            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n        else:\n            return r\" \\times \".join(self._print(set) for set in p.sets)\n\n    def _print_RandomDomain(self, d):\n        if hasattr(d, 'as_boolean'):\n            return 'Domain: ' + self._print(d.as_boolean())\n        elif hasattr(d, 'set'):\n            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n                    self._print(d.set))\n        elif hasattr(d, 'symbols'):\n            return 'Domain on ' + self._print(d.symbols)\n        else:\n            return self._print(None)\n\n    def _print_FiniteSet(self, s):\n        items = sorted(s.args, key=default_sort_key)\n"
    ],
    "Location 4 (/root/hy/projects/sympy/sympy/printing/str.py lines 49-71)": [
      "\n    def _print_Add(self, expr, order=None):\n        if self.order == 'none':\n            terms = list(expr.args)\n        else:\n            terms = self._as_ordered_terms(expr, order=order)\n\n        PREC = precedence(expr)\n        l = []\n        for term in terms:\n            t = self._print(term)\n            if t.startswith('-'):\n                sign = \"-\"\n                t = t[1:]\n            else:\n                sign = \"+\"\n            if precedence(term) < PREC:\n                l.extend([sign, \"(%s)\" % t])\n            else:\n                l.extend([sign, t])\n        sign = l.pop(0)\n        if sign == '+':\n            sign = \"\"\n        return sign + ' '.join(l)\n",
      "\n    def _print_Add(self, expr, order=None):\n        if self.order == 'none':\n            terms = list(expr.args)\n        else:\n            terms = self._as_ordered_terms(expr, order=order)\n\n        PREC = precedence(expr)\n        l = []\n        for term in terms:\n            t = self._print(term)\n            if t.startswith('-'):\n                sign = \"-\"\n                t = t[1:]\n            else:\n                sign = \"+\"\n            if precedence(term) < PREC:\n                l.extend([sign, \"(%s)\" % t])\n            else:\n                l.extend([sign, t])\n        sign = l.pop(0)\n        if sign == '+':\n            sign = \"\"\n        return sign + ' '.join(l)\n",
      "\ndef _print_Add(self, expr, order=None):\n    if self.order == 'none':\n        terms = list(expr.args)\n    else:\n        terms = self._as_ordered_terms(expr, order=order)\n\n    PREC = precedence(expr)\n    l = []\n    for term in terms:\n        t = self._print(term)\n        if t.startswith('-'):\n            sign = \"-\"\n            t = t[1:]\n        else:\n            sign = \"+\"\n        if precedence(term) < PREC:\n            l.extend([sign, \"(%s)\" % t])\n        else:\n            l.extend([sign, t])\n    sign = l.pop(0)\n    if sign == '+':\n        sign = \"\"\n    return sign + ' '.join(l)\n",
      "\n    def _print_MatAdd(self, expr):\n        terms_with_coeff = Add.make_args(expr)\n        \n        def partition(p, l):\n            return reduce(lambda x, y: (x[0]+[y], x[1]) if p(y) else (x[0], x[1]+[y]), l, ([], []))\n\n        def _keep_coeff(coeff, factors, clear=True, sign=False):\n            \"\"\"\n            Return ``coeff*factors`` unevaluated if necessary.\n\n            If ``clear`` is False, do not keep a coefficient of 1 when\n            factors is a single factor.\n\n            If ``sign`` is False, do not try to make an integer factor canonical.\n\n            Examples\n            ========\n\n            >>> from sympy.core.mul import _keep_coeff\n            >>> from sympy import symbols\n            >>> a, b = symbols('a b')\n\n            >>> _keep_coeff(1, a)\n            a\n            >>> _keep_coeff(2, a)\n            2*a\n            >>> _keep_coeff(-1, a)\n            -a\n            >>> _keep_coeff(-2, a)\n            -2*a\n            \"\"\"\n\n            if coeff is S.One:\n                if factors.is_Add:\n                    if clear:\n                        return factors\n                    else:\n                        return Mul._from_args((coeff, factors))\n                elif clear:\n                    return factors\n            elif coeff is S.NegativeOne:\n                return -factors\n            elif coeff.is_Rational and factors.is_Add:\n                if coeff is not S.One:\n                    return Mul._from_args((coeff, factors))\n            return coeff*factors\n\n        terms = []\n        for term in terms_with_coeff:\n            coeff, factors = term.as_coeff_mmul()\n            terms.append(_keep_coeff(coeff, factors))\n\n        PREC = precedence(expr)\n        l = []\n        for term in terms:\n            t = self._print(term)\n            if t.startswith('-'):\n                sign = \"-\"\n                t = t[1:]\n            else:\n                sign = \"+\"\n            if precedence(term) < PREC:\n                l.extend([sign, \"(%s)\" % t])\n            else:\n                l.extend([sign, t])\n        sign = l.pop(0)\n        if sign == '+':\n            sign = \"\"\n        return sign + ' '.join(l)\n",
      "\n    def _print_Add(self, expr, order=None):\n        if self.order == 'none':\n            terms = list(expr.args)\n        else:\n            terms = self._as_ordered_terms(expr, order=order)\n\n        PREC = precedence(expr)\n        l = []\n        for term in terms:\n            t = self._print(term)\n            if t.startswith('-'):\n                sign = \"-\"\n                t = t[1:]\n            else:\n                sign = \"+\"\n            if precedence(term) < PREC:\n                l.extend([sign, \"(%s)\" % t])\n            else:\n                l.extend([sign, t])\n        sign = l.pop(0)\n        if sign == '+':\n            sign = \"\"\n        return sign + ' '.join(l)\n",
      "\n    def _print_Add(self, expr, order=None):\n        if self.order == 'none':\n            terms = list(expr.args)\n        else:\n            terms = self._as_ordered_terms(expr, order=order)\n\n        PREC = precedence(expr)\n        l = []\n        for term in terms:\n            t = self._print(term)\n            if t.startswith('-'):\n                sign = \"-\"\n                t = t[1:]\n            else:\n                sign = \"+\"\n            if precedence(term) < PREC:\n                l.extend([sign, \"(%s)\" % t])\n            else:\n                l.extend([sign, t])\n        sign = l.pop(0)\n        if sign == '+':\n            sign = \"\"\n        return sign + ' '.join(l)\n",
      "\n    def _print_Add(self, expr, order=None):\n        if self.order == 'none':\n            terms = list(expr.args)\n        else:\n            terms = self._as_ordered_terms(expr, order=order)\n\n        PREC = precedence(expr)\n        l = []\n        for term in terms:\n            t = self._print(term)\n            if t.startswith('-'):\n                sign = \"-\"\n                t = t[1:]\n            else:\n                sign = \"+\"\n            if precedence(term) < PREC:\n                l.extend([sign, \"(%s)\" % t])\n            else:\n                l.extend([sign, t])\n        sign = l.pop(0)\n        if sign == '+':\n            sign = \"\"\n        return sign + ' '.join(l)\n",
      "\n    def _print_Add(self, expr, order=None):\n        if self.order == 'none':\n            terms = list(expr.args)\n        else:\n            terms = self._as_ordered_terms(expr, order=order)\n\n        PREC = precedence(expr)\n        l = []\n        for term in terms:\n            t = self._print(term)\n            if t.startswith('-'):\n                sign = \"-\"\n                t = t[1:]\n            else:\n                sign = \"+\"\n            if precedence(term) < PREC:\n                l.extend([sign, \"(%s)\" % t])\n            else:\n                l.extend([sign, t])\n        sign = l.pop(0)\n        if sign == '+':\n            sign = \"\"\n        return sign + ' '.join(l)\n"
    ],
    "Location 5 (/root/hy/projects/sympy/sympy/printing/tests/test_str.py lines 743-746)": [
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n        \"2*(X + Y)\"\n    # Test subtraction cases\n    A, B = MatrixSymbol(\"A\", 2, 2), MatrixSymbol(\"B\", 2, 2)\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n",
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n        \"2*(X + Y)\"\n    # Test matrix subtraction cases\n    A = MatrixSymbol(\"A\", 2, 2)\n    B = MatrixSymbol(\"B\", 2, 2)\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n",
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n        \"2*(X + Y)\"\n    # Test matrix subtraction cases\n    A = MatrixSymbol(\"A\", 2, 2)\n    B = MatrixSymbol(\"B\", 2, 2)\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n",
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol(\"A\", 2, 2)\n    B = MatrixSymbol(\"B\", 2, 2)\n    X = MatrixSymbol(\"X\", 2, 2)\n    Y = MatrixSymbol(\"Y\", 2, 2)\n    \n    # Test original case\n    assert str(2*(X + Y)) == \"2*(X + Y)\"\n    \n    # Test subtraction cases to verify the fix\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n    assert str(-A + B) == \"B - A\"\n    assert str(-A - B) == \"-A - B\"\n",
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    A, B = MatrixSymbol(\"A\", 2, 2), MatrixSymbol(\"B\", 2, 2)\n    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n        \"2*(X + Y)\"\n    # Test matrix subtraction cases\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n    assert str(-A + B) == \"-A + B\"\n",
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n        \"2*(X + Y)\"\n    # Test matrix subtraction cases\n    A = MatrixSymbol(\"A\", 2, 2)\n    B = MatrixSymbol(\"B\", 2, 2)\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n",
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n        \"2*(X + Y)\"\n    \n    # Test matrix subtraction\n    A = MatrixSymbol(\"A\", 2, 2)\n    B = MatrixSymbol(\"B\", 2, 2)\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n",
      "\ndef test_MatMul_MatAdd():\n    from sympy import MatrixSymbol\n    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n        \"2*(X + Y)\"\n    # Test matrix subtraction cases\n    A = MatrixSymbol(\"A\", 2, 2)\n    B = MatrixSymbol(\"B\", 2, 2)\n    assert str(A - B) == \"A - B\"\n    assert str(A - A*B - B) == \"A - A*B - B\"\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..8a8a71600a 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,6 +1647,7 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n+\n         return tex\n \n     def _print_ProductSet(self, p):\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..78f21adfc2 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,6 +1447,7 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..7a69b3191d 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,6 +46,7 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n+\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -311,9 +312,22 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        PREC = precedence(expr)\n+        l = []\n+        for term in expr.args:\n+            t = self.parenthesize(term, PREC)\n+            if t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..50ec63cae2 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,16 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    # Test matrix subtraction cases\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_0": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..d43f161cd0 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,7 +1647,6 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\n@@ -1666,9 +1665,23 @@ def _print_RandomDomain(self, d):\n         else:\n             return self._print(None)\n \n+    def _print_MatAdd(self, expr):\n+        terms = []\n+        for i, term in enumerate(expr.args):\n+            term_str = self._print(term)\n+            if i == 0:\n+                terms.append(term_str)\n+            else:\n+                if term_str.startswith('-'):\n+                    terms.append(' - ' + term_str[1:])\n+                else:\n+                    terms.append(' + ' + term_str)\n+        return ''.join(terms)\n+\n     def _print_FiniteSet(self, s):\n         items = sorted(s.args, key=default_sort_key)\n         return self._print_set(items)\n+        return self._print_set(items)\n \n     def _print_set(self, s):\n         items = sorted(s, key=default_sort_key)\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..94d3b6d97a 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,10 +1447,16 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n+                pform = self._print(term)\n+                # Check if this term should be treated as negative\n+                if str(pform).startswith('-'):\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n \n         if indices:\n             large = True\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..b31b99e3d7 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,29 +46,30 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n-    def _print_Add(self, expr, order=None):\n-        if self.order == 'none':\n-            terms = list(expr.args)\n-        else:\n-            terms = self._as_ordered_terms(expr, order=order)\n \n-        PREC = precedence(expr)\n-        l = []\n-        for term in terms:\n-            t = self._print(term)\n-            if t.startswith('-'):\n-                sign = \"-\"\n-                t = t[1:]\n-            else:\n-                sign = \"+\"\n-            if precedence(term) < PREC:\n-                l.extend([sign, \"(%s)\" % t])\n-            else:\n-                l.extend([sign, t])\n-        sign = l.pop(0)\n-        if sign == '+':\n-            sign = \"\"\n-        return sign + ' '.join(l)\n+def _print_Add(self, expr, order=None):\n+    if self.order == 'none':\n+        terms = list(expr.args)\n+    else:\n+        terms = self._as_ordered_terms(expr, order=order)\n+\n+    PREC = precedence(expr)\n+    l = []\n+    for term in terms:\n+        t = self._print(term)\n+        if t.startswith('-'):\n+            sign = \"-\"\n+            t = t[1:]\n+        else:\n+            sign = \"+\"\n+        if precedence(term) < PREC:\n+            l.extend([sign, \"(%s)\" % t])\n+        else:\n+            l.extend([sign, t])\n+    sign = l.pop(0)\n+    if sign == '+':\n+        sign = \"\"\n+    return sign + ' '.join(l)\n \n     def _print_BooleanTrue(self, expr):\n         return \"True\"\n@@ -311,9 +312,19 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for i, term in enumerate(expr.args):\n+            term_str = self.parenthesize(term, precedence(expr))\n+            if i == 0:\n+                terms.append(term_str)\n+            else:\n+                if term_str.startswith('-'):\n+                    terms.append(' - ' + term_str[1:])\n+                else:\n+                    terms.append(' + ' + term_str)\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..4bcc075ce3 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,14 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n-    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n-        \"2*(X + Y)\"\n+    X = MatrixSymbol(\"X\", 2, 2)\n+    Y = MatrixSymbol(\"Y\", 2, 2)\n+    assert str(2*(X + Y)) == \"2*(X + Y)\"\n+    assert str(X - Y) == \"X - Y\"\n+    assert str(X - X*Y - Y) == \"X - X*Y - Y\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_1": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..e5cf9dc11e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,7 +1647,6 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..2ddda4baf7 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,10 +1447,16 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n+                pform = self._print(term)\n+                # Check if the printed form starts with a minus sign\n+                if pform.s and pform.s.startswith('-'):\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n \n         if indices:\n             large = True\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..c38d383b26 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,6 +46,7 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n+\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -311,9 +312,19 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for i, arg in enumerate(expr.args):\n+            arg_str = self.parenthesize(arg, precedence(expr))\n+            if i == 0:\n+                terms.append(arg_str)\n+            else:\n+                if arg_str.startswith('-'):\n+                    terms.append(' - ' + arg_str[1:])\n+                else:\n+                    terms.append(' + ' + arg_str)\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..bd90a56cad 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,15 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    # Test subtraction cases\n+    A, B = MatrixSymbol(\"A\", 2, 2), MatrixSymbol(\"B\", 2, 2)\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_2": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..34f514c514 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,27 +1647,36 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n-\n-    def _print_ProductSet(self, p):\n-        if len(p.sets) > 1 and not has_variety(p.sets):\n-            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n-        else:\n-            return r\" \\times \".join(self._print(set) for set in p.sets)\n-\n-    def _print_RandomDomain(self, d):\n-        if hasattr(d, 'as_boolean'):\n-            return 'Domain: ' + self._print(d.as_boolean())\n-        elif hasattr(d, 'set'):\n-            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n-                    self._print(d.set))\n-        elif hasattr(d, 'symbols'):\n-            return 'Domain on ' + self._print(d.symbols)\n-        else:\n-            return self._print(None)\n \n-    def _print_FiniteSet(self, s):\n-        items = sorted(s.args, key=default_sort_key)\n+    def _print_MatAdd(self, expr):\n+        from sympy.matrices.expressions.matexpr import MatrixSymbol\n+        \n+        def partition(p, l):\n+            return reduce(lambda x, y: (x[0]+[y], x[1]) if p(y) else (x[0], x[1]+[y]), l, ([], []))\n+        \n+        def _print_term(term):\n+            s = self._print(term)\n+            if s.startswith('-'):\n+                return s\n+            else:\n+                return '+' + s\n+        \n+        terms = list(expr.args)\n+        if not terms:\n+            return '0'\n+        \n+        # Print first term without sign\n+        tex = self._print(terms[0])\n+        \n+        # Handle remaining terms\n+        for term in terms[1:]:\n+            term_str = self._print(term)\n+            if term_str.startswith('-'):\n+                tex += ' - ' + term_str[1:]\n+            else:\n+                tex += ' + ' + term_str\n+                \n+        return tex\n         return self._print_set(items)\n \n     def _print_set(self, s):\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..f8cef18fa2 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,10 +1447,18 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n+                pform = self._print(term)\n+                # Check if the printed form starts with a minus sign\n+                if pform.s.startswith('-'):\n+                    # Convert to proper subtraction notation\n+                    pform = prettyForm(pform.s[1:])  # Remove the leading minus\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n \n         if indices:\n             large = True\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..617a6a2ca4 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,6 +46,7 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n+\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -311,9 +312,24 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for arg in expr.args:\n+            term_str = self.parenthesize(arg, precedence(expr))\n+            terms.append(term_str)\n+        \n+        if not terms:\n+            return \"\"\n+        \n+        result = terms[0]\n+        for term in terms[1:]:\n+            if term.startswith('-'):\n+                result += ' - ' + term[1:]\n+            else:\n+                result += ' + ' + term\n+        \n+        return result\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..50ec63cae2 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,16 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    # Test matrix subtraction cases\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_3": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..dee527f77c 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,7 +1647,6 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\n@@ -1669,6 +1668,7 @@ def _print_RandomDomain(self, d):\n     def _print_FiniteSet(self, s):\n         items = sorted(s.args, key=default_sort_key)\n         return self._print_set(items)\n+        return self._print_set(items)\n \n     def _print_set(self, s):\n         items = sorted(s, key=default_sort_key)\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..2ddda4baf7 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,10 +1447,16 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n+                pform = self._print(term)\n+                # Check if the printed form starts with a minus sign\n+                if pform.s and pform.s.startswith('-'):\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n \n         if indices:\n             large = True\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..b31b99e3d7 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,29 +46,30 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n-    def _print_Add(self, expr, order=None):\n-        if self.order == 'none':\n-            terms = list(expr.args)\n-        else:\n-            terms = self._as_ordered_terms(expr, order=order)\n \n-        PREC = precedence(expr)\n-        l = []\n-        for term in terms:\n-            t = self._print(term)\n-            if t.startswith('-'):\n-                sign = \"-\"\n-                t = t[1:]\n-            else:\n-                sign = \"+\"\n-            if precedence(term) < PREC:\n-                l.extend([sign, \"(%s)\" % t])\n-            else:\n-                l.extend([sign, t])\n-        sign = l.pop(0)\n-        if sign == '+':\n-            sign = \"\"\n-        return sign + ' '.join(l)\n+def _print_Add(self, expr, order=None):\n+    if self.order == 'none':\n+        terms = list(expr.args)\n+    else:\n+        terms = self._as_ordered_terms(expr, order=order)\n+\n+    PREC = precedence(expr)\n+    l = []\n+    for term in terms:\n+        t = self._print(term)\n+        if t.startswith('-'):\n+            sign = \"-\"\n+            t = t[1:]\n+        else:\n+            sign = \"+\"\n+        if precedence(term) < PREC:\n+            l.extend([sign, \"(%s)\" % t])\n+        else:\n+            l.extend([sign, t])\n+    sign = l.pop(0)\n+    if sign == '+':\n+        sign = \"\"\n+    return sign + ' '.join(l)\n \n     def _print_BooleanTrue(self, expr):\n         return \"True\"\n@@ -311,9 +312,19 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for i, term in enumerate(expr.args):\n+            term_str = self.parenthesize(term, precedence(expr))\n+            if i == 0:\n+                terms.append(term_str)\n+            else:\n+                if term_str.startswith('-'):\n+                    terms.append(' - ' + term_str[1:])\n+                else:\n+                    terms.append(' + ' + term_str)\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..50ec63cae2 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,16 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    # Test matrix subtraction cases\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_4": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..cd595af49e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,11 +1647,10 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\n-            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n+            return self._print(p.sets[0]) + \"^{%d}\" % len(p.sets)\n         else:\n             return r\" \\times \".join(self._print(set) for set in p.sets)\n \ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..5eaffe2774 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,17 +1447,18 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n-\n-        if indices:\n-            large = True\n-\n-            for pform in pforms:\n-                if pform is not None and pform.height() > 1:\n-                    break\n+                # Check if the printed term starts with a minus sign\n+                pform = self._print(term)\n+                if pform.s.startswith('-'):\n+                    # Remove the minus sign and mark as negative\n+                    pform = prettyForm(pform.s[1:])\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n             else:\n                 large = False\n \ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..fbdfa27c8f 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,11 +46,58 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n-    def _print_Add(self, expr, order=None):\n-        if self.order == 'none':\n-            terms = list(expr.args)\n-        else:\n-            terms = self._as_ordered_terms(expr, order=order)\n+\n+    def _print_MatAdd(self, expr):\n+        terms_with_coeff = Add.make_args(expr)\n+        \n+        def partition(p, l):\n+            return reduce(lambda x, y: (x[0]+[y], x[1]) if p(y) else (x[0], x[1]+[y]), l, ([], []))\n+\n+        def _keep_coeff(coeff, factors, clear=True, sign=False):\n+            \"\"\"\n+            Return ``coeff*factors`` unevaluated if necessary.\n+\n+            If ``clear`` is False, do not keep a coefficient of 1 when\n+            factors is a single factor.\n+\n+            If ``sign`` is False, do not try to make an integer factor canonical.\n+\n+            Examples\n+            ========\n+\n+            >>> from sympy.core.mul import _keep_coeff\n+            >>> from sympy import symbols\n+            >>> a, b = symbols('a b')\n+\n+            >>> _keep_coeff(1, a)\n+            a\n+            >>> _keep_coeff(2, a)\n+            2*a\n+            >>> _keep_coeff(-1, a)\n+            -a\n+            >>> _keep_coeff(-2, a)\n+            -2*a\n+            \"\"\"\n+\n+            if coeff is S.One:\n+                if factors.is_Add:\n+                    if clear:\n+                        return factors\n+                    else:\n+                        return Mul._from_args((coeff, factors))\n+                elif clear:\n+                    return factors\n+            elif coeff is S.NegativeOne:\n+                return -factors\n+            elif coeff.is_Rational and factors.is_Add:\n+                if coeff is not S.One:\n+                    return Mul._from_args((coeff, factors))\n+            return coeff*factors\n+\n+        terms = []\n+        for term in terms_with_coeff:\n+            coeff, factors = term.as_coeff_mmul()\n+            terms.append(_keep_coeff(coeff, factors))\n \n         PREC = precedence(expr)\n         l = []\n@@ -311,9 +358,19 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for i, term in enumerate(expr.args):\n+            term_str = self.parenthesize(term, precedence(expr))\n+            if i == 0:\n+                terms.append(term_str)\n+            else:\n+                if term_str.startswith('-'):\n+                    terms.append(' - ' + term_str[1:])\n+                else:\n+                    terms.append(' + ' + term_str)\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..2283e19e23 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,22 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n-    assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n-        \"2*(X + Y)\"\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    X = MatrixSymbol(\"X\", 2, 2)\n+    Y = MatrixSymbol(\"Y\", 2, 2)\n+    \n+    # Test original case\n+    assert str(2*(X + Y)) == \"2*(X + Y)\"\n+    \n+    # Test subtraction cases to verify the fix\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n+    assert str(-A + B) == \"B - A\"\n+    assert str(-A - B) == \"-A - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_5": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..cd595af49e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,11 +1647,10 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\n-            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n+            return self._print(p.sets[0]) + \"^{%d}\" % len(p.sets)\n         else:\n             return r\" \\times \".join(self._print(set) for set in p.sets)\n \ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..251cc17a62 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,10 +1447,18 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n+                pform = self._print(term)\n+                # Check if the printed form starts with a negative sign\n+                if pform.s.startswith('-'):\n+                    # Remove the leading minus and mark as negative\n+                    pform = prettyForm(pform.s[1:])\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n \n         if indices:\n             large = True\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..78a9ecbd31 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,6 +46,7 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n+\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -311,9 +312,19 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n-    def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+\n+def _print_MatAdd(self, expr):\n+    terms = []\n+    for i, arg in enumerate(expr.args):\n+        term_str = self.parenthesize(arg, precedence(expr))\n+        if i == 0:\n+            terms.append(term_str)\n+        else:\n+            if term_str.startswith('-'):\n+                terms.append(' - ' + term_str[1:])\n+            else:\n+                terms.append(' + ' + term_str)\n+    return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..76c053a245 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,16 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n+    A, B = MatrixSymbol(\"A\", 2, 2), MatrixSymbol(\"B\", 2, 2)\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    # Test matrix subtraction cases\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n+    assert str(-A + B) == \"-A + B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_6": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..d43f161cd0 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,7 +1647,6 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\n@@ -1666,9 +1665,23 @@ def _print_RandomDomain(self, d):\n         else:\n             return self._print(None)\n \n+    def _print_MatAdd(self, expr):\n+        terms = []\n+        for i, term in enumerate(expr.args):\n+            term_str = self._print(term)\n+            if i == 0:\n+                terms.append(term_str)\n+            else:\n+                if term_str.startswith('-'):\n+                    terms.append(' - ' + term_str[1:])\n+                else:\n+                    terms.append(' + ' + term_str)\n+        return ''.join(terms)\n+\n     def _print_FiniteSet(self, s):\n         items = sorted(s.args, key=default_sort_key)\n         return self._print_set(items)\n+        return self._print_set(items)\n \n     def _print_set(self, s):\n         items = sorted(s, key=default_sort_key)\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..1119a82b03 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,10 +1447,17 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n+                pform = self._print(term)\n+                # Check if the printed form starts with a minus sign\n+                if pform.s.startswith('-'):\n+                    pform = prettyForm(pform.s[1:], baseline=pform.baseline, binding=pform.binding)\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n \n         if indices:\n             large = True\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..f2ece84c82 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,6 +46,7 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n+\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -311,9 +312,19 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for i, term in enumerate(expr.args):\n+            term_str = self.parenthesize(term, precedence(expr))\n+            if i == 0:\n+                terms.append(term_str)\n+            else:\n+                if term_str.startswith('-'):\n+                    terms.append(' - ' + term_str[1:])\n+                else:\n+                    terms.append(' + ' + term_str)\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..50ec63cae2 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,16 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    # Test matrix subtraction cases\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_7": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..cd595af49e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,11 +1647,10 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\n-            return self._print(p.sets[0]) + \"^%d\" % len(p.sets)\n+            return self._print(p.sets[0]) + \"^{%d}\" % len(p.sets)\n         else:\n             return r\" \\times \".join(self._print(set) for set in p.sets)\n \ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..af42e84f2b 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,17 +1447,19 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n-\n-        if indices:\n-            large = True\n-\n-            for pform in pforms:\n-                if pform is not None and pform.height() > 1:\n-                    break\n+                pform = self._print(term)\n+                # Check if the term starts with a negative sign\n+                if pform.s and pform.s.startswith('-'):\n+                    # Remove the negative sign and mark for subtraction\n+                    pform_str = pform.s[1:]\n+                    pform = prettyForm(pform_str, pform.baseline, pform.binding)\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n             else:\n                 large = False\n \ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..adf10cb2e0 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,6 +46,7 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n+\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -311,9 +312,18 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for i, arg in enumerate(expr.args):\n+            s = self.parenthesize(arg, precedence(expr))\n+            if i == 0:\n+                terms.append(s)\n+            elif s.startswith('-'):\n+                terms.append(' - ' + s[1:])\n+            else:\n+                terms.append(' + ' + s)\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..4164178dc9 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,17 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    \n+    # Test matrix subtraction\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n",
    "variant_8": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..e5cf9dc11e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1647,7 +1647,6 @@ def _print_LeviCivita(self, expr, exp=None):\n             tex = r'\\varepsilon_{%s}' % \", \".join(indices)\n         if exp:\n             tex = r'\\left(%s\\right)^{%s}' % (tex, exp)\n-        return tex\n \n     def _print_ProductSet(self, p):\n         if len(p.sets) > 1 and not has_variety(p.sets):\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..79abe3e274 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1447,10 +1447,16 @@ def pretty_negative(pform, index):\n             elif term.is_Number and term < 0:\n                 pform = self._print(-term)\n                 pforms.append(pretty_negative(pform, i))\n+\n             elif term.is_Relational:\n                 pforms.append(prettyForm(*self._print(term).parens()))\n             else:\n-                pforms.append(self._print(term))\n+                pform = self._print(term)\n+                # Check if the printed form starts with a minus sign\n+                if pform.s.startswith('-'):\n+                    pforms.append(pretty_negative(pform, i))\n+                else:\n+                    pforms.append(pform)\n \n         if indices:\n             large = True\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..f2ece84c82 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -46,6 +46,7 @@ def emptyPrinter(self, expr):\n         else:\n             return str(expr)\n \n+\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -311,9 +312,19 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n+\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = []\n+        for i, term in enumerate(expr.args):\n+            term_str = self.parenthesize(term, precedence(expr))\n+            if i == 0:\n+                terms.append(term_str)\n+            else:\n+                if term_str.startswith('-'):\n+                    terms.append(' - ' + term_str[1:])\n+                else:\n+                    terms.append(' + ' + term_str)\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d941..50ec63cae2 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -740,10 +740,16 @@ def test_issue_6387():\n     assert str(factor(-3.0*z + 3)) == '-3.0*(1.0*z - 1.0)'\n \n \n+\n def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n     assert str(2*(MatrixSymbol(\"X\", 2, 2) + MatrixSymbol(\"Y\", 2, 2))) == \\\n         \"2*(X + Y)\"\n+    # Test matrix subtraction cases\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    assert str(A - B) == \"A - B\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n \n def test_MatrixSlice():\n     from sympy.matrices.expressions import MatrixSymbol\n"
  }
}