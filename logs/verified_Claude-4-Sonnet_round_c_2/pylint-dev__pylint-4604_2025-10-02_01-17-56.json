{
  "zero_patches": {
    "Location 1 (/root/hy/projects/pylint/pylint/checkers/variables.py lines 2033-2036)": "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/pylint/pylint/checkers/variables.py lines 2033-2036)": [
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                )\n",
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                )\n",
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                )\n",
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and imported_name in self._type_annotation_names)\n                )\n",
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                )\n",
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and imported_name in self._type_annotation_names)\n                )\n",
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                )\n",
      "\n                is_type_annotation_import = (\n                    imported_name in self._type_annotation_names\n                    or as_name in self._type_annotation_names\n                    or (isinstance(stmt, astroid.Import) and imported_name in self._type_annotation_names)\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..c595b7904 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,10 +2030,10 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n-                is_type_annotation_import = (\n-                    imported_name in self._type_annotation_names\n-                    or as_name in self._type_annotation_names\n-                )\n+\n+if isinstance(stmt, astroid.Import) or (\n+    isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n+):\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n                 ):\n",
    "variant_0": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..d58d05fcc 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_1": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..d58d05fcc 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_2": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..d58d05fcc 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_3": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..d58d05fcc 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_4": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..9fecb5de9 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and imported_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_5": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..d58d05fcc 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_6": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..9fecb5de9 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and imported_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_7": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..d58d05fcc 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and real_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n",
    "variant_8": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..9fecb5de9 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2030,9 +2030,11 @@ class VariablesChecker(BaseChecker):\n                     continue\n                 checked.add(real_name)\n \n+\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or (isinstance(stmt, astroid.Import) and imported_name in self._type_annotation_names)\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n"
  }
}