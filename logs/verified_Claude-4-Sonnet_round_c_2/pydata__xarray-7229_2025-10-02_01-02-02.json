{
  "zero_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/computation.py lines 1860-1863)": "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/computation.py lines 1860-1863)": [
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n",
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n",
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n",
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n",
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n",
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n",
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n",
      "\n    if keep_attrs is True:\n        # keep the attributes of x, the second parameter, by default to\n        # be consistent with the `where` method of `DataArray` and `Dataset`\n        def keep_attrs_func(attrs, context):\n            # If we have existing attrs (like coordinate attrs), preserve them\n            # Only apply variable attrs when there are no existing attrs\n            if attrs:\n                return attrs\n            else:\n                return getattr(x, \"attrs\", {})\n        keep_attrs = keep_attrs_func\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_0": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_1": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_2": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_3": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_4": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_5": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_6": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_7": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
    "variant_8": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..bb2e1376 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,10 +1857,18 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n+\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def keep_attrs_func(attrs, context):\n+            # If we have existing attrs (like coordinate attrs), preserve them\n+            # Only apply variable attrs when there are no existing attrs\n+            if attrs:\n+                return attrs\n+            else:\n+                return getattr(x, \"attrs\", {})\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n"
  }
}