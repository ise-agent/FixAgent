{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/domains/python.py lines 98-105)": "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
    "Location 2 (/root/hy/projects/sphinx/sphinx/domains/python.py lines 116-122)": "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/domains/python.py lines 98-105)": [
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n",
      "\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n"
    ],
    "Location 2 (/root/hy/projects/sphinx/sphinx/domains/python.py lines 116-122)": [
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n",
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n",
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n",
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n",
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n",
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n",
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n",
      "\n        elif isinstance(node, ast.Tuple):\n            result = []\n            for elem in node.elts:\n                result.extend(unparse(elem))\n                result.append(addnodes.desc_sig_punctuation('', ', '))\n            if len(node.elts) > 0:\n                result.pop()\n            return result\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_0": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_1": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_2": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_3": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_4": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_5": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_6": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_7": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n",
    "variant_8": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..3f1a56365 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -95,12 +95,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Module):\n@@ -113,12 +115,14 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n+\n         elif isinstance(node, ast.Tuple):\n             result = []\n             for elem in node.elts:\n                 result.extend(unparse(elem))\n                 result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if len(node.elts) > 0:\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n"
  }
}