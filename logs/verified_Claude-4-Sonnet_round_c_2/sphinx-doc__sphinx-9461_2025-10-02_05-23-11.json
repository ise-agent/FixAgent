{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 386-393)": "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n\n    return isinstance(obj, property)\n",
    "Location 2 (/root/hy/projects/sphinx/sphinx/ext/autodoc/__init__.py lines 2662-2664)": "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for older Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
    "Location 3 (/root/hy/projects/sphinx/sphinx/ext/autodoc/__init__.py lines 2070-2072)": "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for older Python versions\n        return isinstance(obj.__func__, property)\n    return False\n",
    "Location 4 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 359-361)": "\ndef isroutine(obj: Any) -> bool:\n    \"\"\"Check is any kind of function or method.\"\"\"\n    # Don't treat classmethod-wrapped properties as routines\n    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n        return False\n    return inspect.isroutine(unwrap_all(obj))\n",
    "Location 5 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 248-255)": "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    elif isinstance(obj, classmethod):\n        # Check if classmethod wraps a property (for @classmethod @property)\n        if isinstance(obj.__func__, property):\n            return True\n        # Python 3.10+ compatibility: check __wrapped__ attribute\n        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n    \n    return False\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 386-393)": [
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if sys.version_info >= (3, 10) and hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n\n    return isinstance(obj, property)\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ attribute if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if sys.version_info >= (3, 10) and hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for older Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if sys.version_info >= (3, 8):\n        from functools import cached_property  # cached_property is available since py3.8\n        if isinstance(obj, cached_property):\n            return True\n\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, check __wrapped__ attribute\n        if sys.version_info >= (3, 10) and hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older versions, check __func__ attribute\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n"
    ],
    "Location 2 (/root/hy/projects/sphinx/sphinx/ext/autodoc/__init__.py lines 2662-2664)": [
      "\n    @classmethod\n    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                            ) -> bool:\n        # Check for classmethod-wrapped properties first\n        if isinstance(member, classmethod) and hasattr(member, '__func__'):\n            if inspect.isproperty(member.__func__):\n                return isinstance(parent, ClassDocumenter)\n        \n        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n",
      "\n@classmethod\ndef can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                        ) -> bool:\n    # Check for regular properties\n    if inspect.isproperty(member):\n        return isinstance(parent, ClassDocumenter)\n    \n    # Check for classmethod-wrapped properties (common pattern for class properties)\n    if isinstance(member, classmethod):\n        # Check if the wrapped function is a property\n        if hasattr(member, '__func__') and inspect.isproperty(member.__func__):\n            return isinstance(parent, ClassDocumenter)\n        # Python 3.10+ compatibility - check __wrapped__ attribute\n        if hasattr(member, '__wrapped__') and inspect.isproperty(member.__wrapped__):\n            return isinstance(parent, ClassDocumenter)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for earlier Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\n@classmethod\ndef can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                        ) -> bool:\n    # Check for regular properties\n    if inspect.isproperty(member):\n        return isinstance(parent, ClassDocumenter)\n    \n    # Check for classmethod-wrapped properties (classproperties)\n    if isinstance(member, classmethod):\n        # For Python 3.10+, check __wrapped__ attribute\n        if hasattr(member, '__wrapped__') and inspect.isproperty(member.__wrapped__):\n            return isinstance(parent, ClassDocumenter)\n        # For older Python versions, check __func__\n        if hasattr(member, '__func__') and inspect.isproperty(member.__func__):\n            return isinstance(parent, ClassDocumenter)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Handle classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # Check if the classmethod wraps a property\n        func = obj.__func__\n        if isinstance(func, property):\n            return True\n        # For Python 3.10+ compatibility, check __wrapped__ attribute\n        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property or a classmethod-wrapped property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property (common pattern for class properties)\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for older Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\n@classmethod\ndef can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                        ) -> bool:\n    # Check for regular properties and classmethod-wrapped properties\n    if inspect.isproperty(member):\n        return isinstance(parent, ClassDocumenter)\n    \n    # Check for classmethod-wrapped properties (for compatibility with classproperty patterns)\n    if isinstance(member, classmethod) and hasattr(member, '__func__'):\n        if inspect.isproperty(member.__func__):\n            return isinstance(parent, ClassDocumenter)\n        # Python 3.10+ compatibility: check __wrapped__ attribute\n        if hasattr(member, '__wrapped__') and inspect.isproperty(member.__wrapped__):\n            return isinstance(parent, ClassDocumenter)\n    \n    return False\n"
    ],
    "Location 3 (/root/hy/projects/sphinx/sphinx/ext/autodoc/__init__.py lines 2070-2072)": [
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ attribute if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For earlier Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, check __wrapped__ attribute if available\n        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n        # Fallback for older Python versions\n        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n            return True\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for older Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for older Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property (Python 3.9+ pattern)\n    if isinstance(obj, classmethod):\n        # Check if the classmethod wraps a property\n        if isinstance(obj.__func__, property):\n            return True\n        # For Python 3.10+ compatibility, check __wrapped__ attribute\n        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is a property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+ compatibility, check __wrapped__ attribute first\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback to __func__ for older Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n"
    ],
    "Location 4 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 359-361)": [
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # Fallback for older Python versions\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isroutine(obj: Any) -> bool:\n    \"\"\"Check is any kind of function or method.\"\"\"\n    # Don't treat classmethod-wrapped properties as routines\n    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n        return False\n    return inspect.isroutine(unwrap_all(obj))\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    # Check for regular property\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isroutine(obj: Any) -> bool:\n    \"\"\"Check is any kind of function or method.\"\"\"\n    # Don't treat classmethod-wrapped properties as routines\n    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n        return False\n    return inspect.isroutine(unwrap_all(obj))\n",
      "\ndef isroutine(obj: Any) -> bool:\n    \"\"\"Check is any kind of function or method.\"\"\"\n    unwrapped = unwrap_all(obj)\n    # Don't treat classmethod-wrapped properties as routines\n    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n        return False\n    return inspect.isroutine(unwrapped)\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped property (Python 3.9+ compatibility)\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For Python 3.9 and earlier, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    \n    # Check for classmethod-wrapped properties\n    if isinstance(obj, classmethod):\n        # For Python 3.10+, use __wrapped__ if available\n        if hasattr(obj, '__wrapped__'):\n            return isinstance(obj.__wrapped__, property)\n        # For older Python versions, check __func__\n        elif hasattr(obj, '__func__'):\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isroutine(obj: Any) -> bool:\n    \"\"\"Check is any kind of function or method.\"\"\"\n    # Don't treat classmethod-wrapped properties as routines\n    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n        return False\n    return inspect.isroutine(unwrap_all(obj))\n"
    ],
    "Location 5 (/root/hy/projects/sphinx/sphinx/util/inspect.py lines 248-255)": [
      "\ndef isclassmethod(obj: Any) -> bool:\n    \"\"\"Check if the object is classmethod.\"\"\"\n    if isinstance(obj, classmethod):\n        return True\n    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n        return True\n\n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    elif isinstance(obj, classmethod):\n        # Check if classmethod wraps a property (for @classmethod @property pattern)\n        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n            return True\n        # Python 3.10+ compatibility: check __wrapped__ attribute\n        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    elif isinstance(obj, classmethod):\n        # Check if classmethod wraps a property (for @classmethod @property pattern)\n        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n            return True\n        # Python 3.10+ compatibility: check __wrapped__ attribute\n        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n    \n    return False\n",
      "\ndef isclassmethod(obj: Any) -> bool:\n    \"\"\"Check if the object is classmethod.\"\"\"\n    if isinstance(obj, classmethod):\n        return True\n    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n        return True\n\n    return False\n",
      "\ndef isclassmethod(obj: Any) -> bool:\n    \"\"\"Check if the object is classmethod.\"\"\"\n    if isinstance(obj, classmethod):\n        return True\n    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n        return True\n\n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    elif isinstance(obj, classmethod):\n        # Check if classmethod wraps a property (for @classmethod @property pattern)\n        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n            return True\n        # Python 3.10+ compatibility: check __wrapped__ attribute\n        elif hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    elif isinstance(obj, classmethod):\n        # Handle classmethod-wrapped properties\n        if hasattr(obj, '__wrapped__'):\n            # Python 3.10+ has __wrapped__ attribute\n            return isinstance(obj.__wrapped__, property)\n        elif hasattr(obj, '__func__'):\n            # Pre-3.10 compatibility: check __func__\n            return isinstance(obj.__func__, property)\n    \n    return False\n",
      "\ndef isproperty(obj: Any) -> bool:\n    \"\"\"Check if the object is property.\"\"\"\n    if isinstance(obj, property):\n        return True\n    elif isinstance(obj, classmethod):\n        # Check if classmethod wraps a property (for @classmethod @property pattern)\n        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n            return True\n        # Python 3.10+ compatibility: check __wrapped__ attribute\n        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n            return True\n    \n    return False\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..d2d35d587 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,6 +2067,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n+\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n@@ -2659,6 +2660,7 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n+\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..b6c829b8d 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,6 +245,7 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n+\n def isclassmethod(obj: Any) -> bool:\n     \"\"\"Check if the object is classmethod.\"\"\"\n     if isinstance(obj, classmethod):\n@@ -356,6 +357,7 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n+\n def isroutine(obj: Any) -> bool:\n     \"\"\"Check is any kind of function or method.\"\"\"\n     return inspect.isroutine(unwrap_all(obj))\n@@ -383,6 +385,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,6 +393,15 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n+    # Check for classmethod-wrapped properties (Python 3.9+)\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For Python 3.9, use __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+\n     return isinstance(obj, property)\n \n \n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..c10c53eed 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for older Python versions\n+        return isinstance(obj.__func__, property)\n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2669,22 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for older Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..a1d35796f 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,13 +245,19 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n-def isclassmethod(obj: Any) -> bool:\n-    \"\"\"Check if the object is classmethod.\"\"\"\n-    if isinstance(obj, classmethod):\n-        return True\n-    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n-        return True\n \n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    elif isinstance(obj, classmethod):\n+        # Check if classmethod wraps a property (for @classmethod @property)\n+        if isinstance(obj.__func__, property):\n+            return True\n+        # Python 3.10+ compatibility: check __wrapped__ attribute\n+        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+    \n     return False\n \n \n@@ -356,8 +362,12 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n+\n def isroutine(obj: Any) -> bool:\n     \"\"\"Check is any kind of function or method.\"\"\"\n+    # Don't treat classmethod-wrapped properties as routines\n+    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n+        return False\n     return inspect.isroutine(unwrap_all(obj))\n \n \n@@ -383,6 +393,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,6 +401,15 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+\n     return isinstance(obj, property)\n \n \n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..ff830fe00 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ attribute if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For earlier Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2658,9 +2671,16 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     # before AttributeDocumenter\n     priority = AttributeDocumenter.priority + 1\n \n+    @classmethod\n+\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n+        # Check for classmethod-wrapped properties first\n+        if isinstance(member, classmethod) and hasattr(member, '__func__'):\n+            if inspect.isproperty(member.__func__):\n+                return isinstance(parent, ClassDocumenter)\n+        \n         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n \n     def document_members(self, all_members: bool = False) -> None:\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..30a0d4805 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,6 +245,7 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n+\n def isclassmethod(obj: Any) -> bool:\n     \"\"\"Check if the object is classmethod.\"\"\"\n     if isinstance(obj, classmethod):\n@@ -356,9 +357,22 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n-def isroutine(obj: Any) -> bool:\n-    \"\"\"Check is any kind of function or method.\"\"\"\n-    return inspect.isroutine(unwrap_all(obj))\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for older Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def iscoroutinefunction(obj: Any) -> bool:\n@@ -383,6 +397,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,6 +405,15 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if sys.version_info >= (3, 10) and hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+\n     return isinstance(obj, property)\n \n \n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..6d2131c86 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2672,24 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+@classmethod\n+def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n+                        ) -> bool:\n+    # Check for regular properties\n+    if inspect.isproperty(member):\n+        return isinstance(parent, ClassDocumenter)\n+    \n+    # Check for classmethod-wrapped properties (common pattern for class properties)\n+    if isinstance(member, classmethod):\n+        # Check if the wrapped function is a property\n+        if hasattr(member, '__func__') and inspect.isproperty(member.__func__):\n+            return isinstance(parent, ClassDocumenter)\n+        # Python 3.10+ compatibility - check __wrapped__ attribute\n+        if hasattr(member, '__wrapped__') and inspect.isproperty(member.__wrapped__):\n+            return isinstance(parent, ClassDocumenter)\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..3c101c515 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,13 +245,19 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n-def isclassmethod(obj: Any) -> bool:\n-    \"\"\"Check if the object is classmethod.\"\"\"\n-    if isinstance(obj, classmethod):\n-        return True\n-    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n-        return True\n \n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    elif isinstance(obj, classmethod):\n+        # Check if classmethod wraps a property (for @classmethod @property pattern)\n+        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n+            return True\n+        # Python 3.10+ compatibility: check __wrapped__ attribute\n+        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+    \n     return False\n \n \n@@ -356,8 +362,12 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n+\n def isroutine(obj: Any) -> bool:\n     \"\"\"Check is any kind of function or method.\"\"\"\n+    # Don't treat classmethod-wrapped properties as routines\n+    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n+        return False\n     return inspect.isroutine(unwrap_all(obj))\n \n \n@@ -383,6 +393,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,7 +401,20 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..5dc0ae1c4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, check __wrapped__ attribute if available\n+        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+        # Fallback for older Python versions\n+        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n+            return True\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2672,22 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..7c078d4c6 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,13 +245,19 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n-def isclassmethod(obj: Any) -> bool:\n-    \"\"\"Check if the object is classmethod.\"\"\"\n-    if isinstance(obj, classmethod):\n-        return True\n-    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n-        return True\n \n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    elif isinstance(obj, classmethod):\n+        # Check if classmethod wraps a property (for @classmethod @property pattern)\n+        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n+            return True\n+        # Python 3.10+ compatibility: check __wrapped__ attribute\n+        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+    \n     return False\n \n \n@@ -356,9 +362,23 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n-def isroutine(obj: Any) -> bool:\n-    \"\"\"Check is any kind of function or method.\"\"\"\n-    return inspect.isroutine(unwrap_all(obj))\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def iscoroutinefunction(obj: Any) -> bool:\n@@ -383,6 +403,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,7 +411,20 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ attribute if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..cce1a9a3d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for older Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2672,22 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for earlier Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..8225e923a 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,6 +245,7 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n+\n def isclassmethod(obj: Any) -> bool:\n     \"\"\"Check if the object is classmethod.\"\"\"\n     if isinstance(obj, classmethod):\n@@ -356,8 +357,12 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n+\n def isroutine(obj: Any) -> bool:\n     \"\"\"Check is any kind of function or method.\"\"\"\n+    # Don't treat classmethod-wrapped properties as routines\n+    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n+        return False\n     return inspect.isroutine(unwrap_all(obj))\n \n \n@@ -383,6 +388,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,7 +396,20 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..fd0de217b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for older Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2672,24 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+@classmethod\n+def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n+                        ) -> bool:\n+    # Check for regular properties\n+    if inspect.isproperty(member):\n+        return isinstance(parent, ClassDocumenter)\n+    \n+    # Check for classmethod-wrapped properties (classproperties)\n+    if isinstance(member, classmethod):\n+        # For Python 3.10+, check __wrapped__ attribute\n+        if hasattr(member, '__wrapped__') and inspect.isproperty(member.__wrapped__):\n+            return isinstance(parent, ClassDocumenter)\n+        # For older Python versions, check __func__\n+        if hasattr(member, '__func__') and inspect.isproperty(member.__func__):\n+            return isinstance(parent, ClassDocumenter)\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..7363ab4d4 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,6 +245,7 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n+\n def isclassmethod(obj: Any) -> bool:\n     \"\"\"Check if the object is classmethod.\"\"\"\n     if isinstance(obj, classmethod):\n@@ -356,9 +357,14 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n+\n def isroutine(obj: Any) -> bool:\n     \"\"\"Check is any kind of function or method.\"\"\"\n-    return inspect.isroutine(unwrap_all(obj))\n+    unwrapped = unwrap_all(obj)\n+    # Don't treat classmethod-wrapped properties as routines\n+    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n+        return False\n+    return inspect.isroutine(unwrapped)\n \n \n def iscoroutinefunction(obj: Any) -> bool:\n@@ -383,6 +389,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,7 +397,20 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..035c157ae 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2672,23 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Handle classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # Check if the classmethod wraps a property\n+        func = obj.__func__\n+        if isinstance(func, property):\n+            return True\n+        # For Python 3.10+ compatibility, check __wrapped__ attribute\n+        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..a89422ae2 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,13 +245,19 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n-def isclassmethod(obj: Any) -> bool:\n-    \"\"\"Check if the object is classmethod.\"\"\"\n-    if isinstance(obj, classmethod):\n-        return True\n-    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n-        return True\n \n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    elif isinstance(obj, classmethod):\n+        # Check if classmethod wraps a property (for @classmethod @property pattern)\n+        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n+            return True\n+        # Python 3.10+ compatibility: check __wrapped__ attribute\n+        elif hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+    \n     return False\n \n \n@@ -356,9 +362,22 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n-def isroutine(obj: Any) -> bool:\n-    \"\"\"Check is any kind of function or method.\"\"\"\n-    return inspect.isroutine(unwrap_all(obj))\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property (Python 3.9+ compatibility)\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For Python 3.9 and earlier, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def iscoroutinefunction(obj: Any) -> bool:\n@@ -383,6 +402,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,7 +410,20 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if sys.version_info >= (3, 10) and hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..e5968cfc7 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property (Python 3.9+ pattern)\n+    if isinstance(obj, classmethod):\n+        # Check if the classmethod wraps a property\n+        if isinstance(obj.__func__, property):\n+            return True\n+        # For Python 3.10+ compatibility, check __wrapped__ attribute\n+        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2672,22 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property or a classmethod-wrapped property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property (common pattern for class properties)\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for older Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..89cf02bfe 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,13 +245,20 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n-def isclassmethod(obj: Any) -> bool:\n-    \"\"\"Check if the object is classmethod.\"\"\"\n-    if isinstance(obj, classmethod):\n-        return True\n-    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n-        return True\n \n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    elif isinstance(obj, classmethod):\n+        # Handle classmethod-wrapped properties\n+        if hasattr(obj, '__wrapped__'):\n+            # Python 3.10+ has __wrapped__ attribute\n+            return isinstance(obj.__wrapped__, property)\n+        elif hasattr(obj, '__func__'):\n+            # Pre-3.10 compatibility: check __func__\n+            return isinstance(obj.__func__, property)\n+    \n     return False\n \n \n@@ -356,9 +363,22 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n-def isroutine(obj: Any) -> bool:\n-    \"\"\"Check is any kind of function or method.\"\"\"\n-    return inspect.isroutine(unwrap_all(obj))\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older Python versions, check __func__\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def iscoroutinefunction(obj: Any) -> bool:\n@@ -383,6 +403,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,7 +411,20 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, use __wrapped__ if available\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback for older Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..a2a9393c4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2067,9 +2067,22 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+\n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is a property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped properties\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+ compatibility, check __wrapped__ attribute first\n+        if hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # Fallback to __func__ for older Python versions\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2659,9 +2672,23 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     priority = AttributeDocumenter.priority + 1\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+\n+@classmethod\n+def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n+                        ) -> bool:\n+    # Check for regular properties and classmethod-wrapped properties\n+    if inspect.isproperty(member):\n+        return isinstance(parent, ClassDocumenter)\n+    \n+    # Check for classmethod-wrapped properties (for compatibility with classproperty patterns)\n+    if isinstance(member, classmethod) and hasattr(member, '__func__'):\n+        if inspect.isproperty(member.__func__):\n+            return isinstance(parent, ClassDocumenter)\n+        # Python 3.10+ compatibility: check __wrapped__ attribute\n+        if hasattr(member, '__wrapped__') and inspect.isproperty(member.__wrapped__):\n+            return isinstance(parent, ClassDocumenter)\n+    \n+    return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..8062ae1f1 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,13 +245,19 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n-def isclassmethod(obj: Any) -> bool:\n-    \"\"\"Check if the object is classmethod.\"\"\"\n-    if isinstance(obj, classmethod):\n-        return True\n-    elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n-        return True\n \n+def isproperty(obj: Any) -> bool:\n+    \"\"\"Check if the object is property.\"\"\"\n+    if isinstance(obj, property):\n+        return True\n+    elif isinstance(obj, classmethod):\n+        # Check if classmethod wraps a property (for @classmethod @property pattern)\n+        if hasattr(obj, '__func__') and isinstance(obj.__func__, property):\n+            return True\n+        # Python 3.10+ compatibility: check __wrapped__ attribute\n+        if hasattr(obj, '__wrapped__') and isinstance(obj.__wrapped__, property):\n+            return True\n+    \n     return False\n \n \n@@ -356,8 +362,12 @@ def isbuiltin(obj: Any) -> bool:\n     return inspect.isbuiltin(unwrap_all(obj))\n \n \n+\n def isroutine(obj: Any) -> bool:\n     \"\"\"Check is any kind of function or method.\"\"\"\n+    # Don't treat classmethod-wrapped properties as routines\n+    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n+        return False\n     return inspect.isroutine(unwrap_all(obj))\n \n \n@@ -383,6 +393,7 @@ def iscoroutinefunction(obj: Any) -> bool:\n         return False\n \n \n+\n def isproperty(obj: Any) -> bool:\n     \"\"\"Check if the object is property.\"\"\"\n     if sys.version_info >= (3, 8):\n@@ -390,7 +401,20 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    # Check for regular property\n+    if isinstance(obj, property):\n+        return True\n+    \n+    # Check for classmethod-wrapped property\n+    if isinstance(obj, classmethod):\n+        # For Python 3.10+, check __wrapped__ attribute\n+        if sys.version_info >= (3, 10) and hasattr(obj, '__wrapped__'):\n+            return isinstance(obj.__wrapped__, property)\n+        # For older versions, check __func__ attribute\n+        elif hasattr(obj, '__func__'):\n+            return isinstance(obj.__func__, property)\n+    \n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n"
  }
}