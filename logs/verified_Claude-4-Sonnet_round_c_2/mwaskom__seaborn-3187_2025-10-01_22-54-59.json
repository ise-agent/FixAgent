{
  "zero_patches": {
    "Location 1 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 377-382)": "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') \n                             else f\"{label[1:]}+{offset_text}\" if label != '-0' \n                             else f\"-{offset_text}\"\n                             for label in labels]\n            \n            new._legend = list(locs), list(labels)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/seaborn/seaborn/_core/scales.py lines 377-382)": [
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label} {offset_text}\" for label in labels]\n            \n            new._legend = list(locs), list(labels)\n",
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label} {offset_text}\" if label != \"0\" else label for label in labels]\n            \n            new._legend = list(locs), list(labels)\n",
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label}{offset_text}\" if label != \"0\" else label for label in labels]\n            \n            new._legend = list(locs), list(labels)\n",
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label}{offset_text}\" for label in labels]\n            \n            new._legend = list(locs), list(labels)\n",
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') \n                             else f\"{label}+{offset_text}\" for label in labels]\n            \n            new._legend = list(locs), list(labels)\n",
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') \n                             else f\"{label}+{offset_text}\" for label in labels]\n            \n            new._legend = list(locs), list(labels)\n",
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') else f\"{label}{offset_text}\" for label in labels]\n            \n            new._legend = list(locs), list(labels)\n",
      "\n        if prop.legend:\n            axis.set_view_interval(vmin, vmax)\n            locs = axis.major.locator()\n            locs = locs[(vmin <= locs) & (locs <= vmax)]\n            labels = axis.major.formatter.format_ticks(locs)\n            \n            # Handle ScalarFormatter offset for large numbers\n            from matplotlib.ticker import ScalarFormatter\n            if isinstance(axis.major.formatter, ScalarFormatter):\n                offset_text = axis.major.formatter.get_offset_text()\n                if offset_text:\n                    # Incorporate offset into labels\n                    labels = [f\"{label}{offset_text}\" for label in labels]\n            \n            new._legend = list(locs), list(labels)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..f1743843 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,20 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            # ScalarFormatter is already imported in this file\n+            if hasattr(mpl.ticker, 'ScalarFormatter') and isinstance(axis.major.formatter, mpl.ticker.ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:  # If there's an offset, incorporate it into labels\n+                    labels = [f\"{label}Ã—{offset_text}\" for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_0": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..69439bea 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,24 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') \n+                             else f\"{label[1:]}+{offset_text}\" if label != '-0' \n+                             else f\"-{offset_text}\"\n+                             for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_1": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..c9e99792 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,21 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label} {offset_text}\" for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_2": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..79603243 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,21 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label} {offset_text}\" if label != \"0\" else label for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_3": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..47125dce 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,21 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label}{offset_text}\" if label != \"0\" else label for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_4": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..f95bf2e2 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,21 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label}{offset_text}\" for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_5": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..0ede02c2 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,22 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') \n+                             else f\"{label}+{offset_text}\" for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_6": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..0ede02c2 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,22 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') \n+                             else f\"{label}+{offset_text}\" for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_7": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..d60264f3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,21 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label}+{offset_text}\" if not label.startswith('-') else f\"{label}{offset_text}\" for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n",
    "variant_8": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..f95bf2e2 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -374,11 +374,21 @@ class ContinuousBase(Scale):\n         # Could add a Scale parameter, or perhaps Scale.suppress()?\n         # Are there other useful parameters that would be in Scale.legend()\n         # besides allowing Scale.legend(False)?\n+\n         if prop.legend:\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            from matplotlib.ticker import ScalarFormatter\n+            if isinstance(axis.major.formatter, ScalarFormatter):\n+                offset_text = axis.major.formatter.get_offset_text()\n+                if offset_text:\n+                    # Incorporate offset into labels\n+                    labels = [f\"{label}{offset_text}\" for label in labels]\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n"
  }
}