{
  "zero_patches": {
    "Location 1 (/root/hy/projects/requests/requests/sessions.py lines 57-60)": "\ndef merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n    \"\"\"\n    Determines appropriate setting for a given request, taking into account the\n    explicit setting on that request, and the setting in the session. If a\n    setting is a dictionary, they will be merged together using `dict_class`\n    \"\"\"\n\n    if session_setting is None:\n        return request_setting\n\n    if request_setting is None:\n        return session_setting\n\n    # Bypass if not a dictionary (e.g. verify)\n    if not (\n            isinstance(session_setting, Mapping) and\n            isinstance(request_setting, Mapping)\n    ):\n        return request_setting\n\n    merged_setting = dict_class(to_key_val_list(session_setting))\n    merged_setting.update(to_key_val_list(request_setting))\n\n    # Remove keys that are set to None.\n    for (k, v) in merged_setting.items():\n        if v is None:\n            del merged_setting[k]\n\n    return merged_setting\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/requests/requests/sessions.py lines 57-60)": [
      "\n    # Remove keys that are set to None.\n    for (k, v) in merged_setting.items():\n        if v is None:\n            del merged_setting[k]\n",
      "\ndef merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n    \"\"\"\n    Determines appropriate setting for a given request, taking into account the\n    explicit setting on that request, and the setting in the session. If a\n    setting is a dictionary, they will be merged together using `dict_class`\n    \"\"\"\n\n    if session_setting is None:\n        return request_setting\n\n    if request_setting is None:\n        return session_setting\n\n    # Bypass if not a dictionary (e.g. verify)\n    if not (\n            isinstance(session_setting, Mapping) and\n            isinstance(request_setting, Mapping)\n    ):\n        return request_setting\n\n    merged_setting = dict_class(to_key_val_list(session_setting))\n    merged_setting.update(to_key_val_list(request_setting))\n\n    # Remove keys that are set to None.\n    for (k, v) in list(merged_setting.items()):\n        if v is None:\n            del merged_setting[k]\n\n    return merged_setting\n",
      "\ndef merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n    \"\"\"\n    Determines appropriate setting for a given request, taking into account the\n    explicit setting on that request, and the setting in the session. If a\n    setting is a dictionary, they will be merged together using `dict_class`\n    \"\"\"\n\n    if session_setting is None:\n        return request_setting\n\n    if request_setting is None:\n        return session_setting\n\n    # Attempt to add optimizations, where we can skip the merge\n    if not (\n            isinstance(session_setting, Mapping) and\n            isinstance(request_setting, Mapping)\n    ):\n        return request_setting\n\n    merged_setting = dict_class(to_key_val_list(session_setting))\n    merged_setting.update(to_key_val_list(request_setting))\n\n    # Remove keys that are set to None.\n    for (k, v) in list(merged_setting.items()):\n        if v is None:\n            del merged_setting[k]\n\n    return merged_setting\n",
      "\n    # Remove keys that are set to None.\n    for (k, v) in merged_setting.items():\n        if v is None:\n            del merged_setting[k]\n",
      "\ndef merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n    \"\"\"\n    Determines appropriate setting for a given request, taking into account the\n    explicit setting on that request, and the setting in the session. If a\n    setting is a dictionary, they will be merged together using `dict_class`\n    \"\"\"\n\n    if session_setting is None:\n        return request_setting\n\n    if request_setting is None:\n        return session_setting\n\n    # Bypass if not a dictionary (e.g. verify)\n    if not (\n            isinstance(session_setting, Mapping) and\n            isinstance(request_setting, Mapping)\n    ):\n        return request_setting\n\n    merged_setting = dict_class(to_key_val_list(session_setting))\n    merged_setting.update(to_key_val_list(request_setting))\n\n    # Remove keys that are set to None.\n    for (k, v) in list(merged_setting.items()):\n        if v is None:\n            del merged_setting[k]\n\n    return merged_setting\n",
      "\ndef merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n    if session_setting is None:\n        return request_setting\n\n    if request_setting is None:\n        return session_setting\n\n    # Bypass if not a dictionary (e.g. verify)\n    if not (\n            isinstance(session_setting, Mapping) and\n            isinstance(request_setting, Mapping)\n    ):\n        return request_setting\n\n    merged_setting = dict_class(to_key_val_list(session_setting))\n    merged_setting.update(to_key_val_list(request_setting))\n\n    # Remove keys that are set to None.\n    for (k, v) in list(merged_setting.items()):\n        if v is None:\n            del merged_setting[k]\n\n    return merged_setting\n",
      "\n    # Remove keys that are set to None.\n    for (k, v) in merged_setting.items():\n        if v is None:\n            del merged_setting[k]\n",
      "\n    # Remove keys that are set to None.\n    for (k, v) in merged_setting.items():\n        if v is None:\n            del merged_setting[k]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..d10af89d 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -54,8 +54,9 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+\n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in list(merged_setting.items()):\n         if v is None:\n             del merged_setting[k]\n \n",
    "variant_0": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..c39f0c30 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -31,6 +31,30 @@ from .status_codes import codes\n from .models import REDIRECT_STATI\n \n \n+def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n+    \"\"\"\n+    Determines appropriate setting for a given request, taking into account the\n+    explicit setting on that request, and the setting in the session. If a\n+    setting is a dictionary, they will be merged together using `dict_class`\n+    \"\"\"\n+\n+    if session_setting is None:\n+        return request_setting\n+\n+    if request_setting is None:\n+        return session_setting\n+\n+    # Bypass if not a dictionary (e.g. verify)\n+    if not (\n+            isinstance(session_setting, Mapping) and\n+            isinstance(request_setting, Mapping)\n+    ):\n+        return request_setting\n+\n+    merged_setting = dict_class(to_key_val_list(session_setting))\n+    merged_setting.update(to_key_val_list(request_setting))\n+\n+\n def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     \"\"\"\n     Determines appropriate setting for a given request, taking into account the\n@@ -55,12 +79,14 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting.update(to_key_val_list(request_setting))\n \n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in merged_setting.items():\n         if v is None:\n             del merged_setting[k]\n \n     return merged_setting\n \n+    return merged_setting\n+\n \n def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     \"\"\"\n",
    "variant_1": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..fdf14651 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -54,8 +54,9 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+\n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in merged_setting.items():\n         if v is None:\n             del merged_setting[k]\n \n",
    "variant_2": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..396f08f9 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -31,6 +31,30 @@ from .status_codes import codes\n from .models import REDIRECT_STATI\n \n \n+def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n+    \"\"\"\n+    Determines appropriate setting for a given request, taking into account the\n+    explicit setting on that request, and the setting in the session. If a\n+    setting is a dictionary, they will be merged together using `dict_class`\n+    \"\"\"\n+\n+    if session_setting is None:\n+        return request_setting\n+\n+    if request_setting is None:\n+        return session_setting\n+\n+    # Bypass if not a dictionary (e.g. verify)\n+    if not (\n+            isinstance(session_setting, Mapping) and\n+            isinstance(request_setting, Mapping)\n+    ):\n+        return request_setting\n+\n+    merged_setting = dict_class(to_key_val_list(session_setting))\n+    merged_setting.update(to_key_val_list(request_setting))\n+\n+\n def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     \"\"\"\n     Determines appropriate setting for a given request, taking into account the\n@@ -55,12 +79,14 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting.update(to_key_val_list(request_setting))\n \n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in list(merged_setting.items()):\n         if v is None:\n             del merged_setting[k]\n \n     return merged_setting\n \n+    return merged_setting\n+\n \n def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     \"\"\"\n",
    "variant_3": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..0c1300b7 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -54,13 +54,39 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+\n+def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n+    \"\"\"\n+    Determines appropriate setting for a given request, taking into account the\n+    explicit setting on that request, and the setting in the session. If a\n+    setting is a dictionary, they will be merged together using `dict_class`\n+    \"\"\"\n+\n+    if session_setting is None:\n+        return request_setting\n+\n+    if request_setting is None:\n+        return session_setting\n+\n+    # Attempt to add optimizations, where we can skip the merge\n+    if not (\n+            isinstance(session_setting, Mapping) and\n+            isinstance(request_setting, Mapping)\n+    ):\n+        return request_setting\n+\n+    merged_setting = dict_class(to_key_val_list(session_setting))\n+    merged_setting.update(to_key_val_list(request_setting))\n+\n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in list(merged_setting.items()):\n         if v is None:\n             del merged_setting[k]\n \n     return merged_setting\n \n+    return merged_setting\n+\n \n def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     \"\"\"\n",
    "variant_4": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..fdf14651 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -54,8 +54,9 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+\n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in merged_setting.items():\n         if v is None:\n             del merged_setting[k]\n \n",
    "variant_5": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..396f08f9 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -31,6 +31,30 @@ from .status_codes import codes\n from .models import REDIRECT_STATI\n \n \n+def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n+    \"\"\"\n+    Determines appropriate setting for a given request, taking into account the\n+    explicit setting on that request, and the setting in the session. If a\n+    setting is a dictionary, they will be merged together using `dict_class`\n+    \"\"\"\n+\n+    if session_setting is None:\n+        return request_setting\n+\n+    if request_setting is None:\n+        return session_setting\n+\n+    # Bypass if not a dictionary (e.g. verify)\n+    if not (\n+            isinstance(session_setting, Mapping) and\n+            isinstance(request_setting, Mapping)\n+    ):\n+        return request_setting\n+\n+    merged_setting = dict_class(to_key_val_list(session_setting))\n+    merged_setting.update(to_key_val_list(request_setting))\n+\n+\n def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     \"\"\"\n     Determines appropriate setting for a given request, taking into account the\n@@ -55,12 +79,14 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting.update(to_key_val_list(request_setting))\n \n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in list(merged_setting.items()):\n         if v is None:\n             del merged_setting[k]\n \n     return merged_setting\n \n+    return merged_setting\n+\n \n def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     \"\"\"\n",
    "variant_6": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..df7f1f6c 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -54,13 +54,33 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+\n+def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n+    if session_setting is None:\n+        return request_setting\n+\n+    if request_setting is None:\n+        return session_setting\n+\n+    # Bypass if not a dictionary (e.g. verify)\n+    if not (\n+            isinstance(session_setting, Mapping) and\n+            isinstance(request_setting, Mapping)\n+    ):\n+        return request_setting\n+\n+    merged_setting = dict_class(to_key_val_list(session_setting))\n+    merged_setting.update(to_key_val_list(request_setting))\n+\n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in list(merged_setting.items()):\n         if v is None:\n             del merged_setting[k]\n \n     return merged_setting\n \n+    return merged_setting\n+\n \n def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     \"\"\"\n",
    "variant_7": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..fdf14651 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -54,8 +54,9 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+\n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in merged_setting.items():\n         if v is None:\n             del merged_setting[k]\n \n",
    "variant_8": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..fdf14651 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -54,8 +54,9 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+\n     # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    for (k, v) in merged_setting.items():\n         if v is None:\n             del merged_setting[k]\n \n"
  }
}