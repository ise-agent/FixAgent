{
  "zero_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 425-430)": "\n    def _from_temp_dataset(\n        self, dataset: Dataset, name: Hashable = __default\n    ) -> \"DataArray\":\n        variable = dataset._variables.pop(_THIS_ARRAY)\n        coords = dataset._variables\n        \n        # Preserve dataset attributes by copying them to the variable\n        if dataset.attrs:\n            variable = variable.copy()\n            variable.attrs.update(dataset.attrs)\n        \n        return self._replace(variable, coords, name)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/dataarray.py lines 425-430)": [
      "\ndef _from_temp_dataset(\n    self, dataset: Dataset, name: Hashable = __default\n) -> \"DataArray\":\n    variable = dataset._variables.pop(_THIS_ARRAY)\n    coords = dataset._variables\n    \n    # Preserve dataset attributes by copying them to the variable\n    if dataset.attrs:\n        variable = variable.copy()\n        variable.attrs.update(dataset.attrs)\n    \n    return self._replace(variable, coords, name)\n",
      "\ndef _from_temp_dataset(\n    self, dataset: Dataset, name: Hashable = __default\n) -> \"DataArray\":\n    variable = dataset._variables.pop(_THIS_ARRAY)\n    coords = dataset._variables\n    \n    # Preserve dataset attributes by copying them to the variable\n    if dataset.attrs:\n        variable = variable.copy()\n        variable.attrs.update(dataset.attrs)\n    \n    return self._replace(variable, coords, name)\n",
      "\ndef _from_temp_dataset(\n    self, dataset: Dataset, name: Hashable = __default\n) -> \"DataArray\":\n    variable = dataset._variables.pop(_THIS_ARRAY)\n    coords = dataset._variables\n    \n    # Preserve dataset attributes by copying them to the variable\n    if dataset.attrs:\n        variable = variable.copy()\n        variable.attrs.update(dataset.attrs)\n    \n    return self._replace(variable, coords, name)\n",
      "\n    def _from_temp_dataset(\n        self, dataset: Dataset, name: Hashable = __default\n    ) -> \"DataArray\":\n        variable = dataset._variables.pop(_THIS_ARRAY)\n        coords = dataset._variables\n        \n        # Preserve dataset attributes by copying them to the variable\n        if dataset.attrs:\n            variable = variable.copy()\n            variable.attrs.update(dataset.attrs)\n        \n        return self._replace(variable, coords, name)\n",
      "\ndef _from_temp_dataset(\n    self, dataset: Dataset, name: Hashable = __default\n) -> \"DataArray\":\n    variable = dataset._variables.pop(_THIS_ARRAY)\n    coords = dataset._variables\n    \n    # Preserve dataset attributes by copying them to the variable\n    if dataset.attrs:\n        variable = variable.copy()\n        variable.attrs.update(dataset.attrs)\n    \n    return self._replace(variable, coords, name)\n",
      "\n    def _from_temp_dataset(\n        self, dataset: Dataset, name: Hashable = __default\n    ) -> \"DataArray\":\n        variable = dataset._variables.pop(_THIS_ARRAY)\n        coords = dataset._variables\n        \n        # Preserve dataset attributes by copying them to the variable\n        if dataset.attrs:\n            variable = variable.copy()\n            variable.attrs.update(dataset.attrs)\n        \n        return self._replace(variable, coords, name)\n",
      "\n    def _from_temp_dataset(\n        self, dataset: Dataset, name: Hashable = __default\n    ) -> \"DataArray\":\n        variable = dataset._variables.pop(_THIS_ARRAY)\n        coords = dataset._variables\n        \n        # Preserve dataset attributes by copying them to the variable\n        if dataset.attrs:\n            variable = variable.copy()\n            variable.attrs.update(dataset.attrs)\n        \n        return self._replace(variable, coords, name)\n",
      "\ndef _from_temp_dataset(\n    self, dataset: Dataset, name: Hashable = __default\n) -> \"DataArray\":\n    variable = dataset._variables.pop(_THIS_ARRAY)\n    coords = dataset._variables\n    \n    # Preserve dataset attributes by copying them to the variable\n    if dataset.attrs:\n        variable = variable.copy()\n        variable.attrs.update(dataset.attrs)\n    \n    return self._replace(variable, coords, name)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..90c28bb2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,11 +422,18 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n+\n     def _from_temp_dataset(\n         self, dataset: Dataset, name: Hashable = __default\n     ) -> \"DataArray\":\n         variable = dataset._variables.pop(_THIS_ARRAY)\n         coords = dataset._variables\n+        \n+        # Preserve dataset attributes by copying them to the variable\n+        if dataset.attrs:\n+            variable = variable.copy()\n+            variable.attrs.update(dataset.attrs)\n+        \n         return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n",
    "variant_0": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..90c28bb2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,11 +422,18 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n+\n     def _from_temp_dataset(\n         self, dataset: Dataset, name: Hashable = __default\n     ) -> \"DataArray\":\n         variable = dataset._variables.pop(_THIS_ARRAY)\n         coords = dataset._variables\n+        \n+        # Preserve dataset attributes by copying them to the variable\n+        if dataset.attrs:\n+            variable = variable.copy()\n+            variable.attrs.update(dataset.attrs)\n+        \n         return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n",
    "variant_1": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..6e73ca45 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,12 +422,19 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n-    def _from_temp_dataset(\n-        self, dataset: Dataset, name: Hashable = __default\n-    ) -> \"DataArray\":\n-        variable = dataset._variables.pop(_THIS_ARRAY)\n-        coords = dataset._variables\n-        return self._replace(variable, coords, name)\n+\n+def _from_temp_dataset(\n+    self, dataset: Dataset, name: Hashable = __default\n+) -> \"DataArray\":\n+    variable = dataset._variables.pop(_THIS_ARRAY)\n+    coords = dataset._variables\n+    \n+    # Preserve dataset attributes by copying them to the variable\n+    if dataset.attrs:\n+        variable = variable.copy()\n+        variable.attrs.update(dataset.attrs)\n+    \n+    return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n         def subset(dim, label):\n",
    "variant_2": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..6e73ca45 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,12 +422,19 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n-    def _from_temp_dataset(\n-        self, dataset: Dataset, name: Hashable = __default\n-    ) -> \"DataArray\":\n-        variable = dataset._variables.pop(_THIS_ARRAY)\n-        coords = dataset._variables\n-        return self._replace(variable, coords, name)\n+\n+def _from_temp_dataset(\n+    self, dataset: Dataset, name: Hashable = __default\n+) -> \"DataArray\":\n+    variable = dataset._variables.pop(_THIS_ARRAY)\n+    coords = dataset._variables\n+    \n+    # Preserve dataset attributes by copying them to the variable\n+    if dataset.attrs:\n+        variable = variable.copy()\n+        variable.attrs.update(dataset.attrs)\n+    \n+    return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n         def subset(dim, label):\n",
    "variant_3": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..6e73ca45 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,12 +422,19 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n-    def _from_temp_dataset(\n-        self, dataset: Dataset, name: Hashable = __default\n-    ) -> \"DataArray\":\n-        variable = dataset._variables.pop(_THIS_ARRAY)\n-        coords = dataset._variables\n-        return self._replace(variable, coords, name)\n+\n+def _from_temp_dataset(\n+    self, dataset: Dataset, name: Hashable = __default\n+) -> \"DataArray\":\n+    variable = dataset._variables.pop(_THIS_ARRAY)\n+    coords = dataset._variables\n+    \n+    # Preserve dataset attributes by copying them to the variable\n+    if dataset.attrs:\n+        variable = variable.copy()\n+        variable.attrs.update(dataset.attrs)\n+    \n+    return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n         def subset(dim, label):\n",
    "variant_4": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..90c28bb2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,11 +422,18 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n+\n     def _from_temp_dataset(\n         self, dataset: Dataset, name: Hashable = __default\n     ) -> \"DataArray\":\n         variable = dataset._variables.pop(_THIS_ARRAY)\n         coords = dataset._variables\n+        \n+        # Preserve dataset attributes by copying them to the variable\n+        if dataset.attrs:\n+            variable = variable.copy()\n+            variable.attrs.update(dataset.attrs)\n+        \n         return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n",
    "variant_5": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..6e73ca45 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,12 +422,19 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n-    def _from_temp_dataset(\n-        self, dataset: Dataset, name: Hashable = __default\n-    ) -> \"DataArray\":\n-        variable = dataset._variables.pop(_THIS_ARRAY)\n-        coords = dataset._variables\n-        return self._replace(variable, coords, name)\n+\n+def _from_temp_dataset(\n+    self, dataset: Dataset, name: Hashable = __default\n+) -> \"DataArray\":\n+    variable = dataset._variables.pop(_THIS_ARRAY)\n+    coords = dataset._variables\n+    \n+    # Preserve dataset attributes by copying them to the variable\n+    if dataset.attrs:\n+        variable = variable.copy()\n+        variable.attrs.update(dataset.attrs)\n+    \n+    return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n         def subset(dim, label):\n",
    "variant_6": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..90c28bb2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,11 +422,18 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n+\n     def _from_temp_dataset(\n         self, dataset: Dataset, name: Hashable = __default\n     ) -> \"DataArray\":\n         variable = dataset._variables.pop(_THIS_ARRAY)\n         coords = dataset._variables\n+        \n+        # Preserve dataset attributes by copying them to the variable\n+        if dataset.attrs:\n+            variable = variable.copy()\n+            variable.attrs.update(dataset.attrs)\n+        \n         return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n",
    "variant_7": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..90c28bb2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,11 +422,18 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n+\n     def _from_temp_dataset(\n         self, dataset: Dataset, name: Hashable = __default\n     ) -> \"DataArray\":\n         variable = dataset._variables.pop(_THIS_ARRAY)\n         coords = dataset._variables\n+        \n+        # Preserve dataset attributes by copying them to the variable\n+        if dataset.attrs:\n+            variable = variable.copy()\n+            variable.attrs.update(dataset.attrs)\n+        \n         return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n",
    "variant_8": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..6e73ca45 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -422,12 +422,19 @@ class DataArray(AbstractArray, DataWithCoords):\n     def _to_temp_dataset(self) -> Dataset:\n         return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)\n \n-    def _from_temp_dataset(\n-        self, dataset: Dataset, name: Hashable = __default\n-    ) -> \"DataArray\":\n-        variable = dataset._variables.pop(_THIS_ARRAY)\n-        coords = dataset._variables\n-        return self._replace(variable, coords, name)\n+\n+def _from_temp_dataset(\n+    self, dataset: Dataset, name: Hashable = __default\n+) -> \"DataArray\":\n+    variable = dataset._variables.pop(_THIS_ARRAY)\n+    coords = dataset._variables\n+    \n+    # Preserve dataset attributes by copying them to the variable\n+    if dataset.attrs:\n+        variable = variable.copy()\n+        variable.attrs.update(dataset.attrs)\n+    \n+    return self._replace(variable, coords, name)\n \n     def _to_dataset_split(self, dim: Hashable) -> Dataset:\n         def subset(dim, label):\n"
  }
}