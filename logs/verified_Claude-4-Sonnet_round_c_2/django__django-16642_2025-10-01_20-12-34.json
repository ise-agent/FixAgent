{
  "zero_patches": {
    "Location 1 (/root/hy/projects/django/django/http/response.py lines 611-615)": "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
    "Location 2 (/root/hy/projects/django/tests/responses/test_fileresponse.py lines 254-258)": "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/django/django/http/response.py lines 611-615)": [
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n",
      "\n                content_type = {\n                    \"bzip2\": \"application/x-bzip\",\n                    \"gzip\": \"application/gzip\",\n                    \"xz\": \"application/x-xz\",\n                    \"compress\": \"application/x-compress\",\n                    \"br\": \"application/x-br\",\n                }.get(encoding, content_type)\n"
    ],
    "Location 2 (/root/hy/projects/django/tests/responses/test_fileresponse.py lines 254-258)": [
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n",
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n",
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n",
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n",
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n",
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n",
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n",
      "\n        test_tuples = (\n            (\".tar.gz\", \"application/gzip\"),\n            (\".tar.bz2\", \"application/x-bzip\"),\n            (\".tar.xz\", \"application/x-xz\"),\n            (\".tar.Z\", \"application/x-compress\"),\n            (\".tar.br\", \"application/x-br\"),\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_0": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_1": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_2": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_3": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_4": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_5": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_6": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_7": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
    "variant_8": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..dfde91c1e2 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,10 +608,13 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n+\n                 content_type = {\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-br\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 952fe4dd7c..aaaa961a41 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -251,10 +251,13 @@ class FileResponseTests(SimpleTestCase):\n         and a compression Content-Encoding, browsers might automatically\n         uncompress the file, which is most probably not wanted.\n         \"\"\"\n+\n         test_tuples = (\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-br\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n"
  }
}