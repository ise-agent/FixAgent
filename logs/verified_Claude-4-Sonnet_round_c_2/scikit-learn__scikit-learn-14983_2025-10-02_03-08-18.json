{
  "zero_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/model_selection/_split.py lines 1164-1165)": "\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where `n_samples` is the number of samples\n            and `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            The target variable for supervised learning problems.\n\n        groups : array-like of shape (n_samples,), default=None\n            Group labels for the samples used while splitting the dataset into\n            train/test set.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/scikit-learn/sklearn/model_selection/_split.py lines 1164-1165)": [
      "\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where `n_samples` is the number of samples\n            and `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            The target variable for supervised learning problems.\n\n        groups : array-like of shape (n_samples,), default=None\n            Group labels for the samples used while splitting the dataset into\n            train/test set.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n",
      "\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return (f\"{self.__class__.__name__}(n_splits={n_splits}, \"\n                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where `n_samples` is the number of samples\n            and `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            The target variable for supervised learning problems.\n\n        groups : array-like of shape (n_samples,), default=None\n            Group labels for the samples used while splitting the dataset into\n            train/test set.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n",
      "\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : object\n            Always ignored, exists for compatibility.\n\n        y : object\n            Always ignored, exists for compatibility.\n\n        groups : object\n            Always ignored, exists for compatibility.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n",
      "\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : object\n            Always ignored, exists for compatibility.\n\n        y : object\n            Always ignored, exists for compatibility.\n\n        groups : object\n            Always ignored, exists for compatibility.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n",
      "\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : object\n            Always ignored, exists for compatibility.\n            ``np.zeros(n_samples)`` may be used as a placeholder.\n\n        y : object\n            Always ignored, exists for compatibility.\n            ``np.zeros(n_samples)`` may be used as a placeholder.\n\n        groups : object\n            Always ignored, exists for compatibility.\n            ``np.zeros(n_samples)`` may be used as a placeholder.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n",
      "\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where `n_samples` is the number of samples\n            and `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            The target variable for supervised learning problems.\n\n        groups : array-like of shape (n_samples,), default=None\n            Group labels for the samples used while splitting the dataset into\n            train/test set.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n",
      "\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return (f\"{self.__class__.__name__}(n_splits={n_splits}, \"\n                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : object\n            Always ignored, exists for compatibility.\n\n        y : object\n            Always ignored, exists for compatibility.\n\n        groups : object\n            Always ignored, exists for compatibility.\n            .. versionadded:: 0.20\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n",
      "\n    def __repr__(self):\n        n_splits = self.cvargs.get('n_splits', 5)\n        return (f\"{self.__class__.__name__}(n_splits={n_splits}, \"\n                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator.\n\n        Parameters\n        ----------\n        X : object\n            Always ignored, exists for compatibility.\n\n        y : object\n            Always ignored, exists for compatibility.\n\n        groups : object\n            Always ignored, exists for compatibility.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..3372d8171 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,14 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n+\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)  # Default value from constructors\n+        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n+\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_0": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..3ea50ad29 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,36 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : array-like of shape (n_samples, n_features)\n+            Training data, where `n_samples` is the number of samples\n+            and `n_features` is the number of features.\n+\n+        y : array-like of shape (n_samples,)\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like of shape (n_samples,), default=None\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_1": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..3ea50ad29 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,36 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : array-like of shape (n_samples, n_features)\n+            Training data, where `n_samples` is the number of samples\n+            and `n_features` is the number of features.\n+\n+        y : array-like of shape (n_samples,)\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like of shape (n_samples,), default=None\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_2": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..cd16c3b87 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,37 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n-        return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return (f\"{self.__class__.__name__}(n_splits={n_splits}, \"\n+                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : array-like of shape (n_samples, n_features)\n+            Training data, where `n_samples` is the number of samples\n+            and `n_features` is the number of features.\n+\n+        y : array-like of shape (n_samples,)\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like of shape (n_samples,), default=None\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n+        return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_3": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..80de7dea4 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,34 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : object\n+            Always ignored, exists for compatibility.\n+\n+        y : object\n+            Always ignored, exists for compatibility.\n+\n+        groups : object\n+            Always ignored, exists for compatibility.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_4": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..80de7dea4 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,34 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : object\n+            Always ignored, exists for compatibility.\n+\n+        y : object\n+            Always ignored, exists for compatibility.\n+\n+        groups : object\n+            Always ignored, exists for compatibility.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_5": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..c3d04b16a 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,37 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : object\n+            Always ignored, exists for compatibility.\n+            ``np.zeros(n_samples)`` may be used as a placeholder.\n+\n+        y : object\n+            Always ignored, exists for compatibility.\n+            ``np.zeros(n_samples)`` may be used as a placeholder.\n+\n+        groups : object\n+            Always ignored, exists for compatibility.\n+            ``np.zeros(n_samples)`` may be used as a placeholder.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_6": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..3ea50ad29 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,36 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : array-like of shape (n_samples, n_features)\n+            Training data, where `n_samples` is the number of samples\n+            and `n_features` is the number of features.\n+\n+        y : array-like of shape (n_samples,)\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like of shape (n_samples,), default=None\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return f\"{self.__class__.__name__}(n_splits={n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_7": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..ef23e79e6 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,36 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n-        return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return (f\"{self.__class__.__name__}(n_splits={n_splits}, \"\n+                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : object\n+            Always ignored, exists for compatibility.\n+\n+        y : object\n+            Always ignored, exists for compatibility.\n+\n+        groups : object\n+            Always ignored, exists for compatibility.\n+            .. versionadded:: 0.20\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n+        return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n",
    "variant_8": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..e352172a8 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1161,8 +1161,35 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         rng = check_random_state(self.random_state)\n         cv = self.cv(random_state=rng, shuffle=True,\n                      **self.cvargs)\n-        return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        n_splits = self.cvargs.get('n_splits', 5)\n+        return (f\"{self.__class__.__name__}(n_splits={n_splits}, \"\n+                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n+\n+    def get_n_splits(self, X=None, y=None, groups=None):\n+        \"\"\"Returns the number of splitting iterations in the cross-validator.\n+\n+        Parameters\n+        ----------\n+        X : object\n+            Always ignored, exists for compatibility.\n+\n+        y : object\n+            Always ignored, exists for compatibility.\n+\n+        groups : object\n+            Always ignored, exists for compatibility.\n+\n+        Returns\n+        -------\n+        n_splits : int\n+            Returns the number of splitting iterations in the cross-validator.\n+        \"\"\"\n+        rng = check_random_state(self.random_state)\n+        cv = self.cv(random_state=rng, shuffle=True,\n+                     **self.cvargs)\n+        return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n"
  }
}