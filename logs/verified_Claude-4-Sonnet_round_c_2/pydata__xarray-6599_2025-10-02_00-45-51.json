{
  "zero_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/computation.py lines 1936-1943)": "\n    def to_floatable(x: DataArray) -> DataArray:\n        if x.dtype.kind == \"M\":  # datetime64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        elif x.dtype.kind == \"m\":  # timedelta64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    datetime_unit=\"ns\",\n                ),\n            )\n        return x\n",
    "Location 2 (/root/hy/projects/xarray/xarray/core/computation.py lines 1908-1908)": "\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/xarray/xarray/core/computation.py lines 1936-1943)": [
      "\n    def to_floatable(x: DataArray) -> DataArray:\n        if x.dtype.kind == \"M\":  # datetime64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        elif x.dtype.kind == \"m\":  # timedelta64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    datetime_unit=\"ns\",\n                ),\n            )\n        return x\n",
      "\n    def to_floatable(x: DataArray) -> DataArray:\n        if x.dtype.kind == \"M\":  # datetime64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        elif x.dtype.kind == \"m\":  # timedelta64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    datetime_unit=\"ns\",\n                ),\n            )\n        return x\n",
      "\n    def to_floatable(x: DataArray) -> DataArray:\n        if x.dtype.kind == \"M\":  # datetime64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        elif x.dtype.kind == \"m\":  # timedelta64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    datetime_unit=\"ns\",\n                ),\n            )\n        return x\n",
      "\ndef to_floatable(x: DataArray) -> DataArray:\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n    return x\n",
      "\ndef to_floatable(x: DataArray) -> DataArray:\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n    return x\n",
      "\n    def to_floatable(x: DataArray) -> DataArray:\n        if x.dtype.kind == \"M\":  # datetime64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        elif x.dtype.kind == \"m\":  # timedelta64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    datetime_unit=\"ns\",\n                ),\n            )\n        return x\n",
      "\ndef to_floatable(x: DataArray) -> DataArray:\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n    return x\n",
      "\ndef to_floatable(x: DataArray) -> DataArray:\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n    return x\n"
    ],
    "Location 2 (/root/hy/projects/xarray/xarray/core/computation.py lines 1908-1908)": [
      "\n    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n",
      "\ndef _ensure_numeric(data, check_dtype=True):\n    \"\"\"\n    Applies basic checks and converts non-numeric dtypes to float64.\n\n    Parameters\n    ----------\n    data : Variable or DataArray\n        The data to ensure is numeric.\n    check_dtype : bool, default True\n        Whether to check the dtype and convert to numeric.\n\n    Returns\n    -------\n    Variable or DataArray\n        The data with numeric dtype.\n    \"\"\"\n    if not hasattr(data, \"dtype\"):\n        data = np.asarray(data)\n\n    if check_dtype and not np.issubdtype(data.dtype, np.number):\n        if data.dtype.kind == \"M\":  # datetime64\n            return data.copy(\n                data=datetime_to_numeric(\n                    data.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        elif data.dtype.kind == \"m\":  # timedelta64\n            return data.copy(\n                data=datetime_to_numeric(\n                    data.data,\n                    datetime_unit=\"ns\",\n                ),\n            )\n        else:\n            data = data.astype(np.float64)\n\n    return data\n",
      "\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n",
      "\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n",
      "\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n",
      "\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n",
      "\n    # Ensure that datetime/timedelta coordinates are converted to numeric\n    # for proper polynomial evaluation\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n",
      "\n    if x.dtype.kind == \"M\":  # datetime64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                offset=np.datetime64(\"1970-01-01\"),\n                datetime_unit=\"ns\",\n            ),\n        )\n    elif x.dtype.kind == \"m\":  # timedelta64\n        return x.copy(\n            data=datetime_to_numeric(\n                x.data,\n                datetime_unit=\"ns\",\n            ),\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..0394ffe0 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,6 +1905,7 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n+\n     coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n \n     # using Horner's method\n@@ -1933,7 +1934,8 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1943,13 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(\n+                data=datetime_to_numeric(\n+                    x.data,\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_0": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..526818a9 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,22 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,7 +1948,9 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+\n+    def to_floatable(x: DataArray) -> DataArray:\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1958,14 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(\n+                data=datetime_to_numeric(\n+                    x.data,\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n+        return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_1": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..0cad6f95 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,6 +1905,7 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n+\n     coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n \n     # using Horner's method\n@@ -1933,7 +1934,9 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+\n+    def to_floatable(x: DataArray) -> DataArray:\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1944,14 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(\n+                data=datetime_to_numeric(\n+                    x.data,\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n+        return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_2": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..41a8214d 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,46 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+def _ensure_numeric(data, check_dtype=True):\n+    \"\"\"\n+    Applies basic checks and converts non-numeric dtypes to float64.\n+\n+    Parameters\n+    ----------\n+    data : Variable or DataArray\n+        The data to ensure is numeric.\n+    check_dtype : bool, default True\n+        Whether to check the dtype and convert to numeric.\n+\n+    Returns\n+    -------\n+    Variable or DataArray\n+        The data with numeric dtype.\n+    \"\"\"\n+    if not hasattr(data, \"dtype\"):\n+        data = np.asarray(data)\n+\n+    if check_dtype and not np.issubdtype(data.dtype, np.number):\n+        if data.dtype.kind == \"M\":  # datetime64\n+            return data.copy(\n+                data=datetime_to_numeric(\n+                    data.data,\n+                    offset=np.datetime64(\"1970-01-01\"),\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n+        elif data.dtype.kind == \"m\":  # timedelta64\n+            return data.copy(\n+                data=datetime_to_numeric(\n+                    data.data,\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n+        else:\n+            data = data.astype(np.float64)\n+\n+    return data\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,7 +1972,9 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+\n+    def to_floatable(x: DataArray) -> DataArray:\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1982,14 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(\n+                data=datetime_to_numeric(\n+                    x.data,\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n+        return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_3": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..526818a9 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,22 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,7 +1948,9 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+\n+    def to_floatable(x: DataArray) -> DataArray:\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1958,14 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(\n+                data=datetime_to_numeric(\n+                    x.data,\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n+        return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_4": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..03ebdd4d 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,22 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,14 +1948,24 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n-            return x.copy(\n-                data=datetime_to_numeric(\n-                    x.data,\n-                    offset=np.datetime64(\"1970-01-01\"),\n-                    datetime_unit=\"ns\",\n-                ),\n-            )\n+\n+def to_floatable(x: DataArray) -> DataArray:\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_5": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..03ebdd4d 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,22 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,14 +1948,24 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n-            return x.copy(\n-                data=datetime_to_numeric(\n-                    x.data,\n-                    offset=np.datetime64(\"1970-01-01\"),\n-                    datetime_unit=\"ns\",\n-                ),\n-            )\n+\n+def to_floatable(x: DataArray) -> DataArray:\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_6": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..526818a9 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,22 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,7 +1948,9 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+\n+    def to_floatable(x: DataArray) -> DataArray:\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1958,14 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(\n+                data=datetime_to_numeric(\n+                    x.data,\n+                    datetime_unit=\"ns\",\n+                ),\n+            )\n+        return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_7": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..d2b167f6 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,24 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+    # Ensure that datetime/timedelta coordinates are converted to numeric\n+    # for proper polynomial evaluation\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,14 +1950,24 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n-            return x.copy(\n-                data=datetime_to_numeric(\n-                    x.data,\n-                    offset=np.datetime64(\"1970-01-01\"),\n-                    datetime_unit=\"ns\",\n-                ),\n-            )\n+\n+def to_floatable(x: DataArray) -> DataArray:\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    return x\n         return x\n \n     if isinstance(data, Dataset):\n",
    "variant_8": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..03ebdd4d 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,7 +1905,22 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n+\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n@@ -1933,14 +1948,24 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n-            return x.copy(\n-                data=datetime_to_numeric(\n-                    x.data,\n-                    offset=np.datetime64(\"1970-01-01\"),\n-                    datetime_unit=\"ns\",\n-                ),\n-            )\n+\n+def to_floatable(x: DataArray) -> DataArray:\n+    if x.dtype.kind == \"M\":  # datetime64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                offset=np.datetime64(\"1970-01-01\"),\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    elif x.dtype.kind == \"m\":  # timedelta64\n+        return x.copy(\n+            data=datetime_to_numeric(\n+                x.data,\n+                datetime_unit=\"ns\",\n+            ),\n+        )\n+    return x\n         return x\n \n     if isinstance(data, Dataset):\n"
  }
}