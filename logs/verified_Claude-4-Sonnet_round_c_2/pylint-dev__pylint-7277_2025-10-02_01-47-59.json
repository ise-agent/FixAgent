{
  "zero_patches": {
    "Location 1 (/root/hy/projects/pylint/pylint/__init__.py lines 99-101)": "\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/pylint/pylint/__init__.py lines 99-101)": [
      "\ndef _patch_sys_path(args: Sequence[str] | None = None) -> None:\n    \"\"\"Patch sys.path for subprocesses.\n\n    sys.path includes the current working directory when pylint is launched.\n    This leads to import conflicts: pylint preferring user code over library code.\n    In order to avoid this, we remove the first entry.\n\n    However, when pylint is run programmatically (e.g., via runpy.run_module),\n    the first entry might be a legitimate path that was intentionally added.\n    We only remove the first entry if it represents the current working directory.\n\n    - Remove the first entry only if it's \"\", \".\", or the current working directory\n    - Remove the working directory from the second and third entries\n      if PYTHONPATH includes a \":\" at the beginning or the end.\n      https://github.com/PyCQA/pylint/issues/3636\n      Don't remove it if PYTHONPATH contains the cwd or '.' as the entry will\n      only be added once.\n    - Don't remove the working directory from the rest. It will be included\n      if pylint is installed in an editable configuration (as the last item).\n      https://github.com/PyCQA/pylint/issues/4161\n    \"\"\"\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
      "\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n",
      "\n    \"\"\"\n    sys.path.pop(0)\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n",
      "\n    \"\"\"\n    sys.path.pop(0)\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n",
      "\n    \"\"\"\n    sys.path.pop(0)\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n",
      "\ndef modify_sys_path() -> None:\n    \"\"\"Modify sys.path for imports by pylint.\n\n    - Remove the first entry. This will always be either \"\" or the working directory\n    - Remove the working directory from the second and third entries\n      if PYTHONPATH includes a \":\" at the beginning or the end.\n      https://github.com/PyCQA/pylint/issues/3636\n      Don't remove it if PYTHONPATH contains the cwd or '.' as the entry will\n      only be added once.\n    - Don't remove the working directory from the rest. It will be included\n      if pylint is installed in an editable configuration (as the last item).\n      https://github.com/PyCQA/pylint/issues/4161\n    \"\"\"\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
      "\ndef modify_sys_path() -> None:\n    \"\"\"Remove sys.path[0].\n\n    sys.path[0] is the path of the directory of the invoking Python script OR an empty\n    string in case it was invoked from the command line with the -c option or\n    from standard input.\n    https://docs.python.org/3/library/sys.html#sys.path\n\n    This can be problematic if pylint is invoked from within a Python script located\n    in the same directory as the file or package being linted. In this case, pylint\n    would lint the script (or the package) as a local import, causing false-positives\n    for the import-error checker.\n\n    Note: https://github.com/PyCQA/pylint/issues/338\n\n    Moreover, when the -m flag is used, the first entry can be the current working\n    directory instead of an empty string. This can also be problematic since the\n    current working directory can contain files that could shadow standard library\n    modules. In this case, we want to remove the first entry as well.\n\n    However, we should be careful about what we remove:\n    - Remove the first entry. This will always be either \"\" or the working directory\n    - Remove the working directory from the second and third entries\n      if PYTHONPATH includes a \":\" at the beginning or the end.\n      https://github.com/PyCQA/pylint/issues/3636\n      Don't remove it if PYTHONPATH contains the cwd or '.' as the entry will\n      only be added once.\n    - Don't remove the working directory from the rest. It will be included\n      if pylint is installed in an editable configuration (as the last item).\n      https://github.com/PyCQA/pylint/issues/4161\n    \"\"\"\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
      "\n    \"\"\"\n    sys.path.pop(0)\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n        sys.path.pop(0)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..500faddaf 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,11 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_0": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..500faddaf 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,11 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_1": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..08bd7e05e 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,36 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+\n+def _patch_sys_path(args: Sequence[str] | None = None) -> None:\n+    \"\"\"Patch sys.path for subprocesses.\n+\n+    sys.path includes the current working directory when pylint is launched.\n+    This leads to import conflicts: pylint preferring user code over library code.\n+    In order to avoid this, we remove the first entry.\n+\n+    However, when pylint is run programmatically (e.g., via runpy.run_module),\n+    the first entry might be a legitimate path that was intentionally added.\n+    We only remove the first entry if it represents the current working directory.\n+\n+    - Remove the first entry only if it's \"\", \".\", or the current working directory\n+    - Remove the working directory from the second and third entries\n+      if PYTHONPATH includes a \":\" at the beginning or the end.\n+      https://github.com/PyCQA/pylint/issues/3636\n+      Don't remove it if PYTHONPATH contains the cwd or '.' as the entry will\n+      only be added once.\n+    - Don't remove the working directory from the rest. It will be included\n+      if pylint is installed in an editable configuration (as the last item).\n+      https://github.com/PyCQA/pylint/issues/4161\n+    \"\"\"\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n+    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n+        sys.path.pop(0)\n+    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n+        sys.path.pop(1)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_2": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..500faddaf 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,11 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_3": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..820fefc1e 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,13 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n+\n+    \"\"\"\n     sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_4": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..820fefc1e 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,13 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n+\n+    \"\"\"\n     sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_5": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..820fefc1e 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,13 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n+\n+    \"\"\"\n     sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_6": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..d6aad1054 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,28 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+\n+def modify_sys_path() -> None:\n+    \"\"\"Modify sys.path for imports by pylint.\n+\n+    - Remove the first entry. This will always be either \"\" or the working directory\n+    - Remove the working directory from the second and third entries\n+      if PYTHONPATH includes a \":\" at the beginning or the end.\n+      https://github.com/PyCQA/pylint/issues/3636\n+      Don't remove it if PYTHONPATH contains the cwd or '.' as the entry will\n+      only be added once.\n+    - Don't remove the working directory from the rest. It will be included\n+      if pylint is installed in an editable configuration (as the last item).\n+      https://github.com/PyCQA/pylint/issues/4161\n+    \"\"\"\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n+    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n+        sys.path.pop(0)\n+    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n+        sys.path.pop(1)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_7": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..2babf9245 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,46 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+\n+def modify_sys_path() -> None:\n+    \"\"\"Remove sys.path[0].\n+\n+    sys.path[0] is the path of the directory of the invoking Python script OR an empty\n+    string in case it was invoked from the command line with the -c option or\n+    from standard input.\n+    https://docs.python.org/3/library/sys.html#sys.path\n+\n+    This can be problematic if pylint is invoked from within a Python script located\n+    in the same directory as the file or package being linted. In this case, pylint\n+    would lint the script (or the package) as a local import, causing false-positives\n+    for the import-error checker.\n+\n+    Note: https://github.com/PyCQA/pylint/issues/338\n+\n+    Moreover, when the -m flag is used, the first entry can be the current working\n+    directory instead of an empty string. This can also be problematic since the\n+    current working directory can contain files that could shadow standard library\n+    modules. In this case, we want to remove the first entry as well.\n+\n+    However, we should be careful about what we remove:\n+    - Remove the first entry. This will always be either \"\" or the working directory\n+    - Remove the working directory from the second and third entries\n+      if PYTHONPATH includes a \":\" at the beginning or the end.\n+      https://github.com/PyCQA/pylint/issues/3636\n+      Don't remove it if PYTHONPATH contains the cwd or '.' as the entry will\n+      only be added once.\n+    - Don't remove the working directory from the rest. It will be included\n+      if pylint is installed in an editable configuration (as the last item).\n+      https://github.com/PyCQA/pylint/issues/4161\n+    \"\"\"\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n+    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n+        sys.path.pop(0)\n+    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n+        sys.path.pop(1)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n",
    "variant_8": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..820fefc1e 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,9 +96,13 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n+\n+    \"\"\"\n     sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n+    if sys.path and sys.path[0] in (\"\", \".\", cwd):\n+        sys.path.pop(0)\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n         sys.path.pop(0)\n     elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n"
  }
}