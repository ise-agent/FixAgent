{
  "zero_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/main.py lines 534-539)": "\n            assert not names, \"invalid arg {!r}\".format(arg)\n\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n",
    "Location 2 (/root/hy/projects/pytest/src/_pytest/main.py lines 511-519)": "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/main.py lines 534-539)": [
      "\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n",
      "\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n",
      "\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n",
      "\n        seen_dirs = set()\n        for path in argpath.visit(\n            fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n        ):\n            dirpath = path.dirpath()\n            if dirpath not in seen_dirs:\n                # Collect packages first.\n                seen_dirs.add(dirpath)\n                pkginit = dirpath.join(\"__init__.py\")\n                if pkginit.exists():\n                    # Check if this __init__.py should be ignored before attempting collection\n                    ihook = self.gethookproxy(pkginit)\n                    if not self.isinitpath(pkginit):\n                        if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                            continue\n                    \n                    for x in self._collectfile(pkginit):\n                        yield x\n                        if isinstance(x, Package):\n                            self._pkg_roots[dirpath] = x\n",
      "\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n",
      "\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n",
      "\n            assert not names, \"invalid arg {!r}\".format(arg)\n\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n",
      "\n            assert not names, \"invalid arg {!r}\".format(arg)\n\n            seen_dirs = set()\n            for path in argpath.visit(\n                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n            ):\n                dirpath = path.dirpath()\n                if dirpath not in seen_dirs:\n                    # Collect packages first.\n                    seen_dirs.add(dirpath)\n                    pkginit = dirpath.join(\"__init__.py\")\n                    if pkginit.exists():\n                        # Check if this __init__.py should be ignored before attempting collection\n                        ihook = self.gethookproxy(pkginit)\n                        if not self.isinitpath(pkginit):\n                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                continue  # Skip this __init__.py file\n                        \n                        for x in self._collectfile(pkginit):\n                            yield x\n                            if isinstance(x, Package):\n                                self._pkg_roots[dirpath] = x\n"
    ],
    "Location 2 (/root/hy/projects/pytest/src/_pytest/main.py lines 511-519)": [
      "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue  # Skip this parent __init__.py file\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n",
      "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n",
      "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n",
      "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue  # Skip this parent __init__.py file\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n",
      "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n",
      "\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue  # Skip this parent __init__.py file\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n",
      "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n",
      "\n        # Start with a Session root, and delve to argpath item (dir or file)\n        # and stack all Packages found on the way.\n        # No point in finding packages when collecting doctests\n        if not self.config.getoption(\"doctestmodules\", False):\n            pm = self.config.pluginmanager\n            for parent in reversed(argpath.parts()):\n                if pm._confcutdir and pm._confcutdir.relto(parent):\n                    break\n\n                if parent.isdir():\n                    pkginit = parent.join(\"__init__.py\")\n                    if pkginit.isfile():\n                        if pkginit not in self._node_cache:\n                            # Check if this __init__.py should be ignored before attempting collection\n                            ihook = self.gethookproxy(pkginit)\n                            if not self.isinitpath(pkginit):\n                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n                                    continue\n                            \n                            col = self._collectfile(pkginit, handle_dupes=False)\n                            if col:\n                                if isinstance(col[0], Package):\n                                    self._pkg_roots[parent] = col[0]\n                                # always store a list in the cache, matchnodes expects it\n                                self._node_cache[col[0].fspath] = [col[0]]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..7daed6046 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -508,9 +508,16 @@ class Session(nodes.FSCollector):\n                     break\n \n                 if parent.isdir():\n+\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue  # Skip this parent __init__.py file\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -531,8 +538,15 @@ class Session(nodes.FSCollector):\n                 if dirpath not in seen_dirs:\n                     # Collect packages first.\n                     seen_dirs.add(dirpath)\n+\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_0": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..1e30eda65 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +540,17 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n+            assert not names, \"invalid arg {!r}\".format(arg)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +561,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_1": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..7b91d7006 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue  # Skip this parent __init__.py file\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +540,15 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +559,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_2": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..a2b3c0dd5 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +540,15 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +559,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_3": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..a2b3c0dd5 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +540,15 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +559,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_4": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..28062fc30 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue  # Skip this parent __init__.py file\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -531,12 +548,27 @@ class Session(nodes.FSCollector):\n                 if dirpath not in seen_dirs:\n                     # Collect packages first.\n                     seen_dirs.add(dirpath)\n-                    pkginit = dirpath.join(\"__init__.py\")\n-                    if pkginit.exists():\n-                        for x in self._collectfile(pkginit):\n-                            yield x\n-                            if isinstance(x, Package):\n-                                self._pkg_roots[dirpath] = x\n+\n+        seen_dirs = set()\n+        for path in argpath.visit(\n+            fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+        ):\n+            dirpath = path.dirpath()\n+            if dirpath not in seen_dirs:\n+                # Collect packages first.\n+                seen_dirs.add(dirpath)\n+                pkginit = dirpath.join(\"__init__.py\")\n+                if pkginit.exists():\n+                    # Check if this __init__.py should be ignored before attempting collection\n+                    ihook = self.gethookproxy(pkginit)\n+                    if not self.isinitpath(pkginit):\n+                        if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                            continue\n+                    \n+                    for x in self._collectfile(pkginit):\n+                        yield x\n+                        if isinstance(x, Package):\n+                            self._pkg_roots[dirpath] = x\n                 if dirpath in self._pkg_roots:\n                     # Do not collect packages here.\n                     continue\n",
    "variant_5": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..a2b3c0dd5 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +540,15 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +559,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_6": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..cd2c66773 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -507,10 +507,18 @@ class Session(nodes.FSCollector):\n                 if pm._confcutdir and pm._confcutdir.relto(parent):\n                     break\n \n+                if parent.isdir():\n+\n                 if parent.isdir():\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue  # Skip this parent __init__.py file\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +531,15 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +550,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_7": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..1e30eda65 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +540,17 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n+            assert not names, \"invalid arg {!r}\".format(arg)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +561,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n",
    "variant_8": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 3c205027d..1e30eda65 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -498,6 +498,17 @@ class Session(nodes.FSCollector):\n         names = self._parsearg(arg)\n         argpath = names.pop(0)\n \n+        # Start with a Session root, and delve to argpath item (dir or file)\n+        # and stack all Packages found on the way.\n+        # No point in finding packages when collecting doctests\n+        if not self.config.getoption(\"doctestmodules\", False):\n+            pm = self.config.pluginmanager\n+            for parent in reversed(argpath.parts()):\n+                if pm._confcutdir and pm._confcutdir.relto(parent):\n+                    break\n+\n+                if parent.isdir():\n+\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n@@ -511,6 +522,12 @@ class Session(nodes.FSCollector):\n                     pkginit = parent.join(\"__init__.py\")\n                     if pkginit.isfile():\n                         if pkginit not in self._node_cache:\n+                            # Check if this __init__.py should be ignored before attempting collection\n+                            ihook = self.gethookproxy(pkginit)\n+                            if not self.isinitpath(pkginit):\n+                                if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                    continue\n+                            \n                             col = self._collectfile(pkginit, handle_dupes=False)\n                             if col:\n                                 if isinstance(col[0], Package):\n@@ -523,6 +540,17 @@ class Session(nodes.FSCollector):\n         if argpath.check(dir=1):\n             assert not names, \"invalid arg {!r}\".format(arg)\n \n+            seen_dirs = set()\n+            for path in argpath.visit(\n+                fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n+            ):\n+                dirpath = path.dirpath()\n+                if dirpath not in seen_dirs:\n+                    # Collect packages first.\n+                    seen_dirs.add(dirpath)\n+\n+            assert not names, \"invalid arg {!r}\".format(arg)\n+\n             seen_dirs = set()\n             for path in argpath.visit(\n                 fil=self._visit_filter, rec=self._recurse, bf=True, sort=True\n@@ -533,6 +561,12 @@ class Session(nodes.FSCollector):\n                     seen_dirs.add(dirpath)\n                     pkginit = dirpath.join(\"__init__.py\")\n                     if pkginit.exists():\n+                        # Check if this __init__.py should be ignored before attempting collection\n+                        ihook = self.gethookproxy(pkginit)\n+                        if not self.isinitpath(pkginit):\n+                            if ihook.pytest_ignore_collect(path=pkginit, config=self.config):\n+                                continue  # Skip this __init__.py file\n+                        \n                         for x in self._collectfile(pkginit):\n                             yield x\n                             if isinstance(x, Package):\n"
  }
}