{
  "zero_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/reports.py lines 164-185)": "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr by serializing the entire chain\n            if hasattr(rep.longrepr, 'chain'):\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    reprtraceback_data = reprtraceback.__dict__.copy()\n                    reprcrash_data = reprcrash.__dict__.copy()\n                    \n                    # Process reprentries for this chain element\n                    new_entries = []\n                    for entry in reprtraceback_data[\"reprentries\"]:\n                        entry_data = {\n                            \"type\": type(entry).__name__,\n                            \"data\": entry.__dict__.copy(),\n                        }\n                        for key, value in entry_data[\"data\"].items():\n                            if hasattr(value, \"__dict__\"):\n                                entry_data[\"data\"][key] = value.__dict__.copy()\n                        new_entries.append(entry_data)\n                    \n                    reprtraceback_data[\"reprentries\"] = new_entries\n                    \n                    chain_data.append({\n                        \"reprtraceback\": reprtraceback_data,\n                        \"reprcrash\": reprcrash_data,\n                        \"descr\": descr\n                    })\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": rep.longrepr.sections,\n                }\n            else:\n                # Handle regular ReprExceptionInfo\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n",
    "Location 2 (/root/hy/projects/pytest/src/_pytest/reports.py lines 253-256)": "\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n",
    "Location 3 (/root/hy/projects/pytest/src/_pytest/reports.py lines 190-195)": "\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ) or hasattr(self.longrepr, \"chain\"):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
    "Location 4 (/root/hy/projects/pytest/src/_pytest/reports.py lines 214-218)": "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr\n                pass  # Will be handled in the chain reconstruction logic below\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
    "Location 5 (/root/hy/projects/pytest/src/_pytest/reports.py lines 220-222)": "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/reports.py lines 164-185)": [
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain'):\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    reprtraceback_data = reprtraceback.__dict__.copy()\n                    reprcrash_data = reprcrash.__dict__.copy()\n                    \n                    new_entries = []\n                    for entry in reprtraceback_data[\"reprentries\"]:\n                        entry_data = {\n                            \"type\": type(entry).__name__,\n                            \"data\": entry.__dict__.copy(),\n                        }\n                        for key, value in entry_data[\"data\"].items():\n                            if hasattr(value, \"__dict__\"):\n                                entry_data[\"data\"][key] = value.__dict__.copy()\n                        new_entries.append(entry_data)\n                    \n                    reprtraceback_data[\"reprentries\"] = new_entries\n                    \n                    chain_data.append({\n                        \"reprtraceback\": reprtraceback_data,\n                        \"reprcrash\": reprcrash_data,\n                        \"descr\": descr\n                    })\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": rep.longrepr.sections,\n                }\n            else:\n                # Handle regular ReprExceptionInfo objects\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n",
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain'):\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    reprtraceback_data = reprtraceback.__dict__.copy() if reprtraceback else None\n                    reprcrash_data = reprcrash.__dict__.copy() if reprcrash else None\n                    \n                    if reprtraceback_data and \"reprentries\" in reprtraceback_data:\n                        new_entries = []\n                        for entry in reprtraceback_data[\"reprentries\"]:\n                            entry_data = {\n                                \"type\": type(entry).__name__,\n                                \"data\": entry.__dict__.copy(),\n                            }\n                            for key, value in entry_data[\"data\"].items():\n                                if hasattr(value, \"__dict__\"):\n                                    entry_data[\"data\"][key] = value.__dict__.copy()\n                            new_entries.append(entry_data)\n                        reprtraceback_data[\"reprentries\"] = new_entries\n                    \n                    chain_data.append({\n                        \"reprtraceback\": reprtraceback_data,\n                        \"reprcrash\": reprcrash_data,\n                        \"descr\": descr\n                    })\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": getattr(rep.longrepr, 'sections', [])\n                }\n            else:\n                # Handle regular ReprExceptionInfo objects\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n",
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain'):\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    reprtraceback_data = reprtraceback.__dict__.copy()\n                    reprcrash_data = reprcrash.__dict__.copy()\n                    \n                    new_entries = []\n                    for entry in reprtraceback_data[\"reprentries\"]:\n                        entry_data = {\n                            \"type\": type(entry).__name__,\n                            \"data\": entry.__dict__.copy(),\n                        }\n                        for key, value in entry_data[\"data\"].items():\n                            if hasattr(value, \"__dict__\"):\n                                entry_data[\"data\"][key] = value.__dict__.copy()\n                        new_entries.append(entry_data)\n                    \n                    reprtraceback_data[\"reprentries\"] = new_entries\n                    chain_data.append((reprtraceback_data, reprcrash_data, descr))\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": rep.longrepr.sections,\n                }\n            else:\n                # Handle regular ReprExceptionInfo objects\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n",
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain'):\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    reprtraceback_data = reprtraceback.__dict__.copy()\n                    reprcrash_data = reprcrash.__dict__.copy()\n                    \n                    new_entries = []\n                    for entry in reprtraceback_data[\"reprentries\"]:\n                        entry_data = {\n                            \"type\": type(entry).__name__,\n                            \"data\": entry.__dict__.copy(),\n                        }\n                        for key, value in entry_data[\"data\"].items():\n                            if hasattr(value, \"__dict__\"):\n                                entry_data[\"data\"][key] = value.__dict__.copy()\n                        new_entries.append(entry_data)\n                    \n                    reprtraceback_data[\"reprentries\"] = new_entries\n                    \n                    chain_data.append({\n                        \"reprtraceback\": reprtraceback_data,\n                        \"reprcrash\": reprcrash_data,\n                        \"descr\": descr,\n                    })\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": rep.longrepr.sections,\n                }\n            else:\n                # Original logic for single exception\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            )) or hasattr(self.longrepr, \"chain\"):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain'):\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    reprtraceback_data = reprtraceback.__dict__.copy()\n                    reprcrash_data = reprcrash.__dict__.copy() if reprcrash else None\n                    \n                    new_entries = []\n                    for entry in reprtraceback_data[\"reprentries\"]:\n                        entry_data = {\n                            \"type\": type(entry).__name__,\n                            \"data\": entry.__dict__.copy(),\n                        }\n                        for key, value in entry_data[\"data\"].items():\n                            if hasattr(value, \"__dict__\"):\n                                entry_data[\"data\"][key] = value.__dict__.copy()\n                        new_entries.append(entry_data)\n                    \n                    reprtraceback_data[\"reprentries\"] = new_entries\n                    chain_data.append((reprtraceback_data, reprcrash_data, descr))\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": rep.longrepr.sections,\n                }\n            else:\n                # Handle regular ReprExceptionInfo objects\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n",
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain'):\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    chain_entry = {\n                        'reprtraceback': reprtraceback.__dict__.copy() if reprtraceback else None,\n                        'reprcrash': reprcrash.__dict__.copy() if reprcrash else None,\n                        'descr': descr\n                    }\n                    \n                    # Handle reprentries in traceback\n                    if chain_entry['reprtraceback'] and 'reprentries' in chain_entry['reprtraceback']:\n                        new_entries = []\n                        for entry in chain_entry['reprtraceback']['reprentries']:\n                            entry_data = {\n                                \"type\": type(entry).__name__,\n                                \"data\": entry.__dict__.copy(),\n                            }\n                            for key, value in entry_data[\"data\"].items():\n                                if hasattr(value, \"__dict__\"):\n                                    entry_data[\"data\"][key] = value.__dict__.copy()\n                            new_entries.append(entry_data)\n                        chain_entry['reprtraceback']['reprentries'] = new_entries\n                    \n                    chain_data.append(chain_entry)\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": getattr(rep.longrepr, 'sections', [])\n                }\n            else:\n                # Handle regular ReprExceptionInfo objects\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n",
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain') and rep.longrepr.chain:\n                chain_data = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    reprtraceback_data = reprtraceback.__dict__.copy()\n                    reprcrash_data = reprcrash.__dict__.copy() if reprcrash else None\n                    \n                    # Process reprentries for this chain element\n                    new_entries = []\n                    for entry in reprtraceback_data[\"reprentries\"]:\n                        entry_data = {\n                            \"type\": type(entry).__name__,\n                            \"data\": entry.__dict__.copy(),\n                        }\n                        for key, value in entry_data[\"data\"].items():\n                            if hasattr(value, \"__dict__\"):\n                                entry_data[\"data\"][key] = value.__dict__.copy()\n                        new_entries.append(entry_data)\n                    \n                    reprtraceback_data[\"reprentries\"] = new_entries\n                    chain_data.append((reprtraceback_data, reprcrash_data, descr))\n                \n                return {\n                    \"chain\": chain_data,\n                    \"sections\": rep.longrepr.sections,\n                }\n            else:\n                # Handle regular ReprExceptionInfo objects\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n",
      "\n    def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            # Handle ExceptionChainRepr objects\n            if hasattr(rep.longrepr, 'chain'):\n                serialized_chain = []\n                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n                    chain_reprtraceback = reprtraceback.__dict__.copy()\n                    chain_reprcrash = reprcrash.__dict__.copy() if reprcrash else None\n                    \n                    # Process reprentries for this chain element\n                    new_entries = []\n                    for entry in chain_reprtraceback[\"reprentries\"]:\n                        entry_data = {\n                            \"type\": type(entry).__name__,\n                            \"data\": entry.__dict__.copy(),\n                        }\n                        for key, value in entry_data[\"data\"].items():\n                            if hasattr(value, \"__dict__\"):\n                                entry_data[\"data\"][key] = value.__dict__.copy()\n                        new_entries.append(entry_data)\n                    \n                    chain_reprtraceback[\"reprentries\"] = new_entries\n                    serialized_chain.append((chain_reprtraceback, chain_reprcrash, descr))\n                \n                return {\n                    \"chain\": serialized_chain,\n                    \"sections\": rep.longrepr.sections,\n                }\n            else:\n                # Handle regular ReprExceptionInfo objects\n                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n                new_entries = []\n                for entry in reprtraceback[\"reprentries\"]:\n                    entry_data = {\n                        \"type\": type(entry).__name__,\n                        \"data\": entry.__dict__.copy(),\n                    }\n                    for key, value in entry_data[\"data\"].items():\n                        if hasattr(value, \"__dict__\"):\n                            entry_data[\"data\"][key] = value.__dict__.copy()\n                    new_entries.append(entry_data)\n\n                reprtraceback[\"reprentries\"] = new_entries\n\n                return {\n                    \"reprcrash\": reprcrash,\n                    \"reprtraceback\": reprtraceback,\n                    \"sections\": rep.longrepr.sections,\n                }\n"
    ],
    "Location 2 (/root/hy/projects/pytest/src/_pytest/reports.py lines 253-256)": [
      "\n                exception_info = None\n                if \"chain\" in reportdict[\"longrepr\"]:\n                    # Handle ExceptionChainRepr\n                    from _pytest._code.code import ExceptionChainRepr\n                    chain = []\n                    for exc_data in reportdict[\"longrepr\"][\"chain\"]:\n                        tb_data = exc_data[\"reprtraceback\"]\n                        crash_data = exc_data[\"reprcrash\"] \n                        descr = exc_data[\"descr\"]\n                        \n                        reprtb = ReprTraceback(**tb_data)\n                        reprcrash = ReprFileLocation(**crash_data)\n                        chain.append((reprtb, reprcrash, descr))\n                    \n                    exception_info = ExceptionChainRepr(chain)\n                else:\n                    # Handle single ReprExceptionInfo\n                    exception_info = ReprExceptionInfo(\n                        reprtraceback=ReprTraceback(**reprtraceback),\n                        reprcrash=ReprFileLocation(**reprcrash),\n                    )\n",
      "\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n",
      "\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n",
      "\n                exception_info_data = reportdict[\"longrepr\"][\"exception_info\"]\n                if \"chain\" in exception_info_data:\n                    # Handle ExceptionChainRepr\n                    from _pytest._code.code import ExceptionChainRepr\n                    chain = []\n                    for exc_data in exception_info_data[\"chain\"]:\n                        reprtraceback = ReprTraceback(**exc_data[\"reprtraceback\"])\n                        reprcrash = ReprFileLocation(**exc_data[\"reprcrash\"])\n                        descr = exc_data[\"descr\"]\n                        chain.append((reprtraceback, reprcrash, descr))\n                    exception_info = ExceptionChainRepr(chain)\n                else:\n                    # Handle ReprExceptionInfo\n                    exception_info = ReprExceptionInfo(\n                        reprtraceback=ReprTraceback(**reprtraceback),\n                        reprcrash=ReprFileLocation(**reprcrash),\n                    )\n",
      "\n                exception_info_data = reportdict[\"longrepr\"][\"exception_info\"]\n                if \"chain\" in exception_info_data:\n                    # Handle ExceptionChainRepr\n                    from _pytest._code.code import ExceptionChainRepr\n                    chain = []\n                    for exc_data in exception_info_data[\"chain\"]:\n                        reprtraceback = ReprTraceback(**exc_data[\"reprtraceback\"])\n                        reprcrash = ReprFileLocation(**exc_data[\"reprcrash\"])\n                        descr = exc_data[\"descr\"]\n                        chain.append((reprtraceback, reprcrash, descr))\n                    exception_info = ExceptionChainRepr(chain)\n                else:\n                    # Handle ReprExceptionInfo\n                    exception_info = ReprExceptionInfo(\n                        reprtraceback=ReprTraceback(**reprtraceback),\n                        reprcrash=ReprFileLocation(**reprcrash),\n                    )\n",
      "\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n",
      "\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n",
      "\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n"
    ],
    "Location 3 (/root/hy/projects/pytest/src/_pytest/reports.py lines 190-195)": [
      "\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ) or isinstance(self.longrepr, ExceptionChainRepr):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ) or isinstance(self.longrepr, ExceptionChainRepr):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            )) or hasattr(self.longrepr, \"chain\"):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n        if hasattr(self.longrepr, \"toterminal\"):\n            from _pytest._code.code import ExceptionChainRepr\n            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n",
      "\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n"
    ],
    "Location 4 (/root/hy/projects/pytest/src/_pytest/reports.py lines 214-218)": [
      "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr deserialization\n                pass  # Will be handled in the chain reconstruction logic below\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
      "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr\n                pass  # Will be handled in the chain reconstruction logic below\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
      "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr\n                pass  # Will be handled in the chain reconstruction logic below\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
      "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr\n                pass  # This will be handled in the chain reconstruction logic below\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
      "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr\n                pass  # This will be handled in the reconstruction logic below\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
      "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr\n                chain_data = reportdict[\"longrepr\"][\"chain\"]\n                chain = []\n                for entry in chain_data:\n                    reprtraceback = entry[\"reprtraceback\"]\n                    reprcrash = entry[\"reprcrash\"]\n                    description = entry.get(\"description\", \"\")\n                    \n                    unserialized_entries = []\n                    for entry_data in reprtraceback[\"reprentries\"]:\n                        data = entry_data[\"data\"]\n                        entry_type = entry_data[\"type\"]\n                        if entry_type == \"ReprEntry\":\n                            reprfuncargs = None\n                            reprfileloc = None\n                            reprlocals = None\n                            if data[\"reprfuncargs\"]:\n                                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n                            if data[\"reprfileloc\"]:\n                                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n                            if data[\"reprlocals\"]:\n                                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n                            \n                            reprentry = ReprEntry(\n                                lines=data[\"lines\"],\n                                reprfuncargs=reprfuncargs,\n                                reprlocals=reprlocals,\n                                reprfileloc=reprfileloc,\n                                style=data[\"style\"],\n                            )\n                        elif entry_type == \"ReprEntryNative\":\n                            reprentry = ReprEntryNative(data[\"lines\"])\n                        else:\n                            raise ValueError(\"Unknown entry type: %s\" % entry_type)\n                        unserialized_entries.append(reprentry)\n                    \n                    reprtb = ReprTraceback(\n                        reprentries=unserialized_entries, \n                        extraline=reprtraceback[\"extraline\"],\n                        style=reprtraceback[\"style\"]\n                    )\n                    chain.append((reprtb, reprcrash, description))\n                \n                from _pytest._code.code import ExceptionChainRepr\n                longrepr = ExceptionChainRepr(chain)\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
      "\n        if reportdict[\"longrepr\"]:\n            if \"chain\" in reportdict[\"longrepr\"]:\n                # Handle ExceptionChainRepr deserialization\n                pass  # This will be handled in the reconstruction logic below\n            elif (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n",
      "\n        if reportdict[\"longrepr\"]:\n            if (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ) or \"chain\" in reportdict[\"longrepr\"]:\n"
    ],
    "Location 5 (/root/hy/projects/pytest/src/_pytest/reports.py lines 220-222)": [
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n",
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n",
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n",
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n",
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n",
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n",
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n",
      "\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                chain = reportdict[\"longrepr\"].get(\"chain\")\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..f6fc65181 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -161,38 +161,80 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n \n+\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            from _pytest._code.code import ExceptionChainRepr\n+            \n+            # Handle ExceptionChainRepr objects (chained exceptions)\n+            if isinstance(rep.longrepr, ExceptionChainRepr):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    # Serialize each exception in the chain\n+                    reprtraceback_dict = reprtraceback.__dict__.copy()\n+                    reprcrash_dict = reprcrash.__dict__.copy()\n+                    \n+                    new_entries = []\n+                    for entry in reprtraceback_dict[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    reprtraceback_dict[\"reprentries\"] = new_entries\n+                    \n+                    chain_data.append({\n+                        \"reprtraceback\": reprtraceback_dict,\n+                        \"reprcrash\": reprcrash_dict,\n+                        \"descr\": descr,\n+                    })\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n-\n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n+            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n             ):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n-                d[\"longrepr\"] = str(self.longrepr)\n-        else:\n+                from _pytest._code.code import ExceptionChainRepr\n+                # Also handle ExceptionChainRepr objects\n+                if isinstance(self.longrepr, ExceptionChainRepr):\n+                    d[\"longrepr\"] = disassembled_report(self)\n+                else:\n+                    d[\"longrepr\"] = str(self.longrepr)\n             d[\"longrepr\"] = self.longrepr\n         for name in d:\n             if isinstance(d[name], (py.path.local, Path)):\n@@ -211,15 +253,21 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n             if (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n-            ):\n+            ) or \"chain\" in reportdict[\"longrepr\"]:\n \n-                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n-                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n \n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    # Chain data will be handled in the exception reconstruction logic\n+                    reprtraceback = None\n+                    reprcrash = None\n+                else:\n+                    reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n+                    reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,10 +298,60 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n+\n+                from _pytest._code.code import ExceptionChainRepr\n+                \n+                # Check if we have chain data (ExceptionChainRepr)\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    # Reconstruct ExceptionChainRepr\n+                    chain = []\n+                    for chain_item in reportdict[\"longrepr\"][\"chain\"]:\n+                        # Reconstruct each exception in the chain\n+                        reprtraceback_data = chain_item[\"reprtraceback\"]\n+                        reprcrash_data = chain_item[\"reprcrash\"]\n+                        descr = chain_item[\"descr\"]\n+                        \n+                        # Reconstruct reprentries for this chain item\n+                        unserialized_entries = []\n+                        for entry_data in reprtraceback_data[\"reprentries\"]:\n+                            data = entry_data[\"data\"]\n+                            entry_type = entry_data[\"type\"]\n+                            if entry_type == \"ReprEntry\":\n+                                reprfuncargs = None\n+                                reprfileloc = None\n+                                reprlocals = None\n+                                if data[\"reprfuncargs\"]:\n+                                    reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                                if data[\"reprfileloc\"]:\n+                                    reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                                if data[\"reprlocals\"]:\n+                                    reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+                                reprentry = ReprEntry(\n+                                    lines=data[\"lines\"],\n+                                    reprfuncargs=reprfuncargs,\n+                                    reprlocals=reprlocals,\n+                                    filelocrepr=reprfileloc,\n+                                    style=data[\"style\"],\n+                                )\n+                            elif entry_type == \"ReprEntryNative\":\n+                                reprentry = ReprEntryNative(data[\"lines\"])\n+                            else:\n+                                _report_unserialization_failure(entry_type, cls, reportdict)\n+                            unserialized_entries.append(reprentry)\n+                        \n+                        reprtraceback_data[\"reprentries\"] = unserialized_entries\n+                        reprtraceback = ReprTraceback(**reprtraceback_data)\n+                        reprcrash = ReprFileLocation(**reprcrash_data)\n+                        \n+                        chain.append((reprtraceback, reprcrash, descr))\n+                    \n+                    exception_info = ExceptionChainRepr(chain)\n+                else:\n+                    # Handle regular ReprExceptionInfo\n+                    exception_info = ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**reprtraceback),\n+                        reprcrash=ReprFileLocation(**reprcrash),\n+                    )\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n",
    "variant_0": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..93553e596 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -151,6 +151,17 @@ class BaseReport:\n         )\n         return verbose\n \n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n+\n+        Experimental method.\n+        \"\"\"\n+\n+\n     def _to_json(self):\n         \"\"\"\n         This was originally the serialize_report() function from xdist (ca03269).\n@@ -162,33 +173,70 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            # Handle ExceptionChainRepr by serializing the entire chain\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    reprtraceback_data = reprtraceback.__dict__.copy()\n+                    reprcrash_data = reprcrash.__dict__.copy()\n+                    \n+                    # Process reprentries for this chain element\n+                    new_entries = []\n+                    for entry in reprtraceback_data[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    reprtraceback_data[\"reprentries\"] = new_entries\n+                    \n+                    chain_data.append({\n+                        \"reprtraceback\": reprtraceback_data,\n+                        \"reprcrash\": reprcrash_data,\n+                        \"descr\": descr\n+                    })\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            ) or hasattr(self.longrepr, \"chain\"):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +259,20 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr\n+                pass  # Will be handled in the chain reconstruction logic below\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,6 +303,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n",
    "variant_1": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..4a5c725ca 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -161,30 +161,76 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n \n-        def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        Experimental method.\n+        \"\"\"\n+\n+        def disassembled_report(rep):\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    reprtraceback_data = reprtraceback.__dict__.copy()\n+                    reprcrash_data = reprcrash.__dict__.copy()\n+                    \n+                    new_entries = []\n+                    for entry in reprtraceback_data[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    reprtraceback_data[\"reprentries\"] = new_entries\n+                    \n+                    chain_data.append({\n+                        \"reprtraceback\": reprtraceback_data,\n+                        \"reprcrash\": reprcrash_data,\n+                        \"descr\": descr\n+                    })\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n \n         d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n@@ -211,15 +257,20 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr deserialization\n+                pass  # Will be handled in the chain reconstruction logic below\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,10 +301,28 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n+\n+                exception_info = None\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    # Handle ExceptionChainRepr\n+                    from _pytest._code.code import ExceptionChainRepr\n+                    chain = []\n+                    for exc_data in reportdict[\"longrepr\"][\"chain\"]:\n+                        tb_data = exc_data[\"reprtraceback\"]\n+                        crash_data = exc_data[\"reprcrash\"] \n+                        descr = exc_data[\"descr\"]\n+                        \n+                        reprtb = ReprTraceback(**tb_data)\n+                        reprcrash = ReprFileLocation(**crash_data)\n+                        chain.append((reprtb, reprcrash, descr))\n+                    \n+                    exception_info = ExceptionChainRepr(chain)\n+                else:\n+                    # Handle single ReprExceptionInfo\n+                    exception_info = ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**reprtraceback),\n+                        reprcrash=ReprFileLocation(**reprcrash),\n+                    )\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n",
    "variant_2": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..ebfaa8b33 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -151,6 +151,17 @@ class BaseReport:\n         )\n         return verbose\n \n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n+\n+        Experimental method.\n+        \"\"\"\n+\n+\n     def _to_json(self):\n         \"\"\"\n         This was originally the serialize_report() function from xdist (ca03269).\n@@ -162,33 +173,69 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    reprtraceback_data = reprtraceback.__dict__.copy() if reprtraceback else None\n+                    reprcrash_data = reprcrash.__dict__.copy() if reprcrash else None\n+                    \n+                    if reprtraceback_data and \"reprentries\" in reprtraceback_data:\n+                        new_entries = []\n+                        for entry in reprtraceback_data[\"reprentries\"]:\n+                            entry_data = {\n+                                \"type\": type(entry).__name__,\n+                                \"data\": entry.__dict__.copy(),\n+                            }\n+                            for key, value in entry_data[\"data\"].items():\n+                                if hasattr(value, \"__dict__\"):\n+                                    entry_data[\"data\"][key] = value.__dict__.copy()\n+                            new_entries.append(entry_data)\n+                        reprtraceback_data[\"reprentries\"] = new_entries\n+                    \n+                    chain_data.append({\n+                        \"reprtraceback\": reprtraceback_data,\n+                        \"reprcrash\": reprcrash_data,\n+                        \"descr\": descr\n+                    })\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": getattr(rep.longrepr, 'sections', [])\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            ) or isinstance(self.longrepr, ExceptionChainRepr):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +258,20 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr\n+                pass  # Will be handled in the chain reconstruction logic below\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,6 +302,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n",
    "variant_3": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..77e719782 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -151,6 +151,17 @@ class BaseReport:\n         )\n         return verbose\n \n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n+\n+        Experimental method.\n+        \"\"\"\n+\n+\n     def _to_json(self):\n         \"\"\"\n         This was originally the serialize_report() function from xdist (ca03269).\n@@ -162,33 +173,64 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    reprtraceback_data = reprtraceback.__dict__.copy()\n+                    reprcrash_data = reprcrash.__dict__.copy()\n+                    \n+                    new_entries = []\n+                    for entry in reprtraceback_data[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    reprtraceback_data[\"reprentries\"] = new_entries\n+                    chain_data.append((reprtraceback_data, reprcrash_data, descr))\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            ) or isinstance(self.longrepr, ExceptionChainRepr):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +253,20 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr\n+                pass  # Will be handled in the chain reconstruction logic below\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,6 +297,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n",
    "variant_4": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..1b855ce29 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -151,6 +151,17 @@ class BaseReport:\n         )\n         return verbose\n \n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n+\n+        Experimental method.\n+        \"\"\"\n+\n+\n     def _to_json(self):\n         \"\"\"\n         This was originally the serialize_report() function from xdist (ca03269).\n@@ -162,33 +173,79 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    reprtraceback_data = reprtraceback.__dict__.copy()\n+                    reprcrash_data = reprcrash.__dict__.copy()\n+                    \n+                    new_entries = []\n+                    for entry in reprtraceback_data[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    reprtraceback_data[\"reprentries\"] = new_entries\n+                    \n+                    chain_data.append({\n+                        \"reprtraceback\": reprtraceback_data,\n+                        \"reprcrash\": reprcrash_data,\n+                        \"descr\": descr,\n+                    })\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Original logic for single exception\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+                self.longrepr, \"reprcrash\"\n+            )) or hasattr(self.longrepr, \"chain\"):\n+                d[\"longrepr\"] = disassembled_report(self)\n+            else:\n+                d[\"longrepr\"] = str(self.longrepr)\n+        else:\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +268,20 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr\n+                pass  # This will be handled in the chain reconstruction logic below\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,10 +312,24 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n+\n+                exception_info_data = reportdict[\"longrepr\"][\"exception_info\"]\n+                if \"chain\" in exception_info_data:\n+                    # Handle ExceptionChainRepr\n+                    from _pytest._code.code import ExceptionChainRepr\n+                    chain = []\n+                    for exc_data in exception_info_data[\"chain\"]:\n+                        reprtraceback = ReprTraceback(**exc_data[\"reprtraceback\"])\n+                        reprcrash = ReprFileLocation(**exc_data[\"reprcrash\"])\n+                        descr = exc_data[\"descr\"]\n+                        chain.append((reprtraceback, reprcrash, descr))\n+                    exception_info = ExceptionChainRepr(chain)\n+                else:\n+                    # Handle ReprExceptionInfo\n+                    exception_info = ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**reprtraceback),\n+                        reprcrash=ReprFileLocation(**reprcrash),\n+                    )\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n",
    "variant_5": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..b0f9546e5 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -161,34 +161,76 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n \n-        def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n+\n+        Experimental method.\n+        \"\"\"\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        def disassembled_report(rep):\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    reprtraceback_data = reprtraceback.__dict__.copy()\n+                    reprcrash_data = reprcrash.__dict__.copy() if reprcrash else None\n+                    \n+                    new_entries = []\n+                    for entry in reprtraceback_data[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    reprtraceback_data[\"reprentries\"] = new_entries\n+                    chain_data.append((reprtraceback_data, reprcrash_data, descr))\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            )) or hasattr(self.longrepr, \"chain\"):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +253,20 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr\n+                pass  # This will be handled in the reconstruction logic below\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,10 +297,24 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n+\n+                exception_info_data = reportdict[\"longrepr\"][\"exception_info\"]\n+                if \"chain\" in exception_info_data:\n+                    # Handle ExceptionChainRepr\n+                    from _pytest._code.code import ExceptionChainRepr\n+                    chain = []\n+                    for exc_data in exception_info_data[\"chain\"]:\n+                        reprtraceback = ReprTraceback(**exc_data[\"reprtraceback\"])\n+                        reprcrash = ReprFileLocation(**exc_data[\"reprcrash\"])\n+                        descr = exc_data[\"descr\"]\n+                        chain.append((reprtraceback, reprcrash, descr))\n+                    exception_info = ExceptionChainRepr(chain)\n+                else:\n+                    # Handle ReprExceptionInfo\n+                    exception_info = ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**reprtraceback),\n+                        reprcrash=ReprFileLocation(**reprcrash),\n+                    )\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n",
    "variant_6": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..87af252df 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -161,34 +161,81 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n \n-        def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        Experimental method.\n+        \"\"\"\n+\n+        def disassembled_report(rep):\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    chain_entry = {\n+                        'reprtraceback': reprtraceback.__dict__.copy() if reprtraceback else None,\n+                        'reprcrash': reprcrash.__dict__.copy() if reprcrash else None,\n+                        'descr': descr\n+                    }\n+                    \n+                    # Handle reprentries in traceback\n+                    if chain_entry['reprtraceback'] and 'reprentries' in chain_entry['reprtraceback']:\n+                        new_entries = []\n+                        for entry in chain_entry['reprtraceback']['reprentries']:\n+                            entry_data = {\n+                                \"type\": type(entry).__name__,\n+                                \"data\": entry.__dict__.copy(),\n+                            }\n+                            for key, value in entry_data[\"data\"].items():\n+                                if hasattr(value, \"__dict__\"):\n+                                    entry_data[\"data\"][key] = value.__dict__.copy()\n+                            new_entries.append(entry_data)\n+                        chain_entry['reprtraceback']['reprentries'] = new_entries\n+                    \n+                    chain_data.append(chain_entry)\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": getattr(rep.longrepr, 'sections', [])\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            from _pytest._code.code import ExceptionChainRepr\n+            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +258,63 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr\n+                chain_data = reportdict[\"longrepr\"][\"chain\"]\n+                chain = []\n+                for entry in chain_data:\n+                    reprtraceback = entry[\"reprtraceback\"]\n+                    reprcrash = entry[\"reprcrash\"]\n+                    description = entry.get(\"description\", \"\")\n+                    \n+                    unserialized_entries = []\n+                    for entry_data in reprtraceback[\"reprentries\"]:\n+                        data = entry_data[\"data\"]\n+                        entry_type = entry_data[\"type\"]\n+                        if entry_type == \"ReprEntry\":\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data[\"reprfuncargs\"]:\n+                                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                            if data[\"reprfileloc\"]:\n+                                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                            if data[\"reprlocals\"]:\n+                                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+                            \n+                            reprentry = ReprEntry(\n+                                lines=data[\"lines\"],\n+                                reprfuncargs=reprfuncargs,\n+                                reprlocals=reprlocals,\n+                                reprfileloc=reprfileloc,\n+                                style=data[\"style\"],\n+                            )\n+                        elif entry_type == \"ReprEntryNative\":\n+                            reprentry = ReprEntryNative(data[\"lines\"])\n+                        else:\n+                            raise ValueError(\"Unknown entry type: %s\" % entry_type)\n+                        unserialized_entries.append(reprentry)\n+                    \n+                    reprtb = ReprTraceback(\n+                        reprentries=unserialized_entries, \n+                        extraline=reprtraceback[\"extraline\"],\n+                        style=reprtraceback[\"style\"]\n+                    )\n+                    chain.append((reprtb, reprcrash, description))\n+                \n+                from _pytest._code.code import ExceptionChainRepr\n+                longrepr = ExceptionChainRepr(chain)\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,6 +345,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n",
    "variant_7": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..2c67a8bca 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -161,34 +161,77 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n \n-        def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        Experimental method.\n+        \"\"\"\n+\n+        def disassembled_report(rep):\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain') and rep.longrepr.chain:\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    reprtraceback_data = reprtraceback.__dict__.copy()\n+                    reprcrash_data = reprcrash.__dict__.copy() if reprcrash else None\n+                    \n+                    # Process reprentries for this chain element\n+                    new_entries = []\n+                    for entry in reprtraceback_data[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    reprtraceback_data[\"reprentries\"] = new_entries\n+                    chain_data.append((reprtraceback_data, reprcrash_data, descr))\n+                \n+                return {\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +254,20 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n-            if (\n+            if \"chain\" in reportdict[\"longrepr\"]:\n+                # Handle ExceptionChainRepr deserialization\n+                pass  # This will be handled in the reconstruction logic below\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n \n+\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain_data = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,6 +298,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n",
    "variant_8": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..c52638534 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -161,34 +161,77 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n \n-        def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+    def _to_json(self):\n+        \"\"\"\n+        This was originally the serialize_report() function from xdist (ca03269).\n+\n+        Returns the contents of this report as a dict of builtin entries, suitable for\n+        serialization.\n+\n+        Experimental method.\n+        \"\"\"\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+        def disassembled_report(rep):\n+            # Handle ExceptionChainRepr objects\n+            if hasattr(rep.longrepr, 'chain'):\n+                serialized_chain = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    chain_reprtraceback = reprtraceback.__dict__.copy()\n+                    chain_reprcrash = reprcrash.__dict__.copy() if reprcrash else None\n+                    \n+                    # Process reprentries for this chain element\n+                    new_entries = []\n+                    for entry in chain_reprtraceback[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    chain_reprtraceback[\"reprentries\"] = new_entries\n+                    serialized_chain.append((chain_reprtraceback, chain_reprcrash, descr))\n+                \n+                return {\n+                    \"chain\": serialized_chain,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                # Handle regular ReprExceptionInfo objects\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+\n+        d = self.__dict__.copy()\n+        if hasattr(self.longrepr, \"toterminal\"):\n+            if (hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n-            ):\n+            )) or isinstance(self.longrepr, ExceptionChainRepr):\n                 d[\"longrepr\"] = disassembled_report(self)\n             else:\n                 d[\"longrepr\"] = str(self.longrepr)\n@@ -211,15 +254,17 @@ class BaseReport:\n \n         Experimental method.\n         \"\"\"\n+\n         if reportdict[\"longrepr\"]:\n             if (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n-            ):\n+            ) or \"chain\" in reportdict[\"longrepr\"]:\n+\n \n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                chain = reportdict[\"longrepr\"].get(\"chain\")\n                 unserialized_entries = []\n                 reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n@@ -250,6 +295,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n"
  }
}