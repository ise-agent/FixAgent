{
  "zero_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/logging.py lines 344-346)": "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
    "Location 2 (/root/hy/projects/pytest/src/_pytest/logging.py lines 699-699)": "\n    def reset(self) -> None:\n        self.records.clear()\n",
    "Location 3 (/root/hy/projects/pytest/src/_pytest/logging.py lines 388-399)": "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
    "Location 4 (/root/hy/projects/pytest/src/_pytest/logging.py lines 441-443)": "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
    "Location 5 (/root/hy/projects/pytest/src/_pytest/logging.py lines 405-408)": "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/pytest/src/_pytest/logging.py lines 344-346)": [
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n        self.stream = StringIO()\n"
    ],
    "Location 2 (/root/hy/projects/pytest/src/_pytest/logging.py lines 699-699)": [
      "\n    def reset(self) -> None:\n        \"\"\"Reset the handler's records and emit flag.\"\"\"\n        self.records.clear()\n        self._item = None\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n",
      "\n    def reset(self) -> None:\n        self.records.clear()\n"
    ],
    "Location 3 (/root/hy/projects/pytest/src/_pytest/logging.py lines 388-399)": [
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n",
      "\n    def get_records(self, when: str) -> List[logging.LogRecord]:\n        \"\"\"Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :returns: The list of captured records at the given stage.\n        :rtype: List[logging.LogRecord]\n\n        .. versionadded:: 3.4\n        \"\"\"\n        return self._item.stash[caplog_records_key].get(when, [])\n"
    ],
    "Location 4 (/root/hy/projects/pytest/src/_pytest/logging.py lines 441-443)": [
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n",
      "\n    def clear(self) -> None:\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n"
    ],
    "Location 5 (/root/hy/projects/pytest/src/_pytest/logging.py lines 405-408)": [
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n",
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n",
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n",
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n",
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n",
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n",
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n",
      "\n    @property\n    def records(self) -> List[logging.LogRecord]:\n        \"\"\"The list of log records.\"\"\"\n        return self.handler.records\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f3d1e29c4 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -403,10 +405,12 @@ class LogCaptureFixture:\n         \"\"\"The formatted log text.\"\"\"\n         return _remove_ansi_escape_sequences(self.handler.stream.getvalue())\n \n+\n     @property\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +442,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,6 +701,7 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n+\n             item.stash[caplog_records_key][when] = caplog_handler.records\n             item.stash[caplog_handler_key] = caplog_handler\n \n",
    "variant_0": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_1": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..b68d27620 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,11 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        \"\"\"Reset the handler's records and emit flag.\"\"\"\n+        self.records.clear()\n+        self._item = None\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_2": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_3": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_4": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_5": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_6": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_7": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n",
    "variant_8": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..f58707451 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,8 +341,9 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records.append(record)\n         super().emit(record)\n \n+\n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n@@ -385,6 +386,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return self._item.stash[caplog_handler_key]\n \n+\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n         \"\"\"Get the logging records for one of the possible test phases.\n \n@@ -407,6 +409,7 @@ class LogCaptureFixture:\n     def records(self) -> List[logging.LogRecord]:\n         \"\"\"The list of log records.\"\"\"\n         return self.handler.records\n+        return self.handler.records\n \n     @property\n     def record_tuples(self) -> List[Tuple[str, int, str]]:\n@@ -438,6 +441,7 @@ class LogCaptureFixture:\n         \"\"\"\n         return [r.getMessage() for r in self.records]\n \n+\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n@@ -696,7 +700,9 @@ class LoggingPlugin:\n         ) as report_handler:\n             caplog_handler.reset()\n             report_handler.reset()\n-            item.stash[caplog_records_key][when] = caplog_handler.records\n+\n+    def reset(self) -> None:\n+        self.records.clear()\n             item.stash[caplog_handler_key] = caplog_handler\n \n             yield\n"
  }
}