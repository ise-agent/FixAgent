{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 406-433)": "\ndef _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n    _desc = self._strip_empty(_desc)\n    has_desc = any(_desc)\n    separator = ' -- ' if has_desc else ''\n    \n    if _name:\n        # Handle comma-separated parameter names\n        if ',' in _name:\n            names = [name.strip() for name in _name.split(',')]\n            formatted_names = []\n            for name in names:\n                if _type:\n                    if '`' in _type:\n                        formatted_names.append('**%s** (%s)' % (name, _type))\n                    else:\n                        formatted_names.append('**%s** (*%s*)' % (name, _type))\n                else:\n                    formatted_names.append('**%s**' % name)\n            field = '%s%s' % (', '.join(formatted_names), separator)\n        else:\n            if _type:\n                if '`' in _type:\n                    field = '**%s** (%s)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n            else:\n                field = '**%s**%s' % (_name, separator)\n    elif _type:\n        if '`' in _type:\n            field = '%s%s' % (_type, separator)\n        else:\n            field = '*%s*%s' % (_type, separator)\n    else:\n        field = ''\n\n    if has_desc:\n        _desc = self._fix_field_desc(_desc)\n        if _desc[0]:\n            return [field + _desc[0]] + _desc[1:]\n        else:\n            return [field] + _desc\n    else:\n        return [field]\n",
    "Location 2 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 1082-1088)": "\ndef _escape_args_and_kwargs(self, name: str) -> str:\n    func = super()._escape_args_and_kwargs\n\n    if \", \" in name:\n        return \", \".join(func(param) for param in name.split(\", \"))\n    else:\n        return func(name)\n",
    "Location 3 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 1090-1110)": "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name)\n        _type = _convert_numpy_type_spec(\n            _type,\n            location=self._get_location(),\n            translations=self._config.napoleon_type_aliases or {},\n        )\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
    "Location 4 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 363-405)": "\ndef _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n    lines = self._strip_empty(lines)\n    if len(lines) == 1:\n        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n    elif lines:\n        lines = self._indent(self._dedent(lines), 3)\n        return ['.. %s::' % admonition, ''] + lines + ['']\n    else:\n        return ['.. %s::' % admonition, '']\n\ndef _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n    if lines:\n        if padding is None:\n            padding = ' ' * len(prefix)\n        result_lines = []\n        for i, line in enumerate(lines):\n            if i == 0:\n                result_lines.append((prefix + line).rstrip())\n            elif line:\n                result_lines.append(padding + line)\n            else:\n                result_lines.append('')\n        return result_lines\n    else:\n        return [prefix]\n\ndef _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                            field_role: str = 'param', type_role: str = 'type'\n                            ) -> List[str]:\n    lines = []\n    for _name, _type, _desc in fields:\n        _desc = self._strip_empty(_desc)\n        \n        # Handle comma-separated parameter names\n        if ',' in _name:\n            param_names = [name.strip() for name in _name.split(',')]\n            # Create separate param entries for each name\n            for param_name in param_names:\n                if any(_desc):\n                    _desc_copy = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, param_name)\n                    lines.extend(self._format_block(field, _desc_copy))\n                else:\n                    lines.append(':%s %s:' % (field_role, param_name))\n                \n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n        else:\n            if any(_desc):\n                _desc = self._fix_field_desc(_desc)\n                field = ':%s %s: ' % (field_role, _name)\n                lines.extend(self._format_block(field, _desc))\n            else:\n                lines.append(':%s %s:' % (field_role, _name))\n\n            if _type:\n                lines.append(':%s %s: %s' % (type_role, _name, _type))\n    return lines + ['']\n",
    "Location 5 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 435-452)": "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Handle comma-separated parameter names\n        if ',' in _name and not _name.startswith('*'):\n            # Split comma-separated names and format each separately\n            names = [name.strip() for name in _name.split(',')]\n            formatted_names = []\n            for name in names:\n                formatted_names.append('**%s**' % name if name else '')\n            field_content = ', '.join(formatted_names)\n            if _type:\n                field_content += ' (%s)' % _type\n            field = [field_content] + _desc\n        else:\n            field = self._format_field(_name, _type, _desc)\n        \n        if multi:\n            if lines:\n                lines.extend(self._format_block(padding + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' * ', field))\n        else:\n            lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 406-433)": [
      "\ndef _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n    _desc = self._strip_empty(_desc)\n    has_desc = any(_desc)\n    separator = ' -- ' if has_desc else ''\n    \n    if _name:\n        # Handle comma-separated parameter names\n        if ',' in _name:\n            # Split names and clean whitespace\n            names = [name.strip() for name in _name.split(',')]\n            formatted_names = []\n            \n            for name in names:\n                if name:  # Skip empty names\n                    formatted_names.append('**%s**' % name)\n            \n            # Join the formatted names back together\n            name_part = ', '.join(formatted_names)\n            \n            if _type:\n                if '`' in _type:\n                    field = '%s (%s)%s' % (name_part, _type, separator)\n                else:\n                    field = '%s (*%s*)%s' % (name_part, _type, separator)\n            else:\n                field = '%s%s' % (name_part, separator)\n        else:\n            # Single parameter name (original logic)\n            if _type:\n                if '`' in _type:\n                    field = '**%s** (%s)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n            else:\n                field = '**%s**%s' % (_name, separator)\n    elif _type:\n        if '`' in _type:\n            field = '%s%s' % (_type, separator)\n        else:\n            field = '*%s*%s' % (_type, separator)\n    else:\n        field = ''\n\n    if has_desc:\n        _desc = self._fix_field_desc(_desc)\n        if _desc[0]:\n            return [field + _desc[0]] + _desc[1:]\n        else:\n            return [field] + _desc\n    else:\n        return [field]\n",
      "\ndef _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n    _desc = self._strip_empty(_desc)\n    has_desc = any(_desc)\n    separator = ' -- ' if has_desc else ''\n    \n    if _name:\n        # Handle comma-separated parameter names\n        if ',' in _name:\n            # Split names and format each individually\n            names = [name.strip() for name in _name.split(',')]\n            formatted_names = []\n            for name in names:\n                if name:  # Skip empty names\n                    formatted_names.append('**%s**' % name)\n            \n            if _type:\n                if '`' in _type:\n                    field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                else:\n                    field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n            else:\n                field = '%s%s' % (', '.join(formatted_names), separator)\n        else:\n            # Single parameter name - existing logic\n            if _type:\n                if '`' in _type:\n                    field = '**%s** (%s)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n            else:\n                field = '**%s**%s' % (_name, separator)\n    elif _type:\n        if '`' in _type:\n            field = '%s%s' % (_type, separator)\n        else:\n            field = '*%s*%s' % (_type, separator)\n    else:\n        field = ''\n\n    if has_desc:\n        _desc = self._fix_field_desc(_desc)\n        if _desc[0]:\n            return [field + _desc[0]] + _desc[1:]\n        else:\n            return [field] + _desc\n    else:\n        return [field]\n",
      "\n    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n        _desc = self._strip_empty(_desc)\n        has_desc = any(_desc)\n        separator = ' -- ' if has_desc else ''\n        if _name:\n            # Handle comma-separated parameter names\n            if ',' in _name:\n                names = [n.strip() for n in _name.split(',')]\n                if _type:\n                    if '`' in _type:\n                        formatted_names = ['**%s**' % name for name in names]\n                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                    else:\n                        formatted_names = ['**%s**' % name for name in names]\n                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n                else:\n                    formatted_names = ['**%s**' % name for name in names]\n                    field = '%s%s' % (', '.join(formatted_names), separator)\n            else:\n                if _type:\n                    if '`' in _type:\n                        field = '**%s** (%s)%s' % (_name, _type, separator)\n                    else:\n                        field = '**%s** (*%s*)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s**%s' % (_name, separator)\n        elif _type:\n            if '`' in _type:\n                field = '%s%s' % (_type, separator)\n            else:\n                field = '*%s*%s' % (_type, separator)\n        else:\n            field = ''\n\n        if has_desc:\n            _desc = self._fix_field_desc(_desc)\n            if _desc[0]:\n                return [field + _desc[0]] + _desc[1:]\n            else:\n                return [field] + _desc\n        else:\n            return [field]\n",
      "\ndef _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n    _desc = self._strip_empty(_desc)\n    has_desc = any(_desc)\n    separator = ' -- ' if has_desc else ''\n    \n    # Handle comma-separated parameter names\n    if _name and ',' in _name:\n        # Split comma-separated names and format each individually\n        names = [name.strip() for name in _name.split(',')]\n        formatted_names = []\n        \n        for name in names:\n            if name:  # Skip empty names\n                formatted_names.append('**%s**' % name)\n        \n        if formatted_names:\n            if _type:\n                if '`' in _type:\n                    field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                else:\n                    field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n            else:\n                field = '%s%s' % (', '.join(formatted_names), separator)\n        else:\n            field = ''\n    elif _name:\n        if _type:\n            if '`' in _type:\n                field = '**%s** (%s)%s' % (_name, _type, separator)\n            else:\n                field = '**%s** (*%s*)%s' % (_name, _type, separator)\n        else:\n            field = '**%s**%s' % (_name, separator)\n    elif _type:\n        if '`' in _type:\n            field = '%s%s' % (_type, separator)\n        else:\n            field = '*%s*%s' % (_type, separator)\n    else:\n        field = ''\n\n    if has_desc:\n        _desc = self._fix_field_desc(_desc)\n        if _desc[0]:\n            return [field + _desc[0]] + _desc[1:]\n        else:\n            return [field] + _desc\n    else:\n        return [field]\n",
      "\ndef _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n    _desc = self._strip_empty(_desc)\n    has_desc = any(_desc)\n    separator = ' -- ' if has_desc else ''\n    \n    if _name:\n        # Handle comma-separated parameter names\n        if ',' in _name:\n            # Split comma-separated names and format each individually\n            names = [name.strip() for name in _name.split(',')]\n            formatted_names = []\n            for name in names:\n                if name:  # Skip empty names\n                    formatted_names.append('**%s**' % name)\n            \n            if formatted_names:\n                if _type:\n                    if '`' in _type:\n                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                    else:\n                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n                else:\n                    field = '%s%s' % (', '.join(formatted_names), separator)\n            else:\n                field = ''\n        else:\n            # Single parameter name - original logic\n            if _type:\n                if '`' in _type:\n                    field = '**%s** (%s)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n            else:\n                field = '**%s**%s' % (_name, separator)\n    elif _type:\n        if '`' in _type:\n            field = '%s%s' % (_type, separator)\n        else:\n            field = '*%s*%s' % (_type, separator)\n    else:\n        field = ''\n\n    if has_desc:\n        _desc = self._fix_field_desc(_desc)\n        if _desc[0]:\n            return [field + _desc[0]] + _desc[1:]\n        else:\n            return [field] + _desc\n    else:\n        return [field]\n",
      "\n    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n        _desc = self._strip_empty(_desc)\n        has_desc = any(_desc)\n        separator = ' -- ' if has_desc else ''\n        if _name:\n            # Handle comma-separated parameter names\n            if ',' in _name:\n                names = [n.strip() for n in _name.split(',')]\n                if _type:\n                    if '`' in _type:\n                        formatted_names = ['**%s**' % n for n in names]\n                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                    else:\n                        formatted_names = ['**%s**' % n for n in names]\n                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n                else:\n                    formatted_names = ['**%s**' % n for n in names]\n                    field = '%s%s' % (', '.join(formatted_names), separator)\n            else:\n                if _type:\n                    if '`' in _type:\n                        field = '**%s** (%s)%s' % (_name, _type, separator)\n                    else:\n                        field = '**%s** (*%s*)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s**%s' % (_name, separator)\n        elif _type:\n            if '`' in _type:\n                field = '%s%s' % (_type, separator)\n            else:\n                field = '*%s*%s' % (_type, separator)\n        else:\n            field = ''\n\n        if has_desc:\n            _desc = self._fix_field_desc(_desc)\n            if _desc[0]:\n                return [field + _desc[0]] + _desc[1:]\n            else:\n                return [field] + _desc\n        else:\n            return [field]\n",
      "\ndef _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n    _desc = self._strip_empty(_desc)\n    has_desc = any(_desc)\n    separator = ' -- ' if has_desc else ''\n    \n    if _name:\n        # Handle comma-separated parameter names\n        if ',' in _name:\n            names = [n.strip() for n in _name.split(',')]\n            if _type:\n                if '`' in _type:\n                    formatted_names = ['**%s**' % name for name in names]\n                    field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                else:\n                    formatted_names = ['**%s**' % name for name in names]\n                    field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n            else:\n                formatted_names = ['**%s**' % name for name in names]\n                field = '%s%s' % (', '.join(formatted_names), separator)\n        else:\n            if _type:\n                if '`' in _type:\n                    field = '**%s** (%s)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n            else:\n                field = '**%s**%s' % (_name, separator)\n    elif _type:\n        if '`' in _type:\n            field = '%s%s' % (_type, separator)\n        else:\n            field = '*%s*%s' % (_type, separator)\n    else:\n        field = ''\n\n    if has_desc:\n        _desc = self._fix_field_desc(_desc)\n        if _desc[0]:\n            return [field + _desc[0]] + _desc[1:]\n        else:\n            return [field] + _desc\n    else:\n        return [field]\n",
      "\n    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n        _desc = self._strip_empty(_desc)\n        has_desc = any(_desc)\n        separator = ' -- ' if has_desc else ''\n        \n        if _name:\n            # Handle comma-separated parameter names\n            if ',' in _name:\n                # Split names and format each individually\n                names = [name.strip() for name in _name.split(',')]\n                if _type:\n                    if '`' in _type:\n                        formatted_names = ['**%s**' % name for name in names]\n                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                    else:\n                        formatted_names = ['**%s**' % name for name in names]\n                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n                else:\n                    formatted_names = ['**%s**' % name for name in names]\n                    field = '%s%s' % (', '.join(formatted_names), separator)\n            else:\n                # Single parameter name - existing logic\n                if _type:\n                    if '`' in _type:\n                        field = '**%s** (%s)%s' % (_name, _type, separator)\n                    else:\n                        field = '**%s** (*%s*)%s' % (_name, _type, separator)\n                else:\n                    field = '**%s**%s' % (_name, separator)\n        elif _type:\n            if '`' in _type:\n                field = '%s%s' % (_type, separator)\n            else:\n                field = '*%s*%s' % (_type, separator)\n        else:\n            field = ''\n\n        if has_desc:\n            _desc = self._fix_field_desc(_desc)\n            if _desc[0]:\n                return [field + _desc[0]] + _desc[1:]\n            else:\n                return [field] + _desc\n        else:\n            return [field]\n"
    ],
    "Location 2 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 1082-1088)": [
      "\ndef _escape_args_and_kwargs(self, name: str) -> str:\n    func = super()._escape_args_and_kwargs\n\n    if \", \" in name:\n        return \", \".join(func(param) for param in name.split(\", \"))\n    else:\n        return func(name)\n",
      "\n    def _escape_args_and_kwargs(self, name: str) -> str:\n        func = super()._escape_args_and_kwargs\n\n        if \", \" in name:\n            return \", \".join(func(param) for param in name.split(\", \"))\n        else:\n            return func(name)\n",
      "\n    def _escape_args_and_kwargs(self, name: str) -> str:\n        func = super()._escape_args_and_kwargs\n\n        if \", \" in name:\n            return \", \".join(func(param) for param in name.split(\", \"))\n        else:\n            return func(name)\n",
      "\n    def _escape_args_and_kwargs(self, name: str) -> str:\n        func = super()._escape_args_and_kwargs\n\n        if \", \" in name:\n            return \", \".join(func(param) for param in name.split(\", \"))\n        else:\n            return func(name)\n",
      "\ndef _escape_args_and_kwargs(self, name: str) -> str:\n    func = super()._escape_args_and_kwargs\n\n    if \", \" in name:\n        return \", \".join(func(param) for param in name.split(\", \"))\n    else:\n        return func(name)\n",
      "\n    def _escape_args_and_kwargs(self, name: str) -> str:\n        func = super()._escape_args_and_kwargs\n\n        if \", \" in name:\n            return \", \".join(func(param) for param in name.split(\", \"))\n        else:\n            return func(name)\n",
      "\n    def _escape_args_and_kwargs(self, name: str) -> str:\n        func = super()._escape_args_and_kwargs\n\n        if \", \" in name:\n            return \", \".join(func(param) for param in name.split(\", \"))\n        else:\n            return func(name)\n",
      "\ndef _escape_args_and_kwargs(self, name: str) -> str:\n    func = super()._escape_args_and_kwargs\n\n    if \", \" in name:\n        return \", \".join(func(param) for param in name.split(\", \"))\n    else:\n        return func(name)\n"
    ],
    "Location 3 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 1090-1110)": [
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name)\n        _type = _convert_numpy_type_spec(\n            _type,\n            location=self._get_location(),\n            translations=self._config.napoleon_type_aliases or {},\n        )\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        \n        # Handle comma-separated parameters by preserving the original structure\n        original_name = _name\n        _name = self._escape_args_and_kwargs(_name)\n        \n        # Check if we have multiple parameters (comma-separated in original)\n        if \", \" in original_name and \", \" in _name:\n            # Mark this as multiple parameters for downstream formatting\n            _name = f\"__MULTI_PARAM__{_name}\"\n        \n        _type = _convert_numpy_type_spec(\n            _type,\n            location=self._get_location(),\n            translations=self._config.napoleon_type_aliases or {},\n        )\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\ndef _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                   ) -> Tuple[str, str, List[str]]:\n    line = next(self._line_iter)\n    if parse_type:\n        _name, _, _type = self._partition_field_on_colon(line)\n    else:\n        _name, _type = line, ''\n    _name, _type = _name.strip(), _type.strip()\n    \n    # Check if we have multiple parameters before escaping\n    has_multiple_params = \", \" in _name\n    _name = self._escape_args_and_kwargs(_name)\n    \n    _type = _convert_numpy_type_spec(\n        _type,\n        location=self._get_location(),\n        translations=self._config.napoleon_type_aliases or {},\n    )\n\n    if prefer_type and not _type:\n        _type, _name = _name, _type\n    indent = self._get_indent(line) + 1\n    _desc = self._dedent(self._consume_indented_block(indent))\n    _desc = self.__class__(_desc, self._config).lines()\n    \n    # Mark multiple parameters by prefixing with a special marker\n    if has_multiple_params and not prefer_type:\n        _name = \"MULTI_PARAM:\" + _name\n    \n    return _name, _type, _desc\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, ''\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name)\n        _type = _convert_numpy_type_spec(\n            _type,\n            location=self._get_location(),\n            translations=self._config.napoleon_type_aliases or {},\n        )\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n",
      "\ndef _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                   ) -> Tuple[str, str, List[str]]:\n    line = next(self._line_iter)\n    if parse_type:\n        _name, _, _type = self._partition_field_on_colon(line)\n    else:\n        _name, _type = line, ''\n    _name, _type = _name.strip(), _type.strip()\n    \n    # Check if we have comma-separated parameters before escaping\n    has_multiple_params = \", \" in _name\n    _name = self._escape_args_and_kwargs(_name)\n    \n    _type = _convert_numpy_type_spec(\n        _type,\n        location=self._get_location(),\n        translations=self._config.napoleon_type_aliases or {},\n    )\n\n    if prefer_type and not _type:\n        _type, _name = _name, _type\n    \n    # Mark comma-separated parameters for downstream formatting\n    if has_multiple_params and \", \" in _name:\n        _name = f\"__MULTI_PARAM__{_name}__MULTI_PARAM__\"\n    \n    indent = self._get_indent(line) + 1\n    _desc = self._dedent(self._consume_indented_block(indent))\n    _desc = self.__class__(_desc, self._config).lines()\n    return _name, _type, _desc\n",
      "\ndef _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                   ) -> Tuple[str, str, List[str]]:\n    line = next(self._line_iter)\n    if parse_type:\n        _name, _, _type = self._partition_field_on_colon(line)\n    else:\n        _name, _type = line, ''\n    _name, _type = _name.strip(), _type.strip()\n    \n    # Handle comma-separated parameters by preserving the original structure\n    original_name = _name\n    _name = self._escape_args_and_kwargs(_name)\n    \n    _type = _convert_numpy_type_spec(\n        _type,\n        location=self._get_location(),\n        translations=self._config.napoleon_type_aliases or {},\n    )\n\n    if prefer_type and not _type:\n        _type, _name = _name, _type\n    indent = self._get_indent(line) + 1\n    _desc = self._dedent(self._consume_indented_block(indent))\n    _desc = self.__class__(_desc, self._config).lines()\n    return _name, _type, _desc\n",
      "\ndef _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                   ) -> Tuple[str, str, List[str]]:\n    line = next(self._line_iter)\n    if parse_type:\n        _name, _, _type = self._partition_field_on_colon(line)\n    else:\n        _name, _type = line, ''\n    _name, _type = _name.strip(), _type.strip()\n    \n    # Handle comma-separated parameters by preserving the original structure\n    original_name = _name\n    _name = self._escape_args_and_kwargs(_name)\n    \n    _type = _convert_numpy_type_spec(\n        _type,\n        location=self._get_location(),\n        translations=self._config.napoleon_type_aliases or {},\n    )\n\n    if prefer_type and not _type:\n        _type, _name = _name, _type\n    indent = self._get_indent(line) + 1\n    _desc = self._dedent(self._consume_indented_block(indent))\n    _desc = self.__class__(_desc, self._config).lines()\n    \n    # Mark comma-separated parameters for downstream formatting\n    if \", \" in original_name and \", \" in _name:\n        # Add a marker to indicate this field contains multiple parameters\n        _name = f\"__MULTI_PARAM__{_name}\"\n    \n    return _name, _type, _desc\n",
      "\ndef _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                   ) -> Tuple[str, str, List[str]]:\n    line = next(self._line_iter)\n    if parse_type:\n        _name, _, _type = self._partition_field_on_colon(line)\n    else:\n        _name, _type = line, ''\n    _name, _type = _name.strip(), _type.strip()\n    \n    # Process parameter names, preserving comma-separated structure\n    original_name = _name\n    _name = self._escape_args_and_kwargs(_name)\n    \n    _type = _convert_numpy_type_spec(\n        _type,\n        location=self._get_location(),\n        translations=self._config.napoleon_type_aliases or {},\n    )\n\n    if prefer_type and not _type:\n        _type, _name = _name, _type\n    indent = self._get_indent(line) + 1\n    _desc = self._dedent(self._consume_indented_block(indent))\n    _desc = self.__class__(_desc, self._config).lines()\n    return _name, _type, _desc\n"
    ],
    "Location 4 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 363-405)": [
      "\ndef _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n    lines = self._strip_empty(lines)\n    if len(lines) == 1:\n        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n    elif lines:\n        lines = self._indent(self._dedent(lines), 3)\n        return ['.. %s::' % admonition, ''] + lines + ['']\n    else:\n        return ['.. %s::' % admonition, '']\n\ndef _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n    if lines:\n        if padding is None:\n            padding = ' ' * len(prefix)\n        result_lines = []\n        for i, line in enumerate(lines):\n            if i == 0:\n                result_lines.append((prefix + line).rstrip())\n            elif line:\n                result_lines.append(padding + line)\n            else:\n                result_lines.append('')\n        return result_lines\n    else:\n        return [prefix]\n\ndef _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                            field_role: str = 'param', type_role: str = 'type'\n                            ) -> List[str]:\n    lines = []\n    for _name, _type, _desc in fields:\n        _desc = self._strip_empty(_desc)\n        \n        # Handle comma-separated parameter names\n        if ',' in _name:\n            param_names = [name.strip() for name in _name.split(',')]\n            for param_name in param_names:\n                if any(_desc):\n                    _desc_copy = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, param_name)\n                    lines.extend(self._format_block(field, _desc_copy))\n                else:\n                    lines.append(':%s %s:' % (field_role, param_name))\n                \n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n        else:\n            if any(_desc):\n                _desc = self._fix_field_desc(_desc)\n                field = ':%s %s: ' % (field_role, _name)\n                lines.extend(self._format_block(field, _desc))\n            else:\n                lines.append(':%s %s:' % (field_role, _name))\n\n            if _type:\n                lines.append(':%s %s: %s' % (type_role, _name, _type))\n    return lines + ['']\n",
      "\ndef _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n    lines = self._strip_empty(lines)\n    if len(lines) == 1:\n        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n    elif lines:\n        lines = self._indent(self._dedent(lines), 3)\n        return ['.. %s::' % admonition, ''] + lines + ['']\n    else:\n        return ['.. %s::' % admonition, '']\n\ndef _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n    if lines:\n        if padding is None:\n            padding = ' ' * len(prefix)\n        result_lines = []\n        for i, line in enumerate(lines):\n            if i == 0:\n                result_lines.append((prefix + line).rstrip())\n            elif line:\n                result_lines.append(padding + line)\n            else:\n                result_lines.append('')\n        return result_lines\n    else:\n        return [prefix]\n\ndef _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                            field_role: str = 'param', type_role: str = 'type'\n                            ) -> List[str]:\n    lines = []\n    for _name, _type, _desc in fields:\n        _desc = self._strip_empty(_desc)\n        \n        # Handle comma-separated parameter names\n        if ',' in _name:\n            param_names = [name.strip() for name in _name.split(',')]\n            for param_name in param_names:\n                if any(_desc):\n                    _desc_copy = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, param_name)\n                    lines.extend(self._format_block(field, _desc_copy))\n                else:\n                    lines.append(':%s %s:' % (field_role, param_name))\n                \n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n        else:\n            if any(_desc):\n                _desc = self._fix_field_desc(_desc)\n                field = ':%s %s: ' % (field_role, _name)\n                lines.extend(self._format_block(field, _desc))\n            else:\n                lines.append(':%s %s:' % (field_role, _name))\n\n            if _type:\n                lines.append(':%s %s: %s' % (type_role, _name, _type))\n    return lines + ['']\n",
      "\n    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n        lines = self._strip_empty(lines)\n        if len(lines) == 1:\n            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n        elif lines:\n            lines = self._indent(self._dedent(lines), 3)\n            return ['.. %s::' % admonition, ''] + lines + ['']\n        else:\n            return ['.. %s::' % admonition, '']\n\n    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n        if lines:\n            if padding is None:\n                padding = ' ' * len(prefix)\n            result_lines = []\n            for i, line in enumerate(lines):\n                if i == 0:\n                    result_lines.append((prefix + line).rstrip())\n                elif line:\n                    result_lines.append(padding + line)\n                else:\n                    result_lines.append('')\n            return result_lines\n        else:\n            return [prefix]\n\n    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                                field_role: str = 'param', type_role: str = 'type'\n                                ) -> List[str]:\n        lines = []\n        for _name, _type, _desc in fields:\n            _desc = self._strip_empty(_desc)\n            # Handle comma-separated parameter names\n            if ',' in _name:\n                names = [name.strip() for name in _name.split(',')]\n                for name in names:\n                    if any(_desc):\n                        _desc_copy = self._fix_field_desc(_desc)\n                        field = ':%s %s: ' % (field_role, name)\n                        lines.extend(self._format_block(field, _desc_copy))\n                    else:\n                        lines.append(':%s %s:' % (field_role, name))\n                    \n                    if _type:\n                        lines.append(':%s %s: %s' % (type_role, name, _type))\n            else:\n                if any(_desc):\n                    _desc = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, _name)\n                    lines.extend(self._format_block(field, _desc))\n                else:\n                    lines.append(':%s %s:' % (field_role, _name))\n\n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n        return lines + ['']\n",
      "\ndef _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n    lines = self._strip_empty(lines)\n    if len(lines) == 1:\n        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n    elif lines:\n        lines = self._indent(self._dedent(lines), 3)\n        return ['.. %s::' % admonition, ''] + lines + ['']\n    else:\n        return ['.. %s::' % admonition, '']\n\ndef _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n    if lines:\n        if padding is None:\n            padding = ' ' * len(prefix)\n        result_lines = []\n        for i, line in enumerate(lines):\n            if i == 0:\n                result_lines.append((prefix + line).rstrip())\n            elif line:\n                result_lines.append(padding + line)\n            else:\n                result_lines.append('')\n        return result_lines\n    else:\n        return [prefix]\n\ndef _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                            field_role: str = 'param', type_role: str = 'type'\n                            ) -> List[str]:\n    lines = []\n    for _name, _type, _desc in fields:\n        _desc = self._strip_empty(_desc)\n        \n        # Handle comma-separated parameter names\n        if ',' in _name:\n            names = [name.strip() for name in _name.split(',')]\n            for name in names:\n                if any(_desc):\n                    _desc_copy = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, name)\n                    lines.extend(self._format_block(field, _desc_copy))\n                else:\n                    lines.append(':%s %s:' % (field_role, name))\n                \n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, name, _type))\n        else:\n            if any(_desc):\n                _desc = self._fix_field_desc(_desc)\n                field = ':%s %s: ' % (field_role, _name)\n                lines.extend(self._format_block(field, _desc))\n            else:\n                lines.append(':%s %s:' % (field_role, _name))\n\n            if _type:\n                lines.append(':%s %s: %s' % (type_role, _name, _type))\n    return lines + ['']\n",
      "\ndef _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n    lines = self._strip_empty(lines)\n    if len(lines) == 1:\n        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n    elif lines:\n        lines = self._indent(self._dedent(lines), 3)\n        return ['.. %s::' % admonition, ''] + lines + ['']\n    else:\n        return ['.. %s::' % admonition, '']\n\ndef _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n    if lines:\n        if padding is None:\n            padding = ' ' * len(prefix)\n        result_lines = []\n        for i, line in enumerate(lines):\n            if i == 0:\n                result_lines.append((prefix + line).rstrip())\n            elif line:\n                result_lines.append(padding + line)\n            else:\n                result_lines.append('')\n        return result_lines\n    else:\n        return [prefix]\n\ndef _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                            field_role: str = 'param', type_role: str = 'type'\n                            ) -> List[str]:\n    lines = []\n    for _name, _type, _desc in fields:\n        _desc = self._strip_empty(_desc)\n        \n        # Handle comma-separated parameter names\n        if ',' in _name:\n            param_names = [name.strip() for name in _name.split(',')]\n            for param_name in param_names:\n                if any(_desc):\n                    _desc = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, param_name)\n                    lines.extend(self._format_block(field, _desc))\n                else:\n                    lines.append(':%s %s:' % (field_role, param_name))\n                \n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n        else:\n            if any(_desc):\n                _desc = self._fix_field_desc(_desc)\n                field = ':%s %s: ' % (field_role, _name)\n                lines.extend(self._format_block(field, _desc))\n            else:\n                lines.append(':%s %s:' % (field_role, _name))\n\n            if _type:\n                lines.append(':%s %s: %s' % (type_role, _name, _type))\n    return lines + ['']\n",
      "\n    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n        lines = self._strip_empty(lines)\n        if len(lines) == 1:\n            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n        elif lines:\n            lines = self._indent(self._dedent(lines), 3)\n            return ['.. %s::' % admonition, ''] + lines + ['']\n        else:\n            return ['.. %s::' % admonition, '']\n\n    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n        if lines:\n            if padding is None:\n                padding = ' ' * len(prefix)\n            result_lines = []\n            for i, line in enumerate(lines):\n                if i == 0:\n                    result_lines.append((prefix + line).rstrip())\n                elif line:\n                    result_lines.append(padding + line)\n                else:\n                    result_lines.append('')\n            return result_lines\n        else:\n            return [prefix]\n\n    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                                field_role: str = 'param', type_role: str = 'type'\n                                ) -> List[str]:\n        lines = []\n        for _name, _type, _desc in fields:\n            _desc = self._strip_empty(_desc)\n            \n            # Handle comma-separated parameter names\n            if ',' in _name:\n                names = [name.strip() for name in _name.split(',')]\n                for name in names:\n                    if any(_desc):\n                        _desc_copy = self._fix_field_desc(_desc)\n                        field = ':%s %s: ' % (field_role, name)\n                        lines.extend(self._format_block(field, _desc_copy))\n                    else:\n                        lines.append(':%s %s:' % (field_role, name))\n                    \n                    if _type:\n                        lines.append(':%s %s: %s' % (type_role, name, _type))\n            else:\n                if any(_desc):\n                    _desc = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, _name)\n                    lines.extend(self._format_block(field, _desc))\n                else:\n                    lines.append(':%s %s:' % (field_role, _name))\n\n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n        return lines + ['']\n",
      "\n    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n        lines = self._strip_empty(lines)\n        if len(lines) == 1:\n            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n        elif lines:\n            lines = self._indent(self._dedent(lines), 3)\n            return ['.. %s::' % admonition, ''] + lines + ['']\n        else:\n            return ['.. %s::' % admonition, '']\n\n    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n        if lines:\n            if padding is None:\n                padding = ' ' * len(prefix)\n            result_lines = []\n            for i, line in enumerate(lines):\n                if i == 0:\n                    result_lines.append((prefix + line).rstrip())\n                elif line:\n                    result_lines.append(padding + line)\n                else:\n                    result_lines.append('')\n            return result_lines\n        else:\n            return [prefix]\n\n    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                                field_role: str = 'param', type_role: str = 'type'\n                                ) -> List[str]:\n        lines = []\n        for _name, _type, _desc in fields:\n            _desc = self._strip_empty(_desc)\n            # Handle comma-separated parameter names\n            if ',' in _name:\n                param_names = [name.strip() for name in _name.split(',')]\n                # Create separate param entries for each name\n                for param_name in param_names:\n                    if any(_desc):\n                        _desc_copy = self._fix_field_desc(_desc)\n                        field = ':%s %s: ' % (field_role, param_name)\n                        lines.extend(self._format_block(field, _desc_copy))\n                    else:\n                        lines.append(':%s %s:' % (field_role, param_name))\n                    \n                    if _type:\n                        lines.append(':%s %s: %s' % (type_role, param_name, _type))\n            else:\n                if any(_desc):\n                    _desc = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, _name)\n                    lines.extend(self._format_block(field, _desc))\n                else:\n                    lines.append(':%s %s:' % (field_role, _name))\n\n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n        return lines + ['']\n",
      "\n    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n        lines = self._strip_empty(lines)\n        if len(lines) == 1:\n            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n        elif lines:\n            lines = self._indent(self._dedent(lines), 3)\n            return ['.. %s::' % admonition, ''] + lines + ['']\n        else:\n            return ['.. %s::' % admonition, '']\n\n    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n        if lines:\n            if padding is None:\n                padding = ' ' * len(prefix)\n            result_lines = []\n            for i, line in enumerate(lines):\n                if i == 0:\n                    result_lines.append((prefix + line).rstrip())\n                elif line:\n                    result_lines.append(padding + line)\n                else:\n                    result_lines.append('')\n            return result_lines\n        else:\n            return [prefix]\n\n    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                                field_role: str = 'param', type_role: str = 'type'\n                                ) -> List[str]:\n        lines = []\n        for _name, _type, _desc in fields:\n            _desc = self._strip_empty(_desc)\n            # Handle comma-separated parameter names\n            if ',' in _name:\n                param_names = [name.strip() for name in _name.split(',')]\n                for param_name in param_names:\n                    if any(_desc):\n                        _desc_copy = self._fix_field_desc(_desc)\n                        field = ':%s %s: ' % (field_role, param_name)\n                        lines.extend(self._format_block(field, _desc_copy))\n                    else:\n                        lines.append(':%s %s:' % (field_role, param_name))\n                    \n                    if _type:\n                        lines.append(':%s %s: %s' % (type_role, param_name, _type))\n            else:\n                if any(_desc):\n                    _desc = self._fix_field_desc(_desc)\n                    field = ':%s %s: ' % (field_role, _name)\n                    lines.extend(self._format_block(field, _desc))\n                else:\n                    lines.append(':%s %s:' % (field_role, _name))\n\n                if _type:\n                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n        return lines + ['']\n"
    ],
    "Location 5 (/root/hy/projects/sphinx/sphinx/ext/napoleon/docstring.py lines 435-452)": [
      "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Handle comma-separated parameter names\n        if ',' in _name and not _name.startswith('*'):\n            # Split comma-separated names and format each separately\n            names = [name.strip() for name in _name.split(',')]\n            formatted_names = []\n            for name in names:\n                formatted_names.append('**%s**' % name)\n            # Rejoin with proper formatting\n            formatted_field_content = ', '.join(formatted_names)\n            if _type:\n                formatted_field_content += ' (%s)' % _type\n            field = [formatted_field_content] + _desc\n        else:\n            field = self._format_field(_name, _type, _desc)\n        \n        if multi:\n            if lines:\n                lines.extend(self._format_block(padding + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' * ', field))\n        else:\n            lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n",
      "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Handle comma-separated parameter names by expanding them\n        if ',' in _name and not _name.startswith('*'):\n            # Split comma-separated names and create individual fields\n            names = [name.strip() for name in _name.split(',')]\n            for i, individual_name in enumerate(names):\n                field = self._format_field(individual_name, _type, _desc if i == 0 else [])\n                if multi or len(names) > 1:\n                    if lines:\n                        lines.extend(self._format_block(padding + ' * ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' ', field))\n        else:\n            field = self._format_field(_name, _type, _desc)\n            if multi:\n                if lines:\n                    lines.extend(self._format_block(padding + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n",
      "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Handle comma-separated parameter names by splitting and processing each\n        if ',' in _name and not _name.startswith('*'):\n            # Split comma-separated names and process each individually\n            names = [name.strip() for name in _name.split(',')]\n            for i, name in enumerate(names):\n                field = self._format_field(name, _type, _desc)\n                if multi or len(names) > 1:\n                    if lines:\n                        lines.extend(self._format_block(padding + ' * ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' ', field))\n        else:\n            field = self._format_field(_name, _type, _desc)\n            if multi:\n                if lines:\n                    lines.extend(self._format_block(padding + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n",
      "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Handle comma-separated parameter names\n        if ',' in _name and not _name.startswith('*'):\n            # Split comma-separated names and format each separately\n            names = [name.strip() for name in _name.split(',')]\n            formatted_fields = []\n            for name in names:\n                formatted_fields.append(self._format_field(name, _type, _desc))\n            \n            # Join the formatted fields with proper spacing\n            if multi:\n                for i, field in enumerate(formatted_fields):\n                    if lines or i > 0:\n                        lines.extend(self._format_block(padding + ' * ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' * ', field))\n            else:\n                for i, field in enumerate(formatted_fields):\n                    if i > 0:\n                        lines.extend(self._format_block(padding + ' ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' ', field))\n        else:\n            # Handle single parameter name normally\n            field = self._format_field(_name, _type, _desc)\n            if multi:\n                if lines:\n                    lines.extend(self._format_block(padding + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n",
      "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Check if _name contains multiple comma-separated parameters\n        if ',' in _name and not (_name.startswith('*') or _name.startswith('**')):\n            # Handle comma-separated parameters\n            param_names = [name.strip() for name in _name.split(',')]\n            formatted_names = []\n            for param_name in param_names:\n                if param_name:\n                    formatted_names.append('**%s**' % param_name)\n            combined_name = ', '.join(formatted_names)\n            \n            # Create field with properly formatted comma-separated names\n            if _type:\n                field_content = ['%s (%s)' % (combined_name, _type)]\n            else:\n                field_content = [combined_name]\n            \n            if _desc:\n                _desc = self._fix_field_desc(_desc)\n                if _desc[0]:\n                    field_content = [field_content[0] + ' -- ' + _desc[0]] + _desc[1:]\n                else:\n                    field_content = field_content + _desc\n            \n            field = field_content\n        else:\n            # Use existing _format_field for single parameters\n            field = self._format_field(_name, _type, _desc)\n        \n        if multi:\n            if lines:\n                lines.extend(self._format_block(padding + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' * ', field))\n        else:\n            lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n",
      "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Check if _name contains comma-separated parameters\n        if ',' in _name and not _name.startswith('*'):\n            # Split comma-separated names and format each separately\n            names = [name.strip() for name in _name.split(',')]\n            for i, name in enumerate(names):\n                field = self._format_field(name, _type, _desc)\n                if multi or i > 0:\n                    if lines:\n                        lines.extend(self._format_block(padding + ' * ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' ', field))\n        else:\n            field = self._format_field(_name, _type, _desc)\n            if multi:\n                if lines:\n                    lines.extend(self._format_block(padding + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n",
      "\n    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                       ) -> List[str]:\n        field_type = ':%s:' % field_type.strip()\n        padding = ' ' * len(field_type)\n        multi = len(fields) > 1\n        lines = []  # type: List[str]\n        for _name, _type, _desc in fields:\n            # Handle comma-separated parameter names\n            if ',' in _name and not _name.startswith('*'):\n                # Split comma-separated names and format each individually\n                names = [name.strip() for name in _name.split(',') if name.strip()]\n                for i, name in enumerate(names):\n                    field = self._format_field(name, _type, _desc if i == 0 else [])\n                    if multi or i > 0:\n                        if lines:\n                            lines.extend(self._format_block(padding + ' * ', field))\n                        else:\n                            lines.extend(self._format_block(field_type + ' * ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' ', field))\n            else:\n                field = self._format_field(_name, _type, _desc)\n                if multi:\n                    if lines:\n                        lines.extend(self._format_block(padding + ' * ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' ', field))\n        if lines and lines[-1]:\n            lines.append('')\n        return lines\n",
      "\ndef _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                   ) -> List[str]:\n    field_type = ':%s:' % field_type.strip()\n    padding = ' ' * len(field_type)\n    multi = len(fields) > 1\n    lines = []  # type: List[str]\n    for _name, _type, _desc in fields:\n        # Handle comma-separated parameter names\n        if ',' in _name and not _name.startswith('*'):\n            # Split comma-separated names and process each individually\n            names = [name.strip() for name in _name.split(',')]\n            for i, name in enumerate(names):\n                field = self._format_field(name, _type, _desc)\n                if multi or len(names) > 1:\n                    if lines:\n                        lines.extend(self._format_block(padding + ' * ', field))\n                    else:\n                        lines.extend(self._format_block(field_type + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' ', field))\n        else:\n            field = self._format_field(_name, _type, _desc)\n            if multi:\n                if lines:\n                    lines.extend(self._format_block(padding + ' * ', field))\n                else:\n                    lines.extend(self._format_block(field_type + ' * ', field))\n            else:\n                lines.extend(self._format_block(field_type + ' ', field))\n    if lines and lines[-1]:\n        lines.append('')\n    return lines\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..f549ed978 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,6 +360,7 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n+\n     def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n         lines = self._strip_empty(lines)\n         if len(lines) == 1:\n@@ -391,16 +392,33 @@ class GoogleDocstring:\n                                 ) -> List[str]:\n         lines = []\n         for _name, _type, _desc in fields:\n-            _desc = self._strip_empty(_desc)\n-            if any(_desc):\n-                _desc = self._fix_field_desc(_desc)\n-                field = ':%s %s: ' % (field_role, _name)\n-                lines.extend(self._format_block(field, _desc))\n+            # Handle comma-separated parameter names for docutils output\n+            if \", \" in _name:\n+                # Create separate parameter entries for each name\n+                param_names = [name.strip() for name in _name.split(\", \")]\n+                for param in param_names:\n+                    _desc_copy = self._strip_empty(_desc)\n+                    if any(_desc_copy):\n+                        _desc_copy = self._fix_field_desc(_desc_copy)\n+                        field = ':%s %s: ' % (field_role, param)\n+                        lines.extend(self._format_block(field, _desc_copy))\n+                    else:\n+                        lines.append(':%s %s:' % (field_role, param))\n+\n+                    if _type:\n+                        lines.append(':%s %s: %s' % (type_role, param, _type))\n             else:\n-                lines.append(':%s %s:' % (field_role, _name))\n+                # Single parameter - use original logic\n+                _desc = self._strip_empty(_desc)\n+                if any(_desc):\n+                    _desc = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, _name)\n+                    lines.extend(self._format_block(field, _desc))\n+                else:\n+                    lines.append(':%s %s:' % (field_role, _name))\n \n-            if _type:\n-                lines.append(':%s %s: %s' % (type_role, _name, _type))\n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n@@ -408,13 +426,31 @@ class GoogleDocstring:\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n         if _name:\n-            if _type:\n-                if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+            # Handle comma-separated parameter names\n+            if \", \" in _name:\n+                # Split parameter names and format each one individually\n+                param_names = [name.strip() for name in _name.split(\", \")]\n+                formatted_names = []\n+                for param in param_names:\n+                    formatted_names.append('**%s**' % param)\n+                formatted_name = ', '.join(formatted_names)\n+                \n+                if _type:\n+                    if '`' in _type:\n+                        field = '%s (%s)%s' % (formatted_name, _type, separator)\n+                    else:\n+                        field = '%s (*%s*)%s' % (formatted_name, _type, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    field = '%s%s' % (formatted_name, separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                # Single parameter name - use original logic\n+                if _type:\n+                    if '`' in _type:\n+                        field = '**%s** (%s)%s' % (_name, _type, separator)\n+                    else:\n+                        field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                else:\n+                    field = '**%s**%s' % (_name, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n@@ -432,6 +468,7 @@ class GoogleDocstring:\n         else:\n             return [field]\n \n+\n     def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                        ) -> List[str]:\n         field_type = ':%s:' % field_type.strip()\n@@ -1079,6 +1116,7 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n+\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n \n@@ -1087,6 +1125,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             return func(name)\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n",
    "variant_0": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..52073f286 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,38 +360,55 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n-    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n-        lines = self._strip_empty(lines)\n-        if len(lines) == 1:\n-            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n-        elif lines:\n-            lines = self._indent(self._dedent(lines), 3)\n-            return ['.. %s::' % admonition, ''] + lines + ['']\n-        else:\n-            return ['.. %s::' % admonition, '']\n \n-    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n-        if lines:\n-            if padding is None:\n-                padding = ' ' * len(prefix)\n-            result_lines = []\n-            for i, line in enumerate(lines):\n-                if i == 0:\n-                    result_lines.append((prefix + line).rstrip())\n-                elif line:\n-                    result_lines.append(padding + line)\n+def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n+    lines = self._strip_empty(lines)\n+    if len(lines) == 1:\n+        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n+    elif lines:\n+        lines = self._indent(self._dedent(lines), 3)\n+        return ['.. %s::' % admonition, ''] + lines + ['']\n+    else:\n+        return ['.. %s::' % admonition, '']\n+\n+def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n+    if lines:\n+        if padding is None:\n+            padding = ' ' * len(prefix)\n+        result_lines = []\n+        for i, line in enumerate(lines):\n+            if i == 0:\n+                result_lines.append((prefix + line).rstrip())\n+            elif line:\n+                result_lines.append(padding + line)\n+            else:\n+                result_lines.append('')\n+        return result_lines\n+    else:\n+        return [prefix]\n+\n+def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n+                            field_role: str = 'param', type_role: str = 'type'\n+                            ) -> List[str]:\n+    lines = []\n+    for _name, _type, _desc in fields:\n+        _desc = self._strip_empty(_desc)\n+        \n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            param_names = [name.strip() for name in _name.split(',')]\n+            # Create separate param entries for each name\n+            for param_name in param_names:\n+                if any(_desc):\n+                    _desc_copy = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, param_name)\n+                    lines.extend(self._format_block(field, _desc_copy))\n                 else:\n-                    result_lines.append('')\n-            return result_lines\n+                    lines.append(':%s %s:' % (field_role, param_name))\n+                \n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n         else:\n-            return [prefix]\n-\n-    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n-                                field_role: str = 'param', type_role: str = 'type'\n-                                ) -> List[str]:\n-        lines = []\n-        for _name, _type, _desc in fields:\n-            _desc = self._strip_empty(_desc)\n             if any(_desc):\n                 _desc = self._fix_field_desc(_desc)\n                 field = ':%s %s: ' % (field_role, _name)\n@@ -401,13 +418,28 @@ class GoogleDocstring:\n \n             if _type:\n                 lines.append(':%s %s: %s' % (type_role, _name, _type))\n-        return lines + ['']\n-\n-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n-        _desc = self._strip_empty(_desc)\n-        has_desc = any(_desc)\n-        separator = ' -- ' if has_desc else ''\n-        if _name:\n+    return lines + ['']\n+\n+def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n+    _desc = self._strip_empty(_desc)\n+    has_desc = any(_desc)\n+    separator = ' -- ' if has_desc else ''\n+    \n+    if _name:\n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            names = [name.strip() for name in _name.split(',')]\n+            formatted_names = []\n+            for name in names:\n+                if _type:\n+                    if '`' in _type:\n+                        formatted_names.append('**%s** (%s)' % (name, _type))\n+                    else:\n+                        formatted_names.append('**%s** (*%s*)' % (name, _type))\n+                else:\n+                    formatted_names.append('**%s**' % name)\n+            field = '%s%s' % (', '.join(formatted_names), separator)\n+        else:\n             if _type:\n                 if '`' in _type:\n                     field = '**%s** (%s)%s' % (_name, _type, separator)\n@@ -415,41 +447,55 @@ class GoogleDocstring:\n                     field = '**%s** (*%s*)%s' % (_name, _type, separator)\n             else:\n                 field = '**%s**%s' % (_name, separator)\n-        elif _type:\n-            if '`' in _type:\n-                field = '%s%s' % (_type, separator)\n-            else:\n-                field = '*%s*%s' % (_type, separator)\n+    elif _type:\n+        if '`' in _type:\n+            field = '%s%s' % (_type, separator)\n         else:\n-            field = ''\n+            field = '*%s*%s' % (_type, separator)\n+    else:\n+        field = ''\n \n-        if has_desc:\n-            _desc = self._fix_field_desc(_desc)\n-            if _desc[0]:\n-                return [field + _desc[0]] + _desc[1:]\n-            else:\n-                return [field] + _desc\n+    if has_desc:\n+        _desc = self._fix_field_desc(_desc)\n+        if _desc[0]:\n+            return [field + _desc[0]] + _desc[1:]\n+        else:\n+            return [field] + _desc\n+    else:\n+        return [field]\n+\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Handle comma-separated parameter names\n+        if ',' in _name and not _name.startswith('*'):\n+            # Split comma-separated names and format each separately\n+            names = [name.strip() for name in _name.split(',')]\n+            formatted_names = []\n+            for name in names:\n+                formatted_names.append('**%s**' % name if name else '')\n+            field_content = ', '.join(formatted_names)\n+            if _type:\n+                field_content += ' (%s)' % _type\n+            field = [field_content] + _desc\n         else:\n-            return [field]\n-\n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n             field = self._format_field(_name, _type, _desc)\n-            if multi:\n-                if lines:\n-                    lines.extend(self._format_block(padding + ' * ', field))\n-                else:\n-                    lines.extend(self._format_block(field_type + ' * ', field))\n+        \n+        if multi:\n+            if lines:\n+                lines.extend(self._format_block(padding + ' * ', field))\n             else:\n-                lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+                lines.extend(self._format_block(field_type + ' * ', field))\n+        else:\n+            lines.extend(self._format_block(field_type + ' ', field))\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,13 +1125,15 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        func = super()._escape_args_and_kwargs\n \n-        if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n-        else:\n-            return func(name)\n+def _escape_args_and_kwargs(self, name: str) -> str:\n+    func = super()._escape_args_and_kwargs\n+\n+    if \", \" in name:\n+        return \", \".join(func(param) for param in name.split(\", \"))\n+    else:\n+        return func(name)\n+\n \n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n",
    "variant_1": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..ef6deb95d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,38 +360,54 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n-    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n-        lines = self._strip_empty(lines)\n-        if len(lines) == 1:\n-            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n-        elif lines:\n-            lines = self._indent(self._dedent(lines), 3)\n-            return ['.. %s::' % admonition, ''] + lines + ['']\n-        else:\n-            return ['.. %s::' % admonition, '']\n \n-    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n-        if lines:\n-            if padding is None:\n-                padding = ' ' * len(prefix)\n-            result_lines = []\n-            for i, line in enumerate(lines):\n-                if i == 0:\n-                    result_lines.append((prefix + line).rstrip())\n-                elif line:\n-                    result_lines.append(padding + line)\n+def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n+    lines = self._strip_empty(lines)\n+    if len(lines) == 1:\n+        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n+    elif lines:\n+        lines = self._indent(self._dedent(lines), 3)\n+        return ['.. %s::' % admonition, ''] + lines + ['']\n+    else:\n+        return ['.. %s::' % admonition, '']\n+\n+def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n+    if lines:\n+        if padding is None:\n+            padding = ' ' * len(prefix)\n+        result_lines = []\n+        for i, line in enumerate(lines):\n+            if i == 0:\n+                result_lines.append((prefix + line).rstrip())\n+            elif line:\n+                result_lines.append(padding + line)\n+            else:\n+                result_lines.append('')\n+        return result_lines\n+    else:\n+        return [prefix]\n+\n+def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n+                            field_role: str = 'param', type_role: str = 'type'\n+                            ) -> List[str]:\n+    lines = []\n+    for _name, _type, _desc in fields:\n+        _desc = self._strip_empty(_desc)\n+        \n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            param_names = [name.strip() for name in _name.split(',')]\n+            for param_name in param_names:\n+                if any(_desc):\n+                    _desc_copy = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, param_name)\n+                    lines.extend(self._format_block(field, _desc_copy))\n                 else:\n-                    result_lines.append('')\n-            return result_lines\n+                    lines.append(':%s %s:' % (field_role, param_name))\n+                \n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n         else:\n-            return [prefix]\n-\n-    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n-                                field_role: str = 'param', type_role: str = 'type'\n-                                ) -> List[str]:\n-        lines = []\n-        for _name, _type, _desc in fields:\n-            _desc = self._strip_empty(_desc)\n             if any(_desc):\n                 _desc = self._fix_field_desc(_desc)\n                 field = ':%s %s: ' % (field_role, _name)\n@@ -401,13 +417,36 @@ class GoogleDocstring:\n \n             if _type:\n                 lines.append(':%s %s: %s' % (type_role, _name, _type))\n-        return lines + ['']\n-\n-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n-        _desc = self._strip_empty(_desc)\n-        has_desc = any(_desc)\n-        separator = ' -- ' if has_desc else ''\n-        if _name:\n+    return lines + ['']\n+\n+def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n+    _desc = self._strip_empty(_desc)\n+    has_desc = any(_desc)\n+    separator = ' -- ' if has_desc else ''\n+    \n+    if _name:\n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            # Split names and clean whitespace\n+            names = [name.strip() for name in _name.split(',')]\n+            formatted_names = []\n+            \n+            for name in names:\n+                if name:  # Skip empty names\n+                    formatted_names.append('**%s**' % name)\n+            \n+            # Join the formatted names back together\n+            name_part = ', '.join(formatted_names)\n+            \n+            if _type:\n+                if '`' in _type:\n+                    field = '%s (%s)%s' % (name_part, _type, separator)\n+                else:\n+                    field = '%s (*%s*)%s' % (name_part, _type, separator)\n+            else:\n+                field = '%s%s' % (name_part, separator)\n+        else:\n+            # Single parameter name (original logic)\n             if _type:\n                 if '`' in _type:\n                     field = '**%s** (%s)%s' % (_name, _type, separator)\n@@ -415,41 +454,56 @@ class GoogleDocstring:\n                     field = '**%s** (*%s*)%s' % (_name, _type, separator)\n             else:\n                 field = '**%s**%s' % (_name, separator)\n-        elif _type:\n-            if '`' in _type:\n-                field = '%s%s' % (_type, separator)\n-            else:\n-                field = '*%s*%s' % (_type, separator)\n+    elif _type:\n+        if '`' in _type:\n+            field = '%s%s' % (_type, separator)\n         else:\n-            field = ''\n+            field = '*%s*%s' % (_type, separator)\n+    else:\n+        field = ''\n \n-        if has_desc:\n-            _desc = self._fix_field_desc(_desc)\n-            if _desc[0]:\n-                return [field + _desc[0]] + _desc[1:]\n-            else:\n-                return [field] + _desc\n+    if has_desc:\n+        _desc = self._fix_field_desc(_desc)\n+        if _desc[0]:\n+            return [field + _desc[0]] + _desc[1:]\n+        else:\n+            return [field] + _desc\n+    else:\n+        return [field]\n+\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Handle comma-separated parameter names\n+        if ',' in _name and not _name.startswith('*'):\n+            # Split comma-separated names and format each separately\n+            names = [name.strip() for name in _name.split(',')]\n+            formatted_names = []\n+            for name in names:\n+                formatted_names.append('**%s**' % name)\n+            # Rejoin with proper formatting\n+            formatted_field_content = ', '.join(formatted_names)\n+            if _type:\n+                formatted_field_content += ' (%s)' % _type\n+            field = [formatted_field_content] + _desc\n         else:\n-            return [field]\n-\n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n             field = self._format_field(_name, _type, _desc)\n-            if multi:\n-                if lines:\n-                    lines.extend(self._format_block(padding + ' * ', field))\n-                else:\n-                    lines.extend(self._format_block(field_type + ' * ', field))\n+        \n+        if multi:\n+            if lines:\n+                lines.extend(self._format_block(padding + ' * ', field))\n             else:\n-                lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+                lines.extend(self._format_block(field_type + ' * ', field))\n+        else:\n+            lines.extend(self._format_block(field_type + ' ', field))\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,13 +1133,15 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        func = super()._escape_args_and_kwargs\n \n-        if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n-        else:\n-            return func(name)\n+def _escape_args_and_kwargs(self, name: str) -> str:\n+    func = super()._escape_args_and_kwargs\n+\n+    if \", \" in name:\n+        return \", \".join(func(param) for param in name.split(\", \"))\n+    else:\n+        return func(name)\n+\n \n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n",
    "variant_2": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..da2c44852 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,38 +360,54 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n-    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n-        lines = self._strip_empty(lines)\n-        if len(lines) == 1:\n-            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n-        elif lines:\n-            lines = self._indent(self._dedent(lines), 3)\n-            return ['.. %s::' % admonition, ''] + lines + ['']\n-        else:\n-            return ['.. %s::' % admonition, '']\n \n-    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n-        if lines:\n-            if padding is None:\n-                padding = ' ' * len(prefix)\n-            result_lines = []\n-            for i, line in enumerate(lines):\n-                if i == 0:\n-                    result_lines.append((prefix + line).rstrip())\n-                elif line:\n-                    result_lines.append(padding + line)\n+def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n+    lines = self._strip_empty(lines)\n+    if len(lines) == 1:\n+        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n+    elif lines:\n+        lines = self._indent(self._dedent(lines), 3)\n+        return ['.. %s::' % admonition, ''] + lines + ['']\n+    else:\n+        return ['.. %s::' % admonition, '']\n+\n+def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n+    if lines:\n+        if padding is None:\n+            padding = ' ' * len(prefix)\n+        result_lines = []\n+        for i, line in enumerate(lines):\n+            if i == 0:\n+                result_lines.append((prefix + line).rstrip())\n+            elif line:\n+                result_lines.append(padding + line)\n+            else:\n+                result_lines.append('')\n+        return result_lines\n+    else:\n+        return [prefix]\n+\n+def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n+                            field_role: str = 'param', type_role: str = 'type'\n+                            ) -> List[str]:\n+    lines = []\n+    for _name, _type, _desc in fields:\n+        _desc = self._strip_empty(_desc)\n+        \n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            param_names = [name.strip() for name in _name.split(',')]\n+            for param_name in param_names:\n+                if any(_desc):\n+                    _desc_copy = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, param_name)\n+                    lines.extend(self._format_block(field, _desc_copy))\n                 else:\n-                    result_lines.append('')\n-            return result_lines\n+                    lines.append(':%s %s:' % (field_role, param_name))\n+                \n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n         else:\n-            return [prefix]\n-\n-    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n-                                field_role: str = 'param', type_role: str = 'type'\n-                                ) -> List[str]:\n-        lines = []\n-        for _name, _type, _desc in fields:\n-            _desc = self._strip_empty(_desc)\n             if any(_desc):\n                 _desc = self._fix_field_desc(_desc)\n                 field = ':%s %s: ' % (field_role, _name)\n@@ -401,13 +417,32 @@ class GoogleDocstring:\n \n             if _type:\n                 lines.append(':%s %s: %s' % (type_role, _name, _type))\n-        return lines + ['']\n-\n-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n-        _desc = self._strip_empty(_desc)\n-        has_desc = any(_desc)\n-        separator = ' -- ' if has_desc else ''\n-        if _name:\n+    return lines + ['']\n+\n+def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n+    _desc = self._strip_empty(_desc)\n+    has_desc = any(_desc)\n+    separator = ' -- ' if has_desc else ''\n+    \n+    if _name:\n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            # Split names and format each individually\n+            names = [name.strip() for name in _name.split(',')]\n+            formatted_names = []\n+            for name in names:\n+                if name:  # Skip empty names\n+                    formatted_names.append('**%s**' % name)\n+            \n+            if _type:\n+                if '`' in _type:\n+                    field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n+                else:\n+                    field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n+            else:\n+                field = '%s%s' % (', '.join(formatted_names), separator)\n+        else:\n+            # Single parameter name - existing logic\n             if _type:\n                 if '`' in _type:\n                     field = '**%s** (%s)%s' % (_name, _type, separator)\n@@ -415,30 +450,45 @@ class GoogleDocstring:\n                     field = '**%s** (*%s*)%s' % (_name, _type, separator)\n             else:\n                 field = '**%s**%s' % (_name, separator)\n-        elif _type:\n-            if '`' in _type:\n-                field = '%s%s' % (_type, separator)\n-            else:\n-                field = '*%s*%s' % (_type, separator)\n+    elif _type:\n+        if '`' in _type:\n+            field = '%s%s' % (_type, separator)\n         else:\n-            field = ''\n+            field = '*%s*%s' % (_type, separator)\n+    else:\n+        field = ''\n \n-        if has_desc:\n-            _desc = self._fix_field_desc(_desc)\n-            if _desc[0]:\n-                return [field + _desc[0]] + _desc[1:]\n-            else:\n-                return [field] + _desc\n+    if has_desc:\n+        _desc = self._fix_field_desc(_desc)\n+        if _desc[0]:\n+            return [field + _desc[0]] + _desc[1:]\n+        else:\n+            return [field] + _desc\n+    else:\n+        return [field]\n+\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Handle comma-separated parameter names by expanding them\n+        if ',' in _name and not _name.startswith('*'):\n+            # Split comma-separated names and create individual fields\n+            names = [name.strip() for name in _name.split(',')]\n+            for i, individual_name in enumerate(names):\n+                field = self._format_field(individual_name, _type, _desc if i == 0 else [])\n+                if multi or len(names) > 1:\n+                    if lines:\n+                        lines.extend(self._format_block(padding + ' * ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' * ', field))\n+                else:\n+                    lines.extend(self._format_block(field_type + ' ', field))\n         else:\n-            return [field]\n-\n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n             field = self._format_field(_name, _type, _desc)\n             if multi:\n                 if lines:\n@@ -447,9 +497,9 @@ class GoogleDocstring:\n                     lines.extend(self._format_block(field_type + ' * ', field))\n             else:\n                 lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,6 +1129,7 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n+\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n \n@@ -1087,6 +1138,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             return func(name)\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -1095,7 +1147,16 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n+        \n+        # Handle comma-separated parameters by preserving the original structure\n+        original_name = _name\n         _name = self._escape_args_and_kwargs(_name)\n+        \n+        # Check if we have multiple parameters (comma-separated in original)\n+        if \", \" in original_name and \", \" in _name:\n+            # Mark this as multiple parameters for downstream formatting\n+            _name = f\"__MULTI_PARAM__{_name}\"\n+        \n         _type = _convert_numpy_type_spec(\n             _type,\n             location=self._get_location(),\n",
    "variant_3": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..d7949937c 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,6 +360,7 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n+\n     def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n         lines = self._strip_empty(lines)\n         if len(lines) == 1:\n@@ -392,15 +393,29 @@ class GoogleDocstring:\n         lines = []\n         for _name, _type, _desc in fields:\n             _desc = self._strip_empty(_desc)\n-            if any(_desc):\n-                _desc = self._fix_field_desc(_desc)\n-                field = ':%s %s: ' % (field_role, _name)\n-                lines.extend(self._format_block(field, _desc))\n+            # Handle comma-separated parameter names\n+            if ',' in _name:\n+                names = [name.strip() for name in _name.split(',')]\n+                for name in names:\n+                    if any(_desc):\n+                        _desc_copy = self._fix_field_desc(_desc)\n+                        field = ':%s %s: ' % (field_role, name)\n+                        lines.extend(self._format_block(field, _desc_copy))\n+                    else:\n+                        lines.append(':%s %s:' % (field_role, name))\n+                    \n+                    if _type:\n+                        lines.append(':%s %s: %s' % (type_role, name, _type))\n             else:\n-                lines.append(':%s %s:' % (field_role, _name))\n+                if any(_desc):\n+                    _desc = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, _name)\n+                    lines.extend(self._format_block(field, _desc))\n+                else:\n+                    lines.append(':%s %s:' % (field_role, _name))\n \n-            if _type:\n-                lines.append(':%s %s: %s' % (type_role, _name, _type))\n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n@@ -408,13 +423,27 @@ class GoogleDocstring:\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n         if _name:\n-            if _type:\n-                if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+            # Handle comma-separated parameter names\n+            if ',' in _name:\n+                names = [n.strip() for n in _name.split(',')]\n+                if _type:\n+                    if '`' in _type:\n+                        formatted_names = ['**%s**' % name for name in names]\n+                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n+                    else:\n+                        formatted_names = ['**%s**' % name for name in names]\n+                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    formatted_names = ['**%s**' % name for name in names]\n+                    field = '%s%s' % (', '.join(formatted_names), separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                if _type:\n+                    if '`' in _type:\n+                        field = '**%s** (%s)%s' % (_name, _type, separator)\n+                    else:\n+                        field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                else:\n+                    field = '**%s**%s' % (_name, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n@@ -432,13 +461,28 @@ class GoogleDocstring:\n         else:\n             return [field]\n \n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Handle comma-separated parameter names by splitting and processing each\n+        if ',' in _name and not _name.startswith('*'):\n+            # Split comma-separated names and process each individually\n+            names = [name.strip() for name in _name.split(',')]\n+            for i, name in enumerate(names):\n+                field = self._format_field(name, _type, _desc)\n+                if multi or len(names) > 1:\n+                    if lines:\n+                        lines.extend(self._format_block(padding + ' * ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' * ', field))\n+                else:\n+                    lines.extend(self._format_block(field_type + ' ', field))\n+        else:\n             field = self._format_field(_name, _type, _desc)\n             if multi:\n                 if lines:\n@@ -447,9 +491,9 @@ class GoogleDocstring:\n                     lines.extend(self._format_block(field_type + ' * ', field))\n             else:\n                 lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,6 +1123,7 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n+\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n \n@@ -1087,27 +1132,37 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             return func(name)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n-        line = next(self._line_iter)\n-        if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n-        else:\n-            _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n \n-        if prefer_type and not _type:\n-            _type, _name = _name, _type\n-        indent = self._get_indent(line) + 1\n-        _desc = self._dedent(self._consume_indented_block(indent))\n-        _desc = self.__class__(_desc, self._config).lines()\n-        return _name, _type, _desc\n+def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+                   ) -> Tuple[str, str, List[str]]:\n+    line = next(self._line_iter)\n+    if parse_type:\n+        _name, _, _type = self._partition_field_on_colon(line)\n+    else:\n+        _name, _type = line, ''\n+    _name, _type = _name.strip(), _type.strip()\n+    \n+    # Check if we have multiple parameters before escaping\n+    has_multiple_params = \", \" in _name\n+    _name = self._escape_args_and_kwargs(_name)\n+    \n+    _type = _convert_numpy_type_spec(\n+        _type,\n+        location=self._get_location(),\n+        translations=self._config.napoleon_type_aliases or {},\n+    )\n+\n+    if prefer_type and not _type:\n+        _type, _name = _name, _type\n+    indent = self._get_indent(line) + 1\n+    _desc = self._dedent(self._consume_indented_block(indent))\n+    _desc = self.__class__(_desc, self._config).lines()\n+    \n+    # Mark multiple parameters by prefixing with a special marker\n+    if has_multiple_params and not prefer_type:\n+        _name = \"MULTI_PARAM:\" + _name\n+    \n+    return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n",
    "variant_4": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..239c2c6b1 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,38 +360,54 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n-    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n-        lines = self._strip_empty(lines)\n-        if len(lines) == 1:\n-            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n-        elif lines:\n-            lines = self._indent(self._dedent(lines), 3)\n-            return ['.. %s::' % admonition, ''] + lines + ['']\n-        else:\n-            return ['.. %s::' % admonition, '']\n \n-    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n-        if lines:\n-            if padding is None:\n-                padding = ' ' * len(prefix)\n-            result_lines = []\n-            for i, line in enumerate(lines):\n-                if i == 0:\n-                    result_lines.append((prefix + line).rstrip())\n-                elif line:\n-                    result_lines.append(padding + line)\n+def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n+    lines = self._strip_empty(lines)\n+    if len(lines) == 1:\n+        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n+    elif lines:\n+        lines = self._indent(self._dedent(lines), 3)\n+        return ['.. %s::' % admonition, ''] + lines + ['']\n+    else:\n+        return ['.. %s::' % admonition, '']\n+\n+def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n+    if lines:\n+        if padding is None:\n+            padding = ' ' * len(prefix)\n+        result_lines = []\n+        for i, line in enumerate(lines):\n+            if i == 0:\n+                result_lines.append((prefix + line).rstrip())\n+            elif line:\n+                result_lines.append(padding + line)\n+            else:\n+                result_lines.append('')\n+        return result_lines\n+    else:\n+        return [prefix]\n+\n+def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n+                            field_role: str = 'param', type_role: str = 'type'\n+                            ) -> List[str]:\n+    lines = []\n+    for _name, _type, _desc in fields:\n+        _desc = self._strip_empty(_desc)\n+        \n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            names = [name.strip() for name in _name.split(',')]\n+            for name in names:\n+                if any(_desc):\n+                    _desc_copy = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, name)\n+                    lines.extend(self._format_block(field, _desc_copy))\n                 else:\n-                    result_lines.append('')\n-            return result_lines\n+                    lines.append(':%s %s:' % (field_role, name))\n+                \n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, name, _type))\n         else:\n-            return [prefix]\n-\n-    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n-                                field_role: str = 'param', type_role: str = 'type'\n-                                ) -> List[str]:\n-        lines = []\n-        for _name, _type, _desc in fields:\n-            _desc = self._strip_empty(_desc)\n             if any(_desc):\n                 _desc = self._fix_field_desc(_desc)\n                 field = ':%s %s: ' % (field_role, _name)\n@@ -401,44 +417,89 @@ class GoogleDocstring:\n \n             if _type:\n                 lines.append(':%s %s: %s' % (type_role, _name, _type))\n-        return lines + ['']\n-\n-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n-        _desc = self._strip_empty(_desc)\n-        has_desc = any(_desc)\n-        separator = ' -- ' if has_desc else ''\n-        if _name:\n+    return lines + ['']\n+\n+def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n+    _desc = self._strip_empty(_desc)\n+    has_desc = any(_desc)\n+    separator = ' -- ' if has_desc else ''\n+    \n+    # Handle comma-separated parameter names\n+    if _name and ',' in _name:\n+        # Split comma-separated names and format each individually\n+        names = [name.strip() for name in _name.split(',')]\n+        formatted_names = []\n+        \n+        for name in names:\n+            if name:  # Skip empty names\n+                formatted_names.append('**%s**' % name)\n+        \n+        if formatted_names:\n             if _type:\n                 if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+                    field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n-        elif _type:\n+                field = '%s%s' % (', '.join(formatted_names), separator)\n+        else:\n+            field = ''\n+    elif _name:\n+        if _type:\n             if '`' in _type:\n-                field = '%s%s' % (_type, separator)\n+                field = '**%s** (%s)%s' % (_name, _type, separator)\n             else:\n-                field = '*%s*%s' % (_type, separator)\n+                field = '**%s** (*%s*)%s' % (_name, _type, separator)\n         else:\n-            field = ''\n+            field = '**%s**%s' % (_name, separator)\n+    elif _type:\n+        if '`' in _type:\n+            field = '%s%s' % (_type, separator)\n+        else:\n+            field = '*%s*%s' % (_type, separator)\n+    else:\n+        field = ''\n \n-        if has_desc:\n-            _desc = self._fix_field_desc(_desc)\n-            if _desc[0]:\n-                return [field + _desc[0]] + _desc[1:]\n+    if has_desc:\n+        _desc = self._fix_field_desc(_desc)\n+        if _desc[0]:\n+            return [field + _desc[0]] + _desc[1:]\n+        else:\n+            return [field] + _desc\n+    else:\n+        return [field]\n+\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Handle comma-separated parameter names\n+        if ',' in _name and not _name.startswith('*'):\n+            # Split comma-separated names and format each separately\n+            names = [name.strip() for name in _name.split(',')]\n+            formatted_fields = []\n+            for name in names:\n+                formatted_fields.append(self._format_field(name, _type, _desc))\n+            \n+            # Join the formatted fields with proper spacing\n+            if multi:\n+                for i, field in enumerate(formatted_fields):\n+                    if lines or i > 0:\n+                        lines.extend(self._format_block(padding + ' * ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' * ', field))\n             else:\n-                return [field] + _desc\n+                for i, field in enumerate(formatted_fields):\n+                    if i > 0:\n+                        lines.extend(self._format_block(padding + ' ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' ', field))\n         else:\n-            return [field]\n-\n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n+            # Handle single parameter name normally\n             field = self._format_field(_name, _type, _desc)\n             if multi:\n                 if lines:\n@@ -447,9 +508,9 @@ class GoogleDocstring:\n                     lines.extend(self._format_block(field_type + ' * ', field))\n             else:\n                 lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,6 +1140,7 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n+\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n \n@@ -1087,6 +1149,7 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             return func(name)\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n",
    "variant_5": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..e439c9bc2 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,38 +360,54 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n-    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n-        lines = self._strip_empty(lines)\n-        if len(lines) == 1:\n-            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n-        elif lines:\n-            lines = self._indent(self._dedent(lines), 3)\n-            return ['.. %s::' % admonition, ''] + lines + ['']\n-        else:\n-            return ['.. %s::' % admonition, '']\n \n-    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n-        if lines:\n-            if padding is None:\n-                padding = ' ' * len(prefix)\n-            result_lines = []\n-            for i, line in enumerate(lines):\n-                if i == 0:\n-                    result_lines.append((prefix + line).rstrip())\n-                elif line:\n-                    result_lines.append(padding + line)\n+def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n+    lines = self._strip_empty(lines)\n+    if len(lines) == 1:\n+        return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n+    elif lines:\n+        lines = self._indent(self._dedent(lines), 3)\n+        return ['.. %s::' % admonition, ''] + lines + ['']\n+    else:\n+        return ['.. %s::' % admonition, '']\n+\n+def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n+    if lines:\n+        if padding is None:\n+            padding = ' ' * len(prefix)\n+        result_lines = []\n+        for i, line in enumerate(lines):\n+            if i == 0:\n+                result_lines.append((prefix + line).rstrip())\n+            elif line:\n+                result_lines.append(padding + line)\n+            else:\n+                result_lines.append('')\n+        return result_lines\n+    else:\n+        return [prefix]\n+\n+def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n+                            field_role: str = 'param', type_role: str = 'type'\n+                            ) -> List[str]:\n+    lines = []\n+    for _name, _type, _desc in fields:\n+        _desc = self._strip_empty(_desc)\n+        \n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            param_names = [name.strip() for name in _name.split(',')]\n+            for param_name in param_names:\n+                if any(_desc):\n+                    _desc = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, param_name)\n+                    lines.extend(self._format_block(field, _desc))\n                 else:\n-                    result_lines.append('')\n-            return result_lines\n+                    lines.append(':%s %s:' % (field_role, param_name))\n+                \n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, param_name, _type))\n         else:\n-            return [prefix]\n-\n-    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n-                                field_role: str = 'param', type_role: str = 'type'\n-                                ) -> List[str]:\n-        lines = []\n-        for _name, _type, _desc in fields:\n-            _desc = self._strip_empty(_desc)\n             if any(_desc):\n                 _desc = self._fix_field_desc(_desc)\n                 field = ':%s %s: ' % (field_role, _name)\n@@ -401,13 +417,35 @@ class GoogleDocstring:\n \n             if _type:\n                 lines.append(':%s %s: %s' % (type_role, _name, _type))\n-        return lines + ['']\n-\n-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n-        _desc = self._strip_empty(_desc)\n-        has_desc = any(_desc)\n-        separator = ' -- ' if has_desc else ''\n-        if _name:\n+    return lines + ['']\n+\n+def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n+    _desc = self._strip_empty(_desc)\n+    has_desc = any(_desc)\n+    separator = ' -- ' if has_desc else ''\n+    \n+    if _name:\n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            # Split comma-separated names and format each individually\n+            names = [name.strip() for name in _name.split(',')]\n+            formatted_names = []\n+            for name in names:\n+                if name:  # Skip empty names\n+                    formatted_names.append('**%s**' % name)\n+            \n+            if formatted_names:\n+                if _type:\n+                    if '`' in _type:\n+                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n+                    else:\n+                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n+                else:\n+                    field = '%s%s' % (', '.join(formatted_names), separator)\n+            else:\n+                field = ''\n+        else:\n+            # Single parameter name - original logic\n             if _type:\n                 if '`' in _type:\n                     field = '**%s** (%s)%s' % (_name, _type, separator)\n@@ -415,41 +453,69 @@ class GoogleDocstring:\n                     field = '**%s** (*%s*)%s' % (_name, _type, separator)\n             else:\n                 field = '**%s**%s' % (_name, separator)\n-        elif _type:\n-            if '`' in _type:\n-                field = '%s%s' % (_type, separator)\n-            else:\n-                field = '*%s*%s' % (_type, separator)\n+    elif _type:\n+        if '`' in _type:\n+            field = '%s%s' % (_type, separator)\n         else:\n-            field = ''\n+            field = '*%s*%s' % (_type, separator)\n+    else:\n+        field = ''\n \n-        if has_desc:\n-            _desc = self._fix_field_desc(_desc)\n-            if _desc[0]:\n-                return [field + _desc[0]] + _desc[1:]\n+    if has_desc:\n+        _desc = self._fix_field_desc(_desc)\n+        if _desc[0]:\n+            return [field + _desc[0]] + _desc[1:]\n+        else:\n+            return [field] + _desc\n+    else:\n+        return [field]\n+\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Check if _name contains multiple comma-separated parameters\n+        if ',' in _name and not (_name.startswith('*') or _name.startswith('**')):\n+            # Handle comma-separated parameters\n+            param_names = [name.strip() for name in _name.split(',')]\n+            formatted_names = []\n+            for param_name in param_names:\n+                if param_name:\n+                    formatted_names.append('**%s**' % param_name)\n+            combined_name = ', '.join(formatted_names)\n+            \n+            # Create field with properly formatted comma-separated names\n+            if _type:\n+                field_content = ['%s (%s)' % (combined_name, _type)]\n             else:\n-                return [field] + _desc\n+                field_content = [combined_name]\n+            \n+            if _desc:\n+                _desc = self._fix_field_desc(_desc)\n+                if _desc[0]:\n+                    field_content = [field_content[0] + ' -- ' + _desc[0]] + _desc[1:]\n+                else:\n+                    field_content = field_content + _desc\n+            \n+            field = field_content\n         else:\n-            return [field]\n-\n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n+            # Use existing _format_field for single parameters\n             field = self._format_field(_name, _type, _desc)\n-            if multi:\n-                if lines:\n-                    lines.extend(self._format_block(padding + ' * ', field))\n-                else:\n-                    lines.extend(self._format_block(field_type + ' * ', field))\n+        \n+        if multi:\n+            if lines:\n+                lines.extend(self._format_block(padding + ' * ', field))\n             else:\n-                lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+                lines.extend(self._format_block(field_type + ' * ', field))\n+        else:\n+            lines.extend(self._format_block(field_type + ' ', field))\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,35 +1145,46 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        func = super()._escape_args_and_kwargs\n \n-        if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n-        else:\n-            return func(name)\n+def _escape_args_and_kwargs(self, name: str) -> str:\n+    func = super()._escape_args_and_kwargs\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n-        line = next(self._line_iter)\n-        if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n-        else:\n-            _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n+    if \", \" in name:\n+        return \", \".join(func(param) for param in name.split(\", \"))\n+    else:\n+        return func(name)\n \n-        if prefer_type and not _type:\n-            _type, _name = _name, _type\n-        indent = self._get_indent(line) + 1\n-        _desc = self._dedent(self._consume_indented_block(indent))\n-        _desc = self.__class__(_desc, self._config).lines()\n-        return _name, _type, _desc\n+\n+def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+                   ) -> Tuple[str, str, List[str]]:\n+    line = next(self._line_iter)\n+    if parse_type:\n+        _name, _, _type = self._partition_field_on_colon(line)\n+    else:\n+        _name, _type = line, ''\n+    _name, _type = _name.strip(), _type.strip()\n+    \n+    # Check if we have comma-separated parameters before escaping\n+    has_multiple_params = \", \" in _name\n+    _name = self._escape_args_and_kwargs(_name)\n+    \n+    _type = _convert_numpy_type_spec(\n+        _type,\n+        location=self._get_location(),\n+        translations=self._config.napoleon_type_aliases or {},\n+    )\n+\n+    if prefer_type and not _type:\n+        _type, _name = _name, _type\n+    \n+    # Mark comma-separated parameters for downstream formatting\n+    if has_multiple_params and \", \" in _name:\n+        _name = f\"__MULTI_PARAM__{_name}__MULTI_PARAM__\"\n+    \n+    indent = self._get_indent(line) + 1\n+    _desc = self._dedent(self._consume_indented_block(indent))\n+    _desc = self.__class__(_desc, self._config).lines()\n+    return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n",
    "variant_6": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..060294ff9 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,6 +360,7 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n+\n     def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n         lines = self._strip_empty(lines)\n         if len(lines) == 1:\n@@ -392,15 +393,30 @@ class GoogleDocstring:\n         lines = []\n         for _name, _type, _desc in fields:\n             _desc = self._strip_empty(_desc)\n-            if any(_desc):\n-                _desc = self._fix_field_desc(_desc)\n-                field = ':%s %s: ' % (field_role, _name)\n-                lines.extend(self._format_block(field, _desc))\n+            \n+            # Handle comma-separated parameter names\n+            if ',' in _name:\n+                names = [name.strip() for name in _name.split(',')]\n+                for name in names:\n+                    if any(_desc):\n+                        _desc_copy = self._fix_field_desc(_desc)\n+                        field = ':%s %s: ' % (field_role, name)\n+                        lines.extend(self._format_block(field, _desc_copy))\n+                    else:\n+                        lines.append(':%s %s:' % (field_role, name))\n+                    \n+                    if _type:\n+                        lines.append(':%s %s: %s' % (type_role, name, _type))\n             else:\n-                lines.append(':%s %s:' % (field_role, _name))\n+                if any(_desc):\n+                    _desc = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, _name)\n+                    lines.extend(self._format_block(field, _desc))\n+                else:\n+                    lines.append(':%s %s:' % (field_role, _name))\n \n-            if _type:\n-                lines.append(':%s %s: %s' % (type_role, _name, _type))\n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n@@ -408,13 +424,27 @@ class GoogleDocstring:\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n         if _name:\n-            if _type:\n-                if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+            # Handle comma-separated parameter names\n+            if ',' in _name:\n+                names = [n.strip() for n in _name.split(',')]\n+                if _type:\n+                    if '`' in _type:\n+                        formatted_names = ['**%s**' % n for n in names]\n+                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n+                    else:\n+                        formatted_names = ['**%s**' % n for n in names]\n+                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    formatted_names = ['**%s**' % n for n in names]\n+                    field = '%s%s' % (', '.join(formatted_names), separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                if _type:\n+                    if '`' in _type:\n+                        field = '**%s** (%s)%s' % (_name, _type, separator)\n+                    else:\n+                        field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                else:\n+                    field = '**%s**%s' % (_name, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n@@ -432,13 +462,28 @@ class GoogleDocstring:\n         else:\n             return [field]\n \n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Check if _name contains comma-separated parameters\n+        if ',' in _name and not _name.startswith('*'):\n+            # Split comma-separated names and format each separately\n+            names = [name.strip() for name in _name.split(',')]\n+            for i, name in enumerate(names):\n+                field = self._format_field(name, _type, _desc)\n+                if multi or i > 0:\n+                    if lines:\n+                        lines.extend(self._format_block(padding + ' * ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' * ', field))\n+                else:\n+                    lines.extend(self._format_block(field_type + ' ', field))\n+        else:\n             field = self._format_field(_name, _type, _desc)\n             if multi:\n                 if lines:\n@@ -447,9 +492,9 @@ class GoogleDocstring:\n                     lines.extend(self._format_block(field_type + ' * ', field))\n             else:\n                 lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,6 +1124,7 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n+\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n \n@@ -1087,27 +1133,32 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             return func(name)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n-        line = next(self._line_iter)\n-        if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n-        else:\n-            _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n \n-        if prefer_type and not _type:\n-            _type, _name = _name, _type\n-        indent = self._get_indent(line) + 1\n-        _desc = self._dedent(self._consume_indented_block(indent))\n-        _desc = self.__class__(_desc, self._config).lines()\n-        return _name, _type, _desc\n+def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+                   ) -> Tuple[str, str, List[str]]:\n+    line = next(self._line_iter)\n+    if parse_type:\n+        _name, _, _type = self._partition_field_on_colon(line)\n+    else:\n+        _name, _type = line, ''\n+    _name, _type = _name.strip(), _type.strip()\n+    \n+    # Handle comma-separated parameters by preserving the original structure\n+    original_name = _name\n+    _name = self._escape_args_and_kwargs(_name)\n+    \n+    _type = _convert_numpy_type_spec(\n+        _type,\n+        location=self._get_location(),\n+        translations=self._config.napoleon_type_aliases or {},\n+    )\n+\n+    if prefer_type and not _type:\n+        _type, _name = _name, _type\n+    indent = self._get_indent(line) + 1\n+    _desc = self._dedent(self._consume_indented_block(indent))\n+    _desc = self.__class__(_desc, self._config).lines()\n+    return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n",
    "variant_7": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..f462e5e86 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,6 +360,7 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n+\n     def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n         lines = self._strip_empty(lines)\n         if len(lines) == 1:\n@@ -392,22 +393,52 @@ class GoogleDocstring:\n         lines = []\n         for _name, _type, _desc in fields:\n             _desc = self._strip_empty(_desc)\n-            if any(_desc):\n-                _desc = self._fix_field_desc(_desc)\n-                field = ':%s %s: ' % (field_role, _name)\n-                lines.extend(self._format_block(field, _desc))\n+            # Handle comma-separated parameter names\n+            if ',' in _name:\n+                param_names = [name.strip() for name in _name.split(',')]\n+                # Create separate param entries for each name\n+                for param_name in param_names:\n+                    if any(_desc):\n+                        _desc_copy = self._fix_field_desc(_desc)\n+                        field = ':%s %s: ' % (field_role, param_name)\n+                        lines.extend(self._format_block(field, _desc_copy))\n+                    else:\n+                        lines.append(':%s %s:' % (field_role, param_name))\n+                    \n+                    if _type:\n+                        lines.append(':%s %s: %s' % (type_role, param_name, _type))\n             else:\n-                lines.append(':%s %s:' % (field_role, _name))\n+                if any(_desc):\n+                    _desc = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, _name)\n+                    lines.extend(self._format_block(field, _desc))\n+                else:\n+                    lines.append(':%s %s:' % (field_role, _name))\n \n-            if _type:\n-                lines.append(':%s %s: %s' % (type_role, _name, _type))\n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n-        _desc = self._strip_empty(_desc)\n-        has_desc = any(_desc)\n-        separator = ' -- ' if has_desc else ''\n-        if _name:\n+def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n+    _desc = self._strip_empty(_desc)\n+    has_desc = any(_desc)\n+    separator = ' -- ' if has_desc else ''\n+    \n+    if _name:\n+        # Handle comma-separated parameter names\n+        if ',' in _name:\n+            names = [n.strip() for n in _name.split(',')]\n+            if _type:\n+                if '`' in _type:\n+                    formatted_names = ['**%s**' % name for name in names]\n+                    field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n+                else:\n+                    formatted_names = ['**%s**' % name for name in names]\n+                    field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n+            else:\n+                formatted_names = ['**%s**' % name for name in names]\n+                field = '%s%s' % (', '.join(formatted_names), separator)\n+        else:\n             if _type:\n                 if '`' in _type:\n                     field = '**%s** (%s)%s' % (_name, _type, separator)\n@@ -415,22 +446,23 @@ class GoogleDocstring:\n                     field = '**%s** (*%s*)%s' % (_name, _type, separator)\n             else:\n                 field = '**%s**%s' % (_name, separator)\n-        elif _type:\n-            if '`' in _type:\n-                field = '%s%s' % (_type, separator)\n-            else:\n-                field = '*%s*%s' % (_type, separator)\n+    elif _type:\n+        if '`' in _type:\n+            field = '%s%s' % (_type, separator)\n         else:\n-            field = ''\n+            field = '*%s*%s' % (_type, separator)\n+    else:\n+        field = ''\n \n-        if has_desc:\n-            _desc = self._fix_field_desc(_desc)\n-            if _desc[0]:\n-                return [field + _desc[0]] + _desc[1:]\n-            else:\n-                return [field] + _desc\n+    if has_desc:\n+        _desc = self._fix_field_desc(_desc)\n+        if _desc[0]:\n+            return [field + _desc[0]] + _desc[1:]\n         else:\n-            return [field]\n+            return [field] + _desc\n+    else:\n+        return [field]\n+\n \n     def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                        ) -> List[str]:\n@@ -439,14 +471,28 @@ class GoogleDocstring:\n         multi = len(fields) > 1\n         lines = []  # type: List[str]\n         for _name, _type, _desc in fields:\n-            field = self._format_field(_name, _type, _desc)\n-            if multi:\n-                if lines:\n-                    lines.extend(self._format_block(padding + ' * ', field))\n-                else:\n-                    lines.extend(self._format_block(field_type + ' * ', field))\n+            # Handle comma-separated parameter names\n+            if ',' in _name and not _name.startswith('*'):\n+                # Split comma-separated names and format each individually\n+                names = [name.strip() for name in _name.split(',') if name.strip()]\n+                for i, name in enumerate(names):\n+                    field = self._format_field(name, _type, _desc if i == 0 else [])\n+                    if multi or i > 0:\n+                        if lines:\n+                            lines.extend(self._format_block(padding + ' * ', field))\n+                        else:\n+                            lines.extend(self._format_block(field_type + ' * ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' ', field))\n             else:\n-                lines.extend(self._format_block(field_type + ' ', field))\n+                field = self._format_field(_name, _type, _desc)\n+                if multi:\n+                    if lines:\n+                        lines.extend(self._format_block(padding + ' * ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' * ', field))\n+                else:\n+                    lines.extend(self._format_block(field_type + ' ', field))\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n@@ -1079,6 +1125,7 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n+\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n \n@@ -1087,27 +1134,38 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             return func(name)\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n-        line = next(self._line_iter)\n-        if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n-        else:\n-            _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n \n-        if prefer_type and not _type:\n-            _type, _name = _name, _type\n-        indent = self._get_indent(line) + 1\n-        _desc = self._dedent(self._consume_indented_block(indent))\n-        _desc = self.__class__(_desc, self._config).lines()\n-        return _name, _type, _desc\n+def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+                   ) -> Tuple[str, str, List[str]]:\n+    line = next(self._line_iter)\n+    if parse_type:\n+        _name, _, _type = self._partition_field_on_colon(line)\n+    else:\n+        _name, _type = line, ''\n+    _name, _type = _name.strip(), _type.strip()\n+    \n+    # Handle comma-separated parameters by preserving the original structure\n+    original_name = _name\n+    _name = self._escape_args_and_kwargs(_name)\n+    \n+    _type = _convert_numpy_type_spec(\n+        _type,\n+        location=self._get_location(),\n+        translations=self._config.napoleon_type_aliases or {},\n+    )\n+\n+    if prefer_type and not _type:\n+        _type, _name = _name, _type\n+    indent = self._get_indent(line) + 1\n+    _desc = self._dedent(self._consume_indented_block(indent))\n+    _desc = self.__class__(_desc, self._config).lines()\n+    \n+    # Mark comma-separated parameters for downstream formatting\n+    if \", \" in original_name and \", \" in _name:\n+        # Add a marker to indicate this field contains multiple parameters\n+        _name = f\"__MULTI_PARAM__{_name}\"\n+    \n+    return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n",
    "variant_8": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..d59312c31 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -360,6 +360,7 @@ class GoogleDocstring:\n                 desc = ['', desc[0]] + self._indent(desc_block, 4)\n         return desc\n \n+\n     def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n         lines = self._strip_empty(lines)\n         if len(lines) == 1:\n@@ -392,29 +393,60 @@ class GoogleDocstring:\n         lines = []\n         for _name, _type, _desc in fields:\n             _desc = self._strip_empty(_desc)\n-            if any(_desc):\n-                _desc = self._fix_field_desc(_desc)\n-                field = ':%s %s: ' % (field_role, _name)\n-                lines.extend(self._format_block(field, _desc))\n+            # Handle comma-separated parameter names\n+            if ',' in _name:\n+                param_names = [name.strip() for name in _name.split(',')]\n+                for param_name in param_names:\n+                    if any(_desc):\n+                        _desc_copy = self._fix_field_desc(_desc)\n+                        field = ':%s %s: ' % (field_role, param_name)\n+                        lines.extend(self._format_block(field, _desc_copy))\n+                    else:\n+                        lines.append(':%s %s:' % (field_role, param_name))\n+                    \n+                    if _type:\n+                        lines.append(':%s %s: %s' % (type_role, param_name, _type))\n             else:\n-                lines.append(':%s %s:' % (field_role, _name))\n+                if any(_desc):\n+                    _desc = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, _name)\n+                    lines.extend(self._format_block(field, _desc))\n+                else:\n+                    lines.append(':%s %s:' % (field_role, _name))\n \n-            if _type:\n-                lines.append(':%s %s: %s' % (type_role, _name, _type))\n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n         _desc = self._strip_empty(_desc)\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n+        \n         if _name:\n-            if _type:\n-                if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+            # Handle comma-separated parameter names\n+            if ',' in _name:\n+                # Split names and format each individually\n+                names = [name.strip() for name in _name.split(',')]\n+                if _type:\n+                    if '`' in _type:\n+                        formatted_names = ['**%s**' % name for name in names]\n+                        field = '%s (%s)%s' % (', '.join(formatted_names), _type, separator)\n+                    else:\n+                        formatted_names = ['**%s**' % name for name in names]\n+                        field = '%s (*%s*)%s' % (', '.join(formatted_names), _type, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    formatted_names = ['**%s**' % name for name in names]\n+                    field = '%s%s' % (', '.join(formatted_names), separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                # Single parameter name - existing logic\n+                if _type:\n+                    if '`' in _type:\n+                        field = '**%s** (%s)%s' % (_name, _type, separator)\n+                    else:\n+                        field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                else:\n+                    field = '**%s**%s' % (_name, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n@@ -432,13 +464,28 @@ class GoogleDocstring:\n         else:\n             return [field]\n \n-    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n-                       ) -> List[str]:\n-        field_type = ':%s:' % field_type.strip()\n-        padding = ' ' * len(field_type)\n-        multi = len(fields) > 1\n-        lines = []  # type: List[str]\n-        for _name, _type, _desc in fields:\n+\n+def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n+                   ) -> List[str]:\n+    field_type = ':%s:' % field_type.strip()\n+    padding = ' ' * len(field_type)\n+    multi = len(fields) > 1\n+    lines = []  # type: List[str]\n+    for _name, _type, _desc in fields:\n+        # Handle comma-separated parameter names\n+        if ',' in _name and not _name.startswith('*'):\n+            # Split comma-separated names and process each individually\n+            names = [name.strip() for name in _name.split(',')]\n+            for i, name in enumerate(names):\n+                field = self._format_field(name, _type, _desc)\n+                if multi or len(names) > 1:\n+                    if lines:\n+                        lines.extend(self._format_block(padding + ' * ', field))\n+                    else:\n+                        lines.extend(self._format_block(field_type + ' * ', field))\n+                else:\n+                    lines.extend(self._format_block(field_type + ' ', field))\n+        else:\n             field = self._format_field(_name, _type, _desc)\n             if multi:\n                 if lines:\n@@ -447,9 +494,9 @@ class GoogleDocstring:\n                     lines.extend(self._format_block(field_type + ' * ', field))\n             else:\n                 lines.extend(self._format_block(field_type + ' ', field))\n-        if lines and lines[-1]:\n-            lines.append('')\n-        return lines\n+    if lines and lines[-1]:\n+        lines.append('')\n+    return lines\n \n     def _get_current_indent(self, peek_ahead: int = 0) -> int:\n         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n@@ -1079,35 +1126,41 @@ class NumpyDocstring(GoogleDocstring):\n \n         return \":\".join([filepath, \"docstring of %s\" % name])\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        func = super()._escape_args_and_kwargs\n \n-        if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n-        else:\n-            return func(name)\n+def _escape_args_and_kwargs(self, name: str) -> str:\n+    func = super()._escape_args_and_kwargs\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n-        line = next(self._line_iter)\n-        if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n-        else:\n-            _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n+    if \", \" in name:\n+        return \", \".join(func(param) for param in name.split(\", \"))\n+    else:\n+        return func(name)\n \n-        if prefer_type and not _type:\n-            _type, _name = _name, _type\n-        indent = self._get_indent(line) + 1\n-        _desc = self._dedent(self._consume_indented_block(indent))\n-        _desc = self.__class__(_desc, self._config).lines()\n-        return _name, _type, _desc\n+\n+def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+                   ) -> Tuple[str, str, List[str]]:\n+    line = next(self._line_iter)\n+    if parse_type:\n+        _name, _, _type = self._partition_field_on_colon(line)\n+    else:\n+        _name, _type = line, ''\n+    _name, _type = _name.strip(), _type.strip()\n+    \n+    # Process parameter names, preserving comma-separated structure\n+    original_name = _name\n+    _name = self._escape_args_and_kwargs(_name)\n+    \n+    _type = _convert_numpy_type_spec(\n+        _type,\n+        location=self._get_location(),\n+        translations=self._config.napoleon_type_aliases or {},\n+    )\n+\n+    if prefer_type and not _type:\n+        _type, _name = _name, _type\n+    indent = self._get_indent(line) + 1\n+    _desc = self._dedent(self._consume_indented_block(indent))\n+    _desc = self.__class__(_desc, self._config).lines()\n+    return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n"
  }
}