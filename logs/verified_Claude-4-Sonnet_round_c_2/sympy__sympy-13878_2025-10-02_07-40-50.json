{
  "zero_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 150-154)": "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
    "Location 2 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1032-1035)": "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
    "Location 3 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1097-1100)": "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
    "Location 4 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1374-1377)": "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
    "Location 5 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1441-1444)": "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 150-154)": [
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n",
      "\nclass ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import asin, Piecewise\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n            (S.One, x > b)\n        )\n"
    ],
    "Location 2 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1032-1035)": [
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n",
      "\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), x > m)\n        )\n"
    ],
    "Location 3 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1097-1100)": [
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        from sympy import lowergamma, Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n",
      "\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"Theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n\n    def _cdf(self, x):\n        from sympy import lowergamma, Piecewise\n        k, theta = self.k, self.theta\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n        )\n"
    ],
    "Location 4 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1374-1377)": [
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n",
      "\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, 1)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Zero, x < 0),\n            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n            (S.One, x > 1)\n        )\n"
    ],
    "Location 5 (/root/hy/projects/sympy/sympy/stats/crv_types.py lines 1441-1444)": [
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n",
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n",
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n",
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n",
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n",
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n",
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n",
      "\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        from sympy import Piecewise\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..6e49146c3f 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        from sympy import asin, Piecewise\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((S(2)/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,11 +1039,20 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n     set = Interval(0, oo)\n \n+    def _cdf(self, x):\n+        from sympy import Piecewise\n+        a, s, m = self.a, self.s, self.m\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n     def __new__(cls, a, s=1, m=0):\n         a, s, m = list(map(sympify, (a, s, m)))\n         return Basic.__new__(cls, a, s, m)\n@@ -1094,11 +1113,20 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    def _cdf(self, x):\n+        from sympy import lowergamma, Piecewise\n+        k, theta = self.k, self.theta\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,11 +1399,21 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     set = Interval(0, oo)\n \n+    def _cdf(self, x):\n+        from sympy import Piecewise\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n+\n     @staticmethod\n     def check(a, b):\n         _value_check(a > 0, \"a must be positive\")\n@@ -1438,6 +1476,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1484,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        from sympy import Piecewise\n+        mu, b = self.mu, self.b\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_0": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..37ec345e41 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_1": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..37ec345e41 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_2": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..37ec345e41 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_3": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..37ec345e41 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_4": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..37ec345e41 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_5": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..e3bf7cbc52 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,21 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1120,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1415,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1501,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1509,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_6": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..37ec345e41 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_7": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..37ec345e41 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        from sympy import lowergamma, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n",
    "variant_8": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..000ce30e6e 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -147,12 +147,22 @@ def rv(symbol, cls, args):\n # Arcsin distribution ----------------------------------------------------------\n \n \n+\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import asin, Piecewise\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            ((2/pi) * asin(sqrt((x - a)/(b - a))), (x >= a) & (x <= b)),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -1029,6 +1039,7 @@ def FisherZ(name, d1, d2):\n #-------------------------------------------------------------------------------\n # Frechet distribution ---------------------------------------------------------\n \n+\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n@@ -1042,6 +1053,22 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x - m)/s)**(-a)), x > m)\n+        )\n+\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+\n+    def pdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1094,11 +1121,29 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n+\n class GammaDistribution(SingleContinuousDistribution):\n     _argnames = ('k', 'theta')\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+\n+    def pdf(self, x):\n+        k, theta = self.k, self.theta\n+        return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+\n+    def _cdf(self, x):\n+        from sympy import lowergamma, Piecewise\n+        k, theta = self.k, self.theta\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), x >= 0)\n+        )\n+\n     @staticmethod\n     def check(k, theta):\n         _value_check(k > 0, \"k must be positive\")\n@@ -1371,10 +1416,29 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"a must be positive\")\n+        _value_check(b > 0, \"b must be positive\")\n+\n+    def pdf(self, x):\n+        a, b = self.a, self.b\n+        return a * b * x**(a-1) * (1-x**a)**(b-1)\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Zero, x < 0),\n+            (S.One - (S.One - x**a)**b, (x >= 0) & (x <= 1)),\n+            (S.One, x > 1)\n+        )\n \n     @staticmethod\n     def check(a, b):\n@@ -1438,6 +1502,7 @@ def Kumaraswamy(name, a, b):\n # Laplace distribution ---------------------------------------------------------\n \n \n+\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n@@ -1445,6 +1510,16 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        from sympy import Piecewise\n+        return Piecewise(\n+            (S.Half * exp((x - mu)/b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)\n+        )\n+        mu, b = self.mu, self.b\n+        return 1/(2*b)*exp(-Abs(x - mu)/b)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n"
  }
}