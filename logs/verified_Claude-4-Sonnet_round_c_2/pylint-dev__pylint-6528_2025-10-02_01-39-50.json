{
  "zero_patches": {
    "Location 1 (/root/hy/projects/pylint/pylint/lint/pylinter.py lines 607-608)": "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/pylint/pylint/lint/pylinter.py lines 607-608)": [
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n",
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n",
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n",
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n",
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n",
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n",
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n",
      "\n        if self.config.recursive:\n            # Use _expand_files to respect ignore patterns in recursive mode\n            expanded_modules = self._expand_files(files_or_modules)\n            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_0": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_1": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_2": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_3": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_4": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_5": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_6": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_7": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n",
    "variant_8": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..01333795f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -604,8 +604,11 @@ class PyLinter(\n                 DeprecationWarning,\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n+\n         if self.config.recursive:\n-            files_or_modules = tuple(self._discover_files(files_or_modules))\n+            # Use _expand_files to respect ignore patterns in recursive mode\n+            expanded_modules = self._expand_files(files_or_modules)\n+            files_or_modules = tuple(module_desc[\"path\"] for module_desc in expanded_modules)\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n                 raise exceptions.InvalidArgsError(\n"
  }
}