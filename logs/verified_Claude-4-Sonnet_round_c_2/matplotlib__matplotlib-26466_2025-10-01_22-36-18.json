{
  "zero_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1454-1463)": "\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
    "Location 2 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1831-1833)": "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n",
    "Location 3 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1813-1816)": "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n",
    "Location 4 (/root/hy/projects/matplotlib/lib/matplotlib/axes/_axes.py lines 704-715)": "\n    def __init__(self, text, xy, xycoords='data', **kwargs):\n        # Prevent array reference issues by copying array-like inputs\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        super().__init__(text, **kwargs)\n",
    "Location 5 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1108-1110)": "\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1454-1463)": [
      "\nclass _AnnotationBase:\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
      "\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
      "\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
      "\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
      "\nclass _AnnotationBase:\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
      "\nclass _AnnotationBase:\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
      "\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n",
      "\n    def __init__(self,\n                 xy,\n                 xycoords='data',\n                 annotation_clip=None):\n\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        self._draggable = None\n"
    ],
    "Location 2 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1831-1833)": [
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n",
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n",
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n",
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n",
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n",
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            x, y = np.asarray(xytext).copy()\n        else:\n            x, y = xytext\n",
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n",
      "\n        # cleanup xytext defaults\n        if xytext is None:\n            xytext = self.xy\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n            xytext = np.asarray(xytext).copy()\n        x, y = xytext\n"
    ],
    "Location 3 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1813-1816)": [
      "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n",
      "\n    def __init__(self, xy, xycoords='data', annotation_clip=None):\n        self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n        self._annotation_clip = None\n",
      "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n",
      "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n",
      "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n",
      "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n",
      "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n",
      "\n        _AnnotationBase.__init__(self,\n                                 xy,\n                                 xycoords=xycoords,\n                                 annotation_clip=annotation_clip)\n"
    ],
    "Location 4 (/root/hy/projects/matplotlib/lib/matplotlib/axes/_axes.py lines 704-715)": [
      "\n    def __init__(self, text, xy, xycoords='data', clip_on=False,\n                 transform=None):\n        mtext.Text.__init__(self, text=text, transform=transform,\n                            clip_on=clip_on)\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n",
      "\n    def __init__(self, text, xy, xytext=None, xycoords='data',\n                 textcoords=None, arrowprops=None, annotation_clip=None,\n                 **kwargs):\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.xycoords = xycoords\n        self.set_annotation_clip(annotation_clip)\n\n        if xytext is None:\n            self.xytext = self.xy\n        else:\n            self.xytext = xytext\n        if textcoords is None:\n            textcoords = self.xycoords\n\n        self.textcoords = textcoords\n\n        if arrowprops is not None:\n            arrowprops = arrowprops.copy()\n\n        self.arrowprops = arrowprops\n\n        Text.__init__(self, 0, 0, text, **kwargs)\n        self.set_transform(mtransforms.IdentityTransform())\n",
      "\n    def __init__(self, text, xy, xycoords='data', **kwargs):\n        _AnnotationBase.__init__(self, xy, xycoords, **kwargs)\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.set_text(text)\n        self._get_xy_display = self._get_xy_display()\n        self.arrow_patch = None\n        if isinstance(xycoords, str):\n            self._xycoords = xycoords\n        else:\n            self._xycoords = self._determine_xycoords(xycoords)\n",
      "\n    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n                 arrowprops=None, annotation_clip=None, **kwargs):\n        # Signature must match Annotation. This is verified in\n        # test_annotate_signature().\n        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n                             textcoords=textcoords, arrowprops=arrowprops,\n                             annotation_clip=annotation_clip, **kwargs)\n        a.set_transform(mtransforms.IdentityTransform())\n        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n            a.set_clip_path(self.patch)\n        self._add_text(a)\n        return a\n",
      "\n    def __init__(self, text, xy, xycoords='data', **kwargs):\n        _AnnotationBase.__init__(self, xy, xycoords, **kwargs)\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n        self.set_text(text)\n        self.arrow_patch = None\n        self._arrow_relpos = None\n",
      "\n    def __init__(self, text, xy, xycoords='data', clip_on=False, **kwargs):\n        super().__init__(**kwargs)\n        self.xy = xy\n        if isinstance(xycoords, tuple):\n            if any(isinstance(coord, Artist) for coord in xycoords):\n                raise ValueError(\"xycoords cannot contain Artists\")\n        self.xycoords = xycoords\n        self.set_text(text)\n        self.set_clip_on(clip_on)\n        self._annotation_clip = None\n",
      "\n    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n                 arrowprops=None, annotation_clip=None, **kwargs):\n        # Signature must match Annotation. This is verified in\n        # test_annotate_signature().\n        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n                             textcoords=textcoords, arrowprops=arrowprops,\n                             annotation_clip=annotation_clip, **kwargs)\n        a.set_transform(mtransforms.IdentityTransform())\n        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n            a.set_clip_path(self.patch)\n        self._add_text(a)\n        return a\n",
      "\n    def __init__(self, text, xy, xycoords='data', **kwargs):\n        _api.check_isinstance((str, Number), xycoords=xycoords)\n        self.xy = xy\n        self.xycoords = xycoords\n        # Make a copy of array-like inputs to prevent reference issues\n        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n            self.xy = np.asarray(xy).copy()\n        else:\n            self.xy = xy\n\n        super().__init__(text, **kwargs)\n"
    ],
    "Location 5 (/root/hy/projects/matplotlib/lib/matplotlib/text.py lines 1108-1110)": [
      "\n        \"\"\"\n        Set the font size.\n\n        Parameters\n        ----------\n        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n'large', 'x-large', 'xx-large'}\n            If a float, the fontsize in points. The string values denote sizes\n            relative to the default font size.\n\n        See Also\n        --------\n        .font_manager.FontProperties.set_size\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n",
      "\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n",
      "\n        Parameters\n        ----------\n        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n'large', 'x-large', 'xx-large'}\n            If a float, the fontsize in points. The string values denote sizes\n            relative to the default font size.\n\n        See Also\n        --------\n        .font_manager.FontProperties.set_size\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n",
      "\n        \"\"\"\n        Set the font size.\n\n        Parameters\n        ----------\n        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n'large', 'x-large', 'xx-large'}\n            If a float, the fontsize in points. The string values denote sizes\n            relative to the default font size.\n\n        See Also\n        --------\n        .font_manager.FontProperties.set_size\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n",
      "\n    def set_fontsize(self, fontsize=None):\n        \"\"\"\n        Set the font size.\n\n        Parameters\n        ----------\n        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n'large', 'x-large', 'xx-large'}\n            If a float, the fontsize in points. The string values denote sizes\n            relative to the default font size.\n\n        See Also\n        --------\n        .font_manager.FontProperties.set_size\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n        self.stale = True\n",
      "\n        \"\"\"\n        Set the font size.\n\n        Parameters\n        ----------\n        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n'large', 'x-large', 'xx-large'}\n            If a float, the fontsize in points. The string values denote sizes\n            relative to the default font size.\n\n        See Also\n        --------\n        .font_manager.FontProperties.set_size\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n",
      "\n    def set_fontsize(self, fontsize=None):\n        \"\"\"\n        Set the font size.\n\n        Parameters\n        ----------\n        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n'large', 'x-large', 'xx-large'}\n            If a float, the fontsize in points. The string values denote sizes\n            relative to the default font size.\n\n        See Also\n        --------\n        .font_manager.FontProperties.set_size\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n        self.stale = True\n",
      "\n        \"\"\"\n        Set the font size.\n\n        Parameters\n        ----------\n        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n'large', 'x-large', 'xx-large'}\n            If a float, the fontsize in points. The string values denote sizes\n            relative to the default font size.\n\n        See Also\n        --------\n        .font_manager.FontProperties.set_size\n        \"\"\"\n        self._fontproperties.set_size(fontsize)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..6864edc8d9 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,6 +701,7 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n+\n     def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n                  arrowprops=None, annotation_clip=None, **kwargs):\n         # Signature must match Annotation. This is verified in\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..d1e290079c 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1105,6 +1105,7 @@ class Text(Artist):\n \n         See Also\n         --------\n+\n         .font_manager.FontProperties.set_size\n         \"\"\"\n         self._fontproperties.set_size(fontsize)\n@@ -1451,12 +1452,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1816,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1828,6 +1835,7 @@ or callable, default: value of *xycoords*\n         self._textcoords = textcoords\n \n         # cleanup xytext defaults\n+\n         if xytext is None:\n             xytext = self.xy\n         x, y = xytext\n",
    "variant_0": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..a823a81153 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,18 +701,15 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n-    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n-                 arrowprops=None, annotation_clip=None, **kwargs):\n-        # Signature must match Annotation. This is verified in\n-        # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n-        a.set_transform(mtransforms.IdentityTransform())\n-        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n-            a.set_clip_path(self.patch)\n-        self._add_text(a)\n-        return a\n+\n+    def __init__(self, text, xy, xycoords='data', **kwargs):\n+        # Prevent array reference issues by copying array-like inputs\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n+        self.xycoords = xycoords\n+        super().__init__(text, **kwargs)\n     annotate.__doc__ = mtext.Annotation.__init__.__doc__\n     #### Lines and spans\n \ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..9b92b1e9db 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1105,7 +1105,7 @@ class Text(Artist):\n \n         See Also\n         --------\n-        .font_manager.FontProperties.set_size\n+\n         \"\"\"\n         self._fontproperties.set_size(fontsize)\n         self.stale = True\n@@ -1451,12 +1451,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1815,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,9 +1833,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n",
    "variant_1": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..f8570ec7d8 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,18 +701,17 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n-    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n-                 arrowprops=None, annotation_clip=None, **kwargs):\n-        # Signature must match Annotation. This is verified in\n-        # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n-        a.set_transform(mtransforms.IdentityTransform())\n-        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n-            a.set_clip_path(self.patch)\n-        self._add_text(a)\n-        return a\n+\n+    def __init__(self, text, xy, xycoords='data', clip_on=False,\n+                 transform=None):\n+        mtext.Text.__init__(self, text=text, transform=transform,\n+                            clip_on=clip_on)\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n+        self.xycoords = xycoords\n     annotate.__doc__ = mtext.Annotation.__init__.__doc__\n     #### Lines and spans\n \ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..21f6f036bf 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1096,6 +1096,19 @@ class Text(Artist):\n         \"\"\"\n         Set the font size.\n \n+        Parameters\n+        ----------\n+        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n+'large', 'x-large', 'xx-large'}\n+            If a float, the fontsize in points. The string values denote sizes\n+            relative to the default font size.\n+\n+        See Also\n+        --------\n+\n+        \"\"\"\n+        Set the font size.\n+\n         Parameters\n         ----------\n         fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n@@ -1450,13 +1463,19 @@ class OffsetFrom:\n         return tr\n \n \n+class _AnnotationBase:\n+\n class _AnnotationBase:\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1829,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,9 +1847,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n",
    "variant_2": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..0a49b1162f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,18 +701,34 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n-    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n-                 arrowprops=None, annotation_clip=None, **kwargs):\n-        # Signature must match Annotation. This is verified in\n-        # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n-        a.set_transform(mtransforms.IdentityTransform())\n-        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n-            a.set_clip_path(self.patch)\n-        self._add_text(a)\n-        return a\n+\n+    def __init__(self, text, xy, xytext=None, xycoords='data',\n+                 textcoords=None, arrowprops=None, annotation_clip=None,\n+                 **kwargs):\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n+        self.xycoords = xycoords\n+        self.set_annotation_clip(annotation_clip)\n+\n+        if xytext is None:\n+            self.xytext = self.xy\n+        else:\n+            self.xytext = xytext\n+        if textcoords is None:\n+            textcoords = self.xycoords\n+\n+        self.textcoords = textcoords\n+\n+        if arrowprops is not None:\n+            arrowprops = arrowprops.copy()\n+\n+        self.arrowprops = arrowprops\n+\n+        Text.__init__(self, 0, 0, text, **kwargs)\n+        self.set_transform(mtransforms.IdentityTransform())\n     annotate.__doc__ = mtext.Annotation.__init__.__doc__\n     #### Lines and spans\n \ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..7eea2153f7 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1105,7 +1105,7 @@ class Text(Artist):\n \n         See Also\n         --------\n-        .font_manager.FontProperties.set_size\n+\n         \"\"\"\n         self._fontproperties.set_size(fontsize)\n         self.stale = True\n@@ -1451,12 +1451,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,10 +1815,12 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n-        _AnnotationBase.__init__(self,\n-                                 xy,\n-                                 xycoords=xycoords,\n-                                 annotation_clip=annotation_clip)\n+\n+    def __init__(self, xy, xycoords='data', annotation_clip=None):\n+        self.xy = xy\n+        self.xycoords = xycoords\n+        self.set_annotation_clip(annotation_clip)\n+        self._annotation_clip = None\n         # warn about wonky input data\n         if (xytext is None and\n                 textcoords is not None and\n@@ -1827,9 +1834,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n",
    "variant_3": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..d9340a3f89 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,18 +701,21 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n-    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n-                 arrowprops=None, annotation_clip=None, **kwargs):\n-        # Signature must match Annotation. This is verified in\n-        # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n-        a.set_transform(mtransforms.IdentityTransform())\n-        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n-            a.set_clip_path(self.patch)\n-        self._add_text(a)\n-        return a\n+\n+    def __init__(self, text, xy, xycoords='data', **kwargs):\n+        _AnnotationBase.__init__(self, xy, xycoords, **kwargs)\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n+        self.set_text(text)\n+        self._get_xy_display = self._get_xy_display()\n+        self.arrow_patch = None\n+        if isinstance(xycoords, str):\n+            self._xycoords = xycoords\n+        else:\n+            self._xycoords = self._determine_xycoords(xycoords)\n     annotate.__doc__ = mtext.Annotation.__init__.__doc__\n     #### Lines and spans\n \ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..e1e22a6a81 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1096,6 +1096,16 @@ class Text(Artist):\n         \"\"\"\n         Set the font size.\n \n+        Parameters\n+        ----------\n+        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n+'large', 'x-large', 'xx-large'}\n+            If a float, the fontsize in points. The string values denote sizes\n+            relative to the default font size.\n+\n+        See Also\n+        --------\n+\n         Parameters\n         ----------\n         fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n@@ -1451,12 +1461,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1825,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,9 +1843,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n",
    "variant_4": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..6864edc8d9 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,6 +701,7 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n+\n     def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n                  arrowprops=None, annotation_clip=None, **kwargs):\n         # Signature must match Annotation. This is verified in\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..4d507bad7d 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1096,6 +1096,19 @@ class Text(Artist):\n         \"\"\"\n         Set the font size.\n \n+        Parameters\n+        ----------\n+        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n+'large', 'x-large', 'xx-large'}\n+            If a float, the fontsize in points. The string values denote sizes\n+            relative to the default font size.\n+\n+        See Also\n+        --------\n+\n+        \"\"\"\n+        Set the font size.\n+\n         Parameters\n         ----------\n         fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n@@ -1451,12 +1464,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1828,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,9 +1846,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n",
    "variant_5": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..6e2e0f6681 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,18 +701,17 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n-    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n-                 arrowprops=None, annotation_clip=None, **kwargs):\n-        # Signature must match Annotation. This is verified in\n-        # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n-        a.set_transform(mtransforms.IdentityTransform())\n-        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n-            a.set_clip_path(self.patch)\n-        self._add_text(a)\n-        return a\n+\n+    def __init__(self, text, xy, xycoords='data', **kwargs):\n+        _AnnotationBase.__init__(self, xy, xycoords, **kwargs)\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n+        self.set_text(text)\n+        self.arrow_patch = None\n+        self._arrow_relpos = None\n     annotate.__doc__ = mtext.Annotation.__init__.__doc__\n     #### Lines and spans\n \ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..bf06753730 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1105,10 +1105,25 @@ class Text(Artist):\n \n         See Also\n         --------\n+\n+    def set_fontsize(self, fontsize=None):\n+        \"\"\"\n+        Set the font size.\n+\n+        Parameters\n+        ----------\n+        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n+'large', 'x-large', 'xx-large'}\n+            If a float, the fontsize in points. The string values denote sizes\n+            relative to the default font size.\n+\n+        See Also\n+        --------\n         .font_manager.FontProperties.set_size\n         \"\"\"\n         self._fontproperties.set_size(fontsize)\n         self.stale = True\n+        self.stale = True\n \n     def get_math_fontfamily(self):\n         \"\"\"\n@@ -1450,13 +1465,19 @@ class OffsetFrom:\n         return tr\n \n \n+class _AnnotationBase:\n+\n class _AnnotationBase:\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1831,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,9 +1849,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n",
    "variant_6": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..a9fefe9fbe 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,18 +701,17 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n-    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n-                 arrowprops=None, annotation_clip=None, **kwargs):\n-        # Signature must match Annotation. This is verified in\n-        # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n-        a.set_transform(mtransforms.IdentityTransform())\n-        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n-            a.set_clip_path(self.patch)\n-        self._add_text(a)\n-        return a\n+\n+    def __init__(self, text, xy, xycoords='data', clip_on=False, **kwargs):\n+        super().__init__(**kwargs)\n+        self.xy = xy\n+        if isinstance(xycoords, tuple):\n+            if any(isinstance(coord, Artist) for coord in xycoords):\n+                raise ValueError(\"xycoords cannot contain Artists\")\n+        self.xycoords = xycoords\n+        self.set_text(text)\n+        self.set_clip_on(clip_on)\n+        self._annotation_clip = None\n     annotate.__doc__ = mtext.Annotation.__init__.__doc__\n     #### Lines and spans\n \ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..f7a4724bc6 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1096,6 +1096,19 @@ class Text(Artist):\n         \"\"\"\n         Set the font size.\n \n+        Parameters\n+        ----------\n+        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n+'large', 'x-large', 'xx-large'}\n+            If a float, the fontsize in points. The string values denote sizes\n+            relative to the default font size.\n+\n+        See Also\n+        --------\n+\n+        \"\"\"\n+        Set the font size.\n+\n         Parameters\n         ----------\n         fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n@@ -1450,13 +1463,19 @@ class OffsetFrom:\n         return tr\n \n \n+class _AnnotationBase:\n+\n class _AnnotationBase:\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1829,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,10 +1847,16 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n-        x, y = xytext\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            x, y = np.asarray(xytext).copy()\n+        else:\n+            x, y = xytext\n \n         self.arrowprops = arrowprops\n         if arrowprops is not None:\n",
    "variant_7": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..6864edc8d9 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,6 +701,7 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n+\n     def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n                  arrowprops=None, annotation_clip=None, **kwargs):\n         # Signature must match Annotation. This is verified in\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..ec77f5a24a 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1105,10 +1105,25 @@ class Text(Artist):\n \n         See Also\n         --------\n+\n+    def set_fontsize(self, fontsize=None):\n+        \"\"\"\n+        Set the font size.\n+\n+        Parameters\n+        ----------\n+        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n+'large', 'x-large', 'xx-large'}\n+            If a float, the fontsize in points. The string values denote sizes\n+            relative to the default font size.\n+\n+        See Also\n+        --------\n         .font_manager.FontProperties.set_size\n         \"\"\"\n         self._fontproperties.set_size(fontsize)\n         self.stale = True\n+        self.stale = True\n \n     def get_math_fontfamily(self):\n         \"\"\"\n@@ -1451,12 +1466,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1830,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,9 +1848,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n",
    "variant_8": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..3547bf01eb 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -701,18 +701,18 @@ class Axes(_AxesBase):\n         return t\n \n     @_docstring.dedent_interpd\n-    def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n-                 arrowprops=None, annotation_clip=None, **kwargs):\n-        # Signature must match Annotation. This is verified in\n-        # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n-        a.set_transform(mtransforms.IdentityTransform())\n-        if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n-            a.set_clip_path(self.patch)\n-        self._add_text(a)\n-        return a\n+\n+    def __init__(self, text, xy, xycoords='data', **kwargs):\n+        _api.check_isinstance((str, Number), xycoords=xycoords)\n+        self.xy = xy\n+        self.xycoords = xycoords\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n+\n+        super().__init__(text, **kwargs)\n     annotate.__doc__ = mtext.Annotation.__init__.__doc__\n     #### Lines and spans\n \ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..4d507bad7d 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1096,6 +1096,19 @@ class Text(Artist):\n         \"\"\"\n         Set the font size.\n \n+        Parameters\n+        ----------\n+        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n+'large', 'x-large', 'xx-large'}\n+            If a float, the fontsize in points. The string values denote sizes\n+            relative to the default font size.\n+\n+        See Also\n+        --------\n+\n+        \"\"\"\n+        Set the font size.\n+\n         Parameters\n         ----------\n         fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\\n@@ -1451,12 +1464,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xy, '__array__') or hasattr(xy, '__array_interface__'):\n+            self.xy = np.asarray(xy).copy()\n+        else:\n+            self.xy = xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n@@ -1810,6 +1828,7 @@ or callable, default: value of *xycoords*\n         :ref:`plotting-guide-annotation`\n \n         \"\"\"\n+\n         _AnnotationBase.__init__(self,\n                                  xy,\n                                  xycoords=xycoords,\n@@ -1827,9 +1846,14 @@ or callable, default: value of *xycoords*\n             textcoords = self.xycoords\n         self._textcoords = textcoords\n \n+        # cleanup xytext defaults\n+\n         # cleanup xytext defaults\n         if xytext is None:\n             xytext = self.xy\n+        # Make a copy of array-like inputs to prevent reference issues\n+        if hasattr(xytext, '__array__') or hasattr(xytext, '__array_interface__'):\n+            xytext = np.asarray(xytext).copy()\n         x, y = xytext\n \n         self.arrowprops = arrowprops\n"
  }
}