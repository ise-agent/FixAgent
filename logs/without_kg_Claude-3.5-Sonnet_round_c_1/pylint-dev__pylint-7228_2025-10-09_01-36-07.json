{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/pylint/pylint/config/argument.py lines 133-133)": "\ndef _safe_regexp_transformer(value: str) -> Pattern[str]:\n    \"\"\"Safely compile a regular expression, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r\"\\p{\" in value or r\"\\P{\" in value:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(value)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{value}' contains Unicode property escapes \"\n                    f\"(\\\\p{{...}} or \\\\P{{...}}) which are not supported by Python's \"\n                    f\"built-in 're' module. Please install the 'regex' package or \"\n                    f\"use a different pattern.\"\n                ) from e\n        # Re-raise the original error for other regex issues\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regexp_transformer,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
    "Location 2 (/root/hy/projects_1/pylint/pylint/config/argument.py lines 102-107)": "\ndef _safe_compile_regex(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling unsupported features gracefully.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is due to Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{pattern}' contains Unicode property escapes \"\n                    f\"which are not supported by Python's built-in 're' module. \"\n                    f\"Install the 'regex' library for Unicode property support.\"\n                ) from None\n        # Re-raise other regex errors\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from None\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_safe_compile_regex(pattern))\n    return patterns\n",
    "Location 3 (/root/hy/projects_1/pylint/pylint/config/option.py lines 26-29)": "\n# pylint: disable=unused-argument\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        return re.compile(value)\n    except re.error as e:\n        if \"bad escape\" in str(e) and \"\\\\p\" in value:\n            try:\n                import regex\n                return regex.compile(value)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regular expression '{value}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n                    \"Install with: pip install regex\"\n                ) from e\n        raise optparse.OptionValueError(f\"Invalid regular expression '{value}': {e}\") from e\n",
    "Location 4 (/root/hy/projects_1/pylint/pylint/config/option.py lines 106-106)": "\ndef _safe_compile_regex(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regex pattern '{pattern}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{Han}} are not supported by Python's re module. \"\n                    \"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _safe_compile_regex,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
    "Location 5 (/root/hy/projects_1/pylint/pylint/config/argument.py lines 114-120)": "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            patterns.append(\n                re.compile(\n                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                    + \"|\"\n                    + pathlib.PureWindowsPath(pattern).as_posix()\n                )\n            )\n        except re.error as e:\n            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n                raise argparse.ArgumentTypeError(\n                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported in Python's re module. \"\n                    f\"Pattern '{pattern}' contains unsupported escape sequences. \"\n                    f\"Consider using character classes or install the 'regex' library for advanced Unicode support.\"\n                ) from e\n            raise argparse.ArgumentTypeError(f\"Invalid regular expression pattern '{pattern}': {e}\") from e\n    return patterns\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/pylint/pylint/config/argument.py lines 133-133)": [
      "\ndef _safe_regexp_transformer(value: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r'\\p{' in value and ('bad escape' in str(e).lower() or 'bad character range' in str(e).lower()):\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(value)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Invalid regex pattern '{value}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n                    \"Install it with: pip install regex\"\n                ) from e\n        # Re-raise other regex errors as-is\n        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{value}': {e}\") from e\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regexp_transformer,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _safe_regexp_transformer(value: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r'\\p{' in value or r'\\P{' in value:\n            try:\n                # Try to import and use the regex library as fallback\n                import regex  # type: ignore[import]\n                return regex.compile(value)\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Invalid regex pattern '{value}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{Han}} are not supported by Python's re module. \"\n                    \"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{value}': {e}\") from e\n\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regexp_transformer,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _safe_regexp_transformer(value: str) -> Pattern[str]:\n    \"\"\"Safely compile regex patterns, handling Unicode property escapes gracefully.\"\"\"\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r'\\p{' in value or r'\\P{' in value:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(value)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{value}' contains Unicode property escapes (\\\\p{{}} or \\\\P{{}}) \"\n                    f\"which are not supported by Python's built-in 're' module. \"\n                    f\"Please install the 'regex' package or use standard regex syntax.\"\n                ) from e\n        # Re-raise other regex compilation errors\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regexp_transformer,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _safe_regexp_transformer(value: str) -> Pattern[str]:\n    \"\"\"Transform a string into a compiled regex, handling Unicode property escapes gracefully.\"\"\"\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r'\\p{' in value or r'\\P{' in value:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(value)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{value}' contains Unicode property escapes (\\\\p{{}} or \\\\P{{}}) \"\n                    f\"which are not supported by Python's standard 're' module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n        # Re-raise other regex errors as-is\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regexp_transformer,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _safe_regexp_transformer(value: str) -> Pattern[str]:\n    \"\"\"Transform string to compiled regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r'\\p{' in value or r'\\P{' in value:\n            try:\n                import regex  # type: ignore[import-untyped]\n                return regex.compile(value)  # type: ignore[no-any-return]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Invalid regular expression '{value}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{Han}} are not supported by Python's re module. \"\n                    \"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regexp_transformer,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _safe_re_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex  # type: ignore[import-untyped]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support, or use standard regex syntax. \"\n                    f\"Pattern: {pattern}\"\n                ) from e\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression: {pattern}\") from e\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_re_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _safe_regexp_transformer(value: str) -> Pattern[str]:\n    \"\"\"Transform a string into a compiled regular expression, with fallback for unsupported features.\"\"\"\n    try:\n        return re.compile(value)\n    except re.error as exc:\n        # Check if the error is related to unsupported Unicode property escapes\n        if \"bad escape\" in str(exc) and \"\\\\p\" in value:\n            try:\n                import regex  # type: ignore[import-untyped]\n                return regex.compile(value)  # type: ignore[no-any-return]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{value}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    \"which are not supported by Python's built-in 're' module. \"\n                    \"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from exc\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {exc}\") from exc\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regexp_transformer,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _safe_regex_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling unsupported features gracefully.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Invalid regular expression '{pattern}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{...}} require the 'regex' library. \"\n                    \"Install it with: pip install regex\"\n                ) from e\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _safe_regex_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n"
    ],
    "Location 2 (/root/hy/projects_1/pylint/pylint/config/argument.py lines 102-107)": [
      "\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            patterns.append(re.compile(pattern))\n        except re.error as e:\n            if r'\\p{' in pattern:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which are not supported by Python's re module. \"\n                    f\"Consider using character classes like [\\\\u4e00-\\\\u9fff] for Chinese characters instead.\"\n                ) from e\n            else:\n                raise argparse.ArgumentTypeError(\n                    f\"Invalid regular expression '{pattern}': {e}\"\n                ) from e\n    return patterns\n",
      "\ndef _safe_compile_regex(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which are not supported by Python's built-in 're' module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_safe_compile_regex(pattern))\n    return patterns\n",
      "\ndef _safe_compile_regex(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is due to Unicode property escapes\n        if \"bad escape\" in str(e) and \"\\\\p{\" in pattern:\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which are not supported by Python's standard 're' module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from None\n        # Re-raise other regex errors\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression: {pattern}\") from e\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_safe_compile_regex(pattern))\n    return patterns\n",
      "\ndef _safe_compile_regex(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if r\"\\p{\" in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Pattern '{pattern}' uses Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which require the 'regex' library. Install it with: pip install regex\"\n                ) from e\n        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_safe_compile_regex(pattern))\n    return patterns\n",
      "\ndef _safe_re_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{pattern}' contains Unicode property escapes \"\n                    f\"which are not supported by Python's standard 're' module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from None\n        # Re-raise other regex errors\n        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from None\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_safe_re_compile(pattern))\n    return patterns\n",
      "\ndef _safe_regex_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if r\"\\p{\" in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which are not supported by Python's standard 're' module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_safe_regex_compile(pattern))\n    return patterns\n",
      "\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            patterns.append(re.compile(pattern))\n        except re.error as e:\n            if r\"\\p{\" in pattern:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which are not supported by Python's re module. \"\n                    f\"Consider using character classes like [\\\\u4e00-\\\\u9fff] for Han characters instead.\"\n                ) from e\n            raise argparse.ArgumentTypeError(\n                f\"Invalid regular expression '{pattern}': {e}\"\n            ) from e\n    return patterns\n",
      "\ndef _safe_compile_regex(pattern: str) -> Pattern[str]:\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex  # type: ignore[import]\n                return regex.compile(pattern)  # type: ignore[return-value]\n            except ImportError:\n                raise argparse.ArgumentTypeError(\n                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which are not supported by Python's standard re module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from None\n        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from None\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_safe_compile_regex(pattern))\n    return patterns\n"
    ],
    "Location 3 (/root/hy/projects_1/pylint/pylint/config/option.py lines 26-29)": [
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        return re.compile(value)\n    except re.error as e:\n        if \"bad escape\" in str(e) and \"\\\\p\" in value:\n            try:\n                import regex\n                return regex.compile(value)\n            except ImportError:\n                raise ValueError(\n                    f\"Invalid regular expression '{value}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n                    \"Install it with: pip install regex\"\n                ) from e\n        raise\n",
      "\n# pylint: disable=unused-argument\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        return re.compile(value)\n    except re.error as exc:\n        if \"bad escape\" in str(exc) and \"\\\\p{\" in value:\n            try:\n                import regex\n                return regex.compile(value)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regular expression '{value}': Unicode property escapes like \\\\p{{...}} \"\n                    f\"are not supported by Python's re module. Install the 'regex' package or use \"\n                    f\"standard regex syntax.\"\n                ) from exc\n        raise optparse.OptionValueError(f\"Invalid regular expression '{value}': {exc}\") from exc\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error might be due to unsupported Unicode property escapes\n        if \"bad character range\" in str(e) or \"bad escape\" in str(e):\n            try:\n                import regex\n                return regex.compile(value)\n            except ImportError:\n                raise re.error(\n                    f\"Invalid regular expression '{value}': {e}. \"\n                    \"This might be due to unsupported Unicode property escapes like \\\\p{{...}}. \"\n                    \"Consider installing the 'regex' package for extended Unicode support.\"\n                ) from e\n        raise\n",
      "\n# pylint: disable=unused-argument\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        return re.compile(value)\n    except re.error as e:\n        if \"bad escape\" in str(e) and \"\\\\p\" in value:\n            try:\n                import regex\n                return regex.compile(value)\n            except ImportError:\n                raise ValueError(\n                    f\"Invalid regular expression '{value}': {e}. \"\n                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n                    \"Install it with: pip install regex\"\n                ) from e\n        raise\n",
      "\ndef _safe_compile_regex(pattern):\n    \"\"\"Safely compile regex pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if '\\\\p{' in str(pattern) or '\\\\P{' in str(pattern):\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise re.error(\n                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support, or use standard regex syntax.\"\n                ) from e\n        raise\n\n\n# pylint: disable=unused-argument\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    return _safe_compile_regex(value)\n",
      "\n# pylint: disable=unused-argument\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        return re.compile(value)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if \"\\\\p{\" in str(value) and (\"bad escape\" in str(e) or \"bad character range\" in str(e)):\n            try:\n                import regex\n                return regex.compile(value)\n            except ImportError:\n                warnings.warn(\n                    f\"Regular expression '{value}' contains Unicode property escapes \"\n                    f\"which are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for full Unicode support.\",\n                    UserWarning\n                )\n                # Return a pattern that matches nothing to avoid crashes\n                return re.compile(r'(?!)')\n            except Exception:\n                # If regex library also fails, fall back to safe pattern\n                warnings.warn(\n                    f\"Regular expression '{value}' could not be compiled. \"\n                    f\"Using a pattern that matches nothing.\",\n                    UserWarning\n                )\n                return re.compile(r'(?!)')\n        else:\n            # Re-raise other regex errors as they indicate genuine syntax issues\n            raise\n",
      "\ndef _safe_compile_regex(pattern):\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if r'\\p{' in str(pattern):\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise re.error(\n                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n        raise\n\n\n# pylint: disable=unused-argument\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    return _safe_compile_regex(value)\n",
      "\n# pylint: disable=unused-argument\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        return re.compile(value)\n    except re.error as exc:\n        # Check if the error is due to Unicode property escapes\n        if \"bad escape\" in str(exc) and \"\\\\p\" in value:\n            try:\n                import regex\n                return regex.compile(value)\n            except ImportError:\n                raise re.error(\n                    f\"Invalid regular expression '{value}': Unicode property escapes \"\n                    f\"like \\\\p{{...}} are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from exc\n        raise\n"
    ],
    "Location 4 (/root/hy/projects_1/pylint/pylint/config/option.py lines 106-106)": [
      "\ndef _safe_compile_regexp(pattern):\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is due to Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{...}} \"\n                    f\"are not supported by Python's standard re module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _safe_compile_regexp,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _safe_regex_compile(pattern):\n    \"\"\"Safely compile regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{}} \"\n                    f\"are not supported by Python's standard re module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        # Re-raise other regex errors as-is\n        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _safe_regex_compile,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _safe_compile_regex(pattern):\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is related to Unicode property escapes\n        if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's \"\n                    f\"standard 're' module. Install the 'regex' package for Unicode property support, \"\n                    f\"or use a different pattern. Pattern: {pattern}\"\n                ) from e\n        raise\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": lambda pattern: _safe_compile_regex(pattern),\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n",
      "\ndef _safe_compile_regex(pattern):\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{}} \"\n                    f\"are not supported by Python's re module. Install the 'regex' package \"\n                    f\"for Unicode property support, or use standard regex syntax.\"\n                ) from e\n        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _safe_compile_regex,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _safe_compile_regex(pattern):\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if the error is due to Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex  # pylint: disable=import-outside-toplevel\n                return regex.compile(pattern)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's \"\n                    f\"standard re module. Install the 'regex' package for Unicode property support, \"\n                    f\"or use standard regex patterns instead.\"\n                ) from e\n        # Re-raise other regex errors as-is\n        raise optparse.OptionValueError(f\"Invalid regular expression: {e}\") from e\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _safe_compile_regex,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _safe_compile_regexp(pattern):\n    \"\"\"Safely compile a regular expression pattern, handling Unicode property escapes.\"\"\"\n    try:\n        return re.compile(pattern or \"\")\n    except re.error as exc:\n        if r'\\p{' in str(pattern) and 'bad escape' in str(exc):\n            try:\n                import regex\n                return regex.compile(pattern or \"\")\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regular expression '{pattern}': Unicode property escapes like \\\\p{{...}} \"\n                    f\"require the 'regex' library. Install it with: pip install regex\"\n                ) from exc\n        raise optparse.OptionValueError(f\"Invalid regular expression '{pattern}': {exc}\") from exc\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _safe_compile_regexp,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _safe_regex_compile(pattern):\n    \"\"\"Safely compile regex pattern, handling Unicode property escapes.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as e:\n        # Check if error is due to Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex  # pylint: disable=import-outside-toplevel\n                return regex.compile(pattern)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{...}} \"\n                    f\"are not supported by Python's standard re module. \"\n                    f\"Install the 'regex' package for Unicode property support.\"\n                ) from e\n        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _safe_regex_compile,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _safe_compile_regex(pattern):\n    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n    if not pattern:\n        return re.compile(\"\")\n    \n    try:\n        return re.compile(pattern)\n    except re.error as exc:\n        # Check if the error is due to Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            try:\n                import regex\n                return regex.compile(pattern)\n            except ImportError:\n                raise optparse.OptionValueError(\n                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{}} \"\n                    f\"are not supported by Python's re module. Install the 'regex' package \"\n                    f\"or use standard regex syntax.\"\n                ) from exc\n        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {exc}\") from exc\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": lambda pattern: _safe_compile_regex(pattern),\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n"
    ],
    "Location 5 (/root/hy/projects_1/pylint/pylint/config/argument.py lines 114-120)": [
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            # Create both Windows and POSIX path patterns\n            windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n            posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n            combined_pattern = windows_pattern + \"|\" + posix_pattern\n            patterns.append(re.compile(combined_pattern))\n        except re.error as e:\n            if r\"\\p{\" in pattern:\n                try:\n                    import regex\n                    windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                    posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n                    combined_pattern = windows_pattern + \"|\" + posix_pattern\n                    patterns.append(regex.compile(combined_pattern))\n                except ImportError:\n                    raise re.error(\n                        f\"Invalid regular expression '{pattern}': {e}. \"\n                        \"Unicode property escapes like \\\\p{{...}} are not supported by Python's re module. \"\n                        \"Install the 'regex' package for Unicode property support.\"\n                    ) from e\n            else:\n                raise\n    return patterns\n",
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            patterns.append(\n                re.compile(\n                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                    + \"|\"\n                    + pathlib.PureWindowsPath(pattern).as_posix()\n                )\n            )\n        except re.error as e:\n            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n                try:\n                    import regex\n                    patterns.append(\n                        regex.compile(\n                            str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                            + \"|\"\n                            + pathlib.PureWindowsPath(pattern).as_posix()\n                        )\n                    )\n                except ImportError:\n                    raise ValueError(\n                        f\"Pattern '{pattern}' contains Unicode property escapes (like \\\\p{{...}}) \"\n                        f\"which are not supported by Python's built-in 're' module. \"\n                        f\"Install the 'regex' package for Unicode property support.\"\n                    ) from e\n            else:\n                raise\n    return patterns\n",
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            compiled_pattern = re.compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n            patterns.append(compiled_pattern)\n        except re.error as e:\n            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n                try:\n                    import regex  # type: ignore[import]\n                    compiled_pattern = regex.compile(\n                        str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                        + \"|\"\n                        + pathlib.PureWindowsPath(pattern).as_posix()\n                    )\n                    patterns.append(compiled_pattern)\n                except ImportError:\n                    raise argparse.ArgumentTypeError(\n                        f\"Regular expression '{pattern}' contains Unicode property escapes \"\n                        f\"(like \\\\p{{...}}) which are not supported by Python's standard 're' module. \"\n                        f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                    ) from e\n            else:\n                raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n    return patterns\n",
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            patterns.append(\n                re.compile(\n                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                    + \"|\"\n                    + pathlib.PureWindowsPath(pattern).as_posix()\n                )\n            )\n        except re.error as e:\n            if \"bad escape\" in str(e).lower() and \"\\\\p\" in pattern:\n                raise argparse.ArgumentTypeError(\n                    f\"Unicode property escapes like '\\\\p{{}}' are not supported in Python's re module. \"\n                    f\"Pattern: {pattern}. Consider using character classes instead.\"\n                ) from e\n            raise argparse.ArgumentTypeError(f\"Invalid regex pattern: {pattern}\") from e\n    return patterns\n",
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            # Try both Windows and POSIX path formats\n            windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n            posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n            combined_pattern = windows_pattern + \"|\" + posix_pattern\n            patterns.append(re.compile(combined_pattern))\n        except re.error as e:\n            # Check if this is a Unicode property escape issue\n            if \"bad escape\" in str(e) and (\"\\\\p{\" in pattern or \"\\\\P{\" in pattern):\n                try:\n                    import regex  # type: ignore[import-untyped]\n                    windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                    posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n                    combined_pattern = windows_pattern + \"|\" + posix_pattern\n                    patterns.append(regex.compile(combined_pattern))\n                except ImportError:\n                    raise argparse.ArgumentTypeError(\n                        f\"Invalid regular expression '{pattern}': {e}. \"\n                        f\"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n                        f\"Install it with: pip install regex\"\n                    ) from e\n                except Exception as regex_error:\n                    raise argparse.ArgumentTypeError(\n                        f\"Invalid regular expression '{pattern}': {regex_error}\"\n                    ) from regex_error\n            else:\n                raise argparse.ArgumentTypeError(\n                    f\"Invalid regular expression '{pattern}': {e}\"\n                ) from e\n    return patterns\n",
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            compiled_pattern = re.compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n            patterns.append(compiled_pattern)\n        except re.error as e:\n            if r\"\\p{\" in pattern or r\"\\P{\" in pattern:\n                try:\n                    import regex  # type: ignore[import]\n                    compiled_pattern = regex.compile(\n                        str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                        + \"|\"\n                        + pathlib.PureWindowsPath(pattern).as_posix()\n                    )\n                    patterns.append(compiled_pattern)\n                except ImportError:\n                    raise argparse.ArgumentTypeError(\n                        f\"Invalid regular expression '{pattern}': {e}. \"\n                        \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n                        \"Install it with: pip install regex\"\n                    ) from e\n            else:\n                raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n    return patterns\n",
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            patterns.append(\n                re.compile(\n                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                    + \"|\"\n                    + pathlib.PureWindowsPath(pattern).as_posix()\n                )\n            )\n        except re.error as exc:\n            if \"bad escape\" in str(exc) and \"\\\\p\" in pattern:\n                # Handle Unicode property escapes not supported by Python's re module\n                try:\n                    import regex  # type: ignore[import]\n                    patterns.append(\n                        regex.compile(\n                            str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                            + \"|\"\n                            + pathlib.PureWindowsPath(pattern).as_posix()\n                        )\n                    )\n                except ImportError:\n                    raise ValueError(\n                        f\"Regular expression '{pattern}' contains Unicode property escapes \"\n                        f\"(like \\\\p{{...}}) which are not supported by Python's built-in 're' module. \"\n                        f\"Install the 'regex' package for Unicode property support.\"\n                    ) from exc\n            else:\n                raise\n    return patterns\n",
      "\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        try:\n            patterns.append(\n                re.compile(\n                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                    + \"|\"\n                    + pathlib.PureWindowsPath(pattern).as_posix()\n                )\n            )\n        except re.error as e:\n            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n                raise argparse.ArgumentTypeError(\n                    f\"Regular expression '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                    f\"which are not supported by Python's re module. \"\n                    f\"Consider using character classes or install the 'regex' package for advanced Unicode support.\"\n                ) from e\n            raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n    return patterns\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..e04f060c3 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,12 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_compile_regex(pattern))\n     return patterns\n \n \n@@ -111,8 +112,9 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n+\n         patterns.append(\n-            re.compile(\n+            _safe_compile_regex(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n@@ -130,7 +132,35 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if \"bad escape \\\\p\" in str(e):\n+            raise argparse.ArgumentTypeError(\n+                f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n+                f\"Pattern: {pattern!r}. Consider using character classes like [a-zA-Z] instead.\"\n+            ) from e\n+        raise\n+\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_compile_regex,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..e71be7163 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,7 +23,25 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if \"bad escape \\\\p\" in str(e):\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n+                f\"Pattern: {pattern!r}. Consider using character classes like [a-zA-Z] instead.\"\n+            ) from e\n+        raise\n+\n+\n+# pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    return _safe_compile_regex(value)\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +121,8 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+    \"regexp\": lambda pattern: _safe_compile_regex(pattern or \"\"),\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_0": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..80c2f1672 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,32 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling unsupported features gracefully.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is due to Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{pattern}' contains Unicode property escapes \"\n+                    f\"which are not supported by Python's built-in 're' module. \"\n+                    f\"Install the 'regex' library for Unicode property support.\"\n+                ) from None\n+        # Re-raise other regex errors\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from None\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_compile_regex(pattern))\n     return patterns\n \n \n@@ -111,13 +132,28 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n-                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n-                + \"|\"\n-                + pathlib.PureWindowsPath(pattern).as_posix()\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            patterns.append(\n+                re.compile(\n+                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                    + \"|\"\n+                    + pathlib.PureWindowsPath(pattern).as_posix()\n+                )\n             )\n-        )\n+        except re.error as e:\n+            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported in Python's re module. \"\n+                    f\"Pattern '{pattern}' contains unsupported escape sequences. \"\n+                    f\"Consider using character classes or install the 'regex' library for advanced Unicode support.\"\n+                ) from e\n+            raise argparse.ArgumentTypeError(f\"Invalid regular expression pattern '{pattern}': {e}\") from e\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +166,42 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regexp_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regular expression, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r\"\\p{\" in value or r\"\\P{\" in value:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(value)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{value}' contains Unicode property escapes \"\n+                    f\"(\\\\p{{...}} or \\\\P{{...}}) which are not supported by Python's \"\n+                    f\"built-in 're' module. Please install the 'regex' package or \"\n+                    f\"use a different pattern.\"\n+                ) from e\n+        # Re-raise the original error for other regex issues\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regexp_transformer,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..17d58a5e8 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,25 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n-\n \n # pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        if \"bad escape\" in str(e) and \"\\\\p\" in value:\n+            try:\n+                import regex\n+                return regex.compile(value)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regular expression '{value}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n+                    \"Install with: pip install regex\"\n+                ) from e\n+        raise optparse.OptionValueError(f\"Invalid regular expression '{value}': {e}\") from e\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +118,44 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regex pattern '{pattern}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} are not supported by Python's re module. \"\n+                    \"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _safe_compile_regex,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_1": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..382b5e760 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,24 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        try:\n+            patterns.append(re.compile(pattern))\n+        except re.error as e:\n+            if r'\\p{' in pattern:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which are not supported by Python's re module. \"\n+                    f\"Consider using character classes like [\\\\u4e00-\\\\u9fff] for Chinese characters instead.\"\n+                ) from e\n+            else:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Invalid regular expression '{pattern}': {e}\"\n+                ) from e\n     return patterns\n \n \n@@ -111,13 +124,34 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n-                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n-                + \"|\"\n-                + pathlib.PureWindowsPath(pattern).as_posix()\n-            )\n-        )\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            # Create both Windows and POSIX path patterns\n+            windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+            posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n+            combined_pattern = windows_pattern + \"|\" + posix_pattern\n+            patterns.append(re.compile(combined_pattern))\n+        except re.error as e:\n+            if r\"\\p{\" in pattern:\n+                try:\n+                    import regex\n+                    windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                    posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n+                    combined_pattern = windows_pattern + \"|\" + posix_pattern\n+                    patterns.append(regex.compile(combined_pattern))\n+                except ImportError:\n+                    raise re.error(\n+                        f\"Invalid regular expression '{pattern}': {e}. \"\n+                        \"Unicode property escapes like \\\\p{{...}} are not supported by Python's re module. \"\n+                        \"Install the 'regex' package for Unicode property support.\"\n+                    ) from e\n+            else:\n+                raise\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +164,41 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regexp_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r'\\p{' in value and ('bad escape' in str(e).lower() or 'bad character range' in str(e).lower()):\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(value)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Invalid regex pattern '{value}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n+                    \"Install it with: pip install regex\"\n+                ) from e\n+        # Re-raise other regex errors as-is\n+        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{value}': {e}\") from e\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regexp_transformer,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..ae325d209 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,24 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n \n-\n-# pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        if \"bad escape\" in str(e) and \"\\\\p\" in value:\n+            try:\n+                import regex\n+                return regex.compile(value)\n+            except ImportError:\n+                raise ValueError(\n+                    f\"Invalid regular expression '{value}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n+                    \"Install it with: pip install regex\"\n+                ) from e\n+        raise\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +117,43 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_compile_regexp(pattern):\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is due to Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{...}} \"\n+                    f\"are not supported by Python's standard re module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _safe_compile_regexp,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_2": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..d2e1d6301 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,30 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which are not supported by Python's built-in 're' module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_compile_regex(pattern))\n     return patterns\n \n \n@@ -111,13 +130,39 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n-                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n-                + \"|\"\n-                + pathlib.PureWindowsPath(pattern).as_posix()\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            patterns.append(\n+                re.compile(\n+                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                    + \"|\"\n+                    + pathlib.PureWindowsPath(pattern).as_posix()\n+                )\n             )\n-        )\n+        except re.error as e:\n+            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n+                try:\n+                    import regex\n+                    patterns.append(\n+                        regex.compile(\n+                            str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                            + \"|\"\n+                            + pathlib.PureWindowsPath(pattern).as_posix()\n+                        )\n+                    )\n+                except ImportError:\n+                    raise ValueError(\n+                        f\"Pattern '{pattern}' contains Unicode property escapes (like \\\\p{{...}}) \"\n+                        f\"which are not supported by Python's built-in 're' module. \"\n+                        f\"Install the 'regex' package for Unicode property support.\"\n+                    ) from e\n+            else:\n+                raise\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +175,42 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regexp_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r'\\p{' in value or r'\\P{' in value:\n+            try:\n+                # Try to import and use the regex library as fallback\n+                import regex  # type: ignore[import]\n+                return regex.compile(value)\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Invalid regex pattern '{value}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} are not supported by Python's re module. \"\n+                    \"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{value}': {e}\") from e\n+\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regexp_transformer,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..900c0d7be 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,25 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n-\n \n # pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    try:\n+        return re.compile(value)\n+    except re.error as exc:\n+        if \"bad escape\" in str(exc) and \"\\\\p{\" in value:\n+            try:\n+                import regex\n+                return regex.compile(value)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regular expression '{value}': Unicode property escapes like \\\\p{{...}} \"\n+                    f\"are not supported by Python's re module. Install the 'regex' package or use \"\n+                    f\"standard regex syntax.\"\n+                ) from exc\n+        raise optparse.OptionValueError(f\"Invalid regular expression '{value}': {exc}\") from exc\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +118,44 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_regex_compile(pattern):\n+    \"\"\"Safely compile regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{}} \"\n+                    f\"are not supported by Python's standard re module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        # Re-raise other regex errors as-is\n+        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _safe_regex_compile,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_3": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..28f2b87e5 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,32 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is due to Unicode property escapes\n+        if \"bad escape\" in str(e) and \"\\\\p{\" in pattern:\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which are not supported by Python's standard 're' module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from None\n+        # Re-raise other regex errors\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression: {pattern}\") from e\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_compile_regex(pattern))\n     return patterns\n \n \n@@ -111,13 +132,37 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            compiled_pattern = re.compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n-        )\n+            patterns.append(compiled_pattern)\n+        except re.error as e:\n+            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n+                try:\n+                    import regex  # type: ignore[import]\n+                    compiled_pattern = regex.compile(\n+                        str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                        + \"|\"\n+                        + pathlib.PureWindowsPath(pattern).as_posix()\n+                    )\n+                    patterns.append(compiled_pattern)\n+                except ImportError:\n+                    raise argparse.ArgumentTypeError(\n+                        f\"Regular expression '{pattern}' contains Unicode property escapes \"\n+                        f\"(like \\\\p{{...}}) which are not supported by Python's standard 're' module. \"\n+                        f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                    ) from e\n+            else:\n+                raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +175,41 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regexp_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Safely compile regex patterns, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r'\\p{' in value or r'\\P{' in value:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(value)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{value}' contains Unicode property escapes (\\\\p{{}} or \\\\P{{}}) \"\n+                    f\"which are not supported by Python's built-in 're' module. \"\n+                    f\"Please install the 'regex' package or use standard regex syntax.\"\n+                ) from e\n+        # Re-raise other regex compilation errors\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regexp_transformer,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..e626d3c4b 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,25 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n \n-\n-# pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error might be due to unsupported Unicode property escapes\n+        if \"bad character range\" in str(e) or \"bad escape\" in str(e):\n+            try:\n+                import regex\n+                return regex.compile(value)\n+            except ImportError:\n+                raise re.error(\n+                    f\"Invalid regular expression '{value}': {e}. \"\n+                    \"This might be due to unsupported Unicode property escapes like \\\\p{{...}}. \"\n+                    \"Consider installing the 'regex' package for extended Unicode support.\"\n+                ) from e\n+        raise\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +118,45 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_compile_regex(pattern):\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's \"\n+                    f\"standard 're' module. Install the 'regex' package for Unicode property support, \"\n+                    f\"or use a different pattern. Pattern: {pattern}\"\n+                ) from e\n+        raise\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": lambda pattern: _safe_compile_regex(pattern),\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_4": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..21bfc4470 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,29 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if r\"\\p{\" in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Pattern '{pattern}' uses Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which require the 'regex' library. Install it with: pip install regex\"\n+                ) from e\n+        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_compile_regex(pattern))\n     return patterns\n \n \n@@ -111,13 +129,27 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n-                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n-                + \"|\"\n-                + pathlib.PureWindowsPath(pattern).as_posix()\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            patterns.append(\n+                re.compile(\n+                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                    + \"|\"\n+                    + pathlib.PureWindowsPath(pattern).as_posix()\n+                )\n             )\n-        )\n+        except re.error as e:\n+            if \"bad escape\" in str(e).lower() and \"\\\\p\" in pattern:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Unicode property escapes like '\\\\p{{}}' are not supported in Python's re module. \"\n+                    f\"Pattern: {pattern}. Consider using character classes instead.\"\n+                ) from e\n+            raise argparse.ArgumentTypeError(f\"Invalid regex pattern: {pattern}\") from e\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +162,41 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regexp_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Transform a string into a compiled regex, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r'\\p{' in value or r'\\P{' in value:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(value)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{value}' contains Unicode property escapes (\\\\p{{}} or \\\\P{{}}) \"\n+                    f\"which are not supported by Python's standard 're' module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+        # Re-raise other regex errors as-is\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regexp_transformer,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..221bf283e 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,25 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n-\n \n # pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        if \"bad escape\" in str(e) and \"\\\\p\" in value:\n+            try:\n+                import regex\n+                return regex.compile(value)\n+            except ImportError:\n+                raise ValueError(\n+                    f\"Invalid regular expression '{value}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n+                    \"Install it with: pip install regex\"\n+                ) from e\n+        raise\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +118,42 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_compile_regex(pattern):\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{}} \"\n+                    f\"are not supported by Python's re module. Install the 'regex' package \"\n+                    f\"for Unicode property support, or use standard regex syntax.\"\n+                ) from e\n+        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _safe_compile_regex,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_5": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..75b6e2c50 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,32 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n+def _safe_re_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{pattern}' contains Unicode property escapes \"\n+                    f\"which are not supported by Python's standard 're' module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from None\n+        # Re-raise other regex errors\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from None\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_re_compile(pattern))\n     return patterns\n \n \n@@ -111,13 +132,41 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n-                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n-                + \"|\"\n-                + pathlib.PureWindowsPath(pattern).as_posix()\n-            )\n-        )\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            # Try both Windows and POSIX path formats\n+            windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+            posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n+            combined_pattern = windows_pattern + \"|\" + posix_pattern\n+            patterns.append(re.compile(combined_pattern))\n+        except re.error as e:\n+            # Check if this is a Unicode property escape issue\n+            if \"bad escape\" in str(e) and (\"\\\\p{\" in pattern or \"\\\\P{\" in pattern):\n+                try:\n+                    import regex  # type: ignore[import-untyped]\n+                    windows_pattern = str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                    posix_pattern = pathlib.PureWindowsPath(pattern).as_posix()\n+                    combined_pattern = windows_pattern + \"|\" + posix_pattern\n+                    patterns.append(regex.compile(combined_pattern))\n+                except ImportError:\n+                    raise argparse.ArgumentTypeError(\n+                        f\"Invalid regular expression '{pattern}': {e}. \"\n+                        f\"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n+                        f\"Install it with: pip install regex\"\n+                    ) from e\n+                except Exception as regex_error:\n+                    raise argparse.ArgumentTypeError(\n+                        f\"Invalid regular expression '{pattern}': {regex_error}\"\n+                    ) from regex_error\n+            else:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Invalid regular expression '{pattern}': {e}\"\n+                ) from e\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +179,40 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regexp_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Transform string to compiled regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r'\\p{' in value or r'\\P{' in value:\n+            try:\n+                import regex  # type: ignore[import-untyped]\n+                return regex.compile(value)  # type: ignore[no-any-return]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Invalid regular expression '{value}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} are not supported by Python's re module. \"\n+                    \"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {e}\") from e\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regexp_transformer,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..828656140 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,29 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+\n+def _safe_compile_regex(pattern):\n+    \"\"\"Safely compile regex pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if '\\\\p{' in str(pattern) or '\\\\P{' in str(pattern):\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise re.error(\n+                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support, or use standard regex syntax.\"\n+                ) from e\n+        raise\n \n \n # pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    return _safe_compile_regex(value)\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +122,44 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_compile_regex(pattern):\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is due to Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex  # pylint: disable=import-outside-toplevel\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's \"\n+                    f\"standard re module. Install the 'regex' package for Unicode property support, \"\n+                    f\"or use standard regex patterns instead.\"\n+                ) from e\n+        # Re-raise other regex errors as-is\n+        raise optparse.OptionValueError(f\"Invalid regular expression: {e}\") from e\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _safe_compile_regex,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_6": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..de58f5425 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,30 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n+def _safe_regex_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if r\"\\p{\" in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which are not supported by Python's standard 're' module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_regex_compile(pattern))\n     return patterns\n \n \n@@ -111,13 +130,37 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            compiled_pattern = re.compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n-        )\n+            patterns.append(compiled_pattern)\n+        except re.error as e:\n+            if r\"\\p{\" in pattern or r\"\\P{\" in pattern:\n+                try:\n+                    import regex  # type: ignore[import]\n+                    compiled_pattern = regex.compile(\n+                        str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                        + \"|\"\n+                        + pathlib.PureWindowsPath(pattern).as_posix()\n+                    )\n+                    patterns.append(compiled_pattern)\n+                except ImportError:\n+                    raise argparse.ArgumentTypeError(\n+                        f\"Invalid regular expression '{pattern}': {e}. \"\n+                        \"Unicode property escapes like \\\\p{{Han}} require the 'regex' library. \"\n+                        \"Install it with: pip install regex\"\n+                    ) from e\n+            else:\n+                raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +173,39 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_re_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex  # type: ignore[import-untyped]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support, or use standard regex syntax. \"\n+                    f\"Pattern: {pattern}\"\n+                ) from e\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression: {pattern}\") from e\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_re_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..9a57f6737 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,39 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n-\n \n # pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if \"\\\\p{\" in str(value) and (\"bad escape\" in str(e) or \"bad character range\" in str(e)):\n+            try:\n+                import regex\n+                return regex.compile(value)\n+            except ImportError:\n+                warnings.warn(\n+                    f\"Regular expression '{value}' contains Unicode property escapes \"\n+                    f\"which are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for full Unicode support.\",\n+                    UserWarning\n+                )\n+                # Return a pattern that matches nothing to avoid crashes\n+                return re.compile(r'(?!)')\n+            except Exception:\n+                # If regex library also fails, fall back to safe pattern\n+                warnings.warn(\n+                    f\"Regular expression '{value}' could not be compiled. \"\n+                    f\"Using a pattern that matches nothing.\",\n+                    UserWarning\n+                )\n+                return re.compile(r'(?!)')\n+        else:\n+            # Re-raise other regex errors as they indicate genuine syntax issues\n+            raise\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +132,38 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_compile_regexp(pattern):\n+    \"\"\"Safely compile a regular expression pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(pattern or \"\")\n+    except re.error as exc:\n+        if r'\\p{' in str(pattern) and 'bad escape' in str(exc):\n+            try:\n+                import regex\n+                return regex.compile(pattern or \"\")\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regular expression '{pattern}': Unicode property escapes like \\\\p{{...}} \"\n+                    f\"require the 'regex' library. Install it with: pip install regex\"\n+                ) from exc\n+        raise optparse.OptionValueError(f\"Invalid regular expression '{pattern}': {exc}\") from exc\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _safe_compile_regexp,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_7": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..6d21e303e 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,23 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        try:\n+            patterns.append(re.compile(pattern))\n+        except re.error as e:\n+            if r\"\\p{\" in pattern:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which are not supported by Python's re module. \"\n+                    f\"Consider using character classes like [\\\\u4e00-\\\\u9fff] for Han characters instead.\"\n+                ) from e\n+            raise argparse.ArgumentTypeError(\n+                f\"Invalid regular expression '{pattern}': {e}\"\n+            ) from e\n     return patterns\n \n \n@@ -111,13 +123,40 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n-                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n-                + \"|\"\n-                + pathlib.PureWindowsPath(pattern).as_posix()\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            patterns.append(\n+                re.compile(\n+                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                    + \"|\"\n+                    + pathlib.PureWindowsPath(pattern).as_posix()\n+                )\n             )\n-        )\n+        except re.error as exc:\n+            if \"bad escape\" in str(exc) and \"\\\\p\" in pattern:\n+                # Handle Unicode property escapes not supported by Python's re module\n+                try:\n+                    import regex  # type: ignore[import]\n+                    patterns.append(\n+                        regex.compile(\n+                            str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                            + \"|\"\n+                            + pathlib.PureWindowsPath(pattern).as_posix()\n+                        )\n+                    )\n+                except ImportError:\n+                    raise ValueError(\n+                        f\"Regular expression '{pattern}' contains Unicode property escapes \"\n+                        f\"(like \\\\p{{...}}) which are not supported by Python's built-in 're' module. \"\n+                        f\"Install the 'regex' package for Unicode property support.\"\n+                    ) from exc\n+            else:\n+                raise\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +169,40 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regexp_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Transform a string into a compiled regular expression, with fallback for unsupported features.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as exc:\n+        # Check if the error is related to unsupported Unicode property escapes\n+        if \"bad escape\" in str(exc) and \"\\\\p\" in value:\n+            try:\n+                import regex  # type: ignore[import-untyped]\n+                return regex.compile(value)  # type: ignore[no-any-return]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{value}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    \"which are not supported by Python's built-in 're' module. \"\n+                    \"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from exc\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{value}': {exc}\") from exc\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regexp_transformer,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..542890e45 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,29 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+\n+def _safe_compile_regex(pattern):\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if r'\\p{' in str(pattern):\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise re.error(\n+                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+        raise\n \n \n # pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    return _safe_compile_regex(value)\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +122,43 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_regex_compile(pattern):\n+    \"\"\"Safely compile regex pattern, handling Unicode property escapes.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if error is due to Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex  # pylint: disable=import-outside-toplevel\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{...}} \"\n+                    f\"are not supported by Python's standard re module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from e\n+        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {e}\") from e\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _safe_regex_compile,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_8": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..9900b93f0 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,30 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+\n+def _safe_compile_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which are not supported by Python's standard re module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from None\n+        raise argparse.ArgumentTypeError(f\"Invalid regex pattern '{pattern}': {e}\") from None\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_safe_compile_regex(pattern))\n     return patterns\n \n \n@@ -111,13 +130,28 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(\n-            re.compile(\n-                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n-                + \"|\"\n-                + pathlib.PureWindowsPath(pattern).as_posix()\n+\n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+    patterns: list[Pattern[str]] = []\n+    for pattern in _csv_transformer(value):\n+        try:\n+            patterns.append(\n+                re.compile(\n+                    str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n+                    + \"|\"\n+                    + pathlib.PureWindowsPath(pattern).as_posix()\n+                )\n             )\n-        )\n+        except re.error as e:\n+            if \"bad escape\" in str(e) and \"\\\\p\" in pattern:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Regular expression '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                    f\"which are not supported by Python's re module. \"\n+                    f\"Consider using character classes or install the 'regex' package for advanced Unicode support.\"\n+                ) from e\n+            raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n+    return patterns\n     return patterns\n \n \n@@ -130,7 +164,40 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _safe_regex_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Safely compile a regex pattern, handling unsupported features gracefully.\"\"\"\n+    try:\n+        return re.compile(pattern)\n+    except re.error as e:\n+        # Check if the error is related to Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex  # type: ignore[import]\n+                return regex.compile(pattern)  # type: ignore[return-value]\n+            except ImportError:\n+                raise argparse.ArgumentTypeError(\n+                    f\"Invalid regular expression '{pattern}': {e}. \"\n+                    \"Unicode property escapes like \\\\p{{...}} require the 'regex' library. \"\n+                    \"Install it with: pip install regex\"\n+                ) from e\n+        raise argparse.ArgumentTypeError(f\"Invalid regular expression '{pattern}': {e}\") from e\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _safe_regex_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..5897668ee 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,10 +23,26 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n-\n \n # pylint: disable=unused-argument\n+def _regexp_validator(_, name, value):\n+    if hasattr(value, \"pattern\"):\n+        return value\n+    try:\n+        return re.compile(value)\n+    except re.error as exc:\n+        # Check if the error is due to Unicode property escapes\n+        if \"bad escape\" in str(exc) and \"\\\\p\" in value:\n+            try:\n+                import regex\n+                return regex.compile(value)\n+            except ImportError:\n+                raise re.error(\n+                    f\"Invalid regular expression '{value}': Unicode property escapes \"\n+                    f\"like \\\\p{{...}} are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support.\"\n+                ) from exc\n+        raise\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n@@ -103,7 +119,43 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _safe_compile_regex(pattern):\n+    \"\"\"Safely compile a regex pattern, handling Unicode property escapes gracefully.\"\"\"\n+    if not pattern:\n+        return re.compile(\"\")\n+    \n+    try:\n+        return re.compile(pattern)\n+    except re.error as exc:\n+        # Check if the error is due to Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            try:\n+                import regex\n+                return regex.compile(pattern)\n+            except ImportError:\n+                raise optparse.OptionValueError(\n+                    f\"Invalid regex pattern '{pattern}': Unicode property escapes like \\\\p{{}} \"\n+                    f\"are not supported by Python's re module. Install the 'regex' package \"\n+                    f\"or use standard regex syntax.\"\n+                ) from exc\n+        raise optparse.OptionValueError(f\"Invalid regex pattern '{pattern}': {exc}\") from exc\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": lambda pattern: _safe_compile_regex(pattern),\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n"
  }
}