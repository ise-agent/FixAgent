{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/figure.py lines 2409-2418)": "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
    "Location 2 (/root/hy/projects_1/matplotlib/lib/matplotlib/figure.py lines 2562-2563)": "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
    "Location 3 (/root/hy/projects_1/matplotlib/lib/matplotlib/figure.py lines 1313-1319)": "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
    "Location 4 (/root/hy/projects_1/matplotlib/lib/matplotlib/layout_engine.py lines 193-199)": "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
    "Location 5 (/root/hy/projects_1/matplotlib/lib/matplotlib/tests/test_figure.py lines 564-566)": "\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/figure.py lines 2409-2418)": [
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n",
      "\n        if layout is not None:\n            if (tight_layout is not None):\n                _api.warn_external(\n                    \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                    \"be used together. Please use 'layout' only.\")\n            if (constrained_layout is not None):\n                if constrained_layout is False and layout in ['constrained', 'compressed']:\n                    # Respect explicit constrained_layout=False by overriding layout\n                    layout = 'none'\n                else:\n                    _api.warn_external(\n                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n                        \"cannot be used together. Please use 'layout' only.\")\n            self.set_layout_engine(layout=layout)\n"
    ],
    "Location 2 (/root/hy/projects_1/matplotlib/lib/matplotlib/figure.py lines 2562-2563)": [
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n"
    ],
    "Location 3 (/root/hy/projects_1/matplotlib/lib/matplotlib/figure.py lines 1313-1319)": [
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n            return\n        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n"
    ],
    "Location 4 (/root/hy/projects_1/matplotlib/lib/matplotlib/layout_engine.py lines 193-199)": [
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n",
      "\nclass ConstrainedLayoutEngine(LayoutEngine):\n    \"\"\"\n    Implements the ``constrained_layout`` geometry management.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide` for details.\n    \"\"\"\n\n    _adjust_compatible = False\n"
    ],
    "Location 5 (/root/hy/projects_1/matplotlib/lib/matplotlib/tests/test_figure.py lines 564-566)": [
      "\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n",
      "\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n",
      "\ndef test_figure_layout_engine():\n    # Test that layout engines work properly\n    with pytest.warns(UserWarning, match=\"The figure layout has changed\"):\n        fig = Figure()\n    assert fig.get_layout_engine() is None\n\n    fig = Figure(layout=None)\n    assert fig.get_layout_engine() is None\n\n    fig = Figure(layout='tight')\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n\n    fig = Figure(layout='constrained')\n    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n\n    # Using layout + (tight|constrained)_layout warns, but the former takes\n    # precedence.\n    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='tight', tight_layout=False)\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n\n    with pytest.raises(ValueError,\n                       match=\"Invalid value for 'layout'\"):\n        Figure(layout='foobar')\n\n    # test that layouts can be swapped if no colorbar:\n    fig, ax = plt.subplots(layout=\"constrained\")\n    fig.set_layout_engine(\"tight\")\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    fig.set_layout_engine(\"constrained\")\n",
      "\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n",
      "\ndef test_layout_change_warning():\n    \"\"\"\n    Test that changing layout is possible without warnings\n    \"\"\"\n    fig = Figure()\n    fig.set_layout_engine('constrained')\n    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n\n    # Using layout + (tight|constrained)_layout warns, but the former takes\n    # precedence.\n    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='tight', tight_layout=False)\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n",
      "\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n",
      "\ndef test_layout_change_warning():\n    \"\"\"\n    Test that when the layout is changed from the default, the old layout\n    is properly overridden.\n    \"\"\"\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        fig = Figure()\n    assert fig.get_layout_engine() is None\n\n    fig = Figure(layout='tight')\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n\n    fig = Figure(layout='constrained')\n    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n\n    # Using layout + (tight|constrained)_layout warns, but the former takes\n    # precedence.\n    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='tight', tight_layout=False)\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n\n    with pytest.raises(ValueError,\n                       match=\"Invalid value for 'layout'\"):\n        Figure(layout='foobar')\n\n    # test that layouts can be swapped if no colorbar:\n    fig, ax = plt.subplots(layout=\"constrained\")\n    fig.set_layout_engine(\"tight\")\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    fig.set_layout_engine(\"constrained\")\n",
      "\ndef test_layout_change_warning():\n    # Ensure that changing layout emits a warning\n    fig, ax = plt.subplots(constrained_layout=True)\n    with pytest.warns(UserWarning,\n                      match=\"The layout engine .*cannot be changed\"):\n        fig.set_layout_engine('tight')\n\n    # ... rest of function unchanged until the problematic lines ...\n\n    # Using layout + (tight|constrained)_layout warns, but the former takes\n    # precedence.\n    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='tight', tight_layout=False)\n    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n    with pytest.warns(UserWarning, match=wst):\n        fig = Figure(layout='constrained', constrained_layout=False)\n    assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..751827df3b 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1310,6 +1310,7 @@ default: %(va)s\n             as a fraction of the average Axes height.\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n+\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n                 \"This figure was using a layout engine that is \"\n@@ -2406,15 +2407,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2565,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..e91ae1e6e3 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -561,9 +561,10 @@ def test_invalid_layouts():\n     assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n     wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n     with pytest.warns(UserWarning, match=wst):\n+\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_0": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..0e9c19a236 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -560,10 +560,12 @@ def test_invalid_layouts():\n         fig = Figure(layout='tight', tight_layout=False)\n     assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n     wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_1": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..e91ae1e6e3 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -561,9 +561,10 @@ def test_invalid_layouts():\n     assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n     wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n     with pytest.warns(UserWarning, match=wst):\n+\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_2": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..0e9c19a236 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -560,10 +560,12 @@ def test_invalid_layouts():\n         fig = Figure(layout='tight', tight_layout=False)\n     assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n     wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_3": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..f2609d2f8a 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -553,6 +553,30 @@ def test_invalid_layouts():\n         fig.subplots_adjust(top=0.8)\n     assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n \n+    # Using layout + (tight|constrained)_layout warns, but the former takes\n+    # precedence.\n+    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+        fig = Figure(layout='tight', tight_layout=False)\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n+def test_figure_layout_engine():\n+    # Test that layout engines work properly\n+    with pytest.warns(UserWarning, match=\"The figure layout has changed\"):\n+        fig = Figure()\n+    assert fig.get_layout_engine() is None\n+\n+    fig = Figure(layout=None)\n+    assert fig.get_layout_engine() is None\n+\n+    fig = Figure(layout='tight')\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+\n+    fig = Figure(layout='constrained')\n+    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+\n     # Using layout + (tight|constrained)_layout warns, but the former takes\n     # precedence.\n     wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n@@ -563,7 +587,17 @@ def test_invalid_layouts():\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n+\n+    with pytest.raises(ValueError,\n+                       match=\"Invalid value for 'layout'\"):\n+        Figure(layout='foobar')\n+\n+    # test that layouts can be swapped if no colorbar:\n+    fig, ax = plt.subplots(layout=\"constrained\")\n+    fig.set_layout_engine(\"tight\")\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+    fig.set_layout_engine(\"constrained\")\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_4": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..0e9c19a236 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -560,10 +560,12 @@ def test_invalid_layouts():\n         fig = Figure(layout='tight', tight_layout=False)\n     assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n     wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_5": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..b00b13fbaf 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -553,6 +553,23 @@ def test_invalid_layouts():\n         fig.subplots_adjust(top=0.8)\n     assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n \n+    # Using layout + (tight|constrained)_layout warns, but the former takes\n+    # precedence.\n+    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+        fig = Figure(layout='tight', tight_layout=False)\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n+def test_layout_change_warning():\n+    \"\"\"\n+    Test that changing layout is possible without warnings\n+    \"\"\"\n+    fig = Figure()\n+    fig.set_layout_engine('constrained')\n+    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+\n     # Using layout + (tight|constrained)_layout warns, but the former takes\n     # precedence.\n     wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n@@ -563,7 +580,7 @@ def test_invalid_layouts():\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_6": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..0e9c19a236 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -560,10 +560,12 @@ def test_invalid_layouts():\n         fig = Figure(layout='tight', tight_layout=False)\n     assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n     wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_7": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..3d5bb40652 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -553,6 +553,31 @@ def test_invalid_layouts():\n         fig.subplots_adjust(top=0.8)\n     assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n \n+    # Using layout + (tight|constrained)_layout warns, but the former takes\n+    # precedence.\n+    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+        fig = Figure(layout='tight', tight_layout=False)\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n+def test_layout_change_warning():\n+    \"\"\"\n+    Test that when the layout is changed from the default, the old layout\n+    is properly overridden.\n+    \"\"\"\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"ignore\")\n+        fig = Figure()\n+    assert fig.get_layout_engine() is None\n+\n+    fig = Figure(layout='tight')\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+\n+    fig = Figure(layout='constrained')\n+    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+\n     # Using layout + (tight|constrained)_layout warns, but the former takes\n     # precedence.\n     wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n@@ -563,7 +588,17 @@ def test_invalid_layouts():\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n+\n+    with pytest.raises(ValueError,\n+                       match=\"Invalid value for 'layout'\"):\n+        Figure(layout='foobar')\n+\n+    # test that layouts can be swapped if no colorbar:\n+    fig, ax = plt.subplots(layout=\"constrained\")\n+    fig.set_layout_engine(\"tight\")\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+    fig.set_layout_engine(\"constrained\")\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n",
    "variant_8": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..546443688a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,8 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2406,15 +2408,20 @@ class Figure(FigureBase):\n         super().__init__(**kwargs)\n         self._layout_engine = None\n \n+\n         if layout is not None:\n             if (tight_layout is not None):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'tight_layout' cannot \"\n                     \"be used together. Please use 'layout' only.\")\n             if (constrained_layout is not None):\n-                _api.warn_external(\n-                    \"The Figure parameters 'layout' and 'constrained_layout' \"\n-                    \"cannot be used together. Please use 'layout' only.\")\n+                if constrained_layout is False and layout in ['constrained', 'compressed']:\n+                    # Respect explicit constrained_layout=False by overriding layout\n+                    layout = 'none'\n+                else:\n+                    _api.warn_external(\n+                        \"The Figure parameters 'layout' and 'constrained_layout' \"\n+                        \"cannot be used together. Please use 'layout' only.\")\n             self.set_layout_engine(layout=layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\ndiff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 56e82b5699..f5ca734dcc 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -190,6 +190,7 @@ class TightLayoutEngine(LayoutEngine):\n                 self._params[td] = locals()[td]\n \n \n+\n class ConstrainedLayoutEngine(LayoutEngine):\n     \"\"\"\n     Implements the ``constrained_layout`` geometry management.  See\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 48b4a880e0..d63180c789 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -553,6 +553,24 @@ def test_invalid_layouts():\n         fig.subplots_adjust(top=0.8)\n     assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n \n+    # Using layout + (tight|constrained)_layout warns, but the former takes\n+    # precedence.\n+    wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+        fig = Figure(layout='tight', tight_layout=False)\n+    assert isinstance(fig.get_layout_engine(), TightLayoutEngine)\n+    wst = \"The Figure parameters 'layout' and 'constrained_layout'\"\n+    with pytest.warns(UserWarning, match=wst):\n+\n+def test_layout_change_warning():\n+    # Ensure that changing layout emits a warning\n+    fig, ax = plt.subplots(constrained_layout=True)\n+    with pytest.warns(UserWarning,\n+                      match=\"The layout engine .*cannot be changed\"):\n+        fig.set_layout_engine('tight')\n+\n+    # ... rest of function unchanged until the problematic lines ...\n+\n     # Using layout + (tight|constrained)_layout warns, but the former takes\n     # precedence.\n     wst = \"The Figure parameters 'layout' and 'tight_layout'\"\n@@ -563,7 +581,7 @@ def test_invalid_layouts():\n     with pytest.warns(UserWarning, match=wst):\n         fig = Figure(layout='constrained', constrained_layout=False)\n     assert not isinstance(fig.get_layout_engine(), TightLayoutEngine)\n-    assert isinstance(fig.get_layout_engine(), ConstrainedLayoutEngine)\n+    assert isinstance(fig.get_layout_engine(), PlaceHolderLayoutEngine)\n \n     with pytest.raises(ValueError,\n                        match=\"Invalid value for 'layout'\"):\n"
  }
}