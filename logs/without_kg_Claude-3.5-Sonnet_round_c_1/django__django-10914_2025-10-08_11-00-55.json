{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/conf/global_settings.py lines 38-38)": "\n# Default file storage permissions mode. None means to use the system default.\n# See https://docs.djangoproject.com/en/stable/ref/settings/#file-upload-permissions\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
    "Location 2 (/root/hy/projects_1/django/django/core/files/storage.py lines 283-284)": "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
    "Location 3 (/root/hy/projects_1/django/django/core/files/uploadedfile.py lines 61-61)": "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
    "Location 4 (/root/hy/projects_1/django/django/core/files/temp.py lines 37-41)": "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
    "Location 5 (/root/hy/projects_1/django/django/core/files/move.py lines 48-71)": "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/conf/global_settings.py lines 38-38)": [
      "\n# Default file storage permissions. Set to None to use the system default.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions. Set to None to use the system default.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions. Set to None to use the system default.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions mode. None means to use the system default.\n# Default umask is 0o022, which means the default permissions for files is 0o644.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions mode. None means to use the system default.\n# See https://docs.djangoproject.com/en/stable/ref/settings/#file-upload-permissions\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions. Set to None to use the system default.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions mode. None means to use the default\n# permissions for files on the system.\nFILE_UPLOAD_PERMISSIONS = 0o644\n",
      "\n# Default file storage permissions mode. None means to use the default of the OS.\nFILE_UPLOAD_PERMISSIONS = 0o644\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/core/files/storage.py lines 283-284)": [
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n",
      "\n        if self.file_permissions_mode is not None:\n            os.chmod(full_path, self.file_permissions_mode)\n"
    ],
    "Location 3 (/root/hy/projects_1/django/django/core/files/uploadedfile.py lines 61-61)": [
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n",
      "\n        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n"
    ],
    "Location 4 (/root/hy/projects_1/django/django/core/files/temp.py lines 37-41)": [
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n",
      "\n        def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n            fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n            self.name = name\n            self.file = os.fdopen(fd, mode, bufsize)\n            self.close_called = False\n"
    ],
    "Location 5 (/root/hy/projects_1/django/django/core/files/move.py lines 48-71)": [
      "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to delete the source file if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n",
      "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n",
      "\n# There's no reason to move if we don't have to.\nif _samefile(old_file_name, new_file_name):\n    return\n\ntry:\n    if not allow_overwrite and os.access(new_file_name, os.F_OK):\n        raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n    os.rename(old_file_name, new_file_name)\n    return\nexcept OSError:\n    # OSError happens with os.rename() if moving to another filesystem or\n    # when moving opened files on certain operating systems.\n    pass\n\n# first open the old file, so that it won't go away\nwith open(old_file_name, 'rb') as old_file:\n    # now open the new file, not forgetting allow_overwrite\n    fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                 (os.O_EXCL if not allow_overwrite else 0)))\n    try:\n        locks.lock(fd, locks.LOCK_EX)\n        current_chunk = None\n        while current_chunk != b'':\n            current_chunk = old_file.read(chunk_size)\n            os.write(fd, current_chunk)\n    finally:\n        locks.unlock(fd)\n        os.close(fd)\n\ntry:\n    copystat(old_file_name, new_file_name)\n",
      "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n",
      "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n",
      "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n",
      "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to delete the file if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n",
      "\ndef file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n    \"\"\"\n    Move a file from one location to another in the safest way possible.\n\n    First, try ``os.rename``, which is simple but will break across filesystems.\n    If that fails, stream manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n    ``FileExistsError``.\n    \"\"\"\n    # There's no reason to move if we don't have to.\n    if _samefile(old_file_name, new_file_name):\n        return\n\n    try:\n        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n\n        os.rename(old_file_name, new_file_name)\n        return\n    except OSError:\n        # OSError happens with os.rename() if moving to another filesystem or\n        # when moving opened files on certain operating systems.\n        pass\n\n    # first open the old file, so that it won't go away\n    with open(old_file_name, 'rb') as old_file:\n        # now open the new file, not forgetting allow_overwrite\n        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n                                     (os.O_EXCL if not allow_overwrite else 0)))\n        try:\n            locks.lock(fd, locks.LOCK_EX)\n            current_chunk = None\n            while current_chunk != b'':\n                current_chunk = old_file.read(chunk_size)\n                os.write(fd, current_chunk)\n        finally:\n            locks.unlock(fd)\n            os.close(fd)\n\n    try:\n        copystat(old_file_name, new_file_name)\n    except PermissionError as e:\n        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n        # the type of the destination filesystem isn't the same as the source\n        # filesystem; ignore that.\n        if e.errno != errno.EPERM:\n            raise\n\n    try:\n        os.remove(old_file_name)\n    except PermissionError as e:\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..ff3bf80f52 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,6 +35,7 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n+\n # https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..040b32c433 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -45,6 +45,7 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if not allow_overwrite and os.access(new_file_name, os.F_OK):\n             raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n \n+\n         os.rename(old_file_name, new_file_name)\n         return\n     except OSError:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_0": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..6bcd92f61a 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,10 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions mode. None means to use the system default.\n+# See https://docs.djangoproject.com/en/stable/ref/settings/#file-upload-permissions\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..ac9738d466 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,16 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_1": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..b8c0af682d 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,9 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions. Set to None to use the system default.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..0d1b2698c2 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,21 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to delete the source file if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_2": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..b8c0af682d 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,9 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions. Set to None to use the system default.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..ac9738d466 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,16 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_3": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..b8c0af682d 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,9 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions. Set to None to use the system default.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..3e2d5cc82a 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -45,30 +45,39 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if not allow_overwrite and os.access(new_file_name, os.F_OK):\n             raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n \n-        os.rename(old_file_name, new_file_name)\n-        return\n-    except OSError:\n-        # OSError happens with os.rename() if moving to another filesystem or\n-        # when moving opened files on certain operating systems.\n-        pass\n-\n-    # first open the old file, so that it won't go away\n-    with open(old_file_name, 'rb') as old_file:\n-        # now open the new file, not forgetting allow_overwrite\n-        fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n-                                     (os.O_EXCL if not allow_overwrite else 0)))\n-        try:\n-            locks.lock(fd, locks.LOCK_EX)\n-            current_chunk = None\n-            while current_chunk != b'':\n-                current_chunk = old_file.read(chunk_size)\n-                os.write(fd, current_chunk)\n-        finally:\n-            locks.unlock(fd)\n-            os.close(fd)\n \n+# There's no reason to move if we don't have to.\n+if _samefile(old_file_name, new_file_name):\n+    return\n+\n+try:\n+    if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+        raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+    os.rename(old_file_name, new_file_name)\n+    return\n+except OSError:\n+    # OSError happens with os.rename() if moving to another filesystem or\n+    # when moving opened files on certain operating systems.\n+    pass\n+\n+# first open the old file, so that it won't go away\n+with open(old_file_name, 'rb') as old_file:\n+    # now open the new file, not forgetting allow_overwrite\n+    fd = os.open(new_file_name, (os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) |\n+                                 (os.O_EXCL if not allow_overwrite else 0)))\n     try:\n-        copystat(old_file_name, new_file_name)\n+        locks.lock(fd, locks.LOCK_EX)\n+        current_chunk = None\n+        while current_chunk != b'':\n+            current_chunk = old_file.read(chunk_size)\n+            os.write(fd, current_chunk)\n+    finally:\n+        locks.unlock(fd)\n+        os.close(fd)\n+\n+try:\n+    copystat(old_file_name, new_file_name)\n     except PermissionError as e:\n         # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n         # the type of the destination filesystem isn't the same as the source\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_4": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..9054740f59 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,10 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions mode. None means to use the system default.\n+# Default umask is 0o022, which means the default permissions for files is 0o644.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..ac9738d466 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,16 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_5": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..6bcd92f61a 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,10 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions mode. None means to use the system default.\n+# See https://docs.djangoproject.com/en/stable/ref/settings/#file-upload-permissions\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..ac9738d466 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,16 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_6": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..b8c0af682d 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,9 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions. Set to None to use the system default.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..ac9738d466 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,16 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_7": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..3f9f029dcd 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,10 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions mode. None means to use the default\n+# permissions for files on the system.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..2a909fba16 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,21 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to delete the file if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n",
    "variant_8": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..6b02997aa6 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -35,7 +35,9 @@ INTERNAL_IPS = []\n ALLOWED_HOSTS = []\n \n # Local time zone for this installation. All choices can be found here:\n-# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+\n+# Default file storage permissions mode. None means to use the default of the OS.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n # systems may support all possibilities). When USE_TZ is True, this is\n # interpreted as the default user time zone.\n TIME_ZONE = 'America/Chicago'\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 2cce7848ca..ac9738d466 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -27,6 +27,25 @@ def _samefile(src, dst):\n             os.path.normcase(os.path.abspath(dst)))\n \n \n+def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n+    \"\"\"\n+    Move a file from one location to another in the safest way possible.\n+\n+    First, try ``os.rename``, which is simple but will break across filesystems.\n+    If that fails, stream manually from one file to another in pure Python.\n+\n+    If the destination file exists and ``allow_overwrite`` is ``False``, raise\n+    ``FileExistsError``.\n+    \"\"\"\n+    # There's no reason to move if we don't have to.\n+    if _samefile(old_file_name, new_file_name):\n+        return\n+\n+    try:\n+        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n+\n+\n def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False):\n     \"\"\"\n     Move a file from one location to another in the safest way possible.\n@@ -76,6 +95,16 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n         if e.errno != errno.EPERM:\n             raise\n \n+    try:\n+        os.remove(old_file_name)\n+    except PermissionError as e:\n+    except PermissionError as e:\n+        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if\n+        # the type of the destination filesystem isn't the same as the source\n+        # filesystem; ignore that.\n+        if e.errno != errno.EPERM:\n+            raise\n+\n     try:\n         os.remove(old_file_name)\n     except PermissionError as e:\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..53ec26b8e5 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -280,6 +280,7 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n+\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\nindex 57a8107b37..848b1900cf 100644\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -34,6 +34,7 @@ if os.name == 'nt':\n         __init__() doesn't support the 'delete', 'buffering', 'encoding', or\n         'newline' keyword arguments.\n         \"\"\"\n+\n         def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None):\n             fd, name = tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)\n             self.name = name\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..8021fc9be4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -58,6 +58,7 @@ class TemporaryUploadedFile(UploadedFile):\n     \"\"\"\n     def __init__(self, name, content_type, size, charset, content_type_extra=None):\n         _, ext = os.path.splitext(name)\n+\n         file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n         super().__init__(file, name, content_type, size, charset, content_type_extra)\n \n"
  }
}