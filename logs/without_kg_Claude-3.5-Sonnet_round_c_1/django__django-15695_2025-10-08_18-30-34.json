{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/migrations/operations/models.py lines 968-985)": "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing swap logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/migrations/operations/models.py lines 968-985)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    model = from_state.apps.get_model(app_label, self.model_name)\n    if not self.allow_migrate_model(schema_editor.connection.alias, model):\n        return\n\n    if self.old_fields:\n        # For unnamed indexes, find the original auto-generated name and rename back\n        to_model = to_state.apps.get_model(app_label, self.model_name)\n        columns = [\n            to_model._meta.get_field(field).column for field in self.old_fields\n        ]\n        matching_index_name = schema_editor._constraint_names(\n            to_model, column_names=columns, index=True\n        )\n        if len(matching_index_name) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of indexes for %s(%s).\"\n                % (\n                    len(matching_index_name),\n                    to_model._meta.db_table,\n                    \", \".join(columns),\n                )\n            )\n        \n        # Create index objects for the rename operation\n        current_index = models.Index(fields=self.old_fields, name=self.new_name)\n        original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n        schema_editor.rename_index(model, current_index, original_index)\n    else:\n        # For named indexes, use the existing swap logic\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n            return\n\n        if self.old_fields:\n            # For unnamed indexes, we need to find the original auto-generated name\n            # and rename back from new_name to that original name\n            to_model = to_state.apps.get_model(app_label, self.model_name)\n            columns = [\n                to_model._meta.get_field(field).column for field in self.old_fields\n            ]\n            matching_index_name = schema_editor._constraint_names(\n                to_model, column_names=columns, index=True\n            )\n            if len(matching_index_name) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of indexes for %s(%s).\"\n                    % (\n                        len(matching_index_name),\n                        to_model._meta.db_table,\n                        \", \".join(columns),\n                    )\n                )\n            \n            # Create index objects for the rename operation\n            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n            schema_editor.rename_index(model, current_index, original_index)\n        else:\n            # For named indexes, use the existing logic\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n\n            self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n            self.new_name_lower, self.old_name_lower = (\n                self.old_name_lower,\n                self.new_name_lower,\n            )\n            self.new_name, self.old_name = self.old_name, self.new_name\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..2a44640495 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing swap logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..ce3a17f59b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,11 +965,37 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n \n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    model = from_state.apps.get_model(app_label, self.model_name)\n+    if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+        return\n+\n+    if self.old_fields:\n+        # For unnamed indexes, find the original auto-generated name and rename back\n+        to_model = to_state.apps.get_model(app_label, self.model_name)\n+        columns = [\n+            to_model._meta.get_field(field).column for field in self.old_fields\n+        ]\n+        matching_index_name = schema_editor._constraint_names(\n+            to_model, column_names=columns, index=True\n+        )\n+        if len(matching_index_name) != 1:\n+            raise ValueError(\n+                \"Found wrong number (%s) of indexes for %s(%s).\"\n+                % (\n+                    len(matching_index_name),\n+                    to_model._meta.db_table,\n+                    \", \".join(columns),\n+                )\n+            )\n+        \n+        # Create index objects for the rename operation\n+        current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+        original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+        schema_editor.rename_index(model, current_index, original_index)\n+    else:\n+        # For named indexes, use the existing swap logic\n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n             self.new_name_lower,\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..be95ef7b7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,24 +965,51 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_fields:\n+            # For unnamed indexes, we need to find the original auto-generated name\n+            # and rename back from new_name to that original name\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            \n+            # Create index objects for the rename operation\n+            current_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            original_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            schema_editor.rename_index(model, current_index, original_index)\n+        else:\n+            # For named indexes, use the existing logic\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n"
  }
}