{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/python.py lines 610-614)": "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. For conditional skipping, use \"\n                \"`pytest.skip(msg='reason', allow_module_level=True)` with an if statement. \"\n                \"Note: pytestmark = pytest.mark.skip won't work if the module contains \"\n                \"syntax incompatible with the current Python version.\"\n            ) from e\n",
    "Location 2 (/root/hy/projects_1/pytest/src/_pytest/outcomes.py lines 123-144)": "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip a module\n        that contains syntax incompatible with the current Python version.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip the entire module with the given message.\n    \n    This is a convenience function equivalent to calling \n    skip(msg, allow_module_level=True). Use this when you need to skip\n    a module that contains syntax incompatible with the current Python version.\n    \n    :param str msg: Message to display when skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
    "Location 3 (/root/hy/projects_1/pytest/src/_pytest/outcomes.py lines 131-133)": "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip\n        a module due to syntax incompatibility (e.g., Python version-specific\n        syntax) or missing dependencies that prevent the module from being\n        imported or executed on certain Python versions.\n",
    "Location 4 (/root/hy/projects_1/pytest/src/_pytest/python.py lines 607-609)": "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module due to Python version compatibility \"\n                \"or missing dependencies, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. To decorate individual test functions, use the \"\n                \"@pytest.mark.skip or @pytest.mark.skipif decorators instead.\"\n            ) from e\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/python.py lines 610-614)": [
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. For test function decoration, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip a module due to syntax incompatibility or other module-level \"\n                \"conditions, use `pytest.skip(reason, allow_module_level=True)` at the \"\n                \"top of the module. To skip individual tests, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use pytest.skip(allow_module_level=True). \"\n                \"To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n"
    ],
    "Location 2 (/root/hy/projects_1/pytest/src/_pytest/outcomes.py lines 123-144)": [
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip a module\n        that contains syntax incompatible with the current Python version.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip the entire module with the given message.\n\n    This is a convenience function equivalent to calling\n    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n    a module that contains syntax incompatible with the current Python version.\n\n    :param str msg: The message to show as reason for skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. This is particularly useful when\n        a module contains syntax that is incompatible with certain Python versions.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to-html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\n@_with_exception(Skipped)\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip the entire module with the given message.\n    \n    This is a convenience function equivalent to calling \n    skip(msg, allow_module_level=True). It's particularly useful when\n    a module contains syntax that is incompatible with certain Python versions.\n    \n    :param str msg: The message to show as reason for skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip a module\n        that contains syntax incompatible with the current Python version.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip an entire module with the given message.\n    \n    This is a convenience function that automatically sets allow_module_level=True.\n    Use this when you need to skip a module that contains syntax incompatible\n    with the current Python version.\n    \n    :param str msg: Message to display when skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip a module\n        that contains syntax incompatible with the current Python version.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip the entire module with the given message.\n    \n    This is a convenience function equivalent to calling \n    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n    a module that contains syntax incompatible with the current Python version.\n    \n    :param str msg: Message to display when skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip a module\n        that contains syntax incompatible with the current Python version.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip a module with the given message.\n\n    This is a convenience function that automatically sets allow_module_level=True.\n    Use this when you need to skip an entire module, typically due to syntax\n    incompatibility with the current Python version or missing dependencies.\n\n    :param str msg: The message to display when skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip an\n        entire module, for example when the module contains syntax that is\n        incompatible with the current Python version.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\n@_with_exception(Skipped)\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip an entire module with the given message.\n\n    This is a convenience function equivalent to calling \n    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n    an entire module, for example when the module contains syntax that is\n    incompatible with the current Python version.\n\n    :param str msg: The message to show as reason for skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip a module\n        that contains syntax incompatible with certain Python versions.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip an entire module with the given message.\n    \n    This is a convenience function equivalent to calling \n    skip(msg, allow_module_level=True). Use this when you need to skip\n    a module that contains syntax incompatible with certain Python versions.\n    \n    :param str msg: Message to display when skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n",
      "\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip a module\n        that contains Python syntax incompatible with the current Python version.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\n\n@_with_exception(Skipped)\ndef skip_module(msg: str = \"\") -> \"NoReturn\":\n    \"\"\"Skip the entire module with the given message.\n    \n    This is a convenience function equivalent to calling\n    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n    a module that contains Python syntax incompatible with the current\n    Python version.\n    \n    :param str msg: Message to display when skipping the module.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=True)\n"
    ],
    "Location 3 (/root/hy/projects_1/pytest/src/_pytest/outcomes.py lines 131-133)": [
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip\n        an entire module due to missing dependencies or Python version\n        compatibility issues (e.g., syntax that's only valid in newer Python\n        versions). This is the correct approach when pytestmark cannot be\n        used due to syntax incompatibilities.\n",
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when skipping modules\n        that contain syntax incompatible with the current Python version,\n        as pytestmark = pytest.mark.skip won't work in such cases since\n        the entire module must be parsed first.\n",
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Set to True when you need to skip\n        an entire module, for example when the module contains syntax that\n        is incompatible with the current Python version.\n",
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip\n        a module due to syntax incompatibility (e.g., Python version-specific\n        syntax that would cause import errors on older Python versions).\n",
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip\n        an entire module due to missing dependencies or incompatible Python\n        syntax (e.g., when a module uses Python 3.8+ syntax but needs to\n        run on older versions).\n",
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip\n        an entire module due to missing dependencies, incompatible Python\n        syntax, or other module-level conditions that prevent execution.\n",
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when skipping modules that\n        contain syntax incompatible with the current Python version, as\n        pytestmark cannot be used in such cases since pytest must parse the\n        entire file.\n",
      "\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False. Use this when you need to skip\n        a module due to missing dependencies or incompatible Python syntax\n        (e.g., when a module uses Python 3.8+ features but needs to run on older versions).\n"
    ],
    "Location 4 (/root/hy/projects_1/pytest/src/_pytest/python.py lines 607-609)": [
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module due to syntax compatibility issues \"\n                \"or similar reasons, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. To decorate individual test functions, use the \"\n                \"@pytest.mark.skip or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip a module due to syntax incompatibility or missing dependencies, \"\n                \"use `pytest.skip(msg='reason', allow_module_level=True)` at the module level. \"\n                \"To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. For individual test functions, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n                \"at the module level, or to decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n                \"at module level, or to skip individual tests use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip a module due to syntax incompatibility with the current Python version, \"\n                \"use `pytest.skip(msg='reason', allow_module_level=True)` at the module level. \"\n                \"Alternatively, to decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module due to syntax incompatibility with older Python versions, \"\n                \"use `pytest.skip(msg='reason', allow_module_level=True)` at the module level. \"\n                \"To decorate a test function, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n",
      "\n        except skip.Exception as e:\n            if e.allow_module_level:\n                raise\n            raise self.CollectError(\n                \"Using pytest.skip outside of a test is not allowed. \"\n                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n                \"at the module level. To conditionally skip tests, use the @pytest.mark.skip \"\n                \"or @pytest.mark.skipif decorators instead.\"\n            ) from e\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..aff6e047c 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -144,6 +145,23 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip an entire module with the given message.\n+    \n+    This is a convenience function that automatically sets allow_module_level=True.\n+    It should be called at module level to skip the rest of the module.\n+    \n+    :param str msg: The message to show when the module is skipped.\n+    \n+    .. versionadded:: 7.5\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..e16960030 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,19 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n+\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n                 \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"or @pytest.mark.skipif decorators instead. \"\n+                \"To skip a module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level, or use `pytestmark = pytest.mark.{skip,skipif}` \"\n+                \"(note: pytestmark only works if the module syntax is compatible with \"\n+                \"all Python versions being tested).\"\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_0": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..cbf6eec16 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip a module\n+        that contains syntax incompatible with the current Python version.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +146,23 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+    \n+    This is a convenience function equivalent to calling \n+    skip(msg, allow_module_level=True). Use this when you need to skip\n+    a module that contains syntax incompatible with the current Python version.\n+    \n+    :param str msg: Message to display when skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..65e525ee7 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,26 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n-                \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"To skip an entire module due to Python version compatibility \"\n+                \"or missing dependencies, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. To decorate individual test functions, use the \"\n+                \"@pytest.mark.skip or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. For conditional skipping, use \"\n+                \"`pytest.skip(msg='reason', allow_module_level=True)` with an if statement. \"\n+                \"Note: pytestmark = pytest.mark.skip won't work if the module contains \"\n+                \"syntax incompatible with the current Python version.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_1": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..44dd72751 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip a module\n+        that contains syntax incompatible with the current Python version.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +146,24 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This is a convenience function equivalent to calling\n+    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n+    a module that contains syntax incompatible with the current Python version.\n+\n+    :param str msg: The message to show as reason for skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..c35c6f1bf 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,24 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n-                \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"To skip an entire module due to syntax compatibility issues \"\n+                \"or similar reasons, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. To decorate individual test functions, use the \"\n+                \"@pytest.mark.skip or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. For test function decoration, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_2": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..9e18c070d 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,14 +131,33 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. This is particularly useful when\n+        a module contains syntax that is incompatible with certain Python versions.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n+        <https://docs.python.org/3/library/how-to-html#doctest.SKIP>`_)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+    \n+    This is a convenience function equivalent to calling \n+    skip(msg, allow_module_level=True). It's particularly useful when\n+    a module contains syntax that is incompatible with certain Python versions.\n+    \n+    :param str msg: The message to show as reason for skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n         to skip a doctest statically.\n     \"\"\"\n     __tracebackhide__ = True\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..c2d1ee2ea 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,24 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip a module due to syntax incompatibility or missing dependencies, \"\n+                \"use `pytest.skip(msg='reason', allow_module_level=True)` at the module level. \"\n                 \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n+                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_3": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..61acaeb9b 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip a module\n+        that contains syntax incompatible with the current Python version.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +146,22 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip an entire module with the given message.\n+    \n+    This is a convenience function that automatically sets allow_module_level=True.\n+    Use this when you need to skip a module that contains syntax incompatible\n+    with the current Python version.\n+    \n+    :param str msg: Message to display when skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..3eb1434e0 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,23 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n-                \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. For individual test functions, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_4": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..271ef19d5 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip a module\n+        that contains syntax incompatible with the current Python version.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +146,22 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+    \n+    This is a convenience function equivalent to calling \n+    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n+    a module that contains syntax incompatible with the current Python version.\n+    \n+    :param str msg: Message to display when skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..f32cde2e8 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,23 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n-                \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n+                \"at the module level, or to decorate a test function, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n+                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_5": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..b68db514d 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip a module\n+        that contains syntax incompatible with the current Python version.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +146,23 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip a module with the given message.\n+\n+    This is a convenience function that automatically sets allow_module_level=True.\n+    Use this when you need to skip an entire module, typically due to syntax\n+    incompatibility with the current Python version or missing dependencies.\n+\n+    :param str msg: The message to display when skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..371687ee8 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,23 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n-                \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n+                \"at module level, or to skip individual tests use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg, allow_module_level=True)` \"\n+                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_6": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..16b87b333 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,9 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip an\n+        entire module, for example when the module contains syntax that is\n+        incompatible with the current Python version.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +147,24 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip an entire module with the given message.\n+\n+    This is a convenience function equivalent to calling \n+    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n+    an entire module, for example when the module contains syntax that is\n+    incompatible with the current Python version.\n+\n+    :param str msg: The message to show as reason for skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..690f030c4 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,24 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n-                \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"To skip a module due to syntax incompatibility with the current Python version, \"\n+                \"use `pytest.skip(msg='reason', allow_module_level=True)` at the module level. \"\n+                \"Alternatively, to decorate a test function, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. To decorate a test function, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_7": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..22aeffd09 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip a module\n+        that contains syntax incompatible with certain Python versions.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +146,23 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip an entire module with the given message.\n+    \n+    This is a convenience function equivalent to calling \n+    skip(msg, allow_module_level=True). Use this when you need to skip\n+    a module that contains syntax incompatible with certain Python versions.\n+    \n+    :param str msg: Message to display when skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..c7e56c957 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,25 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module due to syntax incompatibility with older Python versions, \"\n+                \"use `pytest.skip(msg='reason', allow_module_level=True)` at the module level. \"\n                 \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip a module due to syntax incompatibility or other module-level \"\n+                \"conditions, use `pytest.skip(reason, allow_module_level=True)` at the \"\n+                \"top of the module. To skip individual tests, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n",
    "variant_8": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..427136ae5 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,6 +120,7 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n@@ -130,7 +131,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this when you need to skip a module\n+        that contains Python syntax incompatible with the current Python version.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +146,24 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+    \n+    This is a convenience function equivalent to calling\n+    ``skip(msg, allow_module_level=True)``. Use this when you need to skip\n+    a module that contains Python syntax incompatible with the current\n+    Python version.\n+    \n+    :param str msg: Message to display when skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..48da2c009 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -604,14 +604,23 @@ class Module(nodes.File, PyCollector):\n                 \"Traceback:\\n\"\n                 \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n             ) from e\n+\n         except skip.Exception as e:\n             if e.allow_module_level:\n                 raise\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use `pytest.skip(msg='reason', allow_module_level=True)` \"\n+                \"at the module level. To conditionally skip tests, use the @pytest.mark.skip \"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n+\n+            raise self.CollectError(\n+                \"Using pytest.skip outside of a test is not allowed. \"\n+                \"To skip an entire module, use pytest.skip(allow_module_level=True). \"\n                 \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"or @pytest.mark.skipif decorators instead.\"\n+            ) from e\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n"
  }
}