{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 12-18)": "\nclass Router:\n    def __init__(self):\n        self.target_db = None\n\n    def db_for_read(self, model, **hints):\n        return self.target_db\n\n    db_for_write = db_for_read\n",
    "Location 2 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 37-44)": "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
    "Location 3 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 48-50)": "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_add'),\n                        {'name': 'Foobar: 5th edition'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
    "Location 4 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 60-62)": "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                        {'name': 'Test Book 2: Test more'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
    "Location 5 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 72-74)": "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 12-18)": [
      "\nclass Router:\n    def __init__(self):\n        self.target_db = None\n\n    def db_for_read(self, model, **hints):\n        return self.target_db\n\n    db_for_write = db_for_read\n",
      "\nclass Router:\n    def __init__(self):\n        self._target_db = None\n    \n    def set_target_db(self, db):\n        self._target_db = db\n    \n    def db_for_read(self, model, **hints):\n        return self._target_db\n\n    db_for_write = db_for_read\n",
      "\nclass Router:\n    def __init__(self):\n        self._target_db = None\n    \n    def set_target_db(self, db):\n        self._target_db = db\n    \n    def db_for_read(self, model, **hints):\n        return self._target_db\n\n    db_for_write = db_for_read\n",
      "\nclass Router:\n    def __init__(self):\n        self.target_db = None\n\n    def db_for_read(self, model, **hints):\n        return self.target_db\n\n    db_for_write = db_for_read\n",
      "\nclass Router:\n    def __init__(self):\n        self.target_db = None\n\n    def db_for_read(self, model, **hints):\n        return self.target_db\n\n    db_for_write = db_for_read\n",
      "\nclass Router:\n    def __init__(self):\n        self._target_db = None\n    \n    def set_target_db(self, db):\n        self._target_db = db\n    \n    def db_for_read(self, model, **hints):\n        return self._target_db\n\n    db_for_write = db_for_read\n",
      "\nclass Router:\n    def __init__(self):\n        self._target_db = None\n    \n    @property\n    def target_db(self):\n        return getattr(self._local, 'target_db', None)\n    \n    @target_db.setter\n    def target_db(self, value):\n        if not hasattr(self, '_local'):\n            import threading\n            self._local = threading.local()\n        self._local.target_db = value\n\n    def db_for_read(self, model, **hints):\n        return self.target_db\n\n    db_for_write = db_for_read\n",
      "\nclass Router:\n    def __init__(self):\n        self._target_db = None\n\n    def set_target_db(self, db):\n        self._target_db = db\n\n    def db_for_read(self, model, **hints):\n        return self._target_db\n\n    db_for_write = db_for_read\n"
    ],
    "Location 2 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 37-44)": [
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n",
      "\n    @classmethod\n    def setUpTestData(cls):\n        cls.superusers = {}\n        cls.test_book_ids = {}\n        for db in connections:\n            cls.superusers[db] = User.objects.using(db).create_superuser(\n                username='admin', password='something', email='test@test.org',\n            )\n            b = Book(name='Test Book')\n            b.save(using=db)\n            cls.test_book_ids[db] = b.id\n"
    ],
    "Location 3 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 48-50)": [
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_add'),\n                        {'name': 'Foobar: 5th edition'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_add'),\n                        {'name': 'Foobar: 5th edition'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                # Use context manager to isolate router state per subtest\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_add'),\n                        {'name': 'Foobar: 5th edition'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_add'),\n                        {'name': 'Foobar: 5th edition'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_add'),\n                        {'name': 'Foobar: 5th edition'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_add'),\n                        {'name': 'Foobar: 5th edition'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n        for db in connections:\n            with self.subTest(db=db):\n                with override_settings(DATABASE_ROUTERS=['admin_views.test_multidb.Router']):\n                    with mock.patch.object(Router, 'target_db', db):\n                        self.client.force_login(self.superusers[db])\n                        self.client.post(\n                            reverse('test_adminsite:admin_views_book_add'),\n                            {'name': 'Foobar: 5th edition'},\n                        )\n                        mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_add_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with override_settings(DATABASE_ROUTERS=['admin_views.test_multidb.Router']):\n                    # Use a context manager or explicit database specification instead of global state\n                    original_target_db = getattr(Router, 'target_db', None)\n                    try:\n                        Router.target_db = db\n                        self.client.force_login(self.superusers[db])\n                        self.client.post(\n                            reverse('test_adminsite:admin_views_book_add'),\n                            {'name': 'Foobar: 5th edition'},\n                        )\n                        mock.atomic.assert_called_with(using=db)\n                    finally:\n                        Router.target_db = original_target_db\n"
    ],
    "Location 4 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 60-62)": [
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                # Use context manager to isolate database routing\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                        {'name': 'Test Book 2: Test more'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                    {'name': 'Test Book 2: Test more'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                        {'name': 'Test Book 2: Test more'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with override_settings(DATABASE_ROUTERS=['admin_views.test_multidb.Router']):\n                    with mock.patch.object(Router, 'target_db', db):\n                        self.client.force_login(self.superusers[db])\n                        self.client.post(\n                            reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                            {'name': 'Test Book 2: Test more'},\n                        )\n                        mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                        {'name': 'Test Book 2: Test more'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                        {'name': 'Test Book 2: Test more'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n        for db in connections:\n            with self.subTest(db=db):\n                with override_settings(DATABASE_ROUTING={'default': db}):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                        {'name': 'Test Book 2: Test more'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_change_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                with mock.patch.object(Router, 'target_db', db):\n                    self.client.force_login(self.superusers[db])\n                    self.client.post(\n                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                        {'name': 'Test Book 2: Test more'},\n                    )\n                    mock.atomic.assert_called_with(using=db)\n"
    ],
    "Location 5 (/root/hy/projects_1/django/tests/admin_views/test_multidb.py lines 72-74)": [
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n",
      "\n    @mock.patch('django.contrib.admin.options.transaction')\n    def test_delete_view(self, mock):\n        for db in connections:\n            with self.subTest(db=db):\n                self.client.force_login(self.superusers[db])\n                self.client.post(\n                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n                    {'post': 'yes'},\n                )\n                mock.atomic.assert_called_with(using=db)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..880a3db757 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,11 +9,14 @@ from django.urls import path, reverse\n from .models import Book\n \n \n+\n+import threading\n+\n class Router:\n-    target_db = None\n+    _local = threading.local()\n \n     def db_for_read(self, model, **hints):\n-        return self.target_db\n+        return getattr(self._local, 'target_db', None)\n \n     db_for_write = db_for_read\n \n@@ -34,10 +37,11 @@ class MultiDatabaseTests(TestCase):\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n+\n         for db in connections:\n-            Router.target_db = db\n             cls.superusers[db] = User.objects.create_superuser(\n                 username='admin', password='something', email='test@test.org',\n+                using=db\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n@@ -45,9 +49,10 @@ class MultiDatabaseTests(TestCase):\n \n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n+\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                Router._local.target_db = db\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -57,9 +62,10 @@ class MultiDatabaseTests(TestCase):\n \n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n+\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                Router._local.target_db = db\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -69,9 +75,10 @@ class MultiDatabaseTests(TestCase):\n \n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n+\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                Router._local.target_db = db\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_0": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..989124b222 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,8 +9,10 @@ from django.urls import path, reverse\n from .models import Book\n \n \n+\n class Router:\n-    target_db = None\n+    def __init__(self):\n+        self.target_db = None\n \n     def db_for_read(self, model, **hints):\n         return self.target_db\n@@ -30,24 +32,37 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_add'),\n+                        {'name': 'Foobar: 5th edition'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,11 +70,20 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                        {'name': 'Test Book 2: Test more'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +91,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_1": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..9e57fbed94 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,8 +9,10 @@ from django.urls import path, reverse\n from .models import Book\n \n \n+\n class Router:\n-    target_db = None\n+    def __init__(self):\n+        self.target_db = None\n \n     def db_for_read(self, model, **hints):\n         return self.target_db\n@@ -30,24 +32,37 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_add'),\n+                        {'name': 'Foobar: 5th edition'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,11 +70,21 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                # Use context manager to isolate database routing\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                        {'name': 'Test Book 2: Test more'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +92,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_2": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..7b37725da7 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,11 +9,16 @@ from django.urls import path, reverse\n from .models import Book\n \n \n-class Router:\n-    target_db = None\n \n+class Router:\n+    def __init__(self):\n+        self._target_db = None\n+    \n+    def set_target_db(self, db):\n+        self._target_db = db\n+    \n     def db_for_read(self, model, **hints):\n-        return self.target_db\n+        return self._target_db\n \n     db_for_write = db_for_read\n \n@@ -30,24 +35,37 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_add'),\n+                        {'name': 'Foobar: 5th edition'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,23 +73,39 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n                     {'name': 'Test Book 2: Test more'},\n                 )\n                 mock.atomic.assert_called_with(using=db)\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                    {'name': 'Test Book 2: Test more'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n+\n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n \n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_3": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..ef06c6249e 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,11 +9,16 @@ from django.urls import path, reverse\n from .models import Book\n \n \n-class Router:\n-    target_db = None\n \n+class Router:\n+    def __init__(self):\n+        self._target_db = None\n+    \n+    def set_target_db(self, db):\n+        self._target_db = db\n+    \n     def db_for_read(self, model, **hints):\n-        return self.target_db\n+        return self._target_db\n \n     db_for_write = db_for_read\n \n@@ -30,24 +35,38 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                # Use context manager to isolate router state per subtest\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_add'),\n+                        {'name': 'Foobar: 5th edition'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,11 +74,20 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                        {'name': 'Test Book 2: Test more'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +95,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_4": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..1331e0df7d 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,8 +9,10 @@ from django.urls import path, reverse\n from .models import Book\n \n \n+\n class Router:\n-    target_db = None\n+    def __init__(self):\n+        self.target_db = None\n \n     def db_for_read(self, model, **hints):\n         return self.target_db\n@@ -30,24 +32,37 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_add'),\n+                        {'name': 'Foobar: 5th edition'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,11 +70,21 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with override_settings(DATABASE_ROUTERS=['admin_views.test_multidb.Router']):\n+                    with mock.patch.object(Router, 'target_db', db):\n+                        self.client.force_login(self.superusers[db])\n+                        self.client.post(\n+                            reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                            {'name': 'Test Book 2: Test more'},\n+                        )\n+                        mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +92,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_5": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..989124b222 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,8 +9,10 @@ from django.urls import path, reverse\n from .models import Book\n \n \n+\n class Router:\n-    target_db = None\n+    def __init__(self):\n+        self.target_db = None\n \n     def db_for_read(self, model, **hints):\n         return self.target_db\n@@ -30,24 +32,37 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_add'),\n+                        {'name': 'Foobar: 5th edition'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,11 +70,20 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                        {'name': 'Test Book 2: Test more'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +91,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_6": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..bebad92ad5 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,11 +9,16 @@ from django.urls import path, reverse\n from .models import Book\n \n \n-class Router:\n-    target_db = None\n \n+class Router:\n+    def __init__(self):\n+        self._target_db = None\n+    \n+    def set_target_db(self, db):\n+        self._target_db = db\n+    \n     def db_for_read(self, model, **hints):\n-        return self.target_db\n+        return self._target_db\n \n     db_for_write = db_for_read\n \n@@ -30,24 +35,37 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_add'),\n+                        {'name': 'Foobar: 5th edition'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,11 +73,20 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                        {'name': 'Test Book 2: Test more'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +94,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_7": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..63dd05a8de 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,8 +9,21 @@ from django.urls import path, reverse\n from .models import Book\n \n \n+\n class Router:\n-    target_db = None\n+    def __init__(self):\n+        self._target_db = None\n+    \n+    @property\n+    def target_db(self):\n+        return getattr(self._local, 'target_db', None)\n+    \n+    @target_db.setter\n+    def target_db(self, value):\n+        if not hasattr(self, '_local'):\n+            import threading\n+            self._local = threading.local()\n+        self._local.target_db = value\n \n     def db_for_read(self, model, **hints):\n         return self.target_db\n@@ -30,13 +43,17 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n@@ -45,9 +62,17 @@ class MultiDatabaseTests(TestCase):\n \n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n+\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with override_settings(DATABASE_ROUTERS=['admin_views.test_multidb.Router']):\n+                    with mock.patch.object(Router, 'target_db', db):\n+                        self.client.force_login(self.superusers[db])\n+                        self.client.post(\n+                            reverse('test_adminsite:admin_views_book_add'),\n+                            {'name': 'Foobar: 5th edition'},\n+                        )\n+                        mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -57,9 +82,16 @@ class MultiDatabaseTests(TestCase):\n \n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n+\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with override_settings(DATABASE_ROUTING={'default': db}):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                        {'name': 'Test Book 2: Test more'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +99,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n",
    "variant_8": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex a02b637d34..2aabb64c4d 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -9,11 +9,16 @@ from django.urls import path, reverse\n from .models import Book\n \n \n+\n class Router:\n-    target_db = None\n+    def __init__(self):\n+        self._target_db = None\n+\n+    def set_target_db(self, db):\n+        self._target_db = db\n \n     def db_for_read(self, model, **hints):\n-        return self.target_db\n+        return self._target_db\n \n     db_for_write = db_for_read\n \n@@ -30,24 +35,43 @@ urlpatterns = [\n class MultiDatabaseTests(TestCase):\n     databases = {'default', 'other'}\n \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superusers = {}\n+        cls.test_book_ids = {}\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.superusers = {}\n         cls.test_book_ids = {}\n         for db in connections:\n-            Router.target_db = db\n-            cls.superusers[db] = User.objects.create_superuser(\n+            cls.superusers[db] = User.objects.using(db).create_superuser(\n                 username='admin', password='something', email='test@test.org',\n             )\n             b = Book(name='Test Book')\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_add_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_add_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with override_settings(DATABASE_ROUTERS=['admin_views.test_multidb.Router']):\n+                    # Use a context manager or explicit database specification instead of global state\n+                    original_target_db = getattr(Router, 'target_db', None)\n+                    try:\n+                        Router.target_db = db\n+                        self.client.force_login(self.superusers[db])\n+                        self.client.post(\n+                            reverse('test_adminsite:admin_views_book_add'),\n+                            {'name': 'Foobar: 5th edition'},\n+                        )\n+                        mock.atomic.assert_called_with(using=db)\n+                    finally:\n+                        Router.target_db = original_target_db\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_add'),\n@@ -55,11 +79,20 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_change_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_change_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                with mock.patch.object(Router, 'target_db', db):\n+                    self.client.force_login(self.superusers[db])\n+                    self.client.post(\n+                        reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n+                        {'name': 'Test Book 2: Test more'},\n+                    )\n+                    mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_change', args=[self.test_book_ids[db]]),\n@@ -67,11 +100,19 @@ class MultiDatabaseTests(TestCase):\n                 )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch('django.contrib.admin.options.transaction')\n+    def test_delete_view(self, mock):\n+\n     @mock.patch('django.contrib.admin.options.transaction')\n     def test_delete_view(self, mock):\n         for db in connections:\n             with self.subTest(db=db):\n-                Router.target_db = db\n+                self.client.force_login(self.superusers[db])\n+                self.client.post(\n+                    reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n+                    {'post': 'yes'},\n+                )\n+                mock.atomic.assert_called_with(using=db)\n                 self.client.force_login(self.superusers[db])\n                 self.client.post(\n                     reverse('test_adminsite:admin_views_book_delete', args=[self.test_book_ids[db]]),\n"
  }
}