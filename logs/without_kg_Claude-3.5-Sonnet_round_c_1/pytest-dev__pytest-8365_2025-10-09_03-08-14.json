{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/tmpdir.py lines 114-118)": "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to ensure valid directory names\n            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n            rootdir.mkdir(exist_ok=True)\n",
    "Location 2 (/root/hy/projects_1/pytest/src/_pytest/tmpdir.py lines 151-159)": "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory creation by replacing illegal characters\n        if username:\n            # Replace characters that are illegal in directory names with underscores\n            illegal_chars = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|']\n            for char in illegal_chars:\n                username = username.replace(char, '_')\n        return username\n    except (ImportError, KeyError):\n        return None\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/tmpdir.py lines 114-118)": [
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to avoid illegal characters in directory names\n            user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to ensure valid directory names\n            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to ensure valid directory names\n            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to ensure valid directory names\n            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to ensure valid directory names\n            user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to ensure valid directory names\n            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n            rootdir.mkdir(exist_ok=True)\n",
      "\n        user = get_user() or \"unknown\"\n        # Sanitize username to remove characters that are illegal in directory names\n        import re\n        user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n        # use a sub-directory in the temproot to speed-up\n        # make_numbered_dir() call\n        rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n        rootdir.mkdir(exist_ok=True)\n",
      "\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize username to remove illegal characters for directory names\n            user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n"
    ],
    "Location 2 (/root/hy/projects_1/pytest/src/_pytest/tmpdir.py lines 151-159)": [
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        # Sanitize username for use in directory paths by replacing illegal characters\n        if username:\n            # Replace characters that are illegal in directory names with underscores\n            illegal_chars = r'[<>:\"/\\\\|?*]'\n            username = re.sub(illegal_chars, '_', username)\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        # Sanitize username for use in directory paths by replacing\n        # characters that are illegal in directory names\n        if username:\n            # Replace backslashes and other illegal characters with underscores\n            illegal_chars = r'[\\\\/:*?\"<>|]'\n            username = re.sub(illegal_chars, '_', username)\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        # Sanitize username for use in directory paths by replacing illegal characters\n        if username:\n            # Replace characters that are illegal in directory names with underscores\n            illegal_chars = r'[<>:\"/\\\\|?*]'\n            username = re.sub(illegal_chars, '_', username)\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        # Sanitize username for use in directory paths\n        # Replace characters that are invalid in directory names\n        if username:\n            # Replace backslashes and other problematic characters with underscores\n            username = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        if username is not None:\n            # Sanitize username for directory creation by replacing illegal characters\n            # Replace common illegal filesystem characters with underscores\n            illegal_chars = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|']\n            for char in illegal_chars:\n                username = username.replace(char, '_')\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        # Sanitize username to remove characters that are illegal in directory names\n        if username:\n            # Replace illegal characters with underscores\n            illegal_chars = r'[<>:\"/\\\\|?*]'\n            username = re.sub(illegal_chars, '_', username)\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        # Sanitize username for use in directory paths by replacing illegal characters\n        if username:\n            # Replace characters that are illegal in directory names with underscores\n            illegal_chars = r'[<>:\"/\\\\|?*]'\n            username = re.sub(illegal_chars, '_', username)\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef getbasetemp(self) -> Path:\n    \"\"\"Return base temporary directory.\"\"\"\n    if self._basetemp is not None:\n        return self._basetemp\n\n    if self._given_basetemp is not None:\n        basetemp = self._given_basetemp\n        ensure_reset_dir(basetemp)\n        basetemp = basetemp.resolve()\n    else:\n        from_env = os.environ.get(\"PYTEST_CURRENT_TEST\")\n        if from_env:\n            # sanitize the from_env value since it might contain invalid chars\n            from_env = re.sub(r'[<>:\"/\\\\|?*]', '_', from_env)\n        else:\n            # sanitize the username to ensure valid directory names\n            user = get_user()\n            if user:\n                user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n            from_env = user\n        temproot = Path(tempfile.gettempdir()).resolve()\n        user = from_env or \"unknown\"\n        # ensure that even the final user value is sanitized\n        user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n        rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n        try:\n            rootdir.mkdir(exist_ok=True)\n        except OSError:\n            # getuser() likely returned illegal characters for the platform, use unknown back-off\n            rootdir = temproot.joinpath(\"pytest-of-unknown\")\n            rootdir.mkdir(exist_ok=True)\n        basetemp = make_numbered_dir_with_cleanup(\n            prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n        )\n    assert basetemp is not None, basetemp\n    self._basetemp = basetemp\n    return self._basetemp\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..0aa32e498 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,7 +111,11 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n             user = get_user() or \"unknown\"\n+            # Sanitize username to remove characters that are illegal for directory names\n+            # Replace characters like \\, /, :, *, ?, \", <, >, | with underscores\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,6 +152,7 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n",
    "variant_0": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..295cf4c44 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,9 +120,11 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to ensure valid directory names\n+            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +158,21 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username for directory creation by replacing illegal characters\n+        if username:\n+            # Replace characters that are illegal in directory names with underscores\n+            illegal_chars = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|']\n+            for char in illegal_chars:\n+                username = username.replace(char, '_')\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_1": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..c7c38732f 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to avoid illegal characters in directory names\n+            user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,20 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username for use in directory paths by replacing illegal characters\n+        if username:\n+            # Replace characters that are illegal in directory names with underscores\n+            illegal_chars = r'[<>:\"/\\\\|?*]'\n+            username = re.sub(illegal_chars, '_', username)\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_2": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..e1b34328b 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,9 +120,11 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to ensure valid directory names\n+            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +158,21 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username for use in directory paths by replacing\n+        # characters that are illegal in directory names\n+        if username:\n+            # Replace backslashes and other illegal characters with underscores\n+            illegal_chars = r'[\\\\/:*?\"<>|]'\n+            username = re.sub(illegal_chars, '_', username)\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_3": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..ad4b20300 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,9 +120,11 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to ensure valid directory names\n+            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +158,20 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username for use in directory paths by replacing illegal characters\n+        if username:\n+            # Replace characters that are illegal in directory names with underscores\n+            illegal_chars = r'[<>:\"/\\\\|?*]'\n+            username = re.sub(illegal_chars, '_', username)\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_4": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..77d12c58f 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,9 +120,11 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to ensure valid directory names\n+            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +158,20 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username for use in directory paths\n+        # Replace characters that are invalid in directory names\n+        if username:\n+            # Replace backslashes and other problematic characters with underscores\n+            username = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_5": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..e5b42ffd9 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to ensure valid directory names\n+            user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,13 +158,21 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        if username is not None:\n+            # Sanitize username for directory creation by replacing illegal characters\n+            # Replace common illegal filesystem characters with underscores\n+            illegal_chars = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|']\n+            for char in illegal_chars:\n+                username = username.replace(char, '_')\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_6": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..e92ce2a07 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,9 +120,11 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to ensure valid directory names\n+            safe_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+            rootdir = temproot.joinpath(f\"pytest-of-{safe_user}\")\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +158,20 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username to remove characters that are illegal in directory names\n+        if username:\n+            # Replace illegal characters with underscores\n+            illegal_chars = r'[<>:\"/\\\\|?*]'\n+            username = re.sub(illegal_chars, '_', username)\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_7": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..dd7b510f8 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,11 +111,15 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n-            rootdir.mkdir(exist_ok=True)\n+\n+        user = get_user() or \"unknown\"\n+        # Sanitize username to remove characters that are illegal in directory names\n+        import re\n+        user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n+        # use a sub-directory in the temproot to speed-up\n+        # make_numbered_dir() call\n+        rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+        rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n             )\n@@ -148,13 +152,20 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Sanitize username for use in directory paths by replacing illegal characters\n+        if username:\n+            # Replace characters that are illegal in directory names with underscores\n+            illegal_chars = r'[<>:\"/\\\\|?*]'\n+            username = re.sub(illegal_chars, '_', username)\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_8": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..aff247f7c 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -104,6 +104,14 @@ class TempPathFactory:\n         if self._basetemp is not None:\n             return self._basetemp\n \n+        if self._given_basetemp is not None:\n+            basetemp = self._given_basetemp\n+            ensure_reset_dir(basetemp)\n+            basetemp = basetemp.resolve()\n+        else:\n+            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n+            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n             ensure_reset_dir(basetemp)\n@@ -112,6 +120,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize username to remove illegal characters for directory names\n+            user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,15 +158,44 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n-def get_user() -> Optional[str]:\n-    \"\"\"Return the current user name, or None if getuser() does not work\n-    in the current environment (see #1010).\"\"\"\n-    import getpass\n \n-    try:\n-        return getpass.getuser()\n-    except (ImportError, KeyError):\n-        return None\n+def getbasetemp(self) -> Path:\n+    \"\"\"Return base temporary directory.\"\"\"\n+    if self._basetemp is not None:\n+        return self._basetemp\n+\n+    if self._given_basetemp is not None:\n+        basetemp = self._given_basetemp\n+        ensure_reset_dir(basetemp)\n+        basetemp = basetemp.resolve()\n+    else:\n+        from_env = os.environ.get(\"PYTEST_CURRENT_TEST\")\n+        if from_env:\n+            # sanitize the from_env value since it might contain invalid chars\n+            from_env = re.sub(r'[<>:\"/\\\\|?*]', '_', from_env)\n+        else:\n+            # sanitize the username to ensure valid directory names\n+            user = get_user()\n+            if user:\n+                user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n+            from_env = user\n+        temproot = Path(tempfile.gettempdir()).resolve()\n+        user = from_env or \"unknown\"\n+        # ensure that even the final user value is sanitized\n+        user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n+        rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+        try:\n+            rootdir.mkdir(exist_ok=True)\n+        except OSError:\n+            # getuser() likely returned illegal characters for the platform, use unknown back-off\n+            rootdir = temproot.joinpath(\"pytest-of-unknown\")\n+            rootdir.mkdir(exist_ok=True)\n+        basetemp = make_numbered_dir_with_cleanup(\n+            prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n+        )\n+    assert basetemp is not None, basetemp\n+    self._basetemp = basetemp\n+    return self._basetemp\n \n \n def pytest_configure(config: Config) -> None:\n"
  }
}