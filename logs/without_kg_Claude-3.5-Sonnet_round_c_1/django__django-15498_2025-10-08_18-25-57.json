{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/views/static.py lines 114-140)": "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
    "Location 2 (/root/hy/projects_1/django/django/views/static.py lines 125-135)": "\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/views/static.py lines 114-140)": [
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/views/static.py lines 125-135)": [
      "\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\ndef was_modified_since(header=None, mtime=0, size=0):\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date_safe(matches[1])\n        if header_mtime is None:\n            raise ValueError\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n",
      "\n    \"\"\"\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    \"\"\"\n    try:\n        if header is None or header == \"\":\n            raise ValueError\n        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n        if not matches or not matches[1].strip():\n            raise ValueError\n        header_mtime = parse_http_date(matches[1])\n        header_len = matches[3]\n        if header_len and int(header_len) != size:\n            raise ValueError\n        if int(mtime) > header_mtime:\n            raise ValueError\n    except (AttributeError, ValueError, OverflowError):\n        return True\n    return False\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..0f1449117c 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,10 +127,15 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n-        header_mtime = parse_http_date(matches[1])\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        from django.utils.http import parse_http_date_safe\n+        header_mtime = parse_http_date_safe(matches[1])\n+        if header_mtime is None:\n+            raise ValueError\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n             raise ValueError\n@@ -137,4 +143,10 @@ def was_modified_since(header=None, mtime=0, size=0):\n             raise ValueError\n     except (AttributeError, ValueError, OverflowError):\n         return True\n+    return False\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n     return False\n",
    "variant_0": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..aefbb26054 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -137,4 +140,22 @@ def was_modified_since(header=None, mtime=0, size=0):\n             raise ValueError\n     except (AttributeError, ValueError, OverflowError):\n         return True\n+    return False\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n     return False\n",
    "variant_1": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..0dc9ebde67 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,24 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n",
    "variant_2": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..0ca15b3f82 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -138,3 +141,22 @@ def was_modified_since(header=None, mtime=0, size=0):\n     except (AttributeError, ValueError, OverflowError):\n         return True\n     return False\n+        if header is None or header == \"\":\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n",
    "variant_3": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..0ca15b3f82 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -138,3 +141,22 @@ def was_modified_since(header=None, mtime=0, size=0):\n     except (AttributeError, ValueError, OverflowError):\n         return True\n     return False\n+        if header is None or header == \"\":\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n",
    "variant_4": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..0ca15b3f82 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -138,3 +141,22 @@ def was_modified_since(header=None, mtime=0, size=0):\n     except (AttributeError, ValueError, OverflowError):\n         return True\n     return False\n+        if header is None or header == \"\":\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n",
    "variant_5": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..aefbb26054 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -137,4 +140,22 @@ def was_modified_since(header=None, mtime=0, size=0):\n             raise ValueError\n     except (AttributeError, ValueError, OverflowError):\n         return True\n+    return False\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n     return False\n",
    "variant_6": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..0ca15b3f82 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -138,3 +141,22 @@ def was_modified_since(header=None, mtime=0, size=0):\n     except (AttributeError, ValueError, OverflowError):\n         return True\n     return False\n+        if header is None or header == \"\":\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n",
    "variant_7": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..991fb3d64d 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -138,3 +141,24 @@ def was_modified_since(header=None, mtime=0, size=0):\n     except (AttributeError, ValueError, OverflowError):\n         return True\n     return False\n+        if header is None or header == \"\":\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date_safe(matches[1])\n+        if header_mtime is None:\n+            raise ValueError\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n",
    "variant_8": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..aefbb26054 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -111,6 +111,7 @@ def directory_index(path, fullpath):\n     return HttpResponse(t.render(c))\n \n \n+\n def was_modified_since(header=None, mtime=0, size=0):\n     \"\"\"\n     Was something modified since the user last downloaded it?\n@@ -126,9 +127,11 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == \"\":\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n@@ -137,4 +140,22 @@ def was_modified_since(header=None, mtime=0, size=0):\n             raise ValueError\n     except (AttributeError, ValueError, OverflowError):\n         return True\n+    return False\n+            raise ValueError\n+        matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if not matches or not matches[1].strip():\n+            raise ValueError\n+        header_mtime = parse_http_date(matches[1])\n+        header_len = matches[3]\n+        if header_len and int(header_len) != size:\n+            raise ValueError\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n+    return False\n+        if int(mtime) > header_mtime:\n+            raise ValueError\n+    except (AttributeError, ValueError, OverflowError):\n+        return True\n     return False\n"
  }
}