{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 84-86)": "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
    "Location 2 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 129-135)": "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
    "Location 3 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 268-276)": "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
    "Location 4 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 277-285)": "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
    "Location 5 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 260-265)": "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 84-86)": [
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n"
    ],
    "Location 2 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 129-135)": [
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\n                explanation = _diff_text(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n",
      "\ndef issequence(x):\n    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n"
    ],
    "Location 3 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 268-276)": [
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n",
      "\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            if isinstance(left, bytes):\n                extra = saferepr(left[len_right:len_right+1])\n            else:\n                extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            if isinstance(right, bytes):\n                extra = saferepr(right[len_left:len_left+1])\n            else:\n                extra = saferepr(right[len_left])\n"
    ],
    "Location 4 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 277-285)": [
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n",
      "\n        if len_diff == 1:\n            explanation += [\n                \"{} contains one more item: {}\".format(dir_with_more, extra)\n            ]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n"
    ],
    "Location 5 (/root/hy/projects_1/pytest/src/_pytest/assertion/util.py lines 260-265)": [
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n",
      "\ndef _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if isinstance(left, bytes):\n                left_item = left[i:i+1]\n                right_item = right[i:i+1]\n            else:\n                left_item = left[i]\n                right_item = right[i]\n            explanation += [\n                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n            ]\n            break\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..278205c2a 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,6 +126,7 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n+\n                 explanation = _diff_text(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n@@ -257,22 +258,36 @@ def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n+\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_0": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_1": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_2": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_3": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_4": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_5": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..03407b56a 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,6 +126,7 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n+\n                 explanation = _diff_text(left, right, verbose)\n             else:\n                 if issequence(left) and issequence(right):\n@@ -253,26 +254,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_6": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_7": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n",
    "variant_8": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..f39a9a4f2 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -81,9 +81,9 @@ def _format_lines(lines):\n     return result\n \n \n-def issequence(x):\n-    return isinstance(x, Sequence) and not isinstance(x, str)\n \n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n \n def istext(x):\n     return isinstance(x, str)\n@@ -126,13 +126,9 @@ def assertrepr_compare(config, op, left, right):\n     try:\n         if op == \"==\":\n             if istext(left) and istext(right):\n-                explanation = _diff_text(left, right, verbose)\n-            else:\n-                if issequence(left) and issequence(right):\n-                    explanation = _compare_eq_sequence(left, right, verbose)\n-                elif isset(left) and isset(right):\n-                    explanation = _compare_eq_set(left, right, verbose)\n-                elif isdict(left) and isdict(right):\n+\n+def issequence(x):\n+    return isinstance(x, Sequence) and not isinstance(x, (str, bytes))\n                     explanation = _compare_eq_dict(left, right, verbose)\n                 elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                     type_fn = (isdatacls, isattrs)\n@@ -253,26 +249,44 @@ def _compare_eq_iterable(left, right, verbose=0):\n     return explanation\n \n \n+def _compare_eq_sequence(left, right, verbose=0):\n+    explanation = []\n+    len_left = len(left)\n+    len_right = len(right)\n+\n def _compare_eq_sequence(left, right, verbose=0):\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n+            if isinstance(left, bytes):\n+                left_item = left[i:i+1]\n+                right_item = right[i:i+1]\n+            else:\n+                left_item = left[i]\n+                right_item = right[i]\n             explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                \"At index {} diff: {!r} != {!r}\".format(i, left_item, right_item)\n             ]\n             break\n     len_diff = len_left - len_right\n \n+\n     if len_diff:\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n-            extra = saferepr(left[len_right])\n+            if isinstance(left, bytes):\n+                extra = saferepr(left[len_right:len_right+1])\n+            else:\n+                extra = saferepr(left[len_right])\n         else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n-            extra = saferepr(right[len_left])\n+            if isinstance(right, bytes):\n+                extra = saferepr(right[len_left:len_left+1])\n+            else:\n+                extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n             explanation += [\n"
  }
}