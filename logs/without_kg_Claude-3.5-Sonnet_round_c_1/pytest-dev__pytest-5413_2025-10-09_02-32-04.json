{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/python_api.py lines 709-728)": "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/python_api.py lines 709-728)": [
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n",
      "\nclass RaisesContext:\n    def __init__(self, expected_exception, message, match_expr):\n        self.expected_exception = expected_exception\n        self.message = message\n        self.match_expr = match_expr\n        self.excinfo = None\n\n    def __enter__(self):\n        self.excinfo = _pytest._code.ExceptionInfo.for_later()\n        return self.excinfo\n\n    def __exit__(self, *tp):\n        __tracebackhide__ = True\n        if tp[0] is None:\n            fail(self.message)\n        self.excinfo.__init__(tp)\n        suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n        if self.match_expr is not None and suppress_exception:\n            self.excinfo.match(self.match_expr)\n        return suppress_exception\n\n    def __str__(self):\n        if self.excinfo is not None and self.excinfo.value is not None:\n            return str(self.excinfo.value)\n        return super().__str__()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_0": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_1": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_2": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_3": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_4": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_5": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_6": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_7": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n",
    "variant_8": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..57f9cfa90 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -706,6 +706,7 @@ def raises(expected_exception, *args, **kwargs):\n raises.Exception = fail.Exception\n \n \n+\n class RaisesContext:\n     def __init__(self, expected_exception, message, match_expr):\n         self.expected_exception = expected_exception\n@@ -726,3 +727,8 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        if self.excinfo is not None and self.excinfo.value is not None:\n+            return str(self.excinfo.value)\n+        return super().__str__()\n"
  }
}