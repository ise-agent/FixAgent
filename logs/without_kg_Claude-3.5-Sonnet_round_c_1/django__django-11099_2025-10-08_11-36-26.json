{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/auth/validators.py lines 10-10)": "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
    "Location 2 (/root/hy/projects_1/django/django/contrib/auth/validators.py lines 20-20)": "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/auth/validators.py lines 10-10)": [
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n",
      "\n@deconstructible\nclass ASCIIUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = re.ASCII\n\n\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/contrib/auth/validators.py lines 20-20)": [
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n",
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n",
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n",
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n",
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n",
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n",
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n",
      "\n@deconstructible\nclass UnicodeUsernameValidator(validators.RegexValidator):\n    regex = r'\\A[\\w.@+-]+\\Z'\n    message = _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    flags = 0\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..f8d8fec519 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,8 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +18,8 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_0": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_1": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_2": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_3": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_4": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_5": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_6": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_7": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "variant_8": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..ea037c6d44 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,20 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class ASCIIUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only English letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = re.ASCII\n+\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +30,15 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+\n+@deconstructible\n+class UnicodeUsernameValidator(validators.RegexValidator):\n+    regex = r'\\A[\\w.@+-]+\\Z'\n+    message = _(\n+        'Enter a valid username. This value may contain only letters, '\n+        'numbers, and @/./+/-/_ characters.'\n+    )\n+    flags = 0\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n"
  }
}