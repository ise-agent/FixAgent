{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/admin/options.py lines 2040-2043)": "\n    def __init__(self, parent_model, admin_site):\n        self.admin_site = admin_site\n        self.parent_model = parent_model\n        self.opts = self.model._meta\n        self.has_registered_model = admin_site.is_registered(self.model)\n        super().__init__()\n        \n        # Check if a custom verbose_name was provided at the class level\n        custom_verbose_name_provided = self.__class__.verbose_name is not None\n        \n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            if custom_verbose_name_provided:\n                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n            else:\n                # Fall back to model's verbose_name_plural when no custom verbose_name\n                self.verbose_name_plural = self.model._meta.verbose_name_plural\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/admin/options.py lines 2040-2043)": [
      "\ndef __init__(self, parent_model, admin_site):\n    self.admin_site = admin_site\n    self.parent_model = parent_model\n    self.opts = self.model._meta\n    self.has_registered_model = admin_site.is_registered(self.model)\n    super().__init__()\n    \n    # Check if a custom verbose_name was provided at the class level\n    custom_verbose_name_provided = self.__class__.verbose_name is not None\n    \n    if self.verbose_name is None:\n        self.verbose_name = self.model._meta.verbose_name\n    if self.verbose_name_plural is None:\n        if custom_verbose_name_provided:\n            # Auto-derive plural from custom verbose_name (same as Django model Meta)\n            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n        else:\n            # Fall back to model's verbose_name_plural when no custom verbose_name\n            self.verbose_name_plural = self.model._meta.verbose_name_plural\n",
      "\n        # Check if a custom verbose_name was provided at the class level\n        custom_verbose_name_provided = self.__class__.verbose_name is not None\n        \n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            if custom_verbose_name_provided:\n                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n            else:\n                # Fall back to model's verbose_name_plural when no custom verbose_name\n                self.verbose_name_plural = self.model._meta.verbose_name_plural\n",
      "\n    def __init__(self, parent_model, admin_site):\n        self.admin_site = admin_site\n        self.parent_model = parent_model\n        self.opts = self.model._meta\n        self.has_registered_model = admin_site.is_registered(self.model)\n        super().__init__()\n        \n        # Check if a custom verbose_name was provided at the class level\n        custom_verbose_name_provided = self.__class__.verbose_name is not None\n        \n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            if custom_verbose_name_provided:\n                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n            else:\n                # Fall back to model's verbose_name_plural when no custom verbose_name\n                self.verbose_name_plural = self.model._meta.verbose_name_plural\n",
      "\n    def __init__(self, parent_model, admin_site):\n        self.admin_site = admin_site\n        self.parent_model = parent_model\n        self.opts = self.model._meta\n        self.has_registered_model = admin_site.is_registered(self.model)\n        super().__init__()\n        \n        # Check if a custom verbose_name was provided at the class level\n        custom_verbose_name_provided = self.__class__.verbose_name is not None\n        \n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            if custom_verbose_name_provided:\n                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n            else:\n                # Fall back to model's verbose_name_plural when no custom verbose_name\n                self.verbose_name_plural = self.model._meta.verbose_name_plural\n",
      "\n    def __init__(self, parent_model, admin_site):\n        self.admin_site = admin_site\n        self.parent_model = parent_model\n        self.opts = self.model._meta\n        self.has_registered_model = admin_site.is_registered(self.model)\n        super().__init__()\n        \n        # Check if a custom verbose_name was provided at the class level\n        custom_verbose_name_provided = self.__class__.verbose_name is not None\n        \n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            if custom_verbose_name_provided:\n                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n            else:\n                # Fall back to model's verbose_name_plural when no custom verbose_name\n                self.verbose_name_plural = self.model._meta.verbose_name_plural\n",
      "\n    def __init__(self, parent_model, admin_site):\n        self.admin_site = admin_site\n        self.parent_model = parent_model\n        self.opts = self.model._meta\n        self.has_registered_model = admin_site.is_registered(self.model)\n        super().__init__()\n        \n        # Check if a custom verbose_name was provided at the class level\n        custom_verbose_name_provided = self.__class__.verbose_name is not None\n        \n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            if custom_verbose_name_provided:\n                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n            else:\n                # Fall back to model's verbose_name_plural when no custom verbose_name\n                self.verbose_name_plural = self.model._meta.verbose_name_plural\n",
      "\ndef __init__(self, parent_model, admin_site):\n    self.admin_site = admin_site\n    self.parent_model = parent_model\n    self.opts = self.model._meta\n    self.has_registered_model = admin_site.is_registered(self.model)\n    super().__init__()\n    \n    # Check if a custom verbose_name was provided at the class level\n    custom_verbose_name_provided = self.__class__.verbose_name is not None\n    \n    if self.verbose_name is None:\n        self.verbose_name = self.model._meta.verbose_name\n    if self.verbose_name_plural is None:\n        if custom_verbose_name_provided:\n            # Auto-derive plural from custom verbose_name (same as Django model Meta)\n            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n        else:\n            # Fall back to model's verbose_name_plural when no custom verbose_name\n            self.verbose_name_plural = self.model._meta.verbose_name_plural\n",
      "\ndef __init__(self, parent_model, admin_site):\n    self.admin_site = admin_site\n    self.parent_model = parent_model\n    self.opts = self.model._meta\n    self.has_registered_model = admin_site.is_registered(self.model)\n    super().__init__()\n    \n    # Check if a custom verbose_name was provided at the class level\n    custom_verbose_name_provided = self.__class__.verbose_name is not None\n    \n    if self.verbose_name is None:\n        self.verbose_name = self.model._meta.verbose_name\n    if self.verbose_name_plural is None:\n        if custom_verbose_name_provided:\n            # Auto-derive plural from custom verbose_name (same as Django model Meta)\n            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n        else:\n            # Fall back to model's verbose_name_plural when no custom verbose_name\n            self.verbose_name_plural = self.model._meta.verbose_name_plural\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..8dadf5716f 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,10 +2037,20 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n+\n+        # Check if a custom verbose_name was provided at the class level\n+        custom_verbose_name_provided = self.__class__.verbose_name is not None\n+        \n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n+        \n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if custom_verbose_name_provided:\n+                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                # Fall back to model's verbose_name_plural when no custom verbose_name\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n",
    "variant_0": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..7ec5f14177 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,10 +2037,26 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n+\n+    def __init__(self, parent_model, admin_site):\n+        self.admin_site = admin_site\n+        self.parent_model = parent_model\n+        self.opts = self.model._meta\n+        self.has_registered_model = admin_site.is_registered(self.model)\n+        super().__init__()\n+        \n+        # Check if a custom verbose_name was provided at the class level\n+        custom_verbose_name_provided = self.__class__.verbose_name is not None\n+        \n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if custom_verbose_name_provided:\n+                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                # Fall back to model's verbose_name_plural when no custom verbose_name\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n",
    "variant_1": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..69d00fbe5a 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,9 +2037,25 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n-        if self.verbose_name is None:\n-            self.verbose_name = self.model._meta.verbose_name\n-        if self.verbose_name_plural is None:\n+\n+def __init__(self, parent_model, admin_site):\n+    self.admin_site = admin_site\n+    self.parent_model = parent_model\n+    self.opts = self.model._meta\n+    self.has_registered_model = admin_site.is_registered(self.model)\n+    super().__init__()\n+    \n+    # Check if a custom verbose_name was provided at the class level\n+    custom_verbose_name_provided = self.__class__.verbose_name is not None\n+    \n+    if self.verbose_name is None:\n+        self.verbose_name = self.model._meta.verbose_name\n+    if self.verbose_name_plural is None:\n+        if custom_verbose_name_provided:\n+            # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+        else:\n+            # Fall back to model's verbose_name_plural when no custom verbose_name\n             self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n",
    "variant_2": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..7674bf143b 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,10 +2037,19 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n+\n+        # Check if a custom verbose_name was provided at the class level\n+        custom_verbose_name_provided = self.__class__.verbose_name is not None\n+        \n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if custom_verbose_name_provided:\n+                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                # Fall back to model's verbose_name_plural when no custom verbose_name\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n",
    "variant_3": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..7ec5f14177 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,10 +2037,26 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n+\n+    def __init__(self, parent_model, admin_site):\n+        self.admin_site = admin_site\n+        self.parent_model = parent_model\n+        self.opts = self.model._meta\n+        self.has_registered_model = admin_site.is_registered(self.model)\n+        super().__init__()\n+        \n+        # Check if a custom verbose_name was provided at the class level\n+        custom_verbose_name_provided = self.__class__.verbose_name is not None\n+        \n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if custom_verbose_name_provided:\n+                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                # Fall back to model's verbose_name_plural when no custom verbose_name\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n",
    "variant_4": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..7ec5f14177 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,10 +2037,26 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n+\n+    def __init__(self, parent_model, admin_site):\n+        self.admin_site = admin_site\n+        self.parent_model = parent_model\n+        self.opts = self.model._meta\n+        self.has_registered_model = admin_site.is_registered(self.model)\n+        super().__init__()\n+        \n+        # Check if a custom verbose_name was provided at the class level\n+        custom_verbose_name_provided = self.__class__.verbose_name is not None\n+        \n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if custom_verbose_name_provided:\n+                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                # Fall back to model's verbose_name_plural when no custom verbose_name\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n",
    "variant_5": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..7ec5f14177 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,10 +2037,26 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n+\n+    def __init__(self, parent_model, admin_site):\n+        self.admin_site = admin_site\n+        self.parent_model = parent_model\n+        self.opts = self.model._meta\n+        self.has_registered_model = admin_site.is_registered(self.model)\n+        super().__init__()\n+        \n+        # Check if a custom verbose_name was provided at the class level\n+        custom_verbose_name_provided = self.__class__.verbose_name is not None\n+        \n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if custom_verbose_name_provided:\n+                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                # Fall back to model's verbose_name_plural when no custom verbose_name\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n",
    "variant_6": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..7ec5f14177 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,10 +2037,26 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n+\n+    def __init__(self, parent_model, admin_site):\n+        self.admin_site = admin_site\n+        self.parent_model = parent_model\n+        self.opts = self.model._meta\n+        self.has_registered_model = admin_site.is_registered(self.model)\n+        super().__init__()\n+        \n+        # Check if a custom verbose_name was provided at the class level\n+        custom_verbose_name_provided = self.__class__.verbose_name is not None\n+        \n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if custom_verbose_name_provided:\n+                # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                # Fall back to model's verbose_name_plural when no custom verbose_name\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n",
    "variant_7": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..69d00fbe5a 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,9 +2037,25 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n-        if self.verbose_name is None:\n-            self.verbose_name = self.model._meta.verbose_name\n-        if self.verbose_name_plural is None:\n+\n+def __init__(self, parent_model, admin_site):\n+    self.admin_site = admin_site\n+    self.parent_model = parent_model\n+    self.opts = self.model._meta\n+    self.has_registered_model = admin_site.is_registered(self.model)\n+    super().__init__()\n+    \n+    # Check if a custom verbose_name was provided at the class level\n+    custom_verbose_name_provided = self.__class__.verbose_name is not None\n+    \n+    if self.verbose_name is None:\n+        self.verbose_name = self.model._meta.verbose_name\n+    if self.verbose_name_plural is None:\n+        if custom_verbose_name_provided:\n+            # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+        else:\n+            # Fall back to model's verbose_name_plural when no custom verbose_name\n             self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n",
    "variant_8": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..69d00fbe5a 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,9 +2037,25 @@ class InlineModelAdmin(BaseModelAdmin):\n         self.opts = self.model._meta\n         self.has_registered_model = admin_site.is_registered(self.model)\n         super().__init__()\n-        if self.verbose_name is None:\n-            self.verbose_name = self.model._meta.verbose_name\n-        if self.verbose_name_plural is None:\n+\n+def __init__(self, parent_model, admin_site):\n+    self.admin_site = admin_site\n+    self.parent_model = parent_model\n+    self.opts = self.model._meta\n+    self.has_registered_model = admin_site.is_registered(self.model)\n+    super().__init__()\n+    \n+    # Check if a custom verbose_name was provided at the class level\n+    custom_verbose_name_provided = self.__class__.verbose_name is not None\n+    \n+    if self.verbose_name is None:\n+        self.verbose_name = self.model._meta.verbose_name\n+    if self.verbose_name_plural is None:\n+        if custom_verbose_name_provided:\n+            # Auto-derive plural from custom verbose_name (same as Django model Meta)\n+            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+        else:\n+            # Fall back to model's verbose_name_plural when no custom verbose_name\n             self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n"
  }
}