{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/utils/html.py lines 62-77)": "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows specifying a custom JSON encoder class.\n    If not provided, defaults to DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
    "Location 2 (/root/hy/projects_1/django/tests/utils_tests/test_html.py lines 219-219)": "\n\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        # Test with custom encoder that adds a prefix\n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, dict) and \"prefix\" not in obj:\n                    obj = {\"prefix\": \"custom\", **obj}\n                return super().encode(obj)\n        \n        # Test with element_id\n        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n        self.assertHTMLEqual(\n            result,\n            '<script id=\"test_id\" type=\"application/json\">{\"prefix\": \"custom\", \"key\": \"value\"}</script>',\n        )\n        \n        # Test without element_id\n        result = json_script({\"key\": \"value\"}, encoder=CustomEncoder)\n        self.assertHTMLEqual(\n            result,\n            '<script type=\"application/json\">{\"prefix\": \"custom\", \"key\": \"value\"}</script>',\n        )\n        \n        # Test that default encoder is still used when encoder=None\n        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        self.assertHTMLEqual(\n            result,\n            '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/utils/html.py lines 62-77)": [
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The 'encoder' parameter allows specifying a custom JSON encoder class.\n    If not provided, defaults to DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The encoder parameter allows specifying a custom JSON encoder class.\n    If not provided, defaults to DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, use it instead of the default DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The 'encoder' parameter allows specifying a custom JSON encoder class.\n    If not provided, defaults to DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, use it for JSON serialization instead of the default\n    DjangoJSONEncoder.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    The optional encoder parameter specifies the JSON encoder to use. If not\n    provided, DjangoJSONEncoder is used by default.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    encoder = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n"
    ],
    "Location 2 (/root/hy/projects_1/django/tests/utils_tests/test_html.py lines 219-219)": [
      "\n\n    def test_json_script_with_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        import json\n        \n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, str) and obj == \"custom\":\n                    return '\"CUSTOM_ENCODED\"'\n                return super().encode(obj)\n        \n        # Test with custom encoder and element_id\n        result = json_script({\"key\": \"custom\"}, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"CUSTOM_ENCODED\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test with custom encoder without element_id\n        result = json_script({\"key\": \"custom\"}, encoder=CustomEncoder)\n        expected = '<script type=\"application/json\">{\"key\": \"CUSTOM_ENCODED\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test that default encoder still works when encoder=None\n        result = json_script({\"key\": \"value\"}, encoder=None)\n        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n",
      "\n\n    def test_json_script_with_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        import json\n        \n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, dict) and \"custom\" in obj:\n                    obj = obj.copy()\n                    obj[\"custom\"] = \"CUSTOM_\" + str(obj[\"custom\"])\n                return super().encode(obj)\n        \n        # Test with custom encoder and element_id\n        result = json_script({\"custom\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test with custom encoder without element_id\n        result = json_script({\"custom\": \"value\"}, encoder=CustomEncoder)\n        expected = '<script type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test that default encoder still works (backward compatibility)\n        result = json_script({\"key\": \"value\"})\n        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n\n",
      "\n\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        # Custom encoder that adds a prefix to strings\n        class CustomEncoder(DjangoJSONEncoder):\n            def encode(self, o):\n                if isinstance(o, dict):\n                    # Add prefix to string values\n                    modified = {}\n                    for k, v in o.items():\n                        if isinstance(v, str):\n                            modified[k] = f\"custom_{v}\"\n                        else:\n                            modified[k] = v\n                    return super().encode(modified)\n                return super().encode(o)\n        \n        # Test with custom encoder and element_id\n        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n        self.assertHTMLEqual(\n            result,\n            '<script id=\"test_id\" type=\"application/json\">{\"key\": \"custom_value\"}</script>',\n        )\n        \n        # Test with custom encoder without element_id\n        result = json_script({\"key\": \"value\"}, encoder=CustomEncoder)\n        self.assertHTMLEqual(\n            result,\n            '<script type=\"application/json\">{\"key\": \"custom_value\"}</script>',\n        )\n        \n        # Test that default behavior is preserved when no encoder specified\n        result = json_script({\"key\": \"value\"}, \"test_id\")\n        self.assertHTMLEqual(\n            result,\n            '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>',\n        )\n",
      "\n\n    def test_json_script_with_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        import json\n        \n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, dict) and 'custom' in obj:\n                    obj = dict(obj)  # Make a copy\n                    obj['custom'] = 'CUSTOM_' + str(obj['custom'])\n                return super().encode(obj)\n        \n        # Test with custom encoder and element_id\n        result = json_script({'custom': 'value'}, 'test_id', encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test with custom encoder without element_id\n        result = json_script({'custom': 'value'}, encoder=CustomEncoder)\n        expected = '<script type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test that default behavior is unchanged when encoder is None\n        result = json_script({'key': 'value'}, 'test_id', encoder=None)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n",
      "\n\n    def test_json_script_with_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        import json\n        \n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, dict) and 'custom' in obj:\n                    obj = obj.copy()\n                    obj['custom'] = 'encoded_' + str(obj['custom'])\n                return super().encode(obj)\n        \n        # Test with custom encoder and element_id\n        result = json_script({'custom': 'value'}, 'test_id', encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"encoded_value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test with custom encoder without element_id\n        result = json_script({'custom': 'test'}, encoder=CustomEncoder)\n        expected = '<script type=\"application/json\">{\"custom\": \"encoded_test\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test that default encoder still works when encoder=None\n        result = json_script({'key': 'value'}, encoder=None)\n        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n",
      "\n\n    def test_json_script_with_custom_encoder(self):\n        \"\"\"Test json_script with a custom encoder parameter.\"\"\"\n        import json\n        \n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, dict) and \"custom\" in obj:\n                    obj = obj.copy()\n                    obj[\"custom\"] = \"CUSTOM_\" + str(obj[\"custom\"])\n                return super().encode(obj)\n        \n        # Test with custom encoder and element_id\n        result = json_script({\"custom\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test with custom encoder without element_id\n        result = json_script({\"custom\": \"value\"}, encoder=CustomEncoder)\n        expected = '<script type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test that default encoder still works when encoder=None\n        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n",
      "\n\n    def test_json_script_with_custom_encoder(self):\n        \"\"\"Test json_script with a custom encoder parameter.\"\"\"\n        import json\n        \n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, dict) and \"custom\" in obj:\n                    obj = obj.copy()\n                    obj[\"custom\"] = \"encoded\"\n                return super().encode(obj)\n        \n        # Test with element_id\n        result = json_script({\"custom\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"encoded\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test without element_id\n        result = json_script({\"custom\": \"value\"}, encoder=CustomEncoder)\n        expected = '<script type=\"application/json\">{\"custom\": \"encoded\"}</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test that default encoder still works when encoder=None\n        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertHTMLEqual(result, expected)\n",
      "\n    def test_json_script_custom_encoder(self):\n        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n        # Custom encoder that adds a prefix to all string values\n        class CustomEncoder(json.JSONEncoder):\n            def encode(self, obj):\n                if isinstance(obj, str):\n                    return json.JSONEncoder.encode(self, f\"custom_{obj}\")\n                return json.JSONEncoder.encode(self, obj)\n        \n        # Test with custom encoder and element_id\n        result = json_script(\"test_value\", \"test_id\", encoder=CustomEncoder)\n        expected = '<script id=\"test_id\" type=\"application/json\">\"custom_test_value\"</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test with custom encoder without element_id\n        result = json_script(\"test_value\", encoder=CustomEncoder)\n        expected = '<script type=\"application/json\">\"custom_test_value\"</script>'\n        self.assertHTMLEqual(result, expected)\n        \n        # Test that default encoder still works (backward compatibility)\n        result = json_script(\"test_value\", \"test_id\")\n        expected = '<script id=\"test_id\" type=\"application/json\">\"test_value\"</script>'\n        self.assertHTMLEqual(result, expected)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..d761e944c4 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The 'encoder' parameter allows specifying a custom JSON encoder class.\n+    If not provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..daa7e46046 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,34 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        \n+        # Custom encoder that adds a prefix to strings\n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, str):\n+                    obj = \"custom_\" + obj\n+                elif isinstance(obj, dict):\n+                    obj = {k: (\"custom_\" + v if isinstance(v, str) else v) for k, v in obj.items()}\n+                return super().encode(obj)\n+        \n+        # Test with element_id\n+        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"custom_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test without element_id\n+        result = json_script({\"key\": \"value\"}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"key\": \"custom_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test backward compatibility - default encoder should still work\n+        result = json_script({\"key\": \"value\"}, \"test_id\")\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_0": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..9b00294790 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows specifying a custom JSON encoder class.\n+    If not provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..97f2f3fa97 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,37 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        # Test with custom encoder that adds a prefix\n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, dict) and \"prefix\" not in obj:\n+                    obj = {\"prefix\": \"custom\", **obj}\n+                return super().encode(obj)\n+        \n+        # Test with element_id\n+        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n+        self.assertHTMLEqual(\n+            result,\n+            '<script id=\"test_id\" type=\"application/json\">{\"prefix\": \"custom\", \"key\": \"value\"}</script>',\n+        )\n+        \n+        # Test without element_id\n+        result = json_script({\"key\": \"value\"}, encoder=CustomEncoder)\n+        self.assertHTMLEqual(\n+            result,\n+            '<script type=\"application/json\">{\"prefix\": \"custom\", \"key\": \"value\"}</script>',\n+        )\n+        \n+        # Test that default encoder is still used when encoder=None\n+        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        self.assertHTMLEqual(\n+            result,\n+            '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_1": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..46765b1361 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The 'encoder' parameter allows specifying a custom JSON encoder class.\n+    If not provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..d1c8043001 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,31 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_with_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, str) and obj == \"custom\":\n+                    return '\"CUSTOM_ENCODED\"'\n+                return super().encode(obj)\n+        \n+        # Test with custom encoder and element_id\n+        result = json_script({\"key\": \"custom\"}, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"CUSTOM_ENCODED\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test with custom encoder without element_id\n+        result = json_script({\"key\": \"custom\"}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"key\": \"CUSTOM_ENCODED\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test that default encoder still works when encoder=None\n+        result = json_script({\"key\": \"value\"}, encoder=None)\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_2": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..8618cff92f 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,7 +59,8 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +68,8 @@ def json_script(value, element_id=None):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..1462896bfb 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,33 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_with_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, dict) and \"custom\" in obj:\n+                    obj = obj.copy()\n+                    obj[\"custom\"] = \"CUSTOM_\" + str(obj[\"custom\"])\n+                return super().encode(obj)\n+        \n+        # Test with custom encoder and element_id\n+        result = json_script({\"custom\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test with custom encoder without element_id\n+        result = json_script({\"custom\": \"value\"}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test that default encoder still works (backward compatibility)\n+        result = json_script({\"key\": \"value\"})\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_3": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..9b00294790 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The encoder parameter allows specifying a custom JSON encoder class.\n+    If not provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..50f4579ada 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,43 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        # Custom encoder that adds a prefix to strings\n+        class CustomEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, dict):\n+                    # Add prefix to string values\n+                    modified = {}\n+                    for k, v in o.items():\n+                        if isinstance(v, str):\n+                            modified[k] = f\"custom_{v}\"\n+                        else:\n+                            modified[k] = v\n+                    return super().encode(modified)\n+                return super().encode(o)\n+        \n+        # Test with custom encoder and element_id\n+        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n+        self.assertHTMLEqual(\n+            result,\n+            '<script id=\"test_id\" type=\"application/json\">{\"key\": \"custom_value\"}</script>',\n+        )\n+        \n+        # Test with custom encoder without element_id\n+        result = json_script({\"key\": \"value\"}, encoder=CustomEncoder)\n+        self.assertHTMLEqual(\n+            result,\n+            '<script type=\"application/json\">{\"key\": \"custom_value\"}</script>',\n+        )\n+        \n+        # Test that default behavior is preserved when no encoder specified\n+        result = json_script({\"key\": \"value\"}, \"test_id\")\n+        self.assertHTMLEqual(\n+            result,\n+            '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_4": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..260a85b87e 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,19 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, use it instead of the default DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..b9d727bc30 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_with_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, dict) and 'custom' in obj:\n+                    obj = dict(obj)  # Make a copy\n+                    obj['custom'] = 'CUSTOM_' + str(obj['custom'])\n+                return super().encode(obj)\n+        \n+        # Test with custom encoder and element_id\n+        result = json_script({'custom': 'value'}, 'test_id', encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test with custom encoder without element_id\n+        result = json_script({'custom': 'value'}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test that default behavior is unchanged when encoder is None\n+        result = json_script({'key': 'value'}, 'test_id', encoder=None)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_5": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..46765b1361 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The 'encoder' parameter allows specifying a custom JSON encoder class.\n+    If not provided, defaults to DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..1a211a0e46 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_with_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, dict) and 'custom' in obj:\n+                    obj = obj.copy()\n+                    obj['custom'] = 'encoded_' + str(obj['custom'])\n+                return super().encode(obj)\n+        \n+        # Test with custom encoder and element_id\n+        result = json_script({'custom': 'value'}, 'test_id', encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"encoded_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test with custom encoder without element_id\n+        result = json_script({'custom': 'test'}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"custom\": \"encoded_test\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test that default encoder still works when encoder=None\n+        result = json_script({'key': 'value'}, encoder=None)\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_6": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..6610e45de7 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, use it for JSON serialization instead of the default\n+    DjangoJSONEncoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..d0c93ae51a 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_with_custom_encoder(self):\n+        \"\"\"Test json_script with a custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, dict) and \"custom\" in obj:\n+                    obj = obj.copy()\n+                    obj[\"custom\"] = \"CUSTOM_\" + str(obj[\"custom\"])\n+                return super().encode(obj)\n+        \n+        # Test with custom encoder and element_id\n+        result = json_script({\"custom\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test with custom encoder without element_id\n+        result = json_script({\"custom\": \"value\"}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"custom\": \"CUSTOM_value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test that default encoder still works when encoder=None\n+        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_7": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..8618cff92f 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,7 +59,8 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +68,8 @@ def json_script(value, element_id=None):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..d2425d4e29 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+\n+    def test_json_script_with_custom_encoder(self):\n+        \"\"\"Test json_script with a custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, dict) and \"custom\" in obj:\n+                    obj = obj.copy()\n+                    obj[\"custom\"] = \"encoded\"\n+                return super().encode(obj)\n+        \n+        # Test with element_id\n+        result = json_script({\"custom\": \"value\"}, \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"encoded\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test without element_id\n+        result = json_script({\"custom\": \"value\"}, encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">{\"custom\": \"encoded\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test that default encoder still works when encoder=None\n+        result = json_script({\"key\": \"value\"}, \"test_id\", encoder=None)\n+        expected = '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_8": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..6d64146ad2 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    The optional encoder parameter specifies the JSON encoder to use. If not\n+    provided, DjangoJSONEncoder is used by default.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    encoder = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..58f332371f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -217,6 +217,29 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        # Custom encoder that adds a prefix to all string values\n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, str):\n+                    return json.JSONEncoder.encode(self, f\"custom_{obj}\")\n+                return json.JSONEncoder.encode(self, obj)\n+        \n+        # Test with custom encoder and element_id\n+        result = json_script(\"test_value\", \"test_id\", encoder=CustomEncoder)\n+        expected = '<script id=\"test_id\" type=\"application/json\">\"custom_test_value\"</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test with custom encoder without element_id\n+        result = json_script(\"test_value\", encoder=CustomEncoder)\n+        expected = '<script type=\"application/json\">\"custom_test_value\"</script>'\n+        self.assertHTMLEqual(result, expected)\n+        \n+        # Test that default encoder still works (backward compatibility)\n+        result = json_script(\"test_value\", \"test_id\")\n+        expected = '<script id=\"test_id\" type=\"application/json\">\"test_value\"</script>'\n+        self.assertHTMLEqual(result, expected)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n"
  }
}