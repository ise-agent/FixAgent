{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/models/query.py lines 813-816)": "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
    "Location 2 (/root/hy/projects_1/django/django/db/models/query.py lines 1840-1857)": "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/models/query.py lines 813-816)": [
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and on_conflict != OnConflict.IGNORE\n                ):\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/db/models/query.py lines 1840-1857)": [
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n",
      "\n        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                inserted_rows.extend(\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        returning_fields=self.model._meta.db_returning_fields,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n                )\n            else:\n                self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..840fc75e40 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,7 +1838,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and on_conflict != OnConflict.IGNORE:\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n",
    "variant_0": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..35aa24434c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,7 +1838,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n",
    "variant_1": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..35aa24434c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,7 +1838,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n",
    "variant_2": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..973a2ca512 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,13 +1838,18 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n",
    "variant_3": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..35aa24434c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,7 +1838,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n",
    "variant_4": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..973a2ca512 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,13 +1838,18 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n",
    "variant_5": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..973a2ca512 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,13 +1838,18 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n",
    "variant_6": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..973a2ca512 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,13 +1838,18 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n",
    "variant_7": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..973a2ca512 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,13 +1838,18 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n",
    "variant_8": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..973a2ca512 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,9 +810,10 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and on_conflict != OnConflict.IGNORE\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n@@ -1837,13 +1838,18 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+        for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n"
  }
}