{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 320-329)": "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 228-248)": "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
    "Location 3 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 578-600)": "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
    "Location 4 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 250-258)": "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 320-329)": [
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n        if is_param and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n"
    ],
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 228-248)": [
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, is_param=False)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n"
    ],
    "Location 3 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 578-600)": [
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\ndef _parse_attributes_section(self, section: str) -> List[str]:\n    lines = []\n    for _name, _type, _desc in self._consume_fields():\n        if self._config.napoleon_use_ivar:\n            _name = self._qualify_name(_name, self._obj)\n            field = ':ivar %s: ' % _name\n            lines.extend(self._format_block(field, _desc))\n            if _type:\n                lines.append(':vartype %s: %s' % (_name, _type))\n        else:\n            lines.append('.. attribute:: ' + _name)\n            if self._opt and 'noindex' in self._opt:\n                lines.append('   :noindex:')\n            if _type:\n                lines.extend(self._indent([':type: %s' % _type], 3))\n            lines.append('')\n\n            fields = self._format_field('', '', _desc)\n            lines.extend(self._indent(fields, 3))\n            lines.append('')\n    if self._config.napoleon_use_ivar:\n        lines.append('')\n    return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields():\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n"
    ],
    "Location 4 (/root/hy/projects_1/sphinx/sphinx/ext/napoleon/docstring.py lines 250-258)": [
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n",
      "\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n        self._consume_empty()\n        fields = []\n        while not self._is_section_break():\n            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n            if _name or _type or _desc:\n                fields.append((_name, _type, _desc,))\n        return fields\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_0": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_1": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_2": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_3": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..eb1b64e21 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,29 +578,30 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n-    def _parse_attributes_section(self, section: str) -> List[str]:\n-        lines = []\n-        for _name, _type, _desc in self._consume_fields():\n-            if self._config.napoleon_use_ivar:\n-                _name = self._qualify_name(_name, self._obj)\n-                field = ':ivar %s: ' % _name\n-                lines.extend(self._format_block(field, _desc))\n-                if _type:\n-                    lines.append(':vartype %s: %s' % (_name, _type))\n-            else:\n-                lines.append('.. attribute:: ' + _name)\n-                if self._opt and 'noindex' in self._opt:\n-                    lines.append('   :noindex:')\n-                if _type:\n-                    lines.extend(self._indent([':type: %s' % _type], 3))\n-                lines.append('')\n-\n-                fields = self._format_field('', '', _desc)\n-                lines.extend(self._indent(fields, 3))\n-                lines.append('')\n+\n+def _parse_attributes_section(self, section: str) -> List[str]:\n+    lines = []\n+    for _name, _type, _desc in self._consume_fields():\n         if self._config.napoleon_use_ivar:\n+            _name = self._qualify_name(_name, self._obj)\n+            field = ':ivar %s: ' % _name\n+            lines.extend(self._format_block(field, _desc))\n+            if _type:\n+                lines.append(':vartype %s: %s' % (_name, _type))\n+        else:\n+            lines.append('.. attribute:: ' + _name)\n+            if self._opt and 'noindex' in self._opt:\n+                lines.append('   :noindex:')\n+            if _type:\n+                lines.extend(self._indent([':type: %s' % _type], 3))\n             lines.append('')\n-        return lines\n+\n+            fields = self._format_field('', '', _desc)\n+            lines.extend(self._indent(fields, 3))\n+            lines.append('')\n+    if self._config.napoleon_use_ivar:\n+        lines.append('')\n+    return lines\n \n     def _parse_examples_section(self, section: str) -> List[str]:\n         labels = {\n",
    "variant_4": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_5": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_6": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_7": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n",
    "variant_8": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..b210ae814 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,6 +225,7 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n+\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n@@ -238,7 +239,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, is_param=False)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -247,6 +248,7 @@ class GoogleDocstring:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n \n+\n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n         self._consume_empty()\n@@ -317,8 +319,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, is_param: bool = True) -> str:\n+        if is_param and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,6 +578,7 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n"
  }
}