{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/utils/http.py lines 178-182)": "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/utils/http.py lines 178-182)": [
      "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n",
      "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n",
      "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n",
      "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n",
      "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n",
      "\nif year < 100:\n    # RFC 7231: Interpret two-digit year relative to current year\n    # If the year appears more than 50 years in the future,\n    # use the most recent year in the past with same last two digits\n    current_year = datetime.datetime.now().year\n    \n    # Try the current century first\n    candidate_year = (current_year // 100) * 100 + year\n    \n    # If more than 50 years in the future, use previous century\n    if candidate_year - current_year > 50:\n        candidate_year -= 100\n    # If more than 50 years in the past, use next century  \n    elif current_year - candidate_year > 50:\n        candidate_year += 100\n        \n    year = candidate_year\n",
      "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n",
      "\n        if year < 100:\n            # RFC 7231: Interpret two-digit year relative to current year\n            # If the year appears more than 50 years in the future,\n            # use the most recent year in the past with same last two digits\n            current_year = datetime.datetime.now().year\n            \n            # Try the current century first\n            candidate_year = (current_year // 100) * 100 + year\n            \n            # If more than 50 years in the future, use previous century\n            if candidate_year - current_year > 50:\n                candidate_year -= 100\n            # If more than 50 years in the past, use next century  \n            elif current_year - candidate_year > 50:\n                candidate_year += 100\n                \n            year = candidate_year\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_0": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_1": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_2": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_3": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_4": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_5": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_6": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..eada0e3ef3 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n-        if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+\n+if year < 100:\n+    # RFC 7231: Interpret two-digit year relative to current year\n+    # If the year appears more than 50 years in the future,\n+    # use the most recent year in the past with same last two digits\n+    current_year = datetime.datetime.now().year\n+    \n+    # Try the current century first\n+    candidate_year = (current_year // 100) * 100 + year\n+    \n+    # If more than 50 years in the future, use previous century\n+    if candidate_year - current_year > 50:\n+        candidate_year -= 100\n+    # If more than 50 years in the past, use next century  \n+    elif current_year - candidate_year > 50:\n+        candidate_year += 100\n+        \n+    year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_7": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
    "variant_8": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..851d24b970 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -175,11 +175,24 @@ def parse_http_date(date):\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n         year = int(m.group('year'))\n+\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # RFC 7231: Interpret two-digit year relative to current year\n+            # If the year appears more than 50 years in the future,\n+            # use the most recent year in the past with same last two digits\n+            current_year = datetime.datetime.now().year\n+            \n+            # Try the current century first\n+            candidate_year = (current_year // 100) * 100 + year\n+            \n+            # If more than 50 years in the future, use previous century\n+            if candidate_year - current_year > 50:\n+                candidate_year -= 100\n+            # If more than 50 years in the past, use next century  \n+            elif current_year - candidate_year > 50:\n+                candidate_year += 100\n+                \n+            year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n"
  }
}