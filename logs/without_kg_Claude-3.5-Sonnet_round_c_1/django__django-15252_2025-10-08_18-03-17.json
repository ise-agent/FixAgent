{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 59-70)": "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
    "Location 2 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 84-87)": "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
    "Location 3 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 89-92)": "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.filter(app=app, name=name).delete()\n",
    "Location 4 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 72-82)": "\ndef applied_migrations(self):\n    \"\"\"\n    Return a dict mapping (app_name, migration_name) to Migration instances\n    for all applied migrations.\n    \"\"\"\n    from django.db import router\n    \n    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n        return {}\n    \n    if self.has_table():\n        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n    else:\n        # If the django_migrations table doesn't exist, then no migrations\n        # are applied.\n        return {}\n",
    "Location 5 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 94-96)": "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 59-70)": [
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if router allows migrations on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n",
      "\n    def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        from django.db import router\n        \n        # Check if migrations are allowed on this database\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n            \n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 84-87)": [
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n",
      "\n    def record_applied(self, app, name):\n        \"\"\"Record that a migration was applied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.create(app=app, name=name)\n"
    ],
    "Location 3 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 89-92)": [
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\ndef record_unapplied(self, app, name):\n    \"\"\"Record that a migration was unapplied.\"\"\"\n    from django.db import router\n    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n        return\n    self.ensure_schema()\n    self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\ndef record_unapplied(self, app, name):\n    \"\"\"Record that a migration was unapplied.\"\"\"\n    from django.db import router\n    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n        return\n    self.ensure_schema()\n    self.migration_qs.filter(app=app, name=name).delete()\n",
      "\ndef record_unapplied(self, app, name):\n    \"\"\"Record that a migration was unapplied.\"\"\"\n    from django.db import router\n    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n        return\n    self.ensure_schema()\n    self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.filter(app=app, name=name).delete()\n",
      "\ndef record_unapplied(self, app, name):\n    \"\"\"Record that a migration was unapplied.\"\"\"\n    from django.db import router\n    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n        return\n    self.ensure_schema()\n    self.migration_qs.filter(app=app, name=name).delete()\n",
      "\n    def record_unapplied(self, app, name):\n        \"\"\"Record that a migration was unapplied.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.ensure_schema()\n        self.migration_qs.filter(app=app, name=name).delete()\n"
    ],
    "Location 4 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 72-82)": [
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return {}\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return {}\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\ndef applied_migrations(self):\n    \"\"\"\n    Return a dict mapping (app_name, migration_name) to Migration instances\n    for all applied migrations.\n    \"\"\"\n    from django.db import router\n    \n    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n        return {}\n    \n    if self.has_table():\n        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n    else:\n        # If the django_migrations table doesn't exist, then no migrations\n        # are applied.\n        return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return {}\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\ndef applied_migrations(self):\n    \"\"\"\n    Return a dict mapping (app_name, migration_name) to Migration instances\n    for all applied migrations.\n    \"\"\"\n    from django.db import router\n    \n    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n        return {}\n    \n    if self.has_table():\n        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n    else:\n        # If the django_migrations table doesn't exist, then no migrations\n        # are applied.\n        return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        from django.db import router\n        \n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return {}\n            \n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        from django.db import router\n        \n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return {}\n            \n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n",
      "\n    def applied_migrations(self):\n        \"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return {}\n        if self.has_table():\n            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n        else:\n            # If the django_migrations table doesn't exist, then no migrations\n            # are applied.\n            return {}\n"
    ],
    "Location 5 (/root/hy/projects_1/django/django/db/migrations/recorder.py lines 94-96)": [
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n",
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n",
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n",
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n",
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n",
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n",
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n",
      "\n    def flush(self):\n        \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n        from django.db import router\n        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n            return\n        self.migration_qs.all().delete()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..7454247206 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if router allows migrations on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,11 +76,18 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.db import router\n+        \n+        # Check if router allows migrations on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return {}\n+            \n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -81,16 +95,37 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        \n+        # Check if router allows migrations on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        from django.db import router\n+        \n+        # Check if router allows migrations on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n+\n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        \n+        # Check if router allows migrations on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         self.migration_qs.all().delete()\n",
    "variant_0": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..aeb138921c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,28 +76,46 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n-    def applied_migrations(self):\n-        \"\"\"\n-        Return a dict mapping (app_name, migration_name) to Migration instances\n-        for all applied migrations.\n-        \"\"\"\n-        if self.has_table():\n-            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n-        else:\n-            # If the django_migrations table doesn't exist, then no migrations\n-            # are applied.\n-            return {}\n+\n+def applied_migrations(self):\n+    \"\"\"\n+    Return a dict mapping (app_name, migration_name) to Migration instances\n+    for all applied migrations.\n+    \"\"\"\n+    from django.db import router\n+    \n+    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+        return {}\n+    \n+    if self.has_table():\n+        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n+    else:\n+        # If the django_migrations table doesn't exist, then no migrations\n+        # are applied.\n+        return {}\n+\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n+\n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_1": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..7592bcf633 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,11 +76,15 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -81,16 +92,28 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n+\n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_2": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..e2ed32b0cf 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if router allows migrations on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,11 +76,15 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -81,16 +92,28 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+def record_unapplied(self, app, name):\n+    \"\"\"Record that a migration was unapplied.\"\"\"\n+    from django.db import router\n+    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+        return\n+    self.ensure_schema()\n+    self.migration_qs.filter(app=app, name=name).delete()\n+\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_3": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..aeb138921c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+        \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,28 +76,46 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n-    def applied_migrations(self):\n-        \"\"\"\n-        Return a dict mapping (app_name, migration_name) to Migration instances\n-        for all applied migrations.\n-        \"\"\"\n-        if self.has_table():\n-            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n-        else:\n-            # If the django_migrations table doesn't exist, then no migrations\n-            # are applied.\n-            return {}\n+\n+def applied_migrations(self):\n+    \"\"\"\n+    Return a dict mapping (app_name, migration_name) to Migration instances\n+    for all applied migrations.\n+    \"\"\"\n+    from django.db import router\n+    \n+    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+        return {}\n+    \n+    if self.has_table():\n+        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n+    else:\n+        # If the django_migrations table doesn't exist, then no migrations\n+        # are applied.\n+        return {}\n+\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n+\n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_4": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..b12520fa02 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,11 +76,15 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -81,16 +92,28 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+def record_unapplied(self, app, name):\n+    \"\"\"Record that a migration was unapplied.\"\"\"\n+    from django.db import router\n+    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+        return\n+    self.ensure_schema()\n+    self.migration_qs.filter(app=app, name=name).delete()\n+\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_5": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..af35dcb62e 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,28 +76,46 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n-    def applied_migrations(self):\n-        \"\"\"\n-        Return a dict mapping (app_name, migration_name) to Migration instances\n-        for all applied migrations.\n-        \"\"\"\n-        if self.has_table():\n-            return {(migration.app, migration.name): migration for migration in self.migration_qs}\n-        else:\n-            # If the django_migrations table doesn't exist, then no migrations\n-            # are applied.\n-            return {}\n+\n+def applied_migrations(self):\n+    \"\"\"\n+    Return a dict mapping (app_name, migration_name) to Migration instances\n+    for all applied migrations.\n+    \"\"\"\n+    from django.db import router\n+    \n+    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+        return {}\n+    \n+    if self.has_table():\n+        return {(migration.app, migration.name): migration for migration in self.migration_qs}\n+    else:\n+        # If the django_migrations table doesn't exist, then no migrations\n+        # are applied.\n+        return {}\n+\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+def record_unapplied(self, app, name):\n+    \"\"\"Record that a migration was unapplied.\"\"\"\n+    from django.db import router\n+    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+        return\n+    self.ensure_schema()\n+    self.migration_qs.filter(app=app, name=name).delete()\n+\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_6": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..a4eecbd58e 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,11 +76,17 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.db import router\n+        \n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return {}\n+            \n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -81,16 +94,28 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n+\n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_7": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..bfb1c66f61 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,11 +76,17 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.db import router\n+        \n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return {}\n+            \n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -81,16 +94,28 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n-    def record_unapplied(self, app, name):\n-        \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+\n+def record_unapplied(self, app, name):\n+    \"\"\"Record that a migration was unapplied.\"\"\"\n+    from django.db import router\n+    if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+        return\n+    self.ensure_schema()\n+    self.migration_qs.filter(app=app, name=name).delete()\n+\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n",
    "variant_8": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..7592bcf633 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -56,8 +56,15 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n \n+\n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        from django.db import router\n+        \n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n+            \n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -69,11 +76,15 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n+\n     def applied_migrations(self):\n         \"\"\"\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -81,16 +92,28 @@ class MigrationRecorder:\n             # are applied.\n             return {}\n \n+\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n+\n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n+\n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n+        from django.db import router\n+        if not router.allow_migrate_model(self.connection.alias, self.Migration):\n+            return\n         self.migration_qs.all().delete()\n"
  }
}