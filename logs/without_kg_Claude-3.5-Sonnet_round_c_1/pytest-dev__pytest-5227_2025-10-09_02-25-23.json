{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/logging.py lines 18-18)": "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
    "Location 2 (/root/hy/projects_1/pytest/testing/logging/test_formatter.py lines 9-9)": "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
    "Location 3 (/root/hy/projects_1/pytest/testing/logging/test_formatter.py lines 29-31)": "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
    "Location 4 (/root/hy/projects_1/pytest/testing/logging/test_formatter.py lines 36-36)": "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/pytest/src/_pytest/logging.py lines 18-18)": [
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n"
    ],
    "Location 2 (/root/hy/projects_1/pytest/testing/logging/test_formatter.py lines 9-9)": [
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n",
      "\n    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n"
    ],
    "Location 3 (/root/hy/projects_1/pytest/testing/logging/test_formatter.py lines 29-31)": [
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n",
      "\n    assert output == (\n        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n    )\n"
    ],
    "Location 4 (/root/hy/projects_1/pytest/testing/logging/test_formatter.py lines 36-36)": [
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
      "\n    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_0": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_1": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_2": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_3": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_4": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_5": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_6": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_7": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
    "variant_8": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..8b032221a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,8 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \ndiff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex abceaf857..ad1221c5d 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -6,7 +6,8 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n"
  }
}