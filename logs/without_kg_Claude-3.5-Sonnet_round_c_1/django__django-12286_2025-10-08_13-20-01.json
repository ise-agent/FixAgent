{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/core/checks/translation.py lines 55-61)": "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation import get_supported_language_variant\n    \n    try:\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n    except LookupError:\n        return [E004]\n    return []\n",
    "Location 2 (/root/hy/projects_1/django/django/core/checks/translation.py lines 1-10)": "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n\nE001 = Error(\n    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n    id='translation.E001',\n)\n",
    "Location 3 (/root/hy/projects_1/django/tests/check_framework/test_translation.py lines 78-86)": "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # Test exact language code not in LANGUAGES\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test sublanguage with base language available (should pass)\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Test sublanguage without base language (should fail)\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test exact match (should pass)\n    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/core/checks/translation.py lines 55-61)": [
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation import get_supported_language_variant\n    \n    try:\n        # Use Django's language resolution logic instead of exact matching\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n    except LookupError:\n        return [E004]\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation import get_supported_language_variant\n    \n    try:\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n        return []\n    except LookupError:\n        return [E004]\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation.trans_real import get_supported_language_variant\n    \n    try:\n        # Use Django's language resolution logic to check if LANGUAGE_CODE\n        # can be resolved to an available language (including fallback to base language)\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n        return []\n    except LookupError:\n        # Only raise E004 if the language code cannot be resolved at all\n        return [E004]\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation.trans_real import get_supported_language_variant\n    \n    try:\n        # Use Django's language resolution logic instead of exact matching\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n        return []\n    except LookupError:\n        return [E004]\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation import get_supported_language_variant\n    \n    try:\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n    except LookupError:\n        return [E004]\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation import get_supported_language_variant\n    \n    try:\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n    except LookupError:\n        return [E004]\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation import get_supported_language_variant\n    \n    try:\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n    except LookupError:\n        return [E004]\n    return []\n",
      "\n@register(Tags.translation)\ndef check_language_settings_consistent(app_configs, **kwargs):\n    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n    from django.utils.translation.trans_real import get_supported_language_variant\n    \n    try:\n        # Use Django's language fallback logic to check if LANGUAGE_CODE is supported\n        get_supported_language_variant(settings.LANGUAGE_CODE)\n    except LookupError:\n        return [E004]\n    return []\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/core/checks/translation.py lines 1-10)": [
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n\nE001 = Error(\n    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n    id='translation.E001',\n)\n",
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n\nE001 = Error(\n    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n    id='translation.E001',\n)\n",
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n\nE001 = Error(\n    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n    id='translation.E001',\n)\n",
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n",
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n\nE001 = Error(\n    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n    id='translation.E001',\n)\n",
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n",
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n",
      "\nfrom django.conf import settings\nfrom django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n\nfrom . import Error, Tags, register\n\nE001 = Error(\n    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n    id='translation.E001',\n)\n"
    ],
    "Location 3 (/root/hy/projects_1/django/tests/check_framework/test_translation.py lines 78-86)": [
      "\n    def test_inconsistent_language_settings(self):\n        msg = (\n            'You have provided a value for the LANGUAGE_CODE setting that is '\n            'not in the LANGUAGES setting.'\n        )\n        # Test exact mismatch - should raise error\n        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n        \n        # Test sublanguage with base language available - should NOT raise error\n        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n        \n        # Test sublanguage without base language - should raise error\n        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n        \n        # Test exact match - should NOT raise error\n        with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\n    def test_inconsistent_language_settings(self):\n        msg = (\n            'You have provided a value for the LANGUAGE_CODE setting that is '\n            'not in the LANGUAGES setting.'\n        )\n        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n\n    def test_sublanguage_fallback_accepted(self):\n        \"\"\"Test that sublanguages are accepted when base language is available.\"\"\"\n        # Test case where sublanguage should be accepted due to base language fallback\n        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n        \n        with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n\n    def test_sublanguage_fallback_rejected(self):\n        \"\"\"Test that sublanguages are rejected when no base language is available.\"\"\"\n        msg = (\n            'You have provided a value for the LANGUAGE_CODE setting that is '\n            'not in the LANGUAGES setting.'\n        )\n        # Test case where sublanguage should be rejected (no base language available)\n        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # Test exact mismatch - should raise E004\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test sublanguage with available base language - should NOT raise E004\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Test sublanguage without base language - should raise E004\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test exact match - should NOT raise E004\n    with self.settings(LANGUAGE_CODE='de', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\n    def test_inconsistent_language_settings(self):\n        msg = (\n            'You have provided a value for the LANGUAGE_CODE setting that is '\n            'not in the LANGUAGES setting.'\n        )\n        # Test exact mismatch - should raise E004\n        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n        \n        # Test sublanguage with matching base language - should NOT raise E004\n        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n        \n        # Test sublanguage without matching base language - should raise E004\n        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n        \n        # Test exact match - should NOT raise E004\n        with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # Test exact match failure\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test sublanguage with base language available (should not error)\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Test sublanguage without base language available (should error)\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test exact match success (should not error)\n    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\n    def test_inconsistent_language_settings(self):\n        msg = (\n            'You have provided a value for the LANGUAGE_CODE setting that is '\n            'not in the LANGUAGES setting.'\n        )\n        # Test case where LANGUAGE_CODE is not in LANGUAGES and no fallback exists\n        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n        \n        # Test case where LANGUAGE_CODE is a sublanguage with available base language\n        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n        \n        # Test case where LANGUAGE_CODE sublanguage has no base language available\n        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [\n                Error(msg, id='translation.E004'),\n            ])\n        \n        # Test case where LANGUAGE_CODE exactly matches a language in LANGUAGES\n        with self.settings(LANGUAGE_CODE='de', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n            self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    # Test exact mismatch - should raise error\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test sublanguage with base language available - should NOT raise error\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Test sublanguage without base language - should raise error\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test exact match - should NOT raise error\n    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n",
      "\ndef test_inconsistent_language_settings(self):\n    msg = (\n        'You have provided a value for the LANGUAGE_CODE setting that is '\n        'not in the LANGUAGES setting.'\n    )\n    \n    # Test case where LANGUAGE_CODE is completely unavailable\n    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n    \n    # Test case where sublanguage should work with base language available\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Test case where exact match exists (should pass)\n    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [])\n    \n    # Test case where sublanguage has no base language available (should fail)\n    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n        self.assertEqual(check_language_settings_consistent(None), [\n            Error(msg, id='translation.E004'),\n        ])\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..cbbaf231ae 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,13 +1,17 @@\n-from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n-\n-from . import Error, Tags, register\n-\n-E001 = Error(\n-    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n-    id='translation.E001',\n-)\n \n+@register(Tags.translation)\n+def check_language_settings_consistent(app_configs, **kwargs):\n+    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n+    \n+    # Use Django's language fallback logic instead of exact matching\n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n+        # Only raise E004 if Django's language resolution can't find a match\n+        if settings.LANGUAGE_CODE not in available_tags:\n+            return [E004]\n+    return []\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +56,13 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n-@register(Tags.translation)\n-def check_language_settings_consistent(app_configs, **kwargs):\n-    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n-    return []\n+\n+from django.conf import settings\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n+\n+from . import Error, Tags, register\n+\n+E001 = Error(\n+    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n+    id='translation.E001',\n+)\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..78e281689c 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n         )\n+        # Test completely unrelated language - should still raise E004\n         with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n             ])\n+        \n+        # Test sublanguage with base language available - should NOT raise E004\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        # Test sublanguage without base language - should raise E004\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+        \n+        # Test exact match - should NOT raise E004\n+        with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_0": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..de793f5704 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,5 +1,6 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n \n@@ -7,7 +8,6 @@ E001 = Error(\n     'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n     id='translation.E001',\n )\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +52,14 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation import get_supported_language_variant\n+    \n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n         return [E004]\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..b3328c0902 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # Test exact language code not in LANGUAGES\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test sublanguage with base language available (should pass)\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Test sublanguage without base language (should fail)\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test exact match (should pass)\n+    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_1": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..110709d109 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,5 +1,6 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n \n@@ -7,7 +8,6 @@ E001 = Error(\n     'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n     id='translation.E001',\n )\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +52,15 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation import get_supported_language_variant\n+    \n+    try:\n+        # Use Django's language resolution logic instead of exact matching\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n         return [E004]\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..9a9461e83f 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n         )\n+        # Test exact mismatch - should raise error\n         with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n             ])\n+        \n+        # Test sublanguage with base language available - should NOT raise error\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        # Test sublanguage without base language - should raise error\n+        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+        \n+        # Test exact match - should NOT raise error\n+        with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_2": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..764ee8e592 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,5 +1,6 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n \n@@ -7,7 +8,6 @@ E001 = Error(\n     'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n     id='translation.E001',\n )\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +52,14 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation import get_supported_language_variant\n+    \n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+        return []\n+    except LookupError:\n         return [E004]\n-    return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..14bc9023b3 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,6 +75,7 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n@@ -84,3 +85,24 @@ class TranslationCheckTests(SimpleTestCase):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n             ])\n+\n+    def test_sublanguage_fallback_accepted(self):\n+        \"\"\"Test that sublanguages are accepted when base language is available.\"\"\"\n+        # Test case where sublanguage should be accepted due to base language fallback\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    def test_sublanguage_fallback_rejected(self):\n+        \"\"\"Test that sublanguages are rejected when no base language is available.\"\"\"\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        # Test case where sublanguage should be rejected (no base language available)\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n",
    "variant_3": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..28b91ccf45 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,5 +1,6 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n \n@@ -7,7 +8,6 @@ E001 = Error(\n     'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n     id='translation.E001',\n )\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +52,17 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation.trans_real import get_supported_language_variant\n+    \n+    try:\n+        # Use Django's language resolution logic to check if LANGUAGE_CODE\n+        # can be resolved to an available language (including fallback to base language)\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+        return []\n+    except LookupError:\n+        # Only raise E004 if the language code cannot be resolved at all\n         return [E004]\n-    return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..c3e3e9c71f 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # Test exact mismatch - should raise E004\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test sublanguage with available base language - should NOT raise E004\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Test sublanguage without base language - should raise E004\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test exact match - should NOT raise E004\n+    with self.settings(LANGUAGE_CODE='de', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_4": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..ade0982387 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,13 +1,8 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n-\n-E001 = Error(\n-    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n-    id='translation.E001',\n-)\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +47,15 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation.trans_real import get_supported_language_variant\n+    \n+    try:\n+        # Use Django's language resolution logic instead of exact matching\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+        return []\n+    except LookupError:\n         return [E004]\n-    return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..82fef72136 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n         )\n+        # Test exact mismatch - should raise E004\n         with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n             ])\n+        \n+        # Test sublanguage with matching base language - should NOT raise E004\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        # Test sublanguage without matching base language - should raise E004\n+        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+        \n+        # Test exact match - should NOT raise E004\n+        with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_5": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..de793f5704 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,5 +1,6 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n \n@@ -7,7 +8,6 @@ E001 = Error(\n     'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n     id='translation.E001',\n )\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +52,14 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation import get_supported_language_variant\n+    \n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n         return [E004]\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..d2b618f8ae 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # Test exact match failure\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test sublanguage with base language available (should not error)\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Test sublanguage without base language available (should error)\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test exact match success (should not error)\n+    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_6": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..7fb7c10ed7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,13 +1,8 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n-\n-E001 = Error(\n-    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n-    id='translation.E001',\n-)\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +47,14 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation import get_supported_language_variant\n+    \n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n         return [E004]\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..a1f6cd4fa7 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n         )\n+        # Test case where LANGUAGE_CODE is not in LANGUAGES and no fallback exists\n         with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n             ])\n+        \n+        # Test case where LANGUAGE_CODE is a sublanguage with available base language\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        # Test case where LANGUAGE_CODE sublanguage has no base language available\n+        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+        \n+        # Test case where LANGUAGE_CODE exactly matches a language in LANGUAGES\n+        with self.settings(LANGUAGE_CODE='de', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_7": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..7fb7c10ed7 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,13 +1,8 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n-\n-E001 = Error(\n-    'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n-    id='translation.E001',\n-)\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +47,14 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation import get_supported_language_variant\n+    \n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n         return [E004]\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..d7460153b6 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    # Test exact mismatch - should raise error\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test sublanguage with base language available - should NOT raise error\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Test sublanguage without base language - should raise error\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('en', 'English'), ('fr', 'French')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test exact match - should NOT raise error\n+    with self.settings(LANGUAGE_CODE='en', LANGUAGES=[('en', 'English'), ('de', 'German')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n",
    "variant_8": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..890b0fc150 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -1,5 +1,6 @@\n+\n from django.conf import settings\n-from django.utils.translation.trans_real import language_code_re\n+from django.utils.translation.trans_real import language_code_re, get_supported_language_variant\n \n from . import Error, Tags, register\n \n@@ -7,7 +8,6 @@ E001 = Error(\n     'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n     id='translation.E001',\n )\n-\n E002 = Error(\n     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n     id='translation.E002',\n@@ -52,10 +52,15 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n     ]\n \n \n+\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    from django.utils.translation.trans_real import get_supported_language_variant\n+    \n+    try:\n+        # Use Django's language fallback logic to check if LANGUAGE_CODE is supported\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n         return [E004]\n     return []\ndiff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 4cd79d803f..1ffcdc88a5 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -75,12 +75,29 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+\n+def test_inconsistent_language_settings(self):\n+    msg = (\n+        'You have provided a value for the LANGUAGE_CODE setting that is '\n+        'not in the LANGUAGES setting.'\n+    )\n+    \n+    # Test case where LANGUAGE_CODE is completely unavailable\n+    with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n+    \n+    # Test case where sublanguage should work with base language available\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Test case where exact match exists (should pass)\n+    with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de-at', 'Austrian German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [])\n+    \n+    # Test case where sublanguage has no base language available (should fail)\n+    with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+        self.assertEqual(check_language_settings_consistent(None), [\n+            Error(msg, id='translation.E004'),\n+        ])\n"
  }
}