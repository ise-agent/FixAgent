{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": [
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n    \n    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_0": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_1": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_2": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_3": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_4": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_5": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_6": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_7": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
    "variant_8": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..c972b50507 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,16 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both subscriptable axis (standard) and callable axis (GeoAxes)\n+    axis_dict = ax.axis() if callable(ax.axis) else ax.axis\n+    \n+    axis_dict[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+    axis_dict[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n"
  }
}