{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 1178-1178)": "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
    "Location 2 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 673-677)": "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
    "Location 3 (/root/hy/projects_1/matplotlib/lib/matplotlib/pyplot.py lines 225-225)": "\n    # make sure the init is pulled up so we can assign to it later\n    import matplotlib.backends\n    # Only close figures if not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
    "Location 4 (/root/hy/projects_1/matplotlib/lib/matplotlib/pyplot.py lines 941-941)": "\n        _pylab_helpers.Gcf.destroy_all()\n",
    "Location 5 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 681-684)": "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 1178-1178)": [
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\ndef get_backend():\n    \"\"\"\n    Return the name of the current backend.\n\n    See Also\n    --------\n    matplotlib.use\n    \"\"\"\n    backend = dict.__getitem__(rcParams, 'backend')\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n"
    ],
    "Location 2 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 673-677)": [
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Check if we're being called from get_backend() to avoid auto-resolution\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n",
      "\n        elif key == \"backend\" and self is globals().get(\"rcParams\"):\n            val = dict.__getitem__(self, key)\n            if val is rcsetup._auto_backend_sentinel:\n                # Add check to avoid auto-resolution from read-only calls\n                import inspect\n                frame = inspect.currentframe().f_back\n                if frame and frame.f_code.co_name == 'get_backend':\n                    return val  # Return sentinel without triggering switch\n                from matplotlib import pyplot as plt\n                plt.switch_backend(rcsetup._auto_backend_sentinel)\n"
    ],
    "Location 3 (/root/hy/projects_1/matplotlib/lib/matplotlib/pyplot.py lines 225-225)": [
      "\n    # make sure the init is pulled up so we can assign to it later\n    import matplotlib.backends\n    # Only close figures if not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
      "\n    # make sure the init is pulled up so we can assign to it later\n    import matplotlib.backends\n    # Only close if not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
      "\n    # Only close figures if we're not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
      "\n    global _backend_mod\n    # make sure the init is pulled up so we can assign to it later\n    import matplotlib.backends\n    # Only close if not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
      "\n    # make sure the init is pulled up so we can assign to it later\n    import matplotlib.backends\n    # Only close if not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
      "\n    # make sure the init is pulled up so we can assign to it later\n    import matplotlib.backends\n    # Only close if not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
      "\n    # make sure the init is pulled up so we can assign to it later\n    import matplotlib.backends\n    # Only close figures if not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n",
      "\n    # Only close figures if we're not switching from auto-detection\n    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n        close(\"all\")\n"
    ],
    "Location 4 (/root/hy/projects_1/matplotlib/lib/matplotlib/pyplot.py lines 941-941)": [
      "\n        _pylab_helpers.Gcf.destroy_all()\n",
      "\ndef close(fig=None):\n    \"\"\"\n    Close a figure window.\n\n    Parameters\n    ----------\n    fig : None or int or str or `.Figure`\n        The figure to close. There are a number of ways to specify this:\n\n        - *None*: the current figure\n\n        - `.Figure`: the given `.Figure` instance\n\n        - ``int``: a figure number\n\n        - ``str``: a figure name\n\n        - 'all': all figures\n\n    \"\"\"\n    if fig is None:\n        manager = _pylab_helpers.Gcf.get_active()\n        if manager is None:\n            return\n        else:\n            _pylab_helpers.Gcf.destroy(manager)\n    elif fig == 'all':\n        # Only destroy all figures if not switching from auto-detection\n        if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n            _pylab_helpers.Gcf.destroy_all()\n    elif isinstance(fig, int):\n        _pylab_helpers.Gcf.destroy(fig)\n    elif hasattr(fig, 'int'):\n        # if we are dealing with a type UUID, we\n        # can use its integer representation\n        _pylab_helpers.Gcf.destroy(fig.int)\n    elif isinstance(fig, str):\n        all_labels = get_figlabels()\n        if fig in all_labels:\n            num = get_fignums()[all_labels.index(fig)]\n",
      "\n        _pylab_helpers.Gcf.destroy_all()\n",
      "\n        _pylab_helpers.Gcf.destroy_all()\n",
      "\n        _pylab_helpers.Gcf.destroy_all()\n",
      "\n        _pylab_helpers.Gcf.destroy_all()\n",
      "\n        _pylab_helpers.Gcf.destroy_all()\n",
      "\n        _pylab_helpers.Gcf.destroy_all()\n"
    ],
    "Location 5 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 681-684)": [
      "\ndef _get_backend_or_none(self):\n    \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n    backend = dict.__getitem__(self, \"backend\")\n    return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n",
      "\n    def _get_backend_or_none(self):\n        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n        backend = dict.__getitem__(self, \"backend\")\n        return None if backend is rcsetup._auto_backend_sentinel else backend\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..bd04c70a60 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,20 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1181,9 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..afeaf41fd5 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,10 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # Only close figures if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +941,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_0": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..0dd823ec7d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..27b156259d 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,12 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # make sure the init is pulled up so we can assign to it later\n+    import matplotlib.backends\n+    # Only close figures if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +943,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_1": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..aac38c440f 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,18 +670,25 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n-    def _get_backend_or_none(self):\n-        \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n-        backend = dict.__getitem__(self, \"backend\")\n-        return None if backend is rcsetup._auto_backend_sentinel else backend\n+\n+def _get_backend_or_none(self):\n+    \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n+    backend = dict.__getitem__(self, \"backend\")\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n     def __repr__(self):\n         class_name = self.__class__.__name__\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..27b156259d 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,12 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # make sure the init is pulled up so we can assign to it later\n+    import matplotlib.backends\n+    # Only close figures if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +943,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_2": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..0dd823ec7d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..349ec125cf 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,12 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # make sure the init is pulled up so we can assign to it later\n+    import matplotlib.backends\n+    # Only close if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,7 +943,47 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n-        _pylab_helpers.Gcf.destroy_all()\n+\n+def close(fig=None):\n+    \"\"\"\n+    Close a figure window.\n+\n+    Parameters\n+    ----------\n+    fig : None or int or str or `.Figure`\n+        The figure to close. There are a number of ways to specify this:\n+\n+        - *None*: the current figure\n+\n+        - `.Figure`: the given `.Figure` instance\n+\n+        - ``int``: a figure number\n+\n+        - ``str``: a figure name\n+\n+        - 'all': all figures\n+\n+    \"\"\"\n+    if fig is None:\n+        manager = _pylab_helpers.Gcf.get_active()\n+        if manager is None:\n+            return\n+        else:\n+            _pylab_helpers.Gcf.destroy(manager)\n+    elif fig == 'all':\n+        # Only destroy all figures if not switching from auto-detection\n+        if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+            _pylab_helpers.Gcf.destroy_all()\n+    elif isinstance(fig, int):\n+        _pylab_helpers.Gcf.destroy(fig)\n+    elif hasattr(fig, 'int'):\n+        # if we are dealing with a type UUID, we\n+        # can use its integer representation\n+        _pylab_helpers.Gcf.destroy(fig.int)\n+    elif isinstance(fig, str):\n+        all_labels = get_figlabels()\n+        if fig in all_labels:\n+            num = get_fignums()[all_labels.index(fig)]\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n     elif hasattr(fig, 'int'):\n",
    "variant_3": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..0dd823ec7d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..d6eb4805a2 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,10 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # Only close figures if we're not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +941,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_4": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..1643588c71 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Check if we're being called from get_backend() to avoid auto-resolution\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..6915fae48f 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,13 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    global _backend_mod\n+    # make sure the init is pulled up so we can assign to it later\n+    import matplotlib.backends\n+    # Only close if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +944,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_5": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..0dd823ec7d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..f26db60d30 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,12 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # make sure the init is pulled up so we can assign to it later\n+    import matplotlib.backends\n+    # Only close if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +943,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_6": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..0dd823ec7d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..f26db60d30 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,12 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # make sure the init is pulled up so we can assign to it later\n+    import matplotlib.backends\n+    # Only close if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +943,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_7": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..0dd823ec7d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..27b156259d 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,12 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # make sure the init is pulled up so we can assign to it later\n+    import matplotlib.backends\n+    # Only close figures if not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +943,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n",
    "variant_8": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..0dd823ec7d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -670,14 +670,21 @@ class RcParams(MutableMapping, dict):\n \n         # In theory, this should only ever be used after the global rcParams\n         # has been set up, but better be safe e.g. in presence of breakpoints.\n+\n         elif key == \"backend\" and self is globals().get(\"rcParams\"):\n             val = dict.__getitem__(self, key)\n             if val is rcsetup._auto_backend_sentinel:\n+                # Add check to avoid auto-resolution from read-only calls\n+                import inspect\n+                frame = inspect.currentframe().f_back\n+                if frame and frame.f_code.co_name == 'get_backend':\n+                    return val  # Return sentinel without triggering switch\n                 from matplotlib import pyplot as plt\n                 plt.switch_backend(rcsetup._auto_backend_sentinel)\n \n         return dict.__getitem__(self, key)\n \n+\n     def _get_backend_or_none(self):\n         \"\"\"Get the requested backend, if any, without triggering resolution.\"\"\"\n         backend = dict.__getitem__(self, \"backend\")\n@@ -1175,7 +1182,17 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+\n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+\n+    See Also\n+    --------\n+    matplotlib.use\n+    \"\"\"\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    return None if backend is rcsetup._auto_backend_sentinel else backend\n \n \n def interactive(b):\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..d6eb4805a2 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,10 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+\n+    # Only close figures if we're not switching from auto-detection\n+    if rcParams.get('backend') is not rcsetup._auto_backend_sentinel:\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n@@ -938,6 +941,7 @@ def close(fig=None):\n         else:\n             _pylab_helpers.Gcf.destroy(manager)\n     elif fig == 'all':\n+\n         _pylab_helpers.Gcf.destroy_all()\n     elif isinstance(fig, int):\n         _pylab_helpers.Gcf.destroy(fig)\n"
  }
}