{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/neighbors/base.py lines 255-260)": "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/neighbors/base.py lines 328-330)": "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
    "Location 3 (/root/hy/projects_1/scikit-learn/sklearn/neighbors/base.py lines 342-347)": "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/neighbors/base.py lines 255-260)": [
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n",
      "\n        if self.n_neighbors is not None:\n            if not isinstance(self.n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n                )\n            if self.n_neighbors <= 0:\n                raise ValueError(\n                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                )\n"
    ],
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/neighbors/base.py lines 328-330)": [
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n",
      "\n        if n_neighbors is None:\n            n_neighbors = self.n_neighbors\n        else:\n            if not isinstance(n_neighbors, (int, np.integer)):\n                raise TypeError(\n                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n                )\n"
    ],
    "Location 3 (/root/hy/projects_1/scikit-learn/sklearn/neighbors/base.py lines 342-347)": [
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n",
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n",
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n",
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n",
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n",
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n",
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n",
      "\n        train_size = self._fit_X.shape[0]\n        if n_neighbors > train_size:\n            raise ValueError(\n                f\"Expected n_neighbors <= n_samples, \"\n                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n            )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..975dee885 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -339,11 +348,11 @@ class KNeighborsMixin(object):\n             n_neighbors += 1\n \n         train_size = self._fit_X.shape[0]\n+\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_0": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_1": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_2": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_3": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_4": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_5": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_6": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_7": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n",
    "variant_8": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..c1951aeaa 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -252,11 +252,15 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             raise ValueError(\"algorithm = '%s' not recognized\"\n                              % self.algorithm)\n \n+\n         if self.n_neighbors is not None:\n+            if not isinstance(self.n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(self.n_neighbors).__name__}: {self.n_neighbors}\"\n+                )\n             if self.n_neighbors <= 0:\n                 raise ValueError(\n-                    \"Expected n_neighbors > 0. Got %d\" %\n-                    self.n_neighbors\n+                    f\"Expected n_neighbors > 0. Got {self.n_neighbors}\"\n                 )\n \n         return self\n@@ -325,9 +329,14 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n+\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n-\n+        else:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}: {n_neighbors}\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -338,12 +347,13 @@ class KNeighborsMixin(object):\n             # returned, which is removed later\n             n_neighbors += 1\n \n+        train_size = self._fit_X.shape[0]\n+\n         train_size = self._fit_X.shape[0]\n         if n_neighbors > train_size:\n             raise ValueError(\n-                \"Expected n_neighbors <= n_samples, \"\n-                \" but n_samples = %d, n_neighbors = %d\" %\n-                (train_size, n_neighbors)\n+                f\"Expected n_neighbors <= n_samples, \"\n+                f\"but n_samples = {train_size}, n_neighbors = {n_neighbors}\"\n             )\n         n_samples, _ = X.shape\n         sample_range = np.arange(n_samples)[:, None]\n"
  }
}