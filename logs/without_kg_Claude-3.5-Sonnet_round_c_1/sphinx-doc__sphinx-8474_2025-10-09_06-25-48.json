{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/builders/singlehtml.py lines 114-123)": "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/domains/std.py lines 1074-1079)": "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
    "Location 3 (/root/hy/projects_1/sphinx/sphinx/domains/std.py lines 852-857)": "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try looking in master document\n            if (hasattr(builder, 'name') and builder.name == 'singlehtml' and \n                hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers):\n                try:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                except (KeyError, IndexError):\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n",
    "Location 4 (/root/hy/projects_1/sphinx/sphinx/builders/singlehtml.py lines 157-163)": "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n",
    "Location 5 (/root/hy/projects_1/sphinx/sphinx/builders/singlehtml.py lines 104-113)": "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/builders/singlehtml.py lines 114-123)": [
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n"
    ],
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/domains/std.py lines 1074-1079)": [
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError):\n                # For singlehtml builder, try master document\n                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n                    try:\n                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                    except (KeyError, IndexError):\n                        pass\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n"
    ],
    "Location 3 (/root/hy/projects_1/sphinx/sphinx/domains/std.py lines 852-857)": [
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try master document as fallback\n            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n                try:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                except (KeyError, IndexError):\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try master document as fallback\n            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n                try:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                except (KeyError, IndexError):\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try looking in master document\n            if (hasattr(builder, 'name') and builder.name == 'singlehtml' and \n                hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers):\n                try:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                except (KeyError, IndexError):\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try master document as fallback\n            if (hasattr(builder, 'name') and builder.name == 'singlehtml' and \n                hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers):\n                try:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                except (KeyError, IndexError):\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try looking in master document\n            if hasattr(builder, 'name') and builder.name == 'singlehtml':\n                try:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                except (KeyError, IndexError):\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try to find figure in master document\n            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n                try:\n                    fignumber = self.get_fignumber(env, builder, figtype, env.config.master_doc, target_node)\n                    if fignumber is not None:\n                        # Found in master document, continue processing\n                        pass\n                    else:\n                        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                     location=node)\n                        return contnode\n                except ValueError:\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                 location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                             location=node)\n                return contnode\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try master document as fallback\n            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n                try:\n                    figure_id = target_node['ids'][0]\n                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n                except (KeyError, IndexError):\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n",
      "\n        try:\n            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n            if fignumber is None:\n                return contnode\n        except ValueError:\n            # For singlehtml builder, try master document as fallback\n            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n                try:\n                    fignumber = self.get_fignumber(env, builder, figtype, env.config.master_doc, target_node)\n                    if fignumber is not None:\n                        pass  # Successfully found fignumber, continue processing\n                    else:\n                        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                       location=node)\n                        return contnode\n                except ValueError:\n                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                                   location=node)\n                    return contnode\n            else:\n                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                               location=node)\n                return contnode\n"
    ],
    "Location 4 (/root/hy/projects_1/sphinx/sphinx/builders/singlehtml.py lines 157-163)": [
      "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n",
      "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n",
      "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n",
      "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n",
      "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n",
      "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n",
      "\ndef write(self, *ignored: Any) -> None:\n    docnames = self.env.all_docs\n\n    with progress_message(__('preparing documents')):\n        self.prepare_writing(docnames)  # type: ignore\n\n    with progress_message(__('assembling single document')):\n        doctree = self.assemble_doctree()\n        self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n        self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n    with progress_message(__('writing')):\n        self.write_doc_serialized(self.config.master_doc, doctree)\n",
      "\n    def write(self, *ignored: Any) -> None:\n        docnames = self.env.all_docs\n\n        with progress_message(__('preparing documents')):\n            self.prepare_writing(docnames)  # type: ignore\n\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n\n        with progress_message(__('writing')):\n            self.write_doc_serialized(self.config.master_doc, doctree)\n"
    ],
    "Location 5 (/root/hy/projects_1/sphinx/sphinx/builders/singlehtml.py lines 104-113)": [
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # Merge all fignumbers to single fignumber.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it replaces key of secnumbers to\n    #       tuple of docname and refid.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                new_fignumbers[figtype][id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n",
      "\n    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n        # Merge all fignumbers to single fignumber.\n        #\n        # Note: current Sphinx has refid confliction in singlehtml mode.\n        #       To avoid the problem, it replaces key of secnumbers to\n        #       tuple of docname and refid.\n        #\n        #       There are related codes in inline_all_toctres() and\n        #       HTMLTranslter#add_fignumber().\n        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n        for docname, fignumlist in self.env.toc_fignumbers.items():\n            for figtype, fignums in fignumlist.items():\n                new_fignumbers.setdefault(figtype, {})\n                for id, fignum in fignums.items():\n                    new_fignumbers[figtype][id] = fignum\n\n        return {self.config.master_doc: new_fignumbers}\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cf9d89637 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -111,14 +112,14 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n+\n         new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n@@ -154,6 +155,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..cd8d1f7d6 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -849,6 +849,7 @@ class StandardDomain(Domain):\n \n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n@@ -1070,10 +1071,18 @@ class StandardDomain(Domain):\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n         else:\n+            try:\n+\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_0": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cad4e988b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..610bc2df5 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,28 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try looking in master document\n+            if (hasattr(builder, 'name') and builder.name == 'singlehtml' and \n+                hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers):\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1083,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_1": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cad4e988b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..733939c89 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,27 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try master document as fallback\n+            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1082,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_2": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cad4e988b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..733939c89 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,27 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try master document as fallback\n+            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1082,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_3": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..bba74ede0 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,46 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n-        #\n-        # Note: current Sphinx has refid confliction in singlehtml mode.\n-        #       To avoid the problem, it replaces key of secnumbers to\n-        #       tuple of docname and refid.\n-        #\n-        #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..610bc2df5 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,28 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try looking in master document\n+            if (hasattr(builder, 'name') and builder.name == 'singlehtml' and \n+                hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers):\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1083,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_4": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cad4e988b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..4165eba63 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,28 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try master document as fallback\n+            if (hasattr(builder, 'name') and builder.name == 'singlehtml' and \n+                hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers):\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1083,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_5": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cad4e988b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..1b24032d0 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,27 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try looking in master document\n+            if hasattr(builder, 'name') and builder.name == 'singlehtml':\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1082,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_6": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cad4e988b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..df7fd1978 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,33 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try to find figure in master document\n+            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n+                try:\n+                    fignumber = self.get_fignumber(env, builder, figtype, env.config.master_doc, target_node)\n+                    if fignumber is not None:\n+                        # Found in master document, continue processing\n+                        pass\n+                    else:\n+                        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                     location=node)\n+                        return contnode\n+                except ValueError:\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                 location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                             location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1088,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_7": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..e79629bc7 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -154,13 +174,20 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n-        with progress_message(__('assembling single document')):\n-            doctree = self.assemble_doctree()\n-            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n-            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n \n-        with progress_message(__('writing')):\n-            self.write_doc_serialized(self.config.master_doc, doctree)\n+def write(self, *ignored: Any) -> None:\n+    docnames = self.env.all_docs\n+\n+    with progress_message(__('preparing documents')):\n+        self.prepare_writing(docnames)  # type: ignore\n+\n+    with progress_message(__('assembling single document')):\n+        doctree = self.assemble_doctree()\n+        self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n+        self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n+\n+    with progress_message(__('writing')):\n+        self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\n \n     def finish(self) -> None:\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..733939c89 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,27 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try master document as fallback\n+            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n+                try:\n+                    figure_id = target_node['ids'][0]\n+                    fignumber = env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                except (KeyError, IndexError):\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1082,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n",
    "variant_8": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..cad4e988b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,6 +101,7 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n+\n     def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n         # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n         # Merge all fignumbers to single fignumber.\n@@ -115,13 +116,32 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    new_fignumbers[figtype][id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # Merge all fignumbers to single fignumber.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it replaces key of secnumbers to\n+    #       tuple of docname and refid.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                new_fignumbers[figtype][id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n+\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n@@ -148,6 +168,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n             'display_toc': display_toc,\n         }\n \n+    def write(self, *ignored: Any) -> None:\n+        docnames = self.env.all_docs\n+\n+        with progress_message(__('preparing documents')):\n+            self.prepare_writing(docnames)  # type: ignore\n+\n+\n     def write(self, *ignored: Any) -> None:\n         docnames = self.env.all_docs\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..770fba129 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -847,14 +847,32 @@ class StandardDomain(Domain):\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n \n+        try:\n+            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+\n         try:\n             fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n-            return contnode\n+            # For singlehtml builder, try master document as fallback\n+            if hasattr(builder, 'name') and builder.name == 'singlehtml' and hasattr(env, 'config'):\n+                try:\n+                    fignumber = self.get_fignumber(env, builder, figtype, env.config.master_doc, target_node)\n+                    if fignumber is not None:\n+                        pass  # Successfully found fignumber, continue processing\n+                    else:\n+                        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                       location=node)\n+                        return contnode\n+                except ValueError:\n+                    logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                                   location=node)\n+                    return contnode\n+            else:\n+                logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                               location=node)\n+                return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,11 +1087,20 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+        else:\n+            try:\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n                 return env.toc_fignumbers[docname][figtype][figure_id]\n-            except (KeyError, IndexError) as exc:\n+            except (KeyError, IndexError):\n+                # For singlehtml builder, try master document\n+                if hasattr(env, 'config') and env.config.master_doc in env.toc_fignumbers:\n+                    try:\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][figure_id]\n+                    except (KeyError, IndexError):\n+                        pass\n                 # target_node is found, but fignumber is not assigned.\n                 # Maybe it is defined in orphaned document.\n                 raise ValueError from exc\n"
  }
}