{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/migrations/serializer.py lines 169-173)": "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/migrations/serializer.py lines 169-173)": [
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n",
      "\nclass FunctionTypeSerializer(BaseSerializer):\n    def serialize(self):\n        if getattr(self.value, \"__self__\", None) and isinstance(\n            self.value.__self__, type\n        ):\n            klass = self.value.__self__\n            module = klass.__module__\n            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                \"import %s\" % module\n            }\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..c2e5bd4a96 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -166,9 +166,10 @@ class FunctionTypeSerializer(BaseSerializer):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n             self.value.__self__, type\n         ):\n+\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_0": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_1": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_2": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_3": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_4": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_5": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_6": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_7": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
    "variant_8": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d8b44ea5ed 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -161,6 +161,12 @@ class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n         return \"frozenset([%s])\"\n \n \n+class FunctionTypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        if getattr(self.value, \"__self__\", None) and isinstance(\n+            self.value.__self__, type\n+        ):\n+\n class FunctionTypeSerializer(BaseSerializer):\n     def serialize(self):\n         if getattr(self.value, \"__self__\", None) and isinstance(\n@@ -168,7 +174,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n"
  }
}