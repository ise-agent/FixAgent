{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/axis.py lines 1240-1248)": "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Update shared axes limits (without emit to prevent recursion)\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/axis.py lines 1240-1248)": [
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n",
      "\n        if emit:\n            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n        \n        # Call all of the other axes that are shared with this one\n        for other in self._get_shared_axes():\n            if other is not self.axes:\n                other._axis_map[name]._set_lim(\n                    v0, v1, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n                # Process callback for shared axis after limit is set\n                if emit:\n                    other.callbacks.process(f\"{name}lim_changed\", other)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..27a932519d 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+\n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_0": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..d5f21ad5a0 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Update shared axes limits (without emit to prevent recursion)\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_1": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_2": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_3": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_4": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_5": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_6": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_7": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n",
    "variant_8": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..7b6e43d84e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,15 +1237,20 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+\n         if emit:\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n-            for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+        \n+        # Call all of the other axes that are shared with this one\n+        for other in self._get_shared_axes():\n+            if other is not self.axes:\n+                other._axis_map[name]._set_lim(\n+                    v0, v1, emit=False, auto=auto)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n+                # Process callback for shared axis after limit is set\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n \n         self.stale = True\n         return v0, v1\n"
  }
}