{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/views/debug.py lines 91-94)": "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(None, item) for item in value)\n            else:\n                cleansed = value\n",
    "Location 2 (/root/hy/projects_1/django/django/views/debug.py lines 85-87)": "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested\n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
    "Location 3 (/root/hy/projects_1/django/django/views/debug.py lines 88-90)": "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested \n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
    "Location 4 (/root/hy/projects_1/django/django/views/debug.py lines 95-97)": "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
    "Location 5 (/root/hy/projects_1/django/django/views/debug.py lines 99-100)": "\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/views/debug.py lines 91-94)": [
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(f\"{key}[{i}]\", item) for i, item in enumerate(value))\n            else:\n                cleansed = value\n",
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(str(i), item) for i, item in enumerate(value)]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n",
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(str(i), v) for i, v in enumerate(value))\n            else:\n                cleansed = value\n",
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting('', item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n",
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(str(i), v) for i, v in enumerate(value))\n            else:\n                cleansed = value\n",
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(str(i), item) for i, item in enumerate(value))\n            else:\n                cleansed = value\n",
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting('', item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n",
      "\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting('', item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/views/debug.py lines 85-87)": [
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested structures\n        that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        \n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n        \n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested\n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested\n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        \n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n        \n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested \n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        \n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested\n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, v) for v in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested\n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested\n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n        \n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n        \n        return cleansed\n",
      "\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary or other iterable, recursively cleanse nested\n        structures that may contain sensitive data.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n"
    ],
    "Location 3 (/root/hy/projects_1/django/django/views/debug.py lines 88-90)": [
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting('', item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(f\"{key}[{i}]\", item) for i, item in enumerate(value))\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting('', item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                original_type = type(value)\n                cleansed = original_type(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(f\"{key}[{i}]\", v) for i, v in enumerate(value))\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n"
    ],
    "Location 4 (/root/hy/projects_1/django/django/views/debug.py lines 95-97)": [
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n"
    ],
    "Location 5 (/root/hy/projects_1/django/django/views/debug.py lines 99-100)": [
      "\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
      "\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
      "\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n                cleansed = type(value)(cleansed_items)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n",
      "\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
      "\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, (list, tuple)):\n                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n",
      "\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..c039a3718a 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -82,20 +82,29 @@ class SafeExceptionReporterFilter:\n \n     def cleanse_setting(self, key, value):\n         \"\"\"\n+\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested structures.\n         \"\"\"\n+\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n+\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(\n+                    self.cleanse_setting(key, item) for item in value\n+                )\n             else:\n                 cleansed = value\n+\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n \n+\n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n \n",
    "variant_0": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..17b74bbee7 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,16 +80,22 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested\n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n@@ -101,6 +107,55 @@ class SafeExceptionReporterFilter:\n \n         return cleansed\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+        Cleanse an individual setting key/value of sensitive content. If the\n+        value is a dictionary or other iterable, recursively cleanse nested \n+        structures that may contain sensitive data.\n+        \"\"\"\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(None, item) for item in value)\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+\n     def get_safe_settings(self):\n         \"\"\"\n         Return a dictionary of the settings module with values of sensitive\n",
    "variant_1": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..b691d1c80e 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,22 +80,69 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested structures\n+        that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+        \n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+        \n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting('', item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n \n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(f\"{key}[{i}]\", item) for i, item in enumerate(value))\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+\n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n \n",
    "variant_2": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..74c8b34205 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,22 +80,68 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested\n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(f\"{key}[{i}]\", item) for i, item in enumerate(value))\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(str(i), item) for i, item in enumerate(value)]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n \n+\n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n \n",
    "variant_3": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..ef45caca07 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,22 +80,67 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested\n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+        \n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+        \n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n \n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(str(i), v) for i, v in enumerate(value))\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+\n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n \n",
    "variant_4": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..6323221c9a 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,16 +80,77 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested \n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+        \n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting('', item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n             else:\n                 cleansed = value\n         except TypeError:\n@@ -101,6 +162,8 @@ class SafeExceptionReporterFilter:\n \n         return cleansed\n \n+        return cleansed\n+\n     def get_safe_settings(self):\n         \"\"\"\n         Return a dictionary of the settings module with values of sensitive\n",
    "variant_5": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..fd61495a22 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,22 +80,61 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested\n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, v) for v in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting('', item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(str(i), v) for i, v in enumerate(value))\n             else:\n                 cleansed = value\n+\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n \n+\n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n \n",
    "variant_6": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..c92e91d198 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,16 +80,76 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested\n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                original_type = type(value)\n+                cleansed = original_type(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(str(i), item) for i, item in enumerate(value))\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n",
    "variant_7": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..d4293f06b8 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,16 +80,76 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested\n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+        \n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+        \n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(f\"{key}[{i}]\", v) for i, v in enumerate(value))\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting('', item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n",
    "variant_8": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..006a388627 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -80,22 +80,69 @@ class SafeExceptionReporterFilter:\n     cleansed_substitute = '********************'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n \n+    def cleanse_setting(self, key, value):\n+        \"\"\"\n+\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or other iterable, recursively cleanse nested\n+        structures that may contain sensitive data.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting(key, item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+        if callable(cleansed):\n+            cleansed = CallableSettingWrapper(cleansed)\n+\n+        return cleansed\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n+            else:\n+                cleansed = value\n+        except TypeError:\n+            # If the key isn't regex-able, just return as-is.\n+            cleansed = value\n+\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed_items = [self.cleanse_setting('', item) for item in value]\n+                cleansed = type(value)(cleansed_items)\n+            else:\n+                cleansed = value\n+\n+        try:\n+            if self.hidden_settings.search(key):\n+                cleansed = self.cleansed_substitute\n+            elif isinstance(value, dict):\n+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n \n+\n         if callable(cleansed):\n             cleansed = CallableSettingWrapper(cleansed)\n \n"
  }
}