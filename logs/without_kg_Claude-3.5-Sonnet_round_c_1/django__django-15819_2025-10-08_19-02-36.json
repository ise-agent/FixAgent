{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 134-151)": "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Track foreign key references to the same target model\n                target_model_counts = {}\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        rel_to = relations[column_name][1]\n                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n                \n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n",
    "Location 2 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 165-188)": "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Add related_name if multiple foreign keys point to same model\n                        if rel_to in fk_target_counts and fk_target_counts[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
    "Location 3 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 98-102)": "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Count foreign key references to each target model\n                target_model_counts = {}\n                for rel in relations.values():\n                    target_table = rel[1]\n                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n",
    "Location 4 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 227-232)": "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 134-151)": [
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                target_model_counts = {}  # Track how many FKs point to each target model\n                \n                # Count foreign key references to each target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        rel_to = relations[column_name][1]\n                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n                \n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Count foreign key references to each target model to handle clashing reverse accessors\n                target_model_counts = {}\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        rel_to = relations[column_name][1]\n                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n                \n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Track foreign key references to detect multiple FKs to same model\n                fk_target_counts = {}\n                fk_field_names = {}\n                \n                # First pass: count foreign key references to each target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        rel_to = relations[column_name][1]\n                        if rel_to in fk_target_counts:\n                            fk_target_counts[rel_to] += 1\n                        else:\n                            fk_target_counts[rel_to] = 1\n                            fk_field_names[rel_to] = []\n                \n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n                    \n                    # Track field names for foreign keys to generate unique related_name\n                    if is_relation:\n                        rel_to = relations[column_name][1]\n                        fk_field_names[rel_to].append(att_name)\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                target_model_count = {}  # Count foreign keys per target model\n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n                    \n                    # Count foreign key references to target models\n                    if is_relation:\n                        rel_to = relations[column_name].rel_to\n                        target_model_count[rel_to] = target_model_count.get(rel_to, 0) + 1\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Track FK references to same target model to avoid reverse accessor clashes\n                target_model_count = {}\n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                \n                # Count foreign key references to each target model to detect clashes\n                target_model_counts = {}\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        rel_to = relations[column_name][1]\n                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n                \n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                target_model_count = {}  # Track how many FKs point to each target model\n                \n                # First pass: count foreign key references per target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        rel_to = relations[column_name][1]\n                        target_model_count[rel_to] = target_model_count.get(rel_to, 0) + 1\n                \n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Track foreign key references to detect multiple FKs to same model\n                fk_target_counts = {}\n                fk_field_names = {}\n                \n                # First pass: count foreign key references to each target model\n                for row in table_description:\n                    column_name = row.name\n                    if column_name in relations:\n                        rel_to = relations[column_name][1]\n                        if rel_to in fk_target_counts:\n                            fk_target_counts[rel_to] += 1\n                        else:\n                            fk_target_counts[rel_to] = 1\n                            fk_field_names[rel_to] = []\n                \n                for row in table_description:\n                    comment_notes = (\n                        []\n                    )  # Holds Field notes, to be displayed in a Python comment.\n                    extra_params = {}  # Holds Field parameters such as 'db_column'.\n                    column_name = row.name\n                    is_relation = column_name in relations\n\n                    att_name, params, notes = self.normalize_col_name(\n                        column_name, used_column_names, is_relation\n                    )\n                    extra_params.update(params)\n                    comment_notes.extend(notes)\n\n                    used_column_names.append(att_name)\n                    column_to_field_name[column_name] = att_name\n                    \n                    # Track field names for foreign keys to generate related_name\n                    if is_relation:\n                        rel_to = relations[column_name][1]\n                        fk_field_names[rel_to].append(att_name)\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 165-188)": [
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Add related_name if multiple foreign keys point to the same model\n                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Add related_name if multiple FKs point to the same model\n                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Add related_name if multiple FKs point to the same model\n                        if rel_to in target_model_refs and target_model_refs[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Add related_name if multiple foreign keys point to the same model\n                        if rel_to in target_model_counts and target_model_counts[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Add related_name if multiple FKs point to the same model\n                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Add related_name for multiple foreign keys to same model\n                        if rel_to in fk_target_counts and fk_target_counts[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Add related_name to prevent reverse accessor clashes\n                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        \n                        # Add related_name if multiple foreign keys point to the same model\n                        if rel_to in target_model_counts and target_model_counts[rel_to] > 1:\n                            extra_params[\"related_name\"] = att_name\n                        \n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n"
    ],
    "Location 3 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 98-102)": [
      "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Analyze relations to identify target models with multiple foreign keys\n                target_model_counts = {}\n                for rel in relations.values():\n                    if rel[1]:  # If there's a related table\n                        target_table = rel[1]\n                        target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n",
      "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Count foreign key references to each target model\n                target_model_counts = {}\n                for rel in relations.values():\n                    target_table = rel[1]\n                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n",
      "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Count foreign key references to each target model\n                target_model_counts = {}\n                for rel in relations.values():\n                    target_table = rel[1]\n                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n",
      "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Count foreign key references to each target table\n                target_table_counts = {}\n                for rel in relations.values():\n                    target_table = rel[1]\n                    target_table_counts[target_table] = target_table_counts.get(target_table, 0) + 1\n",
      "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Analyze relations to identify multiple FKs pointing to same target\n                target_model_counts = {}\n                for column_name, (target_table, target_column) in relations.items():\n                    target_model_name = table2model(target_table)\n                    target_model_counts[target_model_name] = target_model_counts.get(target_model_name, 0) + 1\n",
      "\n                try:\n                    try:\n                        relations = connection.introspection.get_relations(\n                            cursor, table_name\n                        )\n                    except NotImplementedError:\n                        relations = {}\n                    \n                    # Count foreign key references to each target model\n                    target_model_counts = {}\n                    for column_name, (target_table, target_column) in relations.items():\n                        if target_table in target_model_counts:\n                            target_model_counts[target_table] += 1\n                        else:\n                            target_model_counts[target_table] = 1\n",
      "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Count foreign key references to each target model\n                target_model_counts = {}\n                for rel in relations.values():\n                    target_table = rel[1]\n                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n",
      "\n                try:\n                    relations = connection.introspection.get_relations(\n                        cursor, table_name\n                    )\n                except NotImplementedError:\n                    relations = {}\n                \n                # Count foreign key references to each target model\n                target_model_counts = {}\n                for column_name, (target_table, target_column) in relations.items():\n                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n"
    ],
    "Location 4 (/root/hy/projects_1/django/django/core/management/commands/inspectdb.py lines 227-232)": [
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..21e935d55d 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,6 +95,7 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n+\n                         relations = connection.introspection.get_relations(\n                             cursor, table_name\n                         )\n@@ -131,8 +132,15 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Track target models that have multiple foreign keys pointing to them\n+                target_model_counts = {}\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = table2model(ref_table) if ref_table != table_name else \"self\"\n+                    target_model_counts[target_model] = target_model_counts.get(target_model, 0) + 1\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,9 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Add related_name if multiple fields point to the same target model\n+                        if target_model_counts.get(rel_to, 0) > 1:\n+                            extra_params[\"related_name\"] = att_name\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +236,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_0": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..2129a73c8b 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,19 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Count foreign key references to each target model\n+                target_model_counts = {}\n+                for rel in relations.values():\n+                    target_table = rel[1]\n+                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +139,17 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Track foreign key references to the same target model\n+                target_model_counts = {}\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        rel_to = relations[column_name][1]\n+                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +179,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +200,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Add related_name if multiple foreign keys point to same model\n+                        if rel_to in fk_target_counts and fk_target_counts[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +247,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_1": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..4253474326 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,20 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Analyze relations to identify target models with multiple foreign keys\n+                target_model_counts = {}\n+                for rel in relations.values():\n+                    if rel[1]:  # If there's a related table\n+                        target_table = rel[1]\n+                        target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +140,18 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                target_model_counts = {}  # Track how many FKs point to each target model\n+                \n+                # Count foreign key references to each target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        rel_to = relations[column_name][1]\n+                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +181,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +202,9 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Add related_name if multiple foreign keys point to the same model\n+                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +247,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_2": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..f9f9d22bda 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,19 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Count foreign key references to each target model\n+                target_model_counts = {}\n+                for rel in relations.values():\n+                    target_table = rel[1]\n+                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +139,18 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Count foreign key references to each target model to handle clashing reverse accessors\n+                target_model_counts = {}\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        rel_to = relations[column_name][1]\n+                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +180,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +201,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Add related_name if multiple FKs point to the same model\n+                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +248,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_3": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..257815f70a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,19 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Count foreign key references to each target model\n+                target_model_counts = {}\n+                for rel in relations.values():\n+                    target_table = rel[1]\n+                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +139,24 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Track foreign key references to detect multiple FKs to same model\n+                fk_target_counts = {}\n+                fk_field_names = {}\n+                \n+                # First pass: count foreign key references to each target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        rel_to = relations[column_name][1]\n+                        if rel_to in fk_target_counts:\n+                            fk_target_counts[rel_to] += 1\n+                        else:\n+                            fk_target_counts[rel_to] = 1\n+                            fk_field_names[rel_to] = []\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -149,6 +173,11 @@ class Command(BaseCommand):\n \n                     used_column_names.append(att_name)\n                     column_to_field_name[column_name] = att_name\n+                    \n+                    # Track field names for foreign keys to generate unique related_name\n+                    if is_relation:\n+                        rel_to = relations[column_name][1]\n+                        fk_field_names[rel_to].append(att_name)\n \n                     # Add primary_key and unique, if necessary.\n                     if column_name == primary_key_column:\n@@ -162,6 +191,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +212,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Add related_name if multiple FKs point to the same model\n+                        if rel_to in target_model_refs and target_model_refs[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +259,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_4": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..7e55dcdc6f 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,19 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Count foreign key references to each target table\n+                target_table_counts = {}\n+                for rel in relations.values():\n+                    target_table = rel[1]\n+                    target_table_counts[target_table] = target_table_counts.get(target_table, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +139,10 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                target_model_count = {}  # Count foreign keys per target model\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -149,6 +159,11 @@ class Command(BaseCommand):\n \n                     used_column_names.append(att_name)\n                     column_to_field_name[column_name] = att_name\n+                    \n+                    # Count foreign key references to target models\n+                    if is_relation:\n+                        rel_to = relations[column_name].rel_to\n+                        target_model_count[rel_to] = target_model_count.get(rel_to, 0) + 1\n \n                     # Add primary_key and unique, if necessary.\n                     if column_name == primary_key_column:\n@@ -162,6 +177,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +198,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Add related_name if multiple foreign keys point to the same model\n+                        if rel_to in target_model_counts and target_model_counts[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +245,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_5": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..7a132520b6 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,19 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Analyze relations to identify multiple FKs pointing to same target\n+                target_model_counts = {}\n+                for column_name, (target_table, target_column) in relations.items():\n+                    target_model_name = table2model(target_table)\n+                    target_model_counts[target_model_name] = target_model_counts.get(target_model_name, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +139,11 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Track FK references to same target model to avoid reverse accessor clashes\n+                target_model_count = {}\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +173,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +194,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Add related_name if multiple FKs point to the same model\n+                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +241,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_6": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..c229f0fc8d 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -93,6 +93,9 @@ class Command(BaseCommand):\n                 if table_name_filter is not None and callable(table_name_filter):\n                     if not table_name_filter(table_name):\n                         continue\n+                try:\n+                    try:\n+\n                 try:\n                     try:\n                         relations = connection.introspection.get_relations(\n@@ -100,6 +103,14 @@ class Command(BaseCommand):\n                         )\n                     except NotImplementedError:\n                         relations = {}\n+                    \n+                    # Count foreign key references to each target model\n+                    target_model_counts = {}\n+                    for column_name, (target_table, target_column) in relations.items():\n+                        if target_table in target_model_counts:\n+                            target_model_counts[target_table] += 1\n+                        else:\n+                            target_model_counts[target_table] = 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +142,18 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                \n+                # Count foreign key references to each target model to detect clashes\n+                target_model_counts = {}\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        rel_to = relations[column_name][1]\n+                        target_model_counts[rel_to] = target_model_counts.get(rel_to, 0) + 1\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +183,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +204,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Add related_name for multiple foreign keys to same model\n+                        if rel_to in fk_target_counts and fk_target_counts[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +251,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_7": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..256bb5d720 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,19 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Count foreign key references to each target model\n+                target_model_counts = {}\n+                for rel in relations.values():\n+                    target_table = rel[1]\n+                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +139,18 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                target_model_count = {}  # Track how many FKs point to each target model\n+                \n+                # First pass: count foreign key references per target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        rel_to = relations[column_name][1]\n+                        target_model_count[rel_to] = target_model_count.get(rel_to, 0) + 1\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +180,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +201,9 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Add related_name to prevent reverse accessor clashes\n+                        if rel_to in fk_count_per_model and fk_count_per_model[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +246,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_8": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..4903a10006 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -95,11 +95,18 @@ class Command(BaseCommand):\n                         continue\n                 try:\n                     try:\n-                        relations = connection.introspection.get_relations(\n-                            cursor, table_name\n-                        )\n-                    except NotImplementedError:\n-                        relations = {}\n+\n+                try:\n+                    relations = connection.introspection.get_relations(\n+                        cursor, table_name\n+                    )\n+                except NotImplementedError:\n+                    relations = {}\n+                \n+                # Count foreign key references to each target model\n+                target_model_counts = {}\n+                for column_name, (target_table, target_column) in relations.items():\n+                    target_model_counts[target_table] = target_model_counts.get(target_table, 0) + 1\n                     try:\n                         constraints = connection.introspection.get_constraints(\n                             cursor, table_name\n@@ -131,8 +138,24 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Track foreign key references to detect multiple FKs to same model\n+                fk_target_counts = {}\n+                fk_field_names = {}\n+                \n+                # First pass: count foreign key references to each target model\n+                for row in table_description:\n+                    column_name = row.name\n+                    if column_name in relations:\n+                        rel_to = relations[column_name][1]\n+                        if rel_to in fk_target_counts:\n+                            fk_target_counts[rel_to] += 1\n+                        else:\n+                            fk_target_counts[rel_to] = 1\n+                            fk_field_names[rel_to] = []\n+                \n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -149,6 +172,11 @@ class Command(BaseCommand):\n \n                     used_column_names.append(att_name)\n                     column_to_field_name[column_name] = att_name\n+                    \n+                    # Track field names for foreign keys to generate related_name\n+                    if is_relation:\n+                        rel_to = relations[column_name][1]\n+                        fk_field_names[rel_to].append(att_name)\n \n                     # Add primary_key and unique, if necessary.\n                     if column_name == primary_key_column:\n@@ -162,6 +190,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +211,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        \n+                        # Add related_name if multiple foreign keys point to the same model\n+                        if rel_to in target_model_counts and target_model_counts[rel_to] > 1:\n+                            extra_params[\"related_name\"] = att_name\n+                        \n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +258,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n"
  }
}