{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/templatetags/static.py lines 40-47)": "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        base_prefix = getattr(settings, name, '')\n        if base_prefix:\n            script_prefix = get_script_prefix().rstrip('/')\n            prefix = iri_to_uri(script_prefix + base_prefix)\n        else:\n            prefix = ''\n    return prefix\n",
    "Location 2 (/root/hy/projects_1/django/django/core/files/storage.py lines 329-335)": "\ndef url(self, name):\n    from django.urls import get_script_prefix\n    \n    if self.base_url is None:\n        raise ValueError(\"This file is not accessible via a URL.\")\n    url = filepath_to_uri(name)\n    if url is not None:\n        url = url.lstrip('/')\n    \n    # Handle SCRIPT_NAME prefix\n    script_prefix = get_script_prefix().rstrip('/')\n    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n    return urljoin(full_base_url, url)\n",
    "Location 3 (/root/hy/projects_1/django/django/templatetags/static.py lines 115-120)": "\n    @classmethod\n    def handle_simple(cls, path):\n        if apps.is_installed('django.contrib.staticfiles'):\n            from django.contrib.staticfiles.storage import staticfiles_storage\n            return staticfiles_storage.url(path)\n        else:\n            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/templatetags/static.py lines 40-47)": [
      "\n@classmethod\ndef handle_simple(cls, name):\n    from django.urls import get_script_prefix\n    \n    base_prefix = getattr(settings, name, '')\n    if base_prefix:\n        script_prefix = get_script_prefix().rstrip('/')\n        prefix = iri_to_uri(script_prefix + base_prefix)\n    else:\n        prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    from django.urls import get_script_prefix\n    \n    try:\n        from django.conf import settings\n    except ImportError:\n        prefix = ''\n    else:\n        base_prefix = getattr(settings, name, '')\n        if base_prefix:\n            script_prefix = get_script_prefix().rstrip('/')\n            prefix = iri_to_uri(script_prefix + base_prefix)\n        else:\n            prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        base_prefix = getattr(settings, name, '')\n        if base_prefix:\n            script_prefix = get_script_prefix().rstrip('/')\n            prefix = iri_to_uri(script_prefix + base_prefix)\n        else:\n            prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        base_prefix = getattr(settings, name, '')\n        if base_prefix:\n            script_prefix = get_script_prefix().rstrip('/')\n            prefix = iri_to_uri(script_prefix + base_prefix)\n        else:\n            prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        base_prefix = getattr(settings, name, '')\n        if base_prefix:\n            script_prefix = get_script_prefix().rstrip('/')\n            prefix = iri_to_uri(script_prefix + base_prefix)\n        else:\n            prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        base_prefix = getattr(settings, name, '')\n        if base_prefix:\n            script_prefix = get_script_prefix().rstrip('/')\n            prefix = iri_to_uri(script_prefix + base_prefix)\n        else:\n            prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        from django.conf import settings\n        from django.urls import get_script_prefix\n    except ImportError:\n        prefix = ''\n    else:\n        base_prefix = getattr(settings, name, '')\n        if base_prefix:\n            script_prefix = get_script_prefix().rstrip('/')\n            prefix = iri_to_uri(script_prefix + base_prefix)\n        else:\n            prefix = ''\n    return prefix\n",
      "\n@classmethod\ndef handle_simple(cls, name):\n    from django.urls import get_script_prefix\n    \n    base_prefix = getattr(settings, name, '')\n    if base_prefix:\n        script_prefix = get_script_prefix().rstrip('/')\n        prefix = iri_to_uri(script_prefix + base_prefix)\n    else:\n        prefix = ''\n    return prefix\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/core/files/storage.py lines 329-335)": [
      "\ndef url(self, name):\n    from django.urls import get_script_prefix\n    \n    if self.base_url is None:\n        raise ValueError(\"This file is not accessible via a URL.\")\n    url = filepath_to_uri(name)\n    if url is not None:\n        url = url.lstrip('/')\n    \n    # Handle SCRIPT_NAME prefix\n    script_prefix = get_script_prefix().rstrip('/')\n    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n    return urljoin(full_base_url, url)\n",
      "\ndef url(self, name):\n    from django.urls import get_script_prefix\n    \n    if self.base_url is None:\n        raise ValueError(\"This file is not accessible via a URL.\")\n    url = filepath_to_uri(name)\n    if url is not None:\n        url = url.lstrip('/')\n    \n    # Handle SCRIPT_NAME prefix\n    script_prefix = get_script_prefix().rstrip('/')\n    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n    return urljoin(full_base_url, url)\n",
      "\n    def url(self, name):\n        from django.urls import get_script_prefix\n        \n        if self.base_url is None:\n            raise ValueError(\"This file is not accessible via a URL.\")\n        url = filepath_to_uri(name)\n        if url is not None:\n            url = url.lstrip('/')\n        \n        # Handle SCRIPT_NAME prefix\n        script_prefix = get_script_prefix().rstrip('/')\n        full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n        return urljoin(full_base_url, url)\n",
      "\n    def url(self, name):\n        from django.urls import get_script_prefix\n        \n        if self.base_url is None:\n            raise ValueError(\"This file is not accessible via a URL.\")\n        url = filepath_to_uri(name)\n        if url is not None:\n            url = url.lstrip('/')\n        \n        # Handle SCRIPT_NAME prefix\n        script_prefix = get_script_prefix().rstrip('/')\n        full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n        return urljoin(full_base_url, url)\n",
      "\ndef url(self, name):\n    from django.urls import get_script_prefix\n    \n    if self.base_url is None:\n        raise ValueError(\"This file is not accessible via a URL.\")\n    url = filepath_to_uri(name)\n    if url is not None:\n        url = url.lstrip('/')\n    \n    # Handle SCRIPT_NAME prefix\n    script_prefix = get_script_prefix().rstrip('/')\n    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n    return urljoin(full_base_url, url)\n",
      "\ndef url(self, name):\n    from django.urls import get_script_prefix\n    \n    if self.base_url is None:\n        raise ValueError(\"This file is not accessible via a URL.\")\n    url = filepath_to_uri(name)\n    if url is not None:\n        url = url.lstrip('/')\n    \n    # Handle SCRIPT_NAME prefix\n    script_prefix = get_script_prefix().rstrip('/')\n    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n    return urljoin(full_base_url, url)\n",
      "\ndef url(self, name):\n    from django.urls import get_script_prefix\n    \n    if self.base_url is None:\n        raise ValueError(\"This file is not accessible via a URL.\")\n    url = filepath_to_uri(name)\n    if url is not None:\n        url = url.lstrip('/')\n    \n    # Handle SCRIPT_NAME prefix\n    script_prefix = get_script_prefix().rstrip('/')\n    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n    return urljoin(full_base_url, url)\n",
      "\ndef url(self, name):\n    from django.urls import get_script_prefix\n    \n    if self.base_url is None:\n        raise ValueError(\"This file is not accessible via a URL.\")\n    url = filepath_to_uri(name)\n    if url is not None:\n        url = url.lstrip('/')\n    \n    # Handle SCRIPT_NAME prefix\n    script_prefix = get_script_prefix().rstrip('/')\n    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n    return urljoin(full_base_url, url)\n"
    ],
    "Location 3 (/root/hy/projects_1/django/django/templatetags/static.py lines 115-120)": [
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n",
      "\n@classmethod\ndef handle_simple(cls, path):\n    if apps.is_installed('django.contrib.staticfiles'):\n        from django.contrib.staticfiles.storage import staticfiles_storage\n        return staticfiles_storage.url(path)\n    else:\n        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..77a9988e12 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n+\n     def url(self, name):\n+        from django.urls import get_script_prefix\n+        \n         if self.base_url is None:\n             raise ValueError(\"This file is not accessible via a URL.\")\n         url = filepath_to_uri(name)\n         if url is not None:\n             url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        \n+        # Handle SCRIPT_NAME prefix\n+        script_prefix = get_script_prefix().rstrip('/')\n+        full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+        return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..27879e4ba6 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -36,14 +36,22 @@ class PrefixNode(template.Node):\n             varname = None\n         return cls(varname, name)\n \n+    @classmethod\n+\n     @classmethod\n     def handle_simple(cls, name):\n         try:\n             from django.conf import settings\n+            from django.urls import get_script_prefix\n         except ImportError:\n             prefix = ''\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n+            base_prefix = getattr(settings, name, '')\n+            if base_prefix:\n+                script_prefix = get_script_prefix().rstrip('/')\n+                prefix = iri_to_uri(script_prefix + base_prefix)\n+            else:\n+                prefix = ''\n         return prefix\n \n     def render(self, context):\n@@ -111,6 +119,8 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+    @classmethod\n+\n     @classmethod\n     def handle_simple(cls, path):\n         if apps.is_installed('django.contrib.staticfiles'):\n",
    "variant_0": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..7b46e17340 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n-    def url(self, name):\n-        if self.base_url is None:\n-            raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+\n+def url(self, name):\n+    from django.urls import get_script_prefix\n+    \n+    if self.base_url is None:\n+        raise ValueError(\"This file is not accessible via a URL.\")\n+    url = filepath_to_uri(name)\n+    if url is not None:\n+        url = url.lstrip('/')\n+    \n+    # Handle SCRIPT_NAME prefix\n+    script_prefix = get_script_prefix().rstrip('/')\n+    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+    return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..8ff79ed362 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,22 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        base_prefix = getattr(settings, name, '')\n+        if base_prefix:\n+            script_prefix = get_script_prefix().rstrip('/')\n+            prefix = iri_to_uri(script_prefix + base_prefix)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -111,6 +119,8 @@ class StaticNode(template.Node):\n         context[self.varname] = url\n         return ''\n \n+    @classmethod\n+\n     @classmethod\n     def handle_simple(cls, path):\n         if apps.is_installed('django.contrib.staticfiles'):\n",
    "variant_1": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..7b46e17340 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n-    def url(self, name):\n-        if self.base_url is None:\n-            raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+\n+def url(self, name):\n+    from django.urls import get_script_prefix\n+    \n+    if self.base_url is None:\n+        raise ValueError(\"This file is not accessible via a URL.\")\n+    url = filepath_to_uri(name)\n+    if url is not None:\n+        url = url.lstrip('/')\n+    \n+    # Handle SCRIPT_NAME prefix\n+    script_prefix = get_script_prefix().rstrip('/')\n+    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+    return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..60488b72e9 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,18 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    from django.urls import get_script_prefix\n+    \n+    base_prefix = getattr(settings, name, '')\n+    if base_prefix:\n+        script_prefix = get_script_prefix().rstrip('/')\n+        prefix = iri_to_uri(script_prefix + base_prefix)\n+    else:\n+        prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +116,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n",
    "variant_2": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..7b46e17340 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n-    def url(self, name):\n-        if self.base_url is None:\n-            raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+\n+def url(self, name):\n+    from django.urls import get_script_prefix\n+    \n+    if self.base_url is None:\n+        raise ValueError(\"This file is not accessible via a URL.\")\n+    url = filepath_to_uri(name)\n+    if url is not None:\n+        url = url.lstrip('/')\n+    \n+    # Handle SCRIPT_NAME prefix\n+    script_prefix = get_script_prefix().rstrip('/')\n+    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+    return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..bc3fdd36d9 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,23 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    from django.urls import get_script_prefix\n+    \n+    try:\n+        from django.conf import settings\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        base_prefix = getattr(settings, name, '')\n+        if base_prefix:\n+            script_prefix = get_script_prefix().rstrip('/')\n+            prefix = iri_to_uri(script_prefix + base_prefix)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +121,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n",
    "variant_3": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..77a9988e12 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n+\n     def url(self, name):\n+        from django.urls import get_script_prefix\n+        \n         if self.base_url is None:\n             raise ValueError(\"This file is not accessible via a URL.\")\n         url = filepath_to_uri(name)\n         if url is not None:\n             url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        \n+        # Handle SCRIPT_NAME prefix\n+        script_prefix = get_script_prefix().rstrip('/')\n+        full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+        return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..b0dfebf734 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,22 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        base_prefix = getattr(settings, name, '')\n+        if base_prefix:\n+            script_prefix = get_script_prefix().rstrip('/')\n+            prefix = iri_to_uri(script_prefix + base_prefix)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +120,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n",
    "variant_4": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..77a9988e12 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n+\n     def url(self, name):\n+        from django.urls import get_script_prefix\n+        \n         if self.base_url is None:\n             raise ValueError(\"This file is not accessible via a URL.\")\n         url = filepath_to_uri(name)\n         if url is not None:\n             url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        \n+        # Handle SCRIPT_NAME prefix\n+        script_prefix = get_script_prefix().rstrip('/')\n+        full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+        return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..b0dfebf734 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,22 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        base_prefix = getattr(settings, name, '')\n+        if base_prefix:\n+            script_prefix = get_script_prefix().rstrip('/')\n+            prefix = iri_to_uri(script_prefix + base_prefix)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +120,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n",
    "variant_5": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..7b46e17340 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n-    def url(self, name):\n-        if self.base_url is None:\n-            raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+\n+def url(self, name):\n+    from django.urls import get_script_prefix\n+    \n+    if self.base_url is None:\n+        raise ValueError(\"This file is not accessible via a URL.\")\n+    url = filepath_to_uri(name)\n+    if url is not None:\n+        url = url.lstrip('/')\n+    \n+    # Handle SCRIPT_NAME prefix\n+    script_prefix = get_script_prefix().rstrip('/')\n+    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+    return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..b0dfebf734 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,22 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        base_prefix = getattr(settings, name, '')\n+        if base_prefix:\n+            script_prefix = get_script_prefix().rstrip('/')\n+            prefix = iri_to_uri(script_prefix + base_prefix)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +120,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n",
    "variant_6": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..7b46e17340 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n-    def url(self, name):\n-        if self.base_url is None:\n-            raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+\n+def url(self, name):\n+    from django.urls import get_script_prefix\n+    \n+    if self.base_url is None:\n+        raise ValueError(\"This file is not accessible via a URL.\")\n+    url = filepath_to_uri(name)\n+    if url is not None:\n+        url = url.lstrip('/')\n+    \n+    # Handle SCRIPT_NAME prefix\n+    script_prefix = get_script_prefix().rstrip('/')\n+    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+    return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..b0dfebf734 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,22 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        base_prefix = getattr(settings, name, '')\n+        if base_prefix:\n+            script_prefix = get_script_prefix().rstrip('/')\n+            prefix = iri_to_uri(script_prefix + base_prefix)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +120,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n",
    "variant_7": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..7b46e17340 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n-    def url(self, name):\n-        if self.base_url is None:\n-            raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+\n+def url(self, name):\n+    from django.urls import get_script_prefix\n+    \n+    if self.base_url is None:\n+        raise ValueError(\"This file is not accessible via a URL.\")\n+    url = filepath_to_uri(name)\n+    if url is not None:\n+        url = url.lstrip('/')\n+    \n+    # Handle SCRIPT_NAME prefix\n+    script_prefix = get_script_prefix().rstrip('/')\n+    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+    return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..b0dfebf734 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,22 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    try:\n+        from django.conf import settings\n+        from django.urls import get_script_prefix\n+    except ImportError:\n+        prefix = ''\n+    else:\n+        base_prefix = getattr(settings, name, '')\n+        if base_prefix:\n+            script_prefix = get_script_prefix().rstrip('/')\n+            prefix = iri_to_uri(script_prefix + base_prefix)\n         else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+            prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +120,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n",
    "variant_8": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..7b46e17340 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -326,13 +326,20 @@ class FileSystemStorage(Storage):\n     def size(self, name):\n         return os.path.getsize(self.path(name))\n \n-    def url(self, name):\n-        if self.base_url is None:\n-            raise ValueError(\"This file is not accessible via a URL.\")\n-        url = filepath_to_uri(name)\n-        if url is not None:\n-            url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+\n+def url(self, name):\n+    from django.urls import get_script_prefix\n+    \n+    if self.base_url is None:\n+        raise ValueError(\"This file is not accessible via a URL.\")\n+    url = filepath_to_uri(name)\n+    if url is not None:\n+        url = url.lstrip('/')\n+    \n+    # Handle SCRIPT_NAME prefix\n+    script_prefix = get_script_prefix().rstrip('/')\n+    full_base_url = script_prefix + self.base_url if script_prefix else self.base_url\n+    return urljoin(full_base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..60488b72e9 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -37,14 +37,18 @@ class PrefixNode(template.Node):\n         return cls(varname, name)\n \n     @classmethod\n-    def handle_simple(cls, name):\n-        try:\n-            from django.conf import settings\n-        except ImportError:\n-            prefix = ''\n-        else:\n-            prefix = iri_to_uri(getattr(settings, name, ''))\n-        return prefix\n+\n+@classmethod\n+def handle_simple(cls, name):\n+    from django.urls import get_script_prefix\n+    \n+    base_prefix = getattr(settings, name, '')\n+    if base_prefix:\n+        script_prefix = get_script_prefix().rstrip('/')\n+        prefix = iri_to_uri(script_prefix + base_prefix)\n+    else:\n+        prefix = ''\n+    return prefix\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n@@ -112,12 +116,14 @@ class StaticNode(template.Node):\n         return ''\n \n     @classmethod\n-    def handle_simple(cls, path):\n-        if apps.is_installed('django.contrib.staticfiles'):\n-            from django.contrib.staticfiles.storage import staticfiles_storage\n-            return staticfiles_storage.url(path)\n-        else:\n-            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n+\n+@classmethod\n+def handle_simple(cls, path):\n+    if apps.is_installed('django.contrib.staticfiles'):\n+        from django.contrib.staticfiles.storage import staticfiles_storage\n+        return staticfiles_storage.url(path)\n+    else:\n+        return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n \n     @classmethod\n     def handle_token(cls, parser, token):\n"
  }
}