{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/requests/requests/utils.py lines 362-365)": "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
    "Location 2 (/root/hy/projects_1/requests/requests/models.py lines 778-779)": "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Given an iterator and a requests Response, decode the bytes and\n    generate unicode chunks.\n    \"\"\"\n    if r.encoding is None:\n        encoding = r.apparent_encoding\n    else:\n        encoding = r.encoding\n\n    for chunk in iterator:\n        rv = chunk.decode(encoding, 'replace') if isinstance(chunk, bytes) else chunk\n        if rv:\n            yield rv\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/requests/requests/utils.py lines 362-365)": [
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    if encoding is None:\n        encoding = r.apparent_encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n"
    ],
    "Location 2 (/root/hy/projects_1/requests/requests/models.py lines 778-779)": [
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    if r.encoding is None:\n        encoding = r.apparent_encoding\n    else:\n        encoding = r.encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    if r.encoding is None:\n        encoding = r.apparent_encoding\n    else:\n        encoding = r.encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return str('')\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors='replace')\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    if r.encoding is None:\n        encoding = r.apparent_encoding\n    else:\n        encoding = r.encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)('replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    if r.encoding is None:\n        encoding = r.apparent_encoding\n    else:\n        encoding = r.encoding\n\n    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
      "\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return str('')\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors='replace')\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n",
      "\ndef stream_decode_response_unicode(iterator, r):\n    \"\"\"Given an iterator and a requests response, decode the response into Unicode.\n\n    This is pulled from requests.models.Response.text, mostly.\n    \"\"\"\n    \n    # Fallback to auto-detected encoding when encoding is None\n    encoding = r.encoding\n    if r.encoding is None:\n        encoding = r.apparent_encoding\n\n    for chunk in iterator:\n        rv = chunk.decode(encoding, errors='replace')\n        if rv:\n            yield rv\n",
      "\n        if r.encoding is None:\n            encoding = r.apparent_encoding\n        else:\n            encoding = r.encoding\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..2ff78d71 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,6 +775,7 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n+\n         if self.encoding is None:\n             encoding = self.apparent_encoding\n \ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..39eab2f0 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,13 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n+\n     if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+        encoding = r.apparent_encoding\n+    else:\n+        encoding = r.encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_0": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..8698bb0e 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,8 +775,20 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Given an iterator and a requests Response, decode the bytes and\n+    generate unicode chunks.\n+    \"\"\"\n+    if r.encoding is None:\n+        encoding = r.apparent_encoding\n+    else:\n+        encoding = r.encoding\n+\n+    for chunk in iterator:\n+        rv = chunk.decode(encoding, 'replace') if isinstance(chunk, bytes) else chunk\n+        if rv:\n+            yield rv\n \n         # Decode unicode from given encoding.\n         try:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_1": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..b21f60ff 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,8 +775,23 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    if r.encoding is None:\n+        encoding = r.apparent_encoding\n+    else:\n+        encoding = r.encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n         # Decode unicode from given encoding.\n         try:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_2": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..b21f60ff 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,8 +775,23 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    if r.encoding is None:\n+        encoding = r.apparent_encoding\n+    else:\n+        encoding = r.encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n         # Decode unicode from given encoding.\n         try:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_3": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..2355eb35 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -771,6 +771,15 @@ class Response(object):\n         content = None\n         encoding = self.encoding\n \n+        if not self.content:\n+            return str('')\n+\n+        # Fallback to auto-detected encoding.\n+\n+        # Try charset from content-type\n+        content = None\n+        encoding = self.encoding\n+\n         if not self.content:\n             return str('')\n \n@@ -778,6 +787,16 @@ class Response(object):\n         if self.encoding is None:\n             encoding = self.apparent_encoding\n \n+        # Decode unicode from given encoding.\n+        try:\n+            content = str(self.content, encoding, errors='replace')\n+        except (LookupError, TypeError):\n+            # A LookupError is raised if the encoding was not found which could\n+            # indicate a misspelling or similar mistake.\n+            #\n+            # A TypeError can be raised if encoding is None\n+            #\n+\n         # Decode unicode from given encoding.\n         try:\n             content = str(self.content, encoding, errors='replace')\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_4": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..c9692489 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,8 +775,23 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    if r.encoding is None:\n+        encoding = r.apparent_encoding\n+    else:\n+        encoding = r.encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)('replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n         # Decode unicode from given encoding.\n         try:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_5": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..b21f60ff 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,8 +775,23 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    if r.encoding is None:\n+        encoding = r.apparent_encoding\n+    else:\n+        encoding = r.encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n         # Decode unicode from given encoding.\n         try:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_6": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..2355eb35 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -771,6 +771,15 @@ class Response(object):\n         content = None\n         encoding = self.encoding\n \n+        if not self.content:\n+            return str('')\n+\n+        # Fallback to auto-detected encoding.\n+\n+        # Try charset from content-type\n+        content = None\n+        encoding = self.encoding\n+\n         if not self.content:\n             return str('')\n \n@@ -778,6 +787,16 @@ class Response(object):\n         if self.encoding is None:\n             encoding = self.apparent_encoding\n \n+        # Decode unicode from given encoding.\n+        try:\n+            content = str(self.content, encoding, errors='replace')\n+        except (LookupError, TypeError):\n+            # A LookupError is raised if the encoding was not found which could\n+            # indicate a misspelling or similar mistake.\n+            #\n+            # A TypeError can be raised if encoding is None\n+            #\n+\n         # Decode unicode from given encoding.\n         try:\n             content = str(self.content, encoding, errors='replace')\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_7": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..172bd722 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,8 +775,22 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Given an iterator and a requests response, decode the response into Unicode.\n+\n+    This is pulled from requests.models.Response.text, mostly.\n+    \"\"\"\n+    \n+    # Fallback to auto-detected encoding when encoding is None\n+    encoding = r.encoding\n+    if r.encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    for chunk in iterator:\n+        rv = chunk.decode(encoding, errors='replace')\n+        if rv:\n+            yield rv\n \n         # Decode unicode from given encoding.\n         try:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n",
    "variant_8": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..b3474ac5 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -775,8 +775,11 @@ class Response(object):\n             return str('')\n \n         # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+\n+        if r.encoding is None:\n+            encoding = r.apparent_encoding\n+        else:\n+            encoding = r.encoding\n \n         # Decode unicode from given encoding.\n         try:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..be66fe7a 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,10 +359,22 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+\n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+\n+    encoding = r.encoding\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode(b'', final=True)\n+    if rv:\n+        yield rv\n \n     decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n"
  }
}