{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 71-71)": "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
    "Location 2 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 63-63)": "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
    "Location 3 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 78-78)": "\ndef _line_type(line, delimiter=None):\n    \"\"\"\n    Interpret a QDP file line type, returning a string indicating the type\n    (comment, command, new, data), and a string containing the useful\n    information in the line (that is, everything except comments).\n    \"\"\"\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"(\\s|,)+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n    line = line.strip()\n    if not line:\n        return \"comment\"\n    match = _line_type_re.match(line)\n\n    if match is None:\n        raise ValueError(f\"Unrecognized QDP line: {line}\")\n    for type_, val in match.groupdict().items():\n        if val is None:\n            continue\n        if type_ == \"data\":\n            return f\"data,{len(val.split(sep=delimiter))}\"\n        else:\n            return type_\n",
    "Location 4 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 295-300)": "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 71-71)": [
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n"
    ],
    "Location 2 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 63-63)": [
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n"
    ],
    "Location 3 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 78-78)": [
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n"
    ],
    "Location 4 (/root/hy/projects_1/astropy/astropy/io/ascii/qdp.py lines 295-300)": [
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n_line_type_re = re.compile(_type_re, re.IGNORECASE)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..0904b14ca1 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,13 +69,15 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n+\n         raise ValueError(f\"Unrecognized QDP line: {line}\")\n     for type_, val in match.groupdict().items():\n         if val is None:\n@@ -292,6 +295,7 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n+\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n                     # This should never happen, but just in case.\n",
    "variant_0": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..75bf22d8de 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,7 +69,30 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n+    line = line.strip()\n+    if not line:\n+        return \"comment\"\n+    match = _line_type_re.match(line)\n+\n+    if match is None:\n+\n+def _line_type(line, delimiter=None):\n+    \"\"\"\n+    Interpret a QDP file line type, returning a string indicating the type\n+    (comment, command, new, data), and a string containing the useful\n+    information in the line (that is, everything except comments).\n+    \"\"\"\n+    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    sep = delimiter\n+    if delimiter is None:\n+        sep = r\"(\\s|,)+\"\n+    _new_re = rf\"NO({sep}NO)+\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n+    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -83,6 +107,13 @@ def _line_type(line, delimiter=None):\n             return f\"data,{len(val.split(sep=delimiter))}\"\n         else:\n             return type_\n+    for type_, val in match.groupdict().items():\n+        if val is None:\n+            continue\n+        if type_ == \"data\":\n+            return f\"data,{len(val.split(sep=delimiter))}\"\n+        else:\n+            return type_\n \n \n def _get_type_from_list_of_lines(lines, delimiter=None):\n@@ -292,12 +323,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_1": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..b77ab7852b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_2": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..767755e77e 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_3": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..767755e77e 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_4": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..767755e77e 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_5": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..767755e77e 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_6": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..b77ab7852b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_7": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..b77ab7852b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n",
    "variant_8": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..767755e77e 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,8 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,14 +69,16 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n     match = _line_type_re.match(line)\n \n     if match is None:\n-        raise ValueError(f\"Unrecognized QDP line: {line}\")\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     for type_, val in match.groupdict().items():\n         if val is None:\n             continue\n@@ -292,12 +295,8 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+_line_type_re = re.compile(_type_re, re.IGNORECASE)\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n"
  }
}