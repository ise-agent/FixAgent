{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 133-151)": "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        # Ensure __version__ is available first\n        if '__version__' not in globals():\n            __getattr__(\"__version__\")\n        # Parse version string into tuple\n        parsed = parse_version(__version__)\n        # Convert to tuple format (major, minor, patch, ...)\n        version_parts = []\n        if hasattr(parsed, 'release'):\n            version_parts.extend(parsed.release)\n        if hasattr(parsed, 'pre') and parsed.pre:\n            version_parts.append(parsed.pre)\n        if hasattr(parsed, 'post') and parsed.post is not None:\n            version_parts.append(('post', parsed.post))\n        if hasattr(parsed, 'dev') and parsed.dev is not None:\n            version_parts.append(('dev', parsed.dev))\n        __version_info__ = tuple(version_parts)\n        return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/matplotlib/lib/matplotlib/__init__.py lines 133-151)": [
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        # Ensure __version__ is available\n        if '__version__' not in globals():\n            __getattr__(\"__version__\")\n        # Parse version string into tuple\n        parsed = parse_version(__version__)\n        # Convert to tuple format (major, minor, patch, ...)\n        base_version = parsed.base_version.split('.')\n        version_tuple = tuple(int(x) for x in base_version)\n        # Add pre-release info if present\n        if parsed.pre:\n            version_tuple = version_tuple + parsed.pre\n        elif parsed.dev:\n            version_tuple = version_tuple + ('dev', parsed.dev)\n        elif parsed.local:\n            version_tuple = version_tuple + ('local',)\n        __version_info__ = version_tuple\n        return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n",
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        if '__version_info__' not in globals():\n            # Ensure __version__ is available\n            if '__version__' not in globals():\n                __getattr__('__version__')  # This will set __version__\n            parsed = parse_version(__version__)\n            __version_info__ = (parsed.major, parsed.minor, parsed.micro)\n        return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n",
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        try:\n            return __version_info__\n        except NameError:\n            # Ensure __version__ is available\n            version_str = __getattr__(\"__version__\")\n            parsed = parse_version(version_str)\n            \n            # Extract major, minor, patch from the parsed version\n            release = parsed.release\n            major = release[0] if len(release) > 0 else 0\n            minor = release[1] if len(release) > 1 else 0\n            patch = release[2] if len(release) > 2 else 0\n            \n            # Handle pre-release info (alpha, beta, rc)\n            pre_release = None\n            if parsed.pre:\n                pre_release = parsed.pre\n            \n            if pre_release:\n                __version_info__ = (major, minor, patch, pre_release)\n            else:\n                __version_info__ = (major, minor, patch)\n            \n            return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n",
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        # Ensure __version__ is available first\n        if '__version__' not in globals():\n            __getattr__('__version__')\n        \n        # Parse version into tuple format\n        parsed = parse_version(__version__)\n        # Extract major, minor, patch from the parsed version\n        version_tuple = parsed.release\n        # Add any pre-release info (alpha, beta, rc, dev)\n        if parsed.pre:\n            version_tuple = version_tuple + parsed.pre\n        elif parsed.dev:\n            version_tuple = version_tuple + ('dev', parsed.dev)\n        elif parsed.local:\n            # For local versions, just include the base release\n            pass\n            \n        __version_info__ = version_tuple\n        return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n",
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        # Ensure __version__ is available\n        if '__version__' not in globals():\n            __getattr__(\"__version__\")\n        \n        # Parse version string into components\n        parsed = parse_version(__version__)\n        version_tuple = parsed.release\n        \n        # Handle pre-release info if present\n        if parsed.pre:\n            version_tuple = version_tuple + parsed.pre\n        elif parsed.dev:\n            version_tuple = version_tuple + ('dev', parsed.dev)\n        elif parsed.post:\n            version_tuple = version_tuple + ('post', parsed.post)\n            \n        __version_info__ = version_tuple\n        return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n",
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        # Ensure __version__ is available\n        if '__version__' not in globals():\n            __getattr__(\"__version__\")\n        # Parse version string into tuple\n        parsed = parse_version(__version__)\n        # Extract major, minor, patch from parsed version\n        version_tuple = parsed.release\n        # Add pre-release info if present\n        if parsed.pre:\n            version_tuple = version_tuple + parsed.pre\n        elif parsed.dev:\n            version_tuple = version_tuple + ('dev', parsed.dev)\n        elif parsed.post:\n            version_tuple = version_tuple + ('post', parsed.post)\n        __version_info__ = version_tuple\n        return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n",
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        try:\n            return __version_info__\n        except NameError:\n            # Ensure __version__ is available\n            if '__version__' not in globals():\n                __getattr__(\"__version__\")\n            # Parse version into tuple\n            parsed = parse_version(__version__)\n            __version_info__ = (\n                parsed.major,\n                parsed.minor,\n                parsed.micro,\n                parsed.pre or (),\n            )\n            return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n",
      "\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        global __version_info__  # cache it.\n        try:\n            return __version_info__\n        except NameError:\n            # Ensure __version__ is available\n            version_str = __getattr__(\"__version__\")\n            parsed = parse_version(version_str)\n            \n            # Extract version components\n            release = parsed.release\n            pre = parsed.pre\n            post = parsed.post\n            dev = parsed.dev\n            \n            # Build version_info tuple similar to sys.version_info\n            version_tuple = release\n            if pre:\n                version_tuple += (pre[0], pre[1])\n            elif post is not None:\n                version_tuple += ('final', post)\n            elif dev is not None:\n                version_tuple += ('dev', dev)\n            else:\n                version_tuple += ('final', 0)\n            \n            __version_info__ = version_tuple\n            return __version_info__\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..6375fc8730 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,24 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        if '__version_info__' not in globals():\n+            # Ensure __version__ is available\n+            if '__version__' not in globals():\n+                __getattr__(\"__version__\")  # This will populate __version__\n+            \n+            # Parse the version string into components\n+            parsed = parse_version(__version__)\n+            \n+            # Extract version components into a tuple\n+            # Handle both release and pre-release versions\n+            if parsed.pre:\n+                __version_info__ = (parsed.major, parsed.minor, parsed.micro, parsed.pre)\n+            else:\n+                __version_info__ = (parsed.major, parsed.minor, parsed.micro)\n+        \n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_0": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..2885006d85 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,25 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        # Ensure __version__ is available first\n+        if '__version__' not in globals():\n+            __getattr__(\"__version__\")\n+        # Parse version string into tuple\n+        parsed = parse_version(__version__)\n+        # Convert to tuple format (major, minor, patch, ...)\n+        version_parts = []\n+        if hasattr(parsed, 'release'):\n+            version_parts.extend(parsed.release)\n+        if hasattr(parsed, 'pre') and parsed.pre:\n+            version_parts.append(parsed.pre)\n+        if hasattr(parsed, 'post') and parsed.post is not None:\n+            version_parts.append(('post', parsed.post))\n+        if hasattr(parsed, 'dev') and parsed.dev is not None:\n+            version_parts.append(('dev', parsed.dev))\n+        __version_info__ = tuple(version_parts)\n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_1": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..f88ad0e0d9 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,25 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        # Ensure __version__ is available\n+        if '__version__' not in globals():\n+            __getattr__(\"__version__\")\n+        # Parse version string into tuple\n+        parsed = parse_version(__version__)\n+        # Convert to tuple format (major, minor, patch, ...)\n+        base_version = parsed.base_version.split('.')\n+        version_tuple = tuple(int(x) for x in base_version)\n+        # Add pre-release info if present\n+        if parsed.pre:\n+            version_tuple = version_tuple + parsed.pre\n+        elif parsed.dev:\n+            version_tuple = version_tuple + ('dev', parsed.dev)\n+        elif parsed.local:\n+            version_tuple = version_tuple + ('local',)\n+        __version_info__ = version_tuple\n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_2": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..d7f8f8d5a8 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,15 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        if '__version_info__' not in globals():\n+            # Ensure __version__ is available\n+            if '__version__' not in globals():\n+                __getattr__('__version__')  # This will set __version__\n+            parsed = parse_version(__version__)\n+            __version_info__ = (parsed.major, parsed.minor, parsed.micro)\n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_3": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..377ef7f87a 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,32 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        try:\n+            return __version_info__\n+        except NameError:\n+            # Ensure __version__ is available\n+            version_str = __getattr__(\"__version__\")\n+            parsed = parse_version(version_str)\n+            \n+            # Extract major, minor, patch from the parsed version\n+            release = parsed.release\n+            major = release[0] if len(release) > 0 else 0\n+            minor = release[1] if len(release) > 1 else 0\n+            patch = release[2] if len(release) > 2 else 0\n+            \n+            # Handle pre-release info (alpha, beta, rc)\n+            pre_release = None\n+            if parsed.pre:\n+                pre_release = parsed.pre\n+            \n+            if pre_release:\n+                __version_info__ = (major, minor, patch, pre_release)\n+            else:\n+                __version_info__ = (major, minor, patch)\n+            \n+            return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_4": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..f25f1c8cff 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,27 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        # Ensure __version__ is available first\n+        if '__version__' not in globals():\n+            __getattr__('__version__')\n+        \n+        # Parse version into tuple format\n+        parsed = parse_version(__version__)\n+        # Extract major, minor, patch from the parsed version\n+        version_tuple = parsed.release\n+        # Add any pre-release info (alpha, beta, rc, dev)\n+        if parsed.pre:\n+            version_tuple = version_tuple + parsed.pre\n+        elif parsed.dev:\n+            version_tuple = version_tuple + ('dev', parsed.dev)\n+        elif parsed.local:\n+            # For local versions, just include the base release\n+            pass\n+            \n+        __version_info__ = version_tuple\n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_5": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..10c14a3cd6 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,26 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        # Ensure __version__ is available\n+        if '__version__' not in globals():\n+            __getattr__(\"__version__\")\n+        \n+        # Parse version string into components\n+        parsed = parse_version(__version__)\n+        version_tuple = parsed.release\n+        \n+        # Handle pre-release info if present\n+        if parsed.pre:\n+            version_tuple = version_tuple + parsed.pre\n+        elif parsed.dev:\n+            version_tuple = version_tuple + ('dev', parsed.dev)\n+        elif parsed.post:\n+            version_tuple = version_tuple + ('post', parsed.post)\n+            \n+        __version_info__ = version_tuple\n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_6": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..6b9c8a35fb 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,24 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        # Ensure __version__ is available\n+        if '__version__' not in globals():\n+            __getattr__(\"__version__\")\n+        # Parse version string into tuple\n+        parsed = parse_version(__version__)\n+        # Extract major, minor, patch from parsed version\n+        version_tuple = parsed.release\n+        # Add pre-release info if present\n+        if parsed.pre:\n+            version_tuple = version_tuple + parsed.pre\n+        elif parsed.dev:\n+            version_tuple = version_tuple + ('dev', parsed.dev)\n+        elif parsed.post:\n+            version_tuple = version_tuple + ('post', parsed.post)\n+        __version_info__ = version_tuple\n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_7": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..26ba9c8d54 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,23 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        try:\n+            return __version_info__\n+        except NameError:\n+            # Ensure __version__ is available\n+            if '__version__' not in globals():\n+                __getattr__(\"__version__\")\n+            # Parse version into tuple\n+            parsed = parse_version(__version__)\n+            __version_info__ = (\n+                parsed.major,\n+                parsed.minor,\n+                parsed.micro,\n+                parsed.pre or (),\n+            )\n+            return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "variant_8": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..1d775911e6 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,6 +130,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n@@ -148,6 +149,34 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global __version_info__  # cache it.\n+        try:\n+            return __version_info__\n+        except NameError:\n+            # Ensure __version__ is available\n+            version_str = __getattr__(\"__version__\")\n+            parsed = parse_version(version_str)\n+            \n+            # Extract version components\n+            release = parsed.release\n+            pre = parsed.pre\n+            post = parsed.post\n+            dev = parsed.dev\n+            \n+            # Build version_info tuple similar to sys.version_info\n+            version_tuple = release\n+            if pre:\n+                version_tuple += (pre[0], pre[1])\n+            elif post is not None:\n+                version_tuple += ('final', post)\n+            elif dev is not None:\n+                version_tuple += ('dev', dev)\n+            else:\n+                version_tuple += ('final', 0)\n+            \n+            __version_info__ = version_tuple\n+            return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n"
  }
}