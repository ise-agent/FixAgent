{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/models/fields/__init__.py lines 1589-1590)": "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n",
    "Location 2 (/root/hy/projects_1/django/tests/model_fields/test_durationfield.py lines 77-78)": "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/db/models/fields/__init__.py lines 1589-1590)": [
      "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n",
      "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n",
      "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n",
      "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n",
      "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n",
      "\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n",
      "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n",
      "\nclass DurationField(Field):\n    \"\"\"\n    Store timedelta objects.\n\n    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n    of microseconds on other databases.\n    \"\"\"\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n    }\n    description = _(\"Duration\")\n"
    ],
    "Location 2 (/root/hy/projects_1/django/tests/model_fields/test_durationfield.py lines 77-78)": [
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n    def test_invalid_string(self):\n        field = models.DurationField()\n        with self.assertRaises(exceptions.ValidationError) as cm:\n            field.clean('not a datetime', None)\n        self.assertEqual(cm.exception.code, 'invalid')\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n",
      "\n        self.assertEqual(\n            cm.exception.message % cm.exception.params,\n            \"'not a datetime' value has an invalid format. \"\n            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..aa5620de08 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1586,8 +1586,9 @@ class DurationField(Field):\n     \"\"\"\n     empty_strings_allowed = False\n     default_error_messages = {\n+\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..e9b61dd597 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -74,8 +74,9 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(cm.exception.code, 'invalid')\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n+\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n",
    "variant_0": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_1": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_2": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_3": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_4": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_5": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..d86d1cec20 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -67,6 +67,14 @@ class TestSerialization(SimpleTestCase):\n \n class TestValidation(SimpleTestCase):\n \n+    def test_invalid_string(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('not a datetime', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n     def test_invalid_string(self):\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n@@ -75,7 +83,8 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_6": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..d01dfdbc46 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1585,9 +1585,12 @@ class DurationField(Field):\n     of microseconds on other databases.\n     \"\"\"\n     empty_strings_allowed = False\n+    default_error_messages = {\n+\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_7": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n",
    "variant_8": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..f2d1359459 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1577,6 +1577,16 @@ class DecimalField(Field):\n         })\n \n \n+class DurationField(Field):\n+    \"\"\"\n+    Store timedelta objects.\n+\n+    Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint\n+    of microseconds on other databases.\n+    \"\"\"\n+    empty_strings_allowed = False\n+    default_error_messages = {\n+\n class DurationField(Field):\n     \"\"\"\n     Store timedelta objects.\n@@ -1587,7 +1597,9 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+    }\n+    description = _(\"Duration\")\n     }\n     description = _(\"Duration\")\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex b73994f86a..bfbdd70fd9 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,10 +72,14 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         )\n \n \n"
  }
}