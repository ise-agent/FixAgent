{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/requests/requests/models.py lines 1-12)": "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
    "Location 2 (/root/hy/projects_1/requests/requests/models.py lines 23-25)": "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
    "Location 3 (/root/hy/projects_1/requests/requests/models.py lines 634-642)": "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/requests/requests/models.py lines 1-12)": [
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n",
      "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n\"\"\"\n\nimport collections\nimport datetime\nimport socket\n"
    ],
    "Location 2 (/root/hy/projects_1/requests/requests/models.py lines 23-25)": [
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n",
      "\nfrom .exceptions import (\n    HTTPError, RequestException, MissingSchema, InvalidURL,\n    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n"
    ],
    "Location 3 (/root/hy/projects_1/requests/requests/models.py lines 634-642)": [
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n",
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n",
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n",
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n",
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n",
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n",
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n",
      "\n        def generate():\n            try:\n                # Special case for urllib3.\n                try:\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                        yield chunk\n                except IncompleteRead as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except socket.error as e:\n                    raise ConnectionError(e)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..616f4eb7 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -631,6 +633,7 @@ class Response(object):\n         available encoding based on the response.\n         \"\"\"\n         def generate():\n+\n             try:\n                 # Special case for urllib3.\n                 try:\n@@ -640,6 +643,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_0": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_1": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_2": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_3": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_4": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_5": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_6": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_7": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n",
    "variant_8": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..d1e5666f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -9,7 +10,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-\n+import socket\n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n@@ -20,9 +21,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -630,6 +632,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        def generate():\n+\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -640,6 +644,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n"
  }
}