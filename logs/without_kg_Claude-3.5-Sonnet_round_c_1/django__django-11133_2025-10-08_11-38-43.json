{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/http/response.py lines 223-237)": "\n    def make_bytes(self, value):\n        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n        # Per PEP 3333, this response body must be bytes. To avoid returning\n        # an instance of a subclass, this function returns `bytes(value)`.\n        # This doesn't make a copy when `value` already contains bytes.\n\n        # Handle string types -- we can't rely on force_bytes here because:\n        # - Python attempts str conversion first\n        # - when self._charset != 'utf-8' it re-encodes the content\n        if isinstance(value, bytes):\n            return bytes(value)\n        if isinstance(value, str):\n            return bytes(value.encode(self.charset))\n        if isinstance(value, memoryview):\n            return bytes(value)\n        # Handle non-string types.\n        return str(value).encode(self.charset)\n",
    "Location 2 (/root/hy/projects_1/django/tests/responses/tests.py lines 147-156)": "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        content = b\"My Content\"\n        memview = memoryview(content)\n        response = HttpResponse(content=memview)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        content = b\"Written via memoryview\"\n        memview = memoryview(content)\n        response = HttpResponse()\n        response.write(memview)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        empty_memview = memoryview(b\"\")\n        response = HttpResponse(content=empty_memview)\n        self.assertEqual(response.content, b\"\")\n\n    def test_memoryview_unicode_bytes(self):\n        content = \"Caf√©\".encode('utf-8')\n        memview = memoryview(content)\n        response = HttpResponse(content=memview)\n        self.assertEqual(response.content, content)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/http/response.py lines 223-237)": [
      "\n    def make_bytes(self, value):\n        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n        # Per PEP 3333, this response body must be bytes. To avoid returning\n        # an instance of a subclass, this function returns `bytes(value)`.\n        # This doesn't make a copy when `value` already contains bytes.\n\n        # Handle string types -- we can't rely on force_bytes here because:\n        # - Python attempts str conversion first\n        # - when self._charset != 'utf-8' it re-encodes the content\n        if isinstance(value, bytes):\n            return bytes(value)\n        if isinstance(value, str):\n            return bytes(value.encode(self.charset))\n        # Handle memoryview objects by extracting their byte content\n        if isinstance(value, memoryview):\n            return bytes(value)\n        # Handle non-string types.\n        return str(value).encode(self.charset)\n",
      "\ndef make_bytes(self, value):\n    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n    # Per PEP 3333, this response body must be bytes. To avoid returning\n    # an instance of a subclass, this function returns `bytes(value)`.\n    # This doesn't make a copy when `value` already contains bytes.\n\n    # Handle string types -- we can't rely on force_bytes here because:\n    # - Python attempts str conversion first\n    # - when self._charset != 'utf-8' it re-encodes the content\n    if isinstance(value, bytes):\n        return bytes(value)\n    if isinstance(value, str):\n        return bytes(value.encode(self.charset))\n    # Handle memoryview objects.\n    if isinstance(value, memoryview):\n        return bytes(value)\n    # Handle non-string types.\n    return str(value).encode(self.charset)\n",
      "\n    def make_bytes(self, value):\n        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n        # Per PEP 3333, this response body must be bytes. To avoid returning\n        # an instance of a subclass, this function returns `bytes(value)`.\n        # This doesn't make a copy when `value` already contains bytes.\n\n        # Handle string types -- we can't rely on force_bytes here because:\n        # - Python attempts str conversion first\n        # - when self._charset != 'utf-8' it re-encodes the content\n        if isinstance(value, bytes):\n            return bytes(value)\n        if isinstance(value, str):\n            return bytes(value.encode(self.charset))\n        if isinstance(value, memoryview):\n            return bytes(value)\n        # Handle non-string types.\n        return str(value).encode(self.charset)\n",
      "\n    def make_bytes(self, value):\n        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n        # Per PEP 3333, this response body must be bytes. To avoid returning\n        # an instance of a subclass, this function returns `bytes(value)`.\n        # This doesn't make a copy when `value` already contains bytes.\n\n        # Handle string types -- we can't rely on force_bytes here because:\n        # - Python attempts str conversion first\n        # - when self._charset != 'utf-8' it re-encodes the content\n        if isinstance(value, bytes):\n            return bytes(value)\n        if isinstance(value, str):\n            return bytes(value.encode(self.charset))\n        if isinstance(value, memoryview):\n            return bytes(value)\n        # Handle non-string types.\n        return str(value).encode(self.charset)\n",
      "\ndef make_bytes(self, value):\n    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n    # Per PEP 3333, this response body must be bytes. To avoid returning\n    # an instance of a subclass, this function returns `bytes(value)`.\n    # This doesn't make a copy when `value` already contains bytes.\n\n    # Handle string types -- we can't rely on force_bytes here because:\n    # - Python attempts str conversion first\n    # - when self._charset != 'utf-8' it re-encodes the content\n    if isinstance(value, bytes):\n        return bytes(value)\n    if isinstance(value, str):\n        return bytes(value.encode(self.charset))\n    # Handle memoryview objects by converting to bytes directly\n    if isinstance(value, memoryview):\n        return bytes(value)\n    # Handle non-string types.\n    return str(value).encode(self.charset)\n",
      "\ndef make_bytes(self, value):\n    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n    # Per PEP 3333, this response body must be bytes. To avoid returning\n    # an instance of a subclass, this function returns `bytes(value)`.\n    # This doesn't make a copy when `value` already contains bytes.\n\n    # Handle string types -- we can't rely on force_bytes here because:\n    # - Python attempts str conversion first\n    # - when self._charset != 'utf-8' it re-encodes the content\n    if isinstance(value, bytes):\n        return bytes(value)\n    if isinstance(value, str):\n        return bytes(value.encode(self.charset))\n    if isinstance(value, memoryview):\n        return bytes(value)\n    # Handle non-string types.\n    return str(value).encode(self.charset)\n",
      "\n    def make_bytes(self, value):\n        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n        # Per PEP 3333, this response body must be bytes. To avoid returning\n        # an instance of a subclass, this function returns `bytes(value)`.\n        # This doesn't make a copy when `value` already contains bytes.\n\n        # Handle string types -- we can't rely on force_bytes here because:\n        # - Python attempts str conversion first\n        # - when self._charset != 'utf-8' it re-encodes the content\n        if isinstance(value, bytes):\n            return bytes(value)\n        if isinstance(value, str):\n            return bytes(value.encode(self.charset))\n        if isinstance(value, memoryview):\n            return bytes(value)\n        # Handle non-string types.\n        return str(value).encode(self.charset)\n",
      "\ndef make_bytes(self, value):\n    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n    # Per PEP 3333, this response body must be bytes. To avoid returning\n    # an instance of a subclass, this function returns `bytes(value)`.\n    # This doesn't make a copy when `value` already contains bytes.\n\n    # Handle string types -- we can't rely on force_bytes here because:\n    # - Python attempts str conversion first\n    # - when self._charset != 'utf-8' it re-encodes the content\n    if isinstance(value, bytes):\n        return bytes(value)\n    if isinstance(value, str):\n        return bytes(value.encode(self.charset))\n    if isinstance(value, memoryview):\n        return bytes(value)\n    # Handle non-string types.\n    return str(value).encode(self.charset)\n"
    ],
    "Location 2 (/root/hy/projects_1/django/tests/responses/tests.py lines 147-156)": [
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        # Test basic memoryview content assignment\n        content = b\"My Content\"\n        response = HttpResponse(memoryview(content))\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_different_content(self):\n        # Test memoryview with different byte content\n        content = b\"Different bytes: \\x00\\x01\\x02\\xff\"\n        response = HttpResponse(memoryview(content))\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        # Test memoryview used with write() method\n        content = b\"Written content\"\n        response = HttpResponse()\n        response.write(memoryview(content))\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        # Test empty memoryview\n        response = HttpResponse(memoryview(b\"\"))\n        self.assertEqual(response.content, b\"\")\n",
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        \"\"\"Test that HttpResponse properly handles memoryview objects.\"\"\"\n        # Basic memoryview content\n        content = b'My Content'\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n        # Different content\n        content2 = b'Hello World!'\n        mv2 = memoryview(content2)\n        response2 = HttpResponse(mv2)\n        self.assertEqual(response2.content, content2)\n\n        # Empty memoryview\n        empty_mv = memoryview(b'')\n        response3 = HttpResponse(empty_mv)\n        self.assertEqual(response3.content, b'')\n\n        # Using write() with memoryview\n        response4 = HttpResponse()\n        response4.write(memoryview(b'Written content'))\n        self.assertEqual(response4.content, b'Written content')\n",
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        # Test basic memoryview content\n        content = b\"My Content\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_different_content(self):\n        # Test memoryview with different byte content\n        content = b\"Hello, World!\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        # Test memoryview with write method\n        content = b\"Written content\"\n        mv = memoryview(content)\n        response = HttpResponse()\n        response.write(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        # Test empty memoryview\n        content = b\"\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n",
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        \"\"\"Test that memoryview objects are properly handled.\"\"\"\n        content = b\"My Content\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_different_content(self):\n        \"\"\"Test memoryview with different byte content.\"\"\"\n        content = b\"Different bytes \\x00\\x01\\x02\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        \"\"\"Test memoryview with write method.\"\"\"\n        content = b\"Written content\"\n        mv = memoryview(content)\n        response = HttpResponse()\n        response.write(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        \"\"\"Test empty memoryview.\"\"\"\n        mv = memoryview(b\"\")\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, b\"\")\n",
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        # Test basic memoryview handling\n        content = b'My Content'\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_different_content(self):\n        # Test memoryview with different byte content\n        content = b'Hello, World!'\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        # Test memoryview with write method\n        content = b'Written via memoryview'\n        mv = memoryview(content)\n        response = HttpResponse()\n        response.write(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        # Test empty memoryview\n        content = b''\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n",
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        \"\"\"Test that memoryview objects are properly handled.\"\"\"\n        content = b\"My Content\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        \"\"\"Test that memoryview objects work with write method.\"\"\"\n        content = b\"Hello World\"\n        mv = memoryview(content)\n        response = HttpResponse()\n        response.write(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        \"\"\"Test that empty memoryview objects are handled correctly.\"\"\"\n        mv = memoryview(b\"\")\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, b\"\")\n\n    def test_memoryview_unicode_bytes(self):\n        \"\"\"Test memoryview with unicode content as bytes.\"\"\"\n        content = \"Caf√©\".encode('utf-8')\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n",
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        # Test basic memoryview content assignment\n        content = b\"My Content\"\n        response = HttpResponse(memoryview(content))\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_different_content(self):\n        # Test memoryview with different byte content\n        content = b\"Hello, World!\"\n        response = HttpResponse(memoryview(content))\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        # Test memoryview used with write() method\n        content = b\"Written via write()\"\n        response = HttpResponse()\n        response.write(memoryview(content))\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        # Test empty memoryview\n        content = b\"\"\n        response = HttpResponse(memoryview(content))\n        self.assertEqual(response.content, content)\n",
      "\n    def test_generator_cache(self):\n        generator = (\"{}\".format(i) for i in range(10))\n        response = HttpResponse(content=generator)\n        self.assertEqual(response.content, b'0123456789')\n        with self.assertRaises(StopIteration):\n            next(generator)\n\n        cache.set('my-response-key', response)\n        response = cache.get('my-response-key')\n        self.assertEqual(response.content, b'0123456789')\n\n    def test_memoryview_content(self):\n        \"\"\"Test that HttpResponse properly handles memoryview objects.\"\"\"\n        content = b\"My Content\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_different_content(self):\n        \"\"\"Test memoryview with different byte content.\"\"\"\n        content = b\"Hello, World!\"\n        mv = memoryview(content)\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_write(self):\n        \"\"\"Test writing memoryview to HttpResponse.\"\"\"\n        content = b\"Written via write()\"\n        mv = memoryview(content)\n        response = HttpResponse()\n        response.write(mv)\n        self.assertEqual(response.content, content)\n\n    def test_memoryview_empty(self):\n        \"\"\"Test empty memoryview.\"\"\"\n        mv = memoryview(b\"\")\n        response = HttpResponse(mv)\n        self.assertEqual(response.content, b\"\")\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a4a44a5aaa 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,6 +220,7 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n+\n     def make_bytes(self, value):\n         \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n         # Per PEP 3333, this response body must be bytes. To avoid returning\n@@ -233,6 +234,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..9ef3446d49 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,26 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        \"\"\"Test that HttpResponse properly handles memoryview objects.\"\"\"\n+        # Basic memoryview content\n+        content = b\"My Content\"\n+        response = HttpResponse(memoryview(content))\n+        self.assertEqual(response.content, content)\n+        \n+        # Empty memoryview\n+        empty_content = b\"\"\n+        response = HttpResponse(memoryview(empty_content))\n+        self.assertEqual(response.content, empty_content)\n+        \n+        # Memoryview with different byte content\n+        binary_content = b\"\\x00\\x01\\x02\\x03\"\n+        response = HttpResponse(memoryview(binary_content))\n+        self.assertEqual(response.content, binary_content)\n+        \n+        # Test write method with memoryview\n+        response = HttpResponse()\n+        response.write(memoryview(b\"Hello \"))\n+        response.write(memoryview(b\"World\"))\n+        self.assertEqual(response.content, b\"Hello World\")\n",
    "variant_0": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a4a44a5aaa 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,6 +220,7 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n+\n     def make_bytes(self, value):\n         \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n         # Per PEP 3333, this response body must be bytes. To avoid returning\n@@ -233,6 +234,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..97f8c9e550 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,27 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        content = b\"My Content\"\n+        memview = memoryview(content)\n+        response = HttpResponse(content=memview)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        content = b\"Written via memoryview\"\n+        memview = memoryview(content)\n+        response = HttpResponse()\n+        response.write(memview)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        empty_memview = memoryview(b\"\")\n+        response = HttpResponse(content=empty_memview)\n+        self.assertEqual(response.content, b\"\")\n+\n+    def test_memoryview_unicode_bytes(self):\n+        content = \"Caf√©\".encode('utf-8')\n+        memview = memoryview(content)\n+        response = HttpResponse(content=memview)\n+        self.assertEqual(response.content, content)\n",
    "variant_1": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a95b81534f 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,6 +220,7 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n+\n     def make_bytes(self, value):\n         \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n         # Per PEP 3333, this response body must be bytes. To avoid returning\n@@ -233,6 +234,9 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        # Handle memoryview objects by extracting their byte content\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..1e280ca8b9 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,27 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        # Test basic memoryview content assignment\n+        content = b\"My Content\"\n+        response = HttpResponse(memoryview(content))\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_different_content(self):\n+        # Test memoryview with different byte content\n+        content = b\"Different bytes: \\x00\\x01\\x02\\xff\"\n+        response = HttpResponse(memoryview(content))\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        # Test memoryview used with write() method\n+        content = b\"Written content\"\n+        response = HttpResponse()\n+        response.write(memoryview(content))\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        # Test empty memoryview\n+        response = HttpResponse(memoryview(b\"\"))\n+        self.assertEqual(response.content, b\"\")\n",
    "variant_2": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..f256899193 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,21 +220,25 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n-    def make_bytes(self, value):\n-        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n-        # Per PEP 3333, this response body must be bytes. To avoid returning\n-        # an instance of a subclass, this function returns `bytes(value)`.\n-        # This doesn't make a copy when `value` already contains bytes.\n-\n-        # Handle string types -- we can't rely on force_bytes here because:\n-        # - Python attempts str conversion first\n-        # - when self._charset != 'utf-8' it re-encodes the content\n-        if isinstance(value, bytes):\n-            return bytes(value)\n-        if isinstance(value, str):\n-            return bytes(value.encode(self.charset))\n-        # Handle non-string types.\n-        return str(value).encode(self.charset)\n+\n+def make_bytes(self, value):\n+    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n+    # Per PEP 3333, this response body must be bytes. To avoid returning\n+    # an instance of a subclass, this function returns `bytes(value)`.\n+    # This doesn't make a copy when `value` already contains bytes.\n+\n+    # Handle string types -- we can't rely on force_bytes here because:\n+    # - Python attempts str conversion first\n+    # - when self._charset != 'utf-8' it re-encodes the content\n+    if isinstance(value, bytes):\n+        return bytes(value)\n+    if isinstance(value, str):\n+        return bytes(value.encode(self.charset))\n+    # Handle memoryview objects.\n+    if isinstance(value, memoryview):\n+        return bytes(value)\n+    # Handle non-string types.\n+    return str(value).encode(self.charset)\n \n     # These methods partially implement the file-like object interface.\n     # See https://docs.python.org/library/io.html#io.IOBase\ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..2fbb3a98aa 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,27 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        \"\"\"Test that HttpResponse properly handles memoryview objects.\"\"\"\n+        # Basic memoryview content\n+        content = b'My Content'\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+        # Different content\n+        content2 = b'Hello World!'\n+        mv2 = memoryview(content2)\n+        response2 = HttpResponse(mv2)\n+        self.assertEqual(response2.content, content2)\n+\n+        # Empty memoryview\n+        empty_mv = memoryview(b'')\n+        response3 = HttpResponse(empty_mv)\n+        self.assertEqual(response3.content, b'')\n+\n+        # Using write() with memoryview\n+        response4 = HttpResponse()\n+        response4.write(memoryview(b'Written content'))\n+        self.assertEqual(response4.content, b'Written content')\n",
    "variant_3": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a4a44a5aaa 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,6 +220,7 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n+\n     def make_bytes(self, value):\n         \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n         # Per PEP 3333, this response body must be bytes. To avoid returning\n@@ -233,6 +234,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..c0cedb166b 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,32 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        # Test basic memoryview content\n+        content = b\"My Content\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_different_content(self):\n+        # Test memoryview with different byte content\n+        content = b\"Hello, World!\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        # Test memoryview with write method\n+        content = b\"Written content\"\n+        mv = memoryview(content)\n+        response = HttpResponse()\n+        response.write(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        # Test empty memoryview\n+        content = b\"\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n",
    "variant_4": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a4a44a5aaa 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,6 +220,7 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n+\n     def make_bytes(self, value):\n         \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n         # Per PEP 3333, this response body must be bytes. To avoid returning\n@@ -233,6 +234,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..de4b39ff3c 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,31 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        \"\"\"Test that memoryview objects are properly handled.\"\"\"\n+        content = b\"My Content\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_different_content(self):\n+        \"\"\"Test memoryview with different byte content.\"\"\"\n+        content = b\"Different bytes \\x00\\x01\\x02\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        \"\"\"Test memoryview with write method.\"\"\"\n+        content = b\"Written content\"\n+        mv = memoryview(content)\n+        response = HttpResponse()\n+        response.write(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        \"\"\"Test empty memoryview.\"\"\"\n+        mv = memoryview(b\"\")\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, b\"\")\n",
    "variant_5": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..9568508f91 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,21 +220,25 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n-    def make_bytes(self, value):\n-        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n-        # Per PEP 3333, this response body must be bytes. To avoid returning\n-        # an instance of a subclass, this function returns `bytes(value)`.\n-        # This doesn't make a copy when `value` already contains bytes.\n-\n-        # Handle string types -- we can't rely on force_bytes here because:\n-        # - Python attempts str conversion first\n-        # - when self._charset != 'utf-8' it re-encodes the content\n-        if isinstance(value, bytes):\n-            return bytes(value)\n-        if isinstance(value, str):\n-            return bytes(value.encode(self.charset))\n-        # Handle non-string types.\n-        return str(value).encode(self.charset)\n+\n+def make_bytes(self, value):\n+    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n+    # Per PEP 3333, this response body must be bytes. To avoid returning\n+    # an instance of a subclass, this function returns `bytes(value)`.\n+    # This doesn't make a copy when `value` already contains bytes.\n+\n+    # Handle string types -- we can't rely on force_bytes here because:\n+    # - Python attempts str conversion first\n+    # - when self._charset != 'utf-8' it re-encodes the content\n+    if isinstance(value, bytes):\n+        return bytes(value)\n+    if isinstance(value, str):\n+        return bytes(value.encode(self.charset))\n+    # Handle memoryview objects by converting to bytes directly\n+    if isinstance(value, memoryview):\n+        return bytes(value)\n+    # Handle non-string types.\n+    return str(value).encode(self.charset)\n \n     # These methods partially implement the file-like object interface.\n     # See https://docs.python.org/library/io.html#io.IOBase\ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..0612ed4644 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,32 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        # Test basic memoryview handling\n+        content = b'My Content'\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_different_content(self):\n+        # Test memoryview with different byte content\n+        content = b'Hello, World!'\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        # Test memoryview with write method\n+        content = b'Written via memoryview'\n+        mv = memoryview(content)\n+        response = HttpResponse()\n+        response.write(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        # Test empty memoryview\n+        content = b''\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n",
    "variant_6": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..73b755d9d8 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,21 +220,24 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n-    def make_bytes(self, value):\n-        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n-        # Per PEP 3333, this response body must be bytes. To avoid returning\n-        # an instance of a subclass, this function returns `bytes(value)`.\n-        # This doesn't make a copy when `value` already contains bytes.\n-\n-        # Handle string types -- we can't rely on force_bytes here because:\n-        # - Python attempts str conversion first\n-        # - when self._charset != 'utf-8' it re-encodes the content\n-        if isinstance(value, bytes):\n-            return bytes(value)\n-        if isinstance(value, str):\n-            return bytes(value.encode(self.charset))\n-        # Handle non-string types.\n-        return str(value).encode(self.charset)\n+\n+def make_bytes(self, value):\n+    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n+    # Per PEP 3333, this response body must be bytes. To avoid returning\n+    # an instance of a subclass, this function returns `bytes(value)`.\n+    # This doesn't make a copy when `value` already contains bytes.\n+\n+    # Handle string types -- we can't rely on force_bytes here because:\n+    # - Python attempts str conversion first\n+    # - when self._charset != 'utf-8' it re-encodes the content\n+    if isinstance(value, bytes):\n+        return bytes(value)\n+    if isinstance(value, str):\n+        return bytes(value.encode(self.charset))\n+    if isinstance(value, memoryview):\n+        return bytes(value)\n+    # Handle non-string types.\n+    return str(value).encode(self.charset)\n \n     # These methods partially implement the file-like object interface.\n     # See https://docs.python.org/library/io.html#io.IOBase\ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..3ca9deea4f 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,31 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        \"\"\"Test that memoryview objects are properly handled.\"\"\"\n+        content = b\"My Content\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        \"\"\"Test that memoryview objects work with write method.\"\"\"\n+        content = b\"Hello World\"\n+        mv = memoryview(content)\n+        response = HttpResponse()\n+        response.write(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        \"\"\"Test that empty memoryview objects are handled correctly.\"\"\"\n+        mv = memoryview(b\"\")\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, b\"\")\n+\n+    def test_memoryview_unicode_bytes(self):\n+        \"\"\"Test memoryview with unicode content as bytes.\"\"\"\n+        content = \"Caf√©\".encode('utf-8')\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n",
    "variant_7": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a4a44a5aaa 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,6 +220,7 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n+\n     def make_bytes(self, value):\n         \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n         # Per PEP 3333, this response body must be bytes. To avoid returning\n@@ -233,6 +234,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..4908036cf2 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,28 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        # Test basic memoryview content assignment\n+        content = b\"My Content\"\n+        response = HttpResponse(memoryview(content))\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_different_content(self):\n+        # Test memoryview with different byte content\n+        content = b\"Hello, World!\"\n+        response = HttpResponse(memoryview(content))\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        # Test memoryview used with write() method\n+        content = b\"Written via write()\"\n+        response = HttpResponse()\n+        response.write(memoryview(content))\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        # Test empty memoryview\n+        content = b\"\"\n+        response = HttpResponse(memoryview(content))\n+        self.assertEqual(response.content, content)\n",
    "variant_8": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..73b755d9d8 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -220,21 +220,24 @@ class HttpResponseBase:\n \n     # Common methods used by subclasses\n \n-    def make_bytes(self, value):\n-        \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n-        # Per PEP 3333, this response body must be bytes. To avoid returning\n-        # an instance of a subclass, this function returns `bytes(value)`.\n-        # This doesn't make a copy when `value` already contains bytes.\n-\n-        # Handle string types -- we can't rely on force_bytes here because:\n-        # - Python attempts str conversion first\n-        # - when self._charset != 'utf-8' it re-encodes the content\n-        if isinstance(value, bytes):\n-            return bytes(value)\n-        if isinstance(value, str):\n-            return bytes(value.encode(self.charset))\n-        # Handle non-string types.\n-        return str(value).encode(self.charset)\n+\n+def make_bytes(self, value):\n+    \"\"\"Turn a value into a bytestring encoded in the output charset.\"\"\"\n+    # Per PEP 3333, this response body must be bytes. To avoid returning\n+    # an instance of a subclass, this function returns `bytes(value)`.\n+    # This doesn't make a copy when `value` already contains bytes.\n+\n+    # Handle string types -- we can't rely on force_bytes here because:\n+    # - Python attempts str conversion first\n+    # - when self._charset != 'utf-8' it re-encodes the content\n+    if isinstance(value, bytes):\n+        return bytes(value)\n+    if isinstance(value, str):\n+        return bytes(value.encode(self.charset))\n+    if isinstance(value, memoryview):\n+        return bytes(value)\n+    # Handle non-string types.\n+    return str(value).encode(self.charset)\n \n     # These methods partially implement the file-like object interface.\n     # See https://docs.python.org/library/io.html#io.IOBase\ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\nindex 934e4dfe60..9def68d5dd 100644\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -144,6 +144,7 @@ class HttpResponseTests(SimpleTestCase):\n             buf.write(content)\n         self.assertEqual(r.content, content.encode(UTF8))\n \n+\n     def test_generator_cache(self):\n         generator = (\"{}\".format(i) for i in range(10))\n         response = HttpResponse(content=generator)\n@@ -154,3 +155,31 @@ class HttpResponseTests(SimpleTestCase):\n         cache.set('my-response-key', response)\n         response = cache.get('my-response-key')\n         self.assertEqual(response.content, b'0123456789')\n+\n+    def test_memoryview_content(self):\n+        \"\"\"Test that HttpResponse properly handles memoryview objects.\"\"\"\n+        content = b\"My Content\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_different_content(self):\n+        \"\"\"Test memoryview with different byte content.\"\"\"\n+        content = b\"Hello, World!\"\n+        mv = memoryview(content)\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_write(self):\n+        \"\"\"Test writing memoryview to HttpResponse.\"\"\"\n+        content = b\"Written via write()\"\n+        mv = memoryview(content)\n+        response = HttpResponse()\n+        response.write(mv)\n+        self.assertEqual(response.content, content)\n+\n+    def test_memoryview_empty(self):\n+        \"\"\"Test empty memoryview.\"\"\"\n+        mv = memoryview(b\"\")\n+        response = HttpResponse(mv)\n+        self.assertEqual(response.content, b\"\")\n"
  }
}