{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 111-112)": "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 108-110)": "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
    "Location 3 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 167-172)": "\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n",
    "Location 4 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 153-155)": "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
    "Location 5 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 149-155)": "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 111-112)": [
      "\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n            # ensure a determinstic order *within* letters by also sorting on\n            # the entry itself\n            return (lckey, entry[0])\n",
      "\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n            key, (void, void, category_key) = entry\n            if category_key:\n                # using specified category key to sort\n                key = category_key\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n"
    ],
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 108-110)": [
      "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n",
      "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\ndef keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n    key, (void, void, category_key) = entry\n    if category_key:\n        # using specified category key to sort\n        key = category_key\n    lckey = unicodedata.normalize('NFD', key.lower())\n    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n        lckey = lckey[1:]\n    if lckey[0:1].isalpha() or lckey.startswith('_'):\n        lckey = chr(127) + lckey\n    else:\n        # Force all symbols to sort before alphabetic characters\n        lckey = chr(1) + lckey\n    # ensure a determinstic order *within* letters by also sorting on\n    # the entry itself\n    return (lckey, entry[0])\n",
      "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n",
      "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n",
      "\n            lckey = unicodedata.normalize('NFD', key.lower())\n            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                lckey = lckey[1:]\n            if lckey[0:1].isalpha() or lckey.startswith('_'):\n                lckey = chr(127) + lckey\n            else:\n                # Force all symbols to sort before alphabetic characters\n                lckey = chr(1) + lckey\n"
    ],
    "Location 3 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 167-172)": [
      "\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n",
      "\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n",
      "\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n",
      "\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n",
      "\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n",
      "\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n",
      "\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n",
      "\n        # group the entries by letter\n        def keyfunc3(item: Tuple[str, List]) -> str:\n            # hack: mutating the subitems dicts to a list in the keyfunc\n            k, v = item\n            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                          key=keyfunc2)\n            if v[2] is None:\n                # now calculate the key\n                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                    k = k[1:]\n                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                if letter.isalpha() or letter == '_':\n                    return letter\n                else:\n                    # get all other symbols under one heading\n                    return _('Symbols')\n            else:\n                return v[2]\n"
    ],
    "Location 4 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 153-155)": [
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n"
    ],
    "Location 5 (/root/hy/projects_1/sphinx/sphinx/environment/adapters/indexentries.py lines 149-155)": [
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n",
      "\n        # sort the sub-index entries\n        def keyfunc2(entry: Tuple[str, List]) -> str:\n            key = unicodedata.normalize('NFD', entry[0].lower())\n            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                key = key[1:]\n            if key[0:1].isalpha() or key.startswith('_'):\n                key = chr(127) + key\n            else:\n                # Force all symbols to sort before alphabetic characters\n                key = chr(1) + key\n            return key\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..ffe158cbc 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -105,11 +105,16 @@ class IndexEntries:\n             if category_key:\n                 # using specified category key to sort\n                 key = category_key\n+\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n+\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -146,12 +151,20 @@ class IndexEntries:\n                 i += 1\n \n         # sort the sub-index entries\n+\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -164,6 +177,7 @@ class IndexEntries:\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n+\n                 letter = unicodedata.normalize('NFD', k[0])[0].upper()\n                 if letter.isalpha() or letter == '_':\n                     return letter\n",
    "variant_0": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..744c388c1 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,21 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,6 +125,9 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +163,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,6 +172,18 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -161,6 +193,10 @@ class IndexEntries:\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n",
    "variant_1": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..af7f407c3 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -105,11 +105,16 @@ class IndexEntries:\n             if category_key:\n                 # using specified category key to sort\n                 key = category_key\n+\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n+\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +150,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,6 +159,18 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -161,6 +180,10 @@ class IndexEntries:\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n",
    "variant_2": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..6b1dc1158 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,21 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,6 +125,12 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +166,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,6 +175,18 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -161,6 +196,10 @@ class IndexEntries:\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n",
    "variant_3": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..5dee0ac7e 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -105,11 +105,21 @@ class IndexEntries:\n             if category_key:\n                 # using specified category key to sort\n                 key = category_key\n+\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +155,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,6 +164,18 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -161,6 +185,10 @@ class IndexEntries:\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n",
    "variant_4": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..6b1dc1158 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,21 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,6 +125,12 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+            # ensure a determinstic order *within* letters by also sorting on\n+            # the entry itself\n+            return (lckey, entry[0])\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +166,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,6 +175,18 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -161,6 +196,10 @@ class IndexEntries:\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n",
    "variant_5": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..2e464dc1d 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -105,11 +105,29 @@ class IndexEntries:\n             if category_key:\n                 # using specified category key to sort\n                 key = category_key\n-            lckey = unicodedata.normalize('NFD', key.lower())\n-            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                lckey = lckey[1:]\n+\n+def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+    key, (void, void, category_key) = entry\n+    if category_key:\n+        # using specified category key to sort\n+        key = category_key\n+    lckey = unicodedata.normalize('NFD', key.lower())\n+    if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+        lckey = lckey[1:]\n+    if lckey[0:1].isalpha() or lckey.startswith('_'):\n+        lckey = chr(127) + lckey\n+    else:\n+        # Force all symbols to sort before alphabetic characters\n+        lckey = chr(1) + lckey\n+    # ensure a determinstic order *within* letters by also sorting on\n+    # the entry itself\n+    return (lckey, entry[0])\n+\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +163,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,6 +172,18 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -161,6 +193,10 @@ class IndexEntries:\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n",
    "variant_6": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..744c388c1 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -100,6 +100,21 @@ class IndexEntries:\n \n         # sort the index entries; put all symbols at the front, even those\n         # following the letters in ASCII, this is where the chr(127) comes from\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -110,6 +125,9 @@ class IndexEntries:\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +163,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,6 +172,18 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n         # group the entries by letter\n@@ -161,6 +193,10 @@ class IndexEntries:\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n             if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n",
    "variant_7": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..713d24a78 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -105,11 +105,16 @@ class IndexEntries:\n             if category_key:\n                 # using specified category key to sort\n                 key = category_key\n+\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n+\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +150,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,8 +159,31 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n \n+        # group the entries by letter\n+        def keyfunc3(item: Tuple[str, List]) -> str:\n+            # hack: mutating the subitems dicts to a list in the keyfunc\n+            k, v = item\n+            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n+                          key=keyfunc2)\n+            if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n+\n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             # hack: mutating the subitems dicts to a list in the keyfunc\n@@ -172,5 +202,7 @@ class IndexEntries:\n                     return _('Symbols')\n             else:\n                 return v[2]\n+            else:\n+                return v[2]\n         return [(key_, list(group))\n                 for (key_, group) in groupby(newlist, keyfunc3)]\n",
    "variant_8": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..38ed49a3b 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -105,11 +105,29 @@ class IndexEntries:\n             if category_key:\n                 # using specified category key to sort\n                 key = category_key\n+\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n+\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+            key, (void, void, category_key) = entry\n+            if category_key:\n+                # using specified category key to sort\n+                key = category_key\n+            lckey = unicodedata.normalize('NFD', key.lower())\n+            if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                lckey = lckey[1:]\n+            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+                lckey = chr(127) + lckey\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                lckey = chr(1) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n@@ -145,6 +163,8 @@ class IndexEntries:\n                 oldsubitems = subitems\n                 i += 1\n \n+        # sort the sub-index entries\n+\n         # sort the sub-index entries\n         def keyfunc2(entry: Tuple[str, List]) -> str:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n@@ -152,7 +172,30 @@ class IndexEntries:\n                 key = key[1:]\n             if key[0:1].isalpha() or key.startswith('_'):\n                 key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n             return key\n+            key = unicodedata.normalize('NFD', entry[0].lower())\n+            if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                key = key[1:]\n+            if key[0:1].isalpha() or key.startswith('_'):\n+                key = chr(127) + key\n+            else:\n+                # Force all symbols to sort before alphabetic characters\n+                key = chr(1) + key\n+            return key\n+\n+        # group the entries by letter\n+        def keyfunc3(item: Tuple[str, List]) -> str:\n+            # hack: mutating the subitems dicts to a list in the keyfunc\n+            k, v = item\n+            v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n+                          key=keyfunc2)\n+            if v[2] is None:\n+                # now calculate the key\n+                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                    k = k[1:]\n \n         # group the entries by letter\n         def keyfunc3(item: Tuple[str, List]) -> str:\n@@ -172,5 +215,7 @@ class IndexEntries:\n                     return _('Symbols')\n             else:\n                 return v[2]\n+            else:\n+                return v[2]\n         return [(key_, list(group))\n                 for (key_, group) in groupby(newlist, keyfunc3)]\n"
  }
}