{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/ext/autodoc/__init__.py lines 1704-1706)": "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/ext/autodoc/__init__.py lines 2095-2097)": "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/ext/autodoc/__init__.py lines 1704-1706)": [
      "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
      "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
      "\n        try:\n            annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n        except NameError:\n",
      "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
      "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
      "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
      "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
      "\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n"
    ],
    "Location 2 (/root/hy/projects_1/sphinx/sphinx/ext/autodoc/__init__.py lines 2095-2097)": [
      "\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n",
      "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n",
      "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n",
      "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n",
      "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n",
      "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n",
      "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n",
      "\n    def add_directive_header(self, sig: str) -> None:\n        super().add_directive_header(sig)\n        sourcename = self.get_sourcename()\n        if not self.options.annotation:\n            # obtain type annotation for this attribute\n            try:\n                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n            except NameError:\n                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                annotations = safe_getattr(self.parent, '__annotations__', {})\n            except TypeError:\n                annotations = {}\n            except KeyError:\n                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                annotations = {}\n            except AttributeError:\n                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                annotations = {}\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..57d465a64 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2092,8 +2093,9 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..645575269 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..bf57aaf55 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2090,10 +2091,13 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..645575269 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..f270fbcfa 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,9 +1701,10 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n-            try:\n-                annotations = get_type_hints(self.parent)\n-            except NameError:\n+\n+        try:\n+            annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n+        except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n             except TypeError:\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..645575269 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..645575269 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..645575269 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..645575269 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..645575269 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1701,8 +1701,9 @@ class DataDocumenter(ModuleLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain annotation for this data\n+\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2087,13 +2088,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         return self.get_attr(self.parent or self.object, '__module__', None) \\\n             or self.modname\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if not self.options.annotation:\n+            # obtain type annotation for this attribute\n+\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, type_aliases=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2102,6 +2109,16 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except KeyError:\n                 # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n                 annotations = {}\n+            except AttributeError:\n+                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n+                annotations = {}\n+                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n+                annotations = safe_getattr(self.parent, '__annotations__', {})\n+            except TypeError:\n+                annotations = {}\n+            except KeyError:\n+                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)\n+                annotations = {}\n             except AttributeError:\n                 # AttributeError is raised on 3.5.2 (fixed by 3.5.3)\n                 annotations = {}\n"
  }
}