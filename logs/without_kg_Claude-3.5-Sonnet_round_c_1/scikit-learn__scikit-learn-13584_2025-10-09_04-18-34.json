{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/utils/_pprint.py lines 98-99)": "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(v1, v2):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            import numpy as np\n            if hasattr(v1, '__array__') or hasattr(v2, '__array__'):\n                return np.array_equal(v1, v2)\n        except ImportError:\n            pass\n        return v1 == v2\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/utils/_pprint.py lines 87-101)": "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n    \n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to standard comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/utils/_pprint.py lines 98-99)": [
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, AttributeError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safe comparison of parameters that handles arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison for scalars\n        try:\n            return a == b\n        except (ValueError, TypeError):\n            # Handle cases where == might fail (e.g., different types)\n            return False\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safe comparison of parameters that handles arrays.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison\n        try:\n            return a == b\n        except ValueError:\n            # Handle cases where == returns an array\n            return False\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison for scalars\n        try:\n            return a == b\n        except ValueError:\n            # Handle cases where == returns an array (shouldn't happen with above check)\n            return False\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(np, 'ndarray') and (isinstance(a, np.ndarray) or isinstance(b, np.ndarray)):\n                return np.array_equal(a, b)\n        except ImportError:\n            pass\n        # Fall back to regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except ImportError:\n            pass\n        # Fall back to regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(v1, v2):\n        \"\"\"Safe comparison that handles arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(v1, '__array__') or hasattr(v2, '__array__'):\n                return np.array_equal(v1, v2)\n        except (ImportError, ValueError, TypeError):\n            pass\n        # Fall back to regular comparison\n        try:\n            return v1 == v2\n        except ValueError:\n            # Handle cases where == returns an array\n            return False\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n"
    ],
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/utils/_pprint.py lines 87-101)": [
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n    \n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, 'shape') or hasattr(b, 'shape'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except ImportError:\n            pass\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n    \n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, 'shape') or hasattr(b, 'shape'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n    \n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, 'shape') or hasattr(b, 'shape'):\n                return np.array_equal(a, b)\n        except (ImportError, TypeError, ValueError):\n            pass\n        # Fall back to regular comparison\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays.\"\"\"\n        try:\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except ImportError:\n            pass\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n    \n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except (ImportError, ValueError, TypeError):\n            pass\n        # Fall back to regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n    \n    def _params_equal(a, b):\n        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n        try:\n            # Try numpy array comparison first\n            import numpy as np\n            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n                return np.array_equal(a, b)\n        except ImportError:\n            pass\n        except (ValueError, TypeError):\n            # Fall back to regular comparison if array_equal fails\n            pass\n        \n        # Regular comparison for scalars\n        return a == b\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        if (not _params_equal(v, init_params[k]) and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..17f1072bf 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,6 +84,7 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +96,38 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        try:\n+            import numpy as np\n+            # For numpy arrays, use array_equal to avoid ambiguous truth value\n+            if hasattr(v, 'shape') and hasattr(init_params[k], 'shape'):\n+                params_different = not np.array_equal(v, init_params[k])\n+            elif hasattr(v, 'shape') or hasattr(init_params[k], 'shape'):\n+                # One is array, one is not - they are different\n+                params_different = True\n+            else:\n+                # Both are scalars, use regular comparison\n+                params_different = v != init_params[k]\n+        except ImportError:\n+            # Fallback if numpy is not available\n+            params_different = v != init_params[k]\n+        \n+        if (params_different and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+            if hasattr(v, 'shape') and hasattr(init_params[k], 'shape'):\n+                params_different = not np.array_equal(v, init_params[k])\n+            elif hasattr(v, 'shape') or hasattr(init_params[k], 'shape'):\n+                # One is array, one is not - they are different\n+                params_different = True\n+            else:\n+                # Both are scalars, use regular comparison\n+                params_different = v != init_params[k]\n+        except ImportError:\n+            # Fallback if numpy is not available\n+            params_different = v != init_params[k]\n+        \n+        if (params_different and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_0": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..efbcce1ce 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,9 +84,22 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n+    \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to standard comparison for scalars\n+        return a == b\n \n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n@@ -95,11 +108,35 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n \n+    def _params_equal(v1, v2):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            import numpy as np\n+            if hasattr(v1, '__array__') or hasattr(v2, '__array__'):\n+                return np.array_equal(v1, v2)\n+        except ImportError:\n+            pass\n+        return v1 == v2\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n+\n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n     \"\"\"Pretty Printer class for estimator objects.\n",
    "variant_1": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..bb759807f 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,9 +84,22 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n+    \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, 'shape') or hasattr(b, 'shape'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison for scalars\n+        return a == b\n \n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n@@ -95,11 +108,37 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, AttributeError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison\n+        return a == b\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n+\n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n     \"\"\"Pretty Printer class for estimator objects.\n",
    "variant_2": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..0e11fd0c7 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,10 +84,45 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except ImportError:\n+            pass\n+        return a == b\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+\n+    def _params_equal(a, b):\n+        \"\"\"Safe comparison of parameters that handles arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison for scalars\n+        return a == b\n+\n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n     init_func = getattr(estimator.__init__, 'deprecated_original',\n@@ -95,10 +130,12 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n \n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n",
    "variant_3": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..1e2aaf256 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,9 +84,50 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n+    \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison for scalars\n+        return a == b\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+\n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison for scalars\n+        try:\n+            return a == b\n+        except (ValueError, TypeError):\n+            # Handle cases where == might fail (e.g., different types)\n+            return False\n \n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n@@ -95,10 +136,12 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n \n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n",
    "variant_4": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..b68a8a5fe 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,10 +84,23 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, 'shape') or hasattr(b, 'shape'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison for scalars\n+        return a == b\n+\n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n     init_func = getattr(estimator.__init__, 'deprecated_original',\n@@ -95,11 +108,41 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n \n+    def _params_equal(a, b):\n+        \"\"\"Safe comparison of parameters that handles arrays.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison\n+        try:\n+            return a == b\n+        except ValueError:\n+            # Handle cases where == returns an array\n+            return False\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n+\n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n     \"\"\"Pretty Printer class for estimator objects.\n",
    "variant_5": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..83cee0328 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,9 +84,50 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n+    \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, 'shape') or hasattr(b, 'shape'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison\n+        return a == b\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+\n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, TypeError, ValueError):\n+            pass\n+        # Fall back to regular comparison for scalars\n+        try:\n+            return a == b\n+        except ValueError:\n+            # Handle cases where == returns an array (shouldn't happen with above check)\n+            return False\n \n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n@@ -95,10 +136,12 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n \n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n",
    "variant_6": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..dbac22d36 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,10 +84,45 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays.\"\"\"\n+        try:\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except ImportError:\n+            pass\n+        return a == b\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+\n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(np, 'ndarray') and (isinstance(a, np.ndarray) or isinstance(b, np.ndarray)):\n+                return np.array_equal(a, b)\n+        except ImportError:\n+            pass\n+        # Fall back to regular comparison for scalars\n+        return a == b\n+\n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n     init_func = getattr(estimator.__init__, 'deprecated_original',\n@@ -95,10 +130,12 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n \n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n",
    "variant_7": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..9e0221ad7 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,9 +84,22 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n+    \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except (ImportError, ValueError, TypeError):\n+            pass\n+        # Fall back to regular comparison for scalars\n+        return a == b\n \n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n@@ -95,11 +108,37 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except ImportError:\n+            pass\n+        # Fall back to regular comparison for scalars\n+        return a == b\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n+\n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n     \"\"\"Pretty Printer class for estimator objects.\n",
    "variant_8": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..947454833 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -84,9 +84,54 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n+    \n+    def _params_equal(a, b):\n+        \"\"\"Safely compare two parameter values, handling arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(a, '__array__') or hasattr(b, '__array__'):\n+                return np.array_equal(a, b)\n+        except ImportError:\n+            pass\n+        except (ValueError, TypeError):\n+            # Fall back to regular comparison if array_equal fails\n+            pass\n+        \n+        # Regular comparison for scalars\n+        return a == b\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+    for k, v in params.items():\n+        if (not _params_equal(v, init_params[k]) and\n+                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+            filtered_params[k] = v\n+    return filtered_params\n+\n+    def _params_equal(v1, v2):\n+        \"\"\"Safe comparison that handles arrays and scalars.\"\"\"\n+        try:\n+            # Try numpy array comparison first\n+            import numpy as np\n+            if hasattr(v1, '__array__') or hasattr(v2, '__array__'):\n+                return np.array_equal(v1, v2)\n+        except (ImportError, ValueError, TypeError):\n+            pass\n+        # Fall back to regular comparison\n+        try:\n+            return v1 == v2\n+        except ValueError:\n+            # Handle cases where == returns an array\n+            return False\n \n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n@@ -95,10 +140,12 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not _params_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n+            filtered_params[k] = v\n+    return filtered_params\n \n \n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n"
  }
}