{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/ext/autosummary/generate.py lines 248-249)": "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    value = safe_getattr(obj, member_name, None)\n                    if value is not None:\n                        # Include member if it's defined in this module or if we can't determine its module\n                        member_module = getattr(value, '__module__', None)\n                        if member_module is None or member_module == obj.__name__:\n                            filtered_members.append(member_name)\n                except (ImportError, AttributeError):\n                    # If we can't safely get the attribute, include it to be safe\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/sphinx/sphinx/ext/autosummary/generate.py lines 248-249)": [
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name, None)\n                    if member_obj is not None:\n                        member_module = getattr(member_obj, '__module__', None)\n                        if member_module == obj.__name__:\n                            filtered_members.append(member_name)\n                except (ImportError, AttributeError):\n                    # If we can't determine the module, include it to be safe\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # If we can't determine the module, include it to be safe\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    value = safe_getattr(obj, member_name, None)\n                    if value is not None:\n                        member_module = getattr(value, '__module__', None)\n                        if member_module == obj.__name__:\n                            filtered_members.append(member_name)\n                except (ImportError, AttributeError):\n                    # If we can't determine the module, include it to be safe\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    value = safe_getattr(obj, member_name)\n                    if getattr(value, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_value = safe_getattr(obj, member_name)\n                    if getattr(member_value, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # If we can't determine the module, include it to be safe\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members we can't inspect\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_obj = safe_getattr(obj, member_name)\n                    if getattr(member_obj, '__module__', None) == obj.__name__:\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include members that can't be inspected\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..540e41c81 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members to respect imported_members parameter\n+        all_members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # Include member if imported_members is True, or if it's not imported\n+            if imported_members or getattr(value, '__module__', None) == obj.__name__:\n+                all_members.append(name)\n+        ns['members'] = all_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_0": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..fb8eee527 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,26 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    value = safe_getattr(obj, member_name, None)\n+                    if value is not None:\n+                        # Include member if it's defined in this module or if we can't determine its module\n+                        member_module = getattr(value, '__module__', None)\n+                        if member_module is None or member_module == obj.__name__:\n+                            filtered_members.append(member_name)\n+                except (ImportError, AttributeError):\n+                    # If we can't safely get the attribute, include it to be safe\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_1": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..ef24ed91d 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,25 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name, None)\n+                    if member_obj is not None:\n+                        member_module = getattr(member_obj, '__module__', None)\n+                        if member_module == obj.__name__:\n+                            filtered_members.append(member_name)\n+                except (ImportError, AttributeError):\n+                    # If we can't determine the module, include it to be safe\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_2": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..fa95c2b86 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # If we can't determine the module, include it to be safe\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_3": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..228db5cd1 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,25 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    value = safe_getattr(obj, member_name, None)\n+                    if value is not None:\n+                        member_module = getattr(value, '__module__', None)\n+                        if member_module == obj.__name__:\n+                            filtered_members.append(member_name)\n+                except (ImportError, AttributeError):\n+                    # If we can't determine the module, include it to be safe\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_4": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..1b779a82a 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_5": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..69613a6f2 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    value = safe_getattr(obj, member_name)\n+                    if getattr(value, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_6": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..22d3f0da6 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_value = safe_getattr(obj, member_name)\n+                    if getattr(member_value, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # If we can't determine the module, include it to be safe\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_7": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..471fb09bc 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members we can't inspect\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n",
    "variant_8": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..1b779a82a 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -245,8 +245,23 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_obj = safe_getattr(obj, member_name)\n+                    if getattr(member_obj, '__module__', None) == obj.__name__:\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include members that can't be inspected\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n"
  }
}