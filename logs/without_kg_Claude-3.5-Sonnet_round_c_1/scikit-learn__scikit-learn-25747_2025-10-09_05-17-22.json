{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/utils/_set_output.py lines 55-62)": "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped data.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/utils/_set_output.py lines 127-134)": "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        The name of the method that calls this function (e.g. \"transform\").\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to wrap with container.\n\n    original_input : {ndarray, dataframe}\n        Original input of function.\n\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count) and skip index if so\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n        \n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
    "Location 3 (/root/hy/projects_1/scikit-learn/sklearn/utils/_set_output.py lines 10-25)": "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/utils/_set_output.py lines 55-62)": [
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped data.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    # For non-DataFrame data, check index length before creating DataFrame\n    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n        # Skip setting index when lengths don't match\n        index = None\n        \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped array.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    # For non-DataFrame data, check index length before creating DataFrame\n    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n        # Skip setting index when lengths don't match\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped array.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    # For non-DataFrame data, check index compatibility before creating DataFrame\n    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n        # Skip setting index when lengths don't match\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped array.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    # For non-DataFrame data, check index length compatibility\n    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n        # Skip using index when lengths don't match\n        index = None\n        \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped array.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    # For non-DataFrame data, check index length before creating DataFrame\n    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n        # Skip setting index when lengths don't match\n        index = None\n    \n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped data.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped data.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n",
      "\ndef _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n    \"\"\"Wrap output in a pandas container.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped in a pandas container.\n    columns : callable, ndarray, or None\n        The column names or a callable that returns column names.\n    index : ndarray or None, default=None\n        The index for the dataframe.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with the wrapped array.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            # Check if index length matches data length to handle aggregation cases\n            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n                # Skip setting index when lengths don't match (e.g., due to aggregation)\n                pass\n            else:\n                data_to_wrap.index = index\n        return data_to_wrap\n\n    # For new DataFrame creation, validate index length\n    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n        # Skip setting index when lengths don't match\n        index = None\n\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n"
    ],
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/utils/_set_output.py lines 127-134)": [
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        The name of the estimator's method.\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped with container.\n\n    original_input : {ndarray, dataframe}\n        Original input of the transformer.\n\n    estimator : estimator instance\n        The fitted estimator.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count)\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n        \n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        The name of the method that output is being wrapped for.\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped with container.\n\n    original_input : {ndarray, dataframe}\n        Original input of function.\n\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count)\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n    \n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        The name of the calling method on the estimator.\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped with Pandas DataFrame.\n\n    original_input : {ndarray, dataframe}\n        Original input of the first method.\n\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count)\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        The method name in estimator that produced the data.\n    data_to_wrap : {ndarray, dataframe}\n        The data to wrap with a container.\n    original_input : {ndarray, dataframe}\n        The original input.\n    estimator : estimator instance\n        The fitted estimator.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count)\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n        \n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : {\"transform\"}\n        Estimator's method to get container output for.\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to wrap with container.\n\n    original_input : {ndarray, dataframe}\n        Original input of function.\n\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    original_index = getattr(original_input, \"index\", None)\n    \n    # Check if data was aggregated (different row count)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n    \n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        Method to get container output for. Options: 'transform' or\n        'fit_transform'.\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to wrap with container.\n\n    original_input : {ndarray, dataframe}\n        Original input of function.\n\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count)\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        The name of the method that calls this function.\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped with Pandas DataFrame.\n    original_input : {ndarray, dataframe}\n        Original input of the first method.\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count)\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n",
      "\ndef _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : str\n        Estimator's method name.\n    data_to_wrap : {ndarray, dataframe}\n        Data to wrap with container.\n    original_input : {ndarray, dataframe}\n        Original input of function.\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    # Check if data was aggregated (different row count)\n    original_index = getattr(original_input, \"index\", None)\n    if (original_index is not None and \n        hasattr(data_to_wrap, 'shape') and \n        len(original_index) != data_to_wrap.shape[0]):\n        # Data was aggregated, don't preserve original index\n        original_index = None\n\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=original_index,\n        columns=estimator.get_feature_names_out,\n    )\n"
    ],
    "Location 3 (/root/hy/projects_1/scikit-learn/sklearn/utils/_set_output.py lines 10-25)": [
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n",
      "\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..905a8bdf7 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -19,6 +20,9 @@ def _wrap_in_pandas_container(\n     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n     `columns` and `index`.\n \n+    When the index length doesn't match the data length (e.g., due to data aggregation),\n+    the index assignment is skipped to avoid length mismatch errors.\n+\n     Parameters\n     ----------\n     data_to_wrap : {ndarray, dataframe}\n@@ -52,11 +56,17 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n@@ -124,12 +134,21 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     output_config = _get_output_config(method, estimator)\n \n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_0": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..ac8578345 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,11 +53,45 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped data.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n@@ -123,13 +158,50 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        The name of the method that calls this function (e.g. \"transform\").\n+\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to wrap with container.\n+\n+    original_input : {ndarray, dataframe}\n+        Original input of function.\n+\n+    estimator : estimator instance\n+        Estimator with to get the output configuration from.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count) and skip index if so\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+        \n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_1": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..0b56cebfc 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,13 +53,52 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped data.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n+    # For non-DataFrame data, check index length before creating DataFrame\n+    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+        # Skip setting index when lengths don't match\n+        index = None\n+        \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -123,13 +163,50 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        The name of the estimator's method.\n+\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped with container.\n+\n+    original_input : {ndarray, dataframe}\n+        Original input of the transformer.\n+\n+    estimator : estimator instance\n+        The fitted estimator.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+        \n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_2": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..9500e79bf 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,13 +53,52 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped array.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n+    # For non-DataFrame data, check index length before creating DataFrame\n+    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+        # Skip setting index when lengths don't match\n+        index = None\n+    \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -123,13 +163,50 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        The name of the method that output is being wrapped for.\n+\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped with container.\n+\n+    original_input : {ndarray, dataframe}\n+        Original input of function.\n+\n+    estimator : estimator instance\n+        Estimator with to get the output configuration from.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+    \n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_3": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..d31c68d89 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,13 +53,52 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped array.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n+    # For non-DataFrame data, check index compatibility before creating DataFrame\n+    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+        # Skip setting index when lengths don't match\n+        index = None\n+    \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -123,13 +163,50 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        The name of the calling method on the estimator.\n+\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped with Pandas DataFrame.\n+\n+    original_input : {ndarray, dataframe}\n+        Original input of the first method.\n+\n+    estimator : estimator instance\n+        Estimator with to get the output configuration from.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_4": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..a2d706df1 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,13 +53,52 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped array.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n+    # For non-DataFrame data, check index length compatibility\n+    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+        # Skip using index when lengths don't match\n+        index = None\n+        \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -123,13 +163,47 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        The method name in estimator that produced the data.\n+    data_to_wrap : {ndarray, dataframe}\n+        The data to wrap with a container.\n+    original_input : {ndarray, dataframe}\n+        The original input.\n+    estimator : estimator instance\n+        The fitted estimator.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+        \n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_5": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..cae887b1c 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,13 +53,52 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped array.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n+    # For non-DataFrame data, check index length before creating DataFrame\n+    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+        # Skip setting index when lengths don't match\n+        index = None\n+    \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -96,6 +136,35 @@ def _get_output_config(method, estimator=None):\n     return {\"dense\": dense_config}\n \n \n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : {\"transform\"}\n+        Estimator's method to get container output for.\n+\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to wrap with container.\n+\n+    original_input : {ndarray, dataframe}\n+        Original input of function.\n+\n+    estimator : estimator instance\n+        Estimator with to get the output configuration from.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"Wrap output with container based on an estimator's or global config.\n \n@@ -127,9 +196,18 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    original_index = getattr(original_input, \"index\", None)\n+    \n+    # Check if data was aggregated (different row count)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+    \n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_6": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..88e415a91 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,11 +53,45 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped data.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n@@ -123,13 +158,51 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        Method to get container output for. Options: 'transform' or\n+        'fit_transform'.\n+\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to wrap with container.\n+\n+    original_input : {ndarray, dataframe}\n+        Original input of function.\n+\n+    estimator : estimator instance\n+        Estimator with to get the output configuration from.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_7": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..f305369a2 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,11 +53,45 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped data.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n@@ -123,13 +158,47 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        The name of the method that calls this function.\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped with Pandas DataFrame.\n+    original_input : {ndarray, dataframe}\n+        Original input of the first method.\n+    estimator : estimator instance\n+        Estimator with to get the output configuration from.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n",
    "variant_8": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..fa34f0673 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -7,6 +7,7 @@ from .._config import get_config\n from ._available_if import available_if\n \n \n+\n def _wrap_in_pandas_container(\n     data_to_wrap,\n     *,\n@@ -52,13 +53,52 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n+\n+def _wrap_in_pandas_container(data_to_wrap, columns, index=None):\n+    \"\"\"Wrap output in a pandas container.\n+\n+    Parameters\n+    ----------\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to be wrapped in a pandas container.\n+    columns : callable, ndarray, or None\n+        The column names or a callable that returns column names.\n+    index : ndarray or None, default=None\n+        The index for the dataframe.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with the wrapped array.\n+    \"\"\"\n+    if issparse(data_to_wrap):\n+        raise ValueError(\"Pandas output does not support sparse data.\")\n+\n+    if callable(columns):\n+        try:\n+            columns = columns()\n+        except Exception:\n+            columns = None\n+\n+    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n+\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            # Check if index length matches data length to handle aggregation cases\n+            if hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+                # Skip setting index when lengths don't match (e.g., due to aggregation)\n+                pass\n+            else:\n+                data_to_wrap.index = index\n         return data_to_wrap\n \n+    # For new DataFrame creation, validate index length\n+    if index is not None and hasattr(data_to_wrap, 'shape') and len(index) != data_to_wrap.shape[0]:\n+        # Skip setting index when lengths don't match\n+        index = None\n+\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n@@ -123,13 +163,47 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     \"\"\"\n     output_config = _get_output_config(method, estimator)\n \n+    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n+\n+def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n+    \"\"\"Wrap output with container based on an estimator's or global config.\n+\n+    Parameters\n+    ----------\n+    method : str\n+        Estimator's method name.\n+    data_to_wrap : {ndarray, dataframe}\n+        Data to wrap with container.\n+    original_input : {ndarray, dataframe}\n+        Original input of function.\n+    estimator : estimator instance\n+        Estimator with to get the output configuration from.\n+\n+    Returns\n+    -------\n+    output : {ndarray, dataframe}\n+        If the output config is \"default\" or the estimator is not configured\n+        for wrapping return `data_to_wrap` unchanged.\n+        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n+        DataFrame.\n+    \"\"\"\n+    output_config = _get_output_config(method, estimator)\n+\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Check if data was aggregated (different row count)\n+    original_index = getattr(original_input, \"index\", None)\n+    if (original_index is not None and \n+        hasattr(data_to_wrap, 'shape') and \n+        len(original_index) != data_to_wrap.shape[0]):\n+        # Data was aggregated, don't preserve original index\n+        original_index = None\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=original_index,\n         columns=estimator.get_feature_names_out,\n     )\n \n"
  }
}