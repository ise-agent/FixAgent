{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2177-2178)": "\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2173-2178)": "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
    "Location 3 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2102-2106)": "\n            coefs_paths = np.reshape(\n                coefs_paths,\n                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n                 -1)\n            )\n",
    "Location 4 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2169-2172)": "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
    "Location 5 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2174-2175)": "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2177-2178)": [
      "\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n                w = np.mean([coefs_paths[i, best_indices[i], :]\n                             for i in range(len(folds))], axis=0)\n",
      "\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n"
    ],
    "Location 2 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2173-2178)": [
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n"
    ],
    "Location 3 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2102-2106)": [
      "\n            else:\n                coefs = [\n                    coefs_paths[i, best_indices[i], :]\n                    for i in range(len(folds))\n                ]\n",
      "\n                coefs_paths[i, best_indices[i], :]\n",
      "\n                coefs_paths[i, best_indices[i], :]\n",
      "\n            else:\n                self.coef_ = np.array([\n                    coefs_paths[i, best_indices[i], :]\n                    for i in range(len(classes))\n                ])\n",
      "\n            for i, (l1_ratio, best_C) in enumerate(zip(l1_ratios_, best_Cs)):\n                if multi_class == 'ovr':\n                    coefs_paths[i, best_indices[i], :] = coefs_paths[\n                        i, best_indices[i], :\n                    ]\n                else:\n                    coefs_paths[i, best_indices[i], :] = coefs_paths[\n                        i, best_indices[i], :\n                    ]\n",
      "\n            else:\n                coefs = [\n                    coefs_paths[i, best_indices[i], :]\n                    for i in range(len(folds))\n                ]\n",
      "\n                coefs_paths[i, best_indices[i], :]\n",
      "\n            coefs_paths = np.reshape(\n                coefs_paths,\n                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n                 -1)\n            )\n"
    ],
    "Location 4 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2169-2172)": [
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n"
    ],
    "Location 5 (/root/hy/projects_1/scikit-learn/sklearn/linear_model/logistic.py lines 2174-2175)": [
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n",
      "\n            else:\n                # Take the best scores across every fold and the average of\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..cf46ee8d1 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,6 +2099,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n+\n             coefs_paths = np.reshape(\n                 coefs_paths,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n@@ -2166,15 +2167,19 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n                 best_indices = np.argmax(scores, axis=1)\n+\n                 if self.multi_class == 'ovr':\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_0": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..7583c1bfd 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,6 +2099,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n+\n             coefs_paths = np.reshape(\n                 coefs_paths,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n@@ -2166,6 +2167,18 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2187,17 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_1": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..fe1d1575b 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,11 +2099,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n-            coefs_paths = np.reshape(\n-                coefs_paths,\n-                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n-                 -1)\n-            )\n+\n+            else:\n+                coefs = [\n+                    coefs_paths[i, best_indices[i], :]\n+                    for i in range(len(folds))\n+                ]\n             self.n_iter_ = np.reshape(\n                 n_iter_,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_))\n@@ -2166,6 +2167,18 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2187,17 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_2": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..43b424d4a 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,11 +2099,8 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n-            coefs_paths = np.reshape(\n-                coefs_paths,\n-                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n-                 -1)\n-            )\n+\n+                coefs_paths[i, best_indices[i], :]\n             self.n_iter_ = np.reshape(\n                 n_iter_,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_))\n@@ -2166,6 +2163,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2172,28 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_3": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..43b424d4a 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,11 +2099,8 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n-            coefs_paths = np.reshape(\n-                coefs_paths,\n-                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n-                 -1)\n-            )\n+\n+                coefs_paths[i, best_indices[i], :]\n             self.n_iter_ = np.reshape(\n                 n_iter_,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_))\n@@ -2166,6 +2163,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2172,28 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_4": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..9df772a46 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,11 +2099,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n-            coefs_paths = np.reshape(\n-                coefs_paths,\n-                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n-                 -1)\n-            )\n+\n+            else:\n+                self.coef_ = np.array([\n+                    coefs_paths[i, best_indices[i], :]\n+                    for i in range(len(classes))\n+                ])\n             self.n_iter_ = np.reshape(\n                 n_iter_,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_))\n@@ -2166,6 +2167,18 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2187,17 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_5": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..ec2a0c444 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,11 +2099,16 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n-            coefs_paths = np.reshape(\n-                coefs_paths,\n-                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n-                 -1)\n-            )\n+\n+            for i, (l1_ratio, best_C) in enumerate(zip(l1_ratios_, best_Cs)):\n+                if multi_class == 'ovr':\n+                    coefs_paths[i, best_indices[i], :] = coefs_paths[\n+                        i, best_indices[i], :\n+                    ]\n+                else:\n+                    coefs_paths[i, best_indices[i], :] = coefs_paths[\n+                        i, best_indices[i], :\n+                    ]\n             self.n_iter_ = np.reshape(\n                 n_iter_,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_))\n@@ -2166,6 +2171,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2180,29 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_6": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..fe1d1575b 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,11 +2099,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n-            coefs_paths = np.reshape(\n-                coefs_paths,\n-                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n-                 -1)\n-            )\n+\n+            else:\n+                coefs = [\n+                    coefs_paths[i, best_indices[i], :]\n+                    for i in range(len(folds))\n+                ]\n             self.n_iter_ = np.reshape(\n                 n_iter_,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_))\n@@ -2166,6 +2167,18 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2187,17 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "variant_7": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..5f7be06a9 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,11 +2099,8 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n-            coefs_paths = np.reshape(\n-                coefs_paths,\n-                (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n-                 -1)\n-            )\n+\n+                coefs_paths[i, best_indices[i], :]\n             self.n_iter_ = np.reshape(\n                 n_iter_,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_))\n@@ -2166,6 +2163,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,9 +2172,30 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                w = np.mean([coefs_paths[i, best_indices[i], :]\n+                             for i in range(len(folds))], axis=0)\n+\n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n \n",
    "variant_8": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..7583c1bfd 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2099,6 +2099,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             # repeat same scores across all classes\n             scores = np.tile(scores, (n_classes, 1, 1))\n         else:\n+\n             coefs_paths = np.reshape(\n                 coefs_paths,\n                 (n_classes, len(folds), len(self.Cs_) * len(l1_ratios_),\n@@ -2166,6 +2167,18 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     l1_ratio=l1_ratio_)\n                 w = w[0]\n \n+\n+            else:\n+                # Take the best scores across every fold and the average of\n+                # all coefficients corresponding to the best scores.\n+                best_indices = np.argmax(scores, axis=1)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+\n             else:\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n@@ -2174,7 +2187,17 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                if self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=0)\n+                else:\n+\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n"
  }
}