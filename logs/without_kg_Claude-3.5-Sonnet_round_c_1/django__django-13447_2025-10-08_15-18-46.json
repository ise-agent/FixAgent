{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 463-469)": "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
    "Location 2 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 433-433)": "\n    def build_app_dict(self, request, label=None):\n        \"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"\n        app_dict = {}\n\n        if label:\n            models = {\n                m: m_a for m, m_a in self._registry.items()\n                if m._meta.app_label == label\n            }\n        else:\n            models = self._registry\n\n        for model, model_admin in models.items():\n            app_label = model._meta.app_label\n\n            has_module_perms = model_admin.has_module_permission(request)\n            if not has_module_perms:\n                continue\n\n            perms = model_admin.get_model_perms(request)\n\n            # Check whether user has any perm for this module.\n            # If so, add the module to the model_list.\n            if True not in perms.values():\n                continue\n\n            info = (app_label, model._meta.model_name)\n            model_dict = {\n                'model': model,\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n            }\n            if perms.get('change') or perms.get('view'):\n                model_dict['view_only'] = not perms.get('change')\n                try:\n                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n            if perms.get('add'):\n                try:\n                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n\n            if app_label in app_dict:\n                app_dict[app_label]['models'].append(model_dict)\n            else:\n                app_dict[app_label] = {\n                    'name': apps.get_app_config(app_label).verbose_name,\n                    'app_label': app_label,\n                    'app_url': reverse(\n                        'admin:app_list',\n                        kwargs={'app_label': app_label},\n                        current_app=self.name,\n                    ),\n                    'has_module_perms': has_module_perms,\n                    'models': [model_dict],\n                }\n\n        if label:\n            return app_dict.get(label)\n        return app_dict\n",
    "Location 3 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 506-506)": "\n        app_dict = self.build_app_dict(request)\n",
    "Location 4 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 537-537)": "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 463-469)": [
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n",
      "\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n                'model': model,\n            }\n"
    ],
    "Location 2 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 433-433)": [
      "\n    def build_app_dict(self, request, label=None):\n        \"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"\n        app_dict = {}\n\n        if label:\n            models = {\n                m: m_a for m, m_a in self._registry.items()\n                if m._meta.app_label == label\n            }\n        else:\n            models = self._registry\n\n        for model, model_admin in models.items():\n            app_label = model._meta.app_label\n\n            has_module_perms = model_admin.has_module_permission(request)\n            if not has_module_perms:\n                continue\n\n            perms = model_admin.get_model_perms(request)\n\n            # Check whether user has any perm for this module.\n            # If so, add the module to the model_list.\n            if True not in perms.values():\n                continue\n\n            info = (app_label, model._meta.model_name)\n            model_dict = {\n                'model': model,\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n            }\n            if perms.get('change') or perms.get('view'):\n                model_dict['view_only'] = not perms.get('change')\n                try:\n                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n            if perms.get('add'):\n                try:\n                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n\n            if app_label in app_dict:\n                app_dict[app_label]['models'].append(model_dict)\n            else:\n                app_dict[app_label] = {\n                    'name': apps.get_app_config(app_label).verbose_name,\n                    'app_label': app_label,\n                    'app_url': reverse(\n                        'admin:app_list',\n                        kwargs={'app_label': app_label},\n                        current_app=self.name,\n                    ),\n                    'has_module_perms': has_module_perms,\n                    'models': [model_dict],\n                }\n\n        if label:\n            return app_dict.get(label)\n        return app_dict\n",
      "\n    def build_app_dict(self, request, label=None):\n        \"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"\n        app_dict = {}\n\n        if label:\n            models = {\n                m: m_a for m, m_a in self._registry.items()\n                if m._meta.app_label == label\n            }\n        else:\n            models = self._registry\n\n        for model, model_admin in models.items():\n            app_label = model._meta.app_label\n\n            has_module_perms = model_admin.has_module_permission(request)\n            if not has_module_perms:\n                continue\n\n            perms = model_admin.get_model_perms(request)\n\n            # Check whether user has any perm for this module.\n            # If so, add the module to the model_list.\n            if True not in perms.values():\n                continue\n\n            info = (app_label, model._meta.model_name)\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'model': model,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n            }\n            if perms.get('change') or perms.get('view'):\n                model_dict['view_only'] = not perms.get('change')\n                try:\n                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n            if perms.get('add'):\n                try:\n                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n\n            if app_label in app_dict:\n                app_dict[app_label]['models'].append(model_dict)\n            else:\n                app_dict[app_label] = {\n                    'name': apps.get_app_config(app_label).verbose_name,\n                    'app_label': app_label,\n                    'app_url': reverse(\n                        'admin:app_list',\n                        kwargs={'app_label': app_label},\n                        current_app=self.name,\n                    ),\n                    'has_module_perms': has_module_perms,\n                    'models': [model_dict],\n                }\n\n        if label:\n            return app_dict.get(label)\n        return app_dict\n",
      "\ndef build_app_dict(self, request, label=None):\n",
      "\n    def build_app_dict(self, request, label=None):\n        \"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"\n        app_dict = {}\n\n        if label:\n            models = {\n                m: m_a for m, m_a in self._registry.items()\n                if m._meta.app_label == label\n            }\n        else:\n            models = self._registry\n\n        for model, model_admin in models.items():\n            app_label = model._meta.app_label\n\n            has_module_perms = model_admin.has_module_permission(request)\n            if not has_module_perms:\n                continue\n\n            perms = model_admin.get_model_perms(request)\n\n            # Check whether user has any perm for this module.\n            # If so, add the module to the model_list.\n            if True not in perms.values():\n                continue\n\n            info = (app_label, model._meta.model_name)\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'model': model,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n            }\n            if perms.get('change') or perms.get('view'):\n                model_dict['view_only'] = not perms.get('change')\n                try:\n                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n            if perms.get('add'):\n                try:\n                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n\n            if app_label in app_dict:\n                app_dict[app_label]['models'].append(model_dict)\n            else:\n                app_dict[app_label] = {\n                    'name': apps.get_app_config(app_label).verbose_name,\n                    'app_label': app_label,\n                    'app_url': reverse(\n                        'admin:app_list',\n                        kwargs={'app_label': app_label},\n                        current_app=self.name,\n                    ),\n                    'has_module_perms': has_module_perms,\n                    'models': [model_dict],\n                }\n\n        if label:\n            return app_dict.get(label)\n        return app_dict\n",
      "\n    def build_app_dict(self, request, label=None):\n        \"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"\n        app_dict = {}\n\n        if label:\n            models = {\n                m: m_a for m, m_a in self._registry.items()\n                if m._meta.app_label == label\n            }\n        else:\n            models = self._registry\n\n        for model, model_admin in models.items():\n            app_label = model._meta.app_label\n\n            has_module_perms = model_admin.has_module_permission(request)\n            if not has_module_perms:\n                continue\n\n            perms = model_admin.get_model_perms(request)\n\n            # Check whether user has any perm for this module.\n            # If so, add the module to the model_list.\n            if True not in perms.values():\n                continue\n\n            info = (app_label, model._meta.model_name)\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'model': model,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n            }\n            if perms.get('change') or perms.get('view'):\n                model_dict['view_only'] = not perms.get('change')\n                try:\n                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n            if perms.get('add'):\n                try:\n                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n\n            if app_label in app_dict:\n                app_dict[app_label]['models'].append(model_dict)\n            else:\n                app_dict[app_label] = {\n                    'name': apps.get_app_config(app_label).verbose_name,\n                    'app_label': app_label,\n                    'app_url': reverse(\n                        'admin:app_list',\n                        kwargs={'app_label': app_label},\n                        current_app=self.name,\n                    ),\n                    'has_module_perms': has_module_perms,\n                    'models': [model_dict],\n                }\n\n        if label:\n            return app_dict.get(label)\n        return app_dict\n",
      "\n    def build_app_dict(self, request, label=None):\n        \"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"\n        app_dict = {}\n\n        if label:\n            models = {\n                m: m_a for m, m_a in self._registry.items()\n                if m._meta.app_label == label\n            }\n        else:\n            models = self._registry\n\n        for model, model_admin in models.items():\n            app_label = model._meta.app_label\n\n            has_module_perms = model_admin.has_module_permission(request)\n            if not has_module_perms:\n                continue\n\n            perms = model_admin.get_model_perms(request)\n\n            # Check whether user has any perm for this module.\n            # If so, add the module to the model_list.\n            if True not in perms.values():\n                continue\n\n            info = (app_label, model._meta.model_name)\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'model': model,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n            }\n            if perms.get('change') or perms.get('view'):\n                model_dict['view_only'] = not perms.get('change')\n                try:\n                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n            if perms.get('add'):\n                try:\n                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n\n            if app_label in app_dict:\n                app_dict[app_label]['models'].append(model_dict)\n            else:\n                app_dict[app_label] = {\n                    'name': apps.get_app_config(app_label).verbose_name,\n                    'app_label': app_label,\n                    'app_url': reverse(\n                        'admin:app_list',\n                        kwargs={'app_label': app_label},\n                        current_app=self.name,\n                    ),\n                    'has_module_perms': has_module_perms,\n                    'models': [model_dict],\n                }\n\n        if label:\n            return app_dict.get(label)\n        return app_dict\n",
      "\n    def build_app_dict(self, request, label=None):\n        \"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"\n        app_dict = {}\n\n        if label:\n            models = {\n                m: m_a for m, m_a in self._registry.items()\n                if m._meta.app_label == label\n            }\n        else:\n            models = self._registry\n\n        for model, model_admin in models.items():\n            app_label = model._meta.app_label\n\n            has_module_perms = model_admin.has_module_permission(request)\n            if not has_module_perms:\n                continue\n\n            perms = model_admin.get_model_perms(request)\n\n            # Check whether user has any perm for this module.\n            # If so, add the module to the model_list.\n            if True not in perms.values():\n                continue\n\n            info = (app_label, model._meta.model_name)\n            model_dict = {\n                'name': capfirst(model._meta.verbose_name_plural),\n                'object_name': model._meta.object_name,\n                'model': model,\n                'perms': perms,\n                'admin_url': None,\n                'add_url': None,\n            }\n            if perms.get('change') or perms.get('view'):\n                model_dict['view_only'] = not perms.get('change')\n                try:\n                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n            if perms.get('add'):\n                try:\n                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n                except NoReverseMatch:\n                    pass\n\n            if app_label in app_dict:\n                app_dict[app_label]['models'].append(model_dict)\n            else:\n                app_dict[app_label] = {\n                    'name': apps.get_app_config(app_label).verbose_name,\n                    'app_label': app_label,\n                    'app_url': reverse(\n                        'admin:app_list',\n                        kwargs={'app_label': app_label},\n                        current_app=self.name,\n                    ),\n                    'has_module_perms': has_module_perms,\n                    'models': [model_dict],\n                }\n\n        if label:\n            return app_dict.get(label)\n        return app_dict\n",
      "\ndef build_app_dict(self, request, label=None):\n"
    ],
    "Location 3 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 506-506)": [
      "\n        app_dict = self.build_app_dict(request)\n",
      "\n        app_dict = self.build_app_dict(request)\n",
      "\n        app_dict = self.build_app_dict(request)\n",
      "\n        app_dict = self.build_app_dict(request)\n",
      "\n        app_dict = self.build_app_dict(request)\n",
      "\n        app_dict = self.build_app_dict(request)\n",
      "\n        app_dict = self.build_app_dict(request)\n",
      "\n        app_dict = self.build_app_dict(request)\n"
    ],
    "Location 4 (/root/hy/projects_1/django/django/contrib/admin/sites.py lines 537-537)": [
      "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n",
      "\n        app_dict = self.build_app_dict(request, app_label)\n",
      "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n",
      "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n",
      "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n",
      "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n",
      "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n",
      "\n    def app_index(self, request, app_label, extra_context=None):\n        app_dict = self.build_app_dict(request, app_label)\n        if not app_dict:\n            raise Http404('The requested admin page does not exist.')\n        # Sort the models alphabetically within each app.\n        app_dict['models'].sort(key=lambda x: x['name'])\n        context = {\n            **self.each_context(request),\n            'title': _('%(app)s administration') % {'app': app_dict['name']},\n            'subtitle': None,\n            'app_list': [app_dict],\n            'app_label': app_label,\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..b68c01ca34 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -460,12 +461,14 @@ class AdminSite:\n                 continue\n \n             info = (app_label, model._meta.model_name)\n+\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +506,8 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +538,8 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+        app_dict = self.build_app_dict(request, app_label)\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_0": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..7e190d1cff 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -461,6 +462,7 @@ class AdminSite:\n \n             info = (app_label, model._meta.model_name)\n             model_dict = {\n+                'model': model,\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n                 'perms': perms,\n@@ -497,13 +499,82 @@ class AdminSite:\n         if label:\n             return app_dict.get(label)\n         return app_dict\n+        \"\"\"\n+        Build the app dictionary. The optional `label` parameter filters models\n+        of a specific app.\n+        \"\"\"\n+        app_dict = {}\n+\n+        if label:\n+            models = {\n+                m: m_a for m, m_a in self._registry.items()\n+                if m._meta.app_label == label\n+            }\n+        else:\n+            models = self._registry\n+\n+        for model, model_admin in models.items():\n+            app_label = model._meta.app_label\n+\n+            has_module_perms = model_admin.has_module_permission(request)\n+            if not has_module_perms:\n+                continue\n+\n+            perms = model_admin.get_model_perms(request)\n+\n+            # Check whether user has any perm for this module.\n+            # If so, add the module to the model_list.\n+            if True not in perms.values():\n+                continue\n+\n+            info = (app_label, model._meta.model_name)\n+\n+            model_dict = {\n+                'name': capfirst(model._meta.verbose_name_plural),\n+                'object_name': model._meta.object_name,\n+                'perms': perms,\n+                'admin_url': None,\n+                'add_url': None,\n+                'model': model,\n+            }\n+            if perms.get('change') or perms.get('view'):\n+                model_dict['view_only'] = not perms.get('change')\n+                try:\n+                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+            if perms.get('add'):\n+                try:\n+                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+\n+            if app_label in app_dict:\n+                app_dict[app_label]['models'].append(model_dict)\n+            else:\n+                app_dict[app_label] = {\n+                    'name': apps.get_app_config(app_label).verbose_name,\n+                    'app_label': app_label,\n+                    'app_url': reverse(\n+                        'admin:app_list',\n+                        kwargs={'app_label': app_label},\n+                        current_app=self.name,\n+                    ),\n+                    'has_module_perms': has_module_perms,\n+                    'models': [model_dict],\n+                }\n+\n+        if label:\n+            return app_dict.get(label)\n+        return app_dict\n \n     def get_app_list(self, request):\n         \"\"\"\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +605,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_1": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..7e190d1cff 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -461,6 +462,7 @@ class AdminSite:\n \n             info = (app_label, model._meta.model_name)\n             model_dict = {\n+                'model': model,\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n                 'perms': perms,\n@@ -497,13 +499,82 @@ class AdminSite:\n         if label:\n             return app_dict.get(label)\n         return app_dict\n+        \"\"\"\n+        Build the app dictionary. The optional `label` parameter filters models\n+        of a specific app.\n+        \"\"\"\n+        app_dict = {}\n+\n+        if label:\n+            models = {\n+                m: m_a for m, m_a in self._registry.items()\n+                if m._meta.app_label == label\n+            }\n+        else:\n+            models = self._registry\n+\n+        for model, model_admin in models.items():\n+            app_label = model._meta.app_label\n+\n+            has_module_perms = model_admin.has_module_permission(request)\n+            if not has_module_perms:\n+                continue\n+\n+            perms = model_admin.get_model_perms(request)\n+\n+            # Check whether user has any perm for this module.\n+            # If so, add the module to the model_list.\n+            if True not in perms.values():\n+                continue\n+\n+            info = (app_label, model._meta.model_name)\n+\n+            model_dict = {\n+                'name': capfirst(model._meta.verbose_name_plural),\n+                'object_name': model._meta.object_name,\n+                'perms': perms,\n+                'admin_url': None,\n+                'add_url': None,\n+                'model': model,\n+            }\n+            if perms.get('change') or perms.get('view'):\n+                model_dict['view_only'] = not perms.get('change')\n+                try:\n+                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+            if perms.get('add'):\n+                try:\n+                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+\n+            if app_label in app_dict:\n+                app_dict[app_label]['models'].append(model_dict)\n+            else:\n+                app_dict[app_label] = {\n+                    'name': apps.get_app_config(app_label).verbose_name,\n+                    'app_label': app_label,\n+                    'app_url': reverse(\n+                        'admin:app_list',\n+                        kwargs={'app_label': app_label},\n+                        current_app=self.name,\n+                    ),\n+                    'has_module_perms': has_module_perms,\n+                    'models': [model_dict],\n+                }\n+\n+        if label:\n+            return app_dict.get(label)\n+        return app_dict\n \n     def get_app_list(self, request):\n         \"\"\"\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +605,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_2": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..1bede74952 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,75 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n+        \"\"\"\n+        Build the app dictionary. The optional `label` parameter filters models\n+        of a specific app.\n+        \"\"\"\n+        app_dict = {}\n+\n+        if label:\n+            models = {\n+                m: m_a for m, m_a in self._registry.items()\n+                if m._meta.app_label == label\n+            }\n+        else:\n+            models = self._registry\n+\n+        for model, model_admin in models.items():\n+            app_label = model._meta.app_label\n+\n+            has_module_perms = model_admin.has_module_permission(request)\n+            if not has_module_perms:\n+                continue\n+\n+            perms = model_admin.get_model_perms(request)\n+\n+            # Check whether user has any perm for this module.\n+            # If so, add the module to the model_list.\n+            if True not in perms.values():\n+                continue\n+\n+            info = (app_label, model._meta.model_name)\n+            model_dict = {\n+                'name': capfirst(model._meta.verbose_name_plural),\n+                'object_name': model._meta.object_name,\n+                'model': model,\n+                'perms': perms,\n+                'admin_url': None,\n+                'add_url': None,\n+            }\n+            if perms.get('change') or perms.get('view'):\n+                model_dict['view_only'] = not perms.get('change')\n+                try:\n+                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+            if perms.get('add'):\n+                try:\n+                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+\n+            if app_label in app_dict:\n+                app_dict[app_label]['models'].append(model_dict)\n+            else:\n+                app_dict[app_label] = {\n+                    'name': apps.get_app_config(app_label).verbose_name,\n+                    'app_label': app_label,\n+                    'app_url': reverse(\n+                        'admin:app_list',\n+                        kwargs={'app_label': app_label},\n+                        current_app=self.name,\n+                    ),\n+                    'has_module_perms': has_module_perms,\n+                    'models': [model_dict],\n+                }\n+\n+        if label:\n+            return app_dict.get(label)\n+        return app_dict\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -460,12 +528,14 @@ class AdminSite:\n                 continue\n \n             info = (app_label, model._meta.model_name)\n+\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +573,8 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +605,8 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+        app_dict = self.build_app_dict(request, app_label)\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_3": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..640b514379 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -460,12 +461,14 @@ class AdminSite:\n                 continue\n \n             info = (app_label, model._meta.model_name)\n+\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +506,8 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +538,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_4": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..fa1055506a 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -463,6 +464,7 @@ class AdminSite:\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n+                'model': model,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n@@ -497,13 +499,82 @@ class AdminSite:\n         if label:\n             return app_dict.get(label)\n         return app_dict\n+        \"\"\"\n+        Build the app dictionary. The optional `label` parameter filters models\n+        of a specific app.\n+        \"\"\"\n+        app_dict = {}\n+\n+        if label:\n+            models = {\n+                m: m_a for m, m_a in self._registry.items()\n+                if m._meta.app_label == label\n+            }\n+        else:\n+            models = self._registry\n+\n+        for model, model_admin in models.items():\n+            app_label = model._meta.app_label\n+\n+            has_module_perms = model_admin.has_module_permission(request)\n+            if not has_module_perms:\n+                continue\n+\n+            perms = model_admin.get_model_perms(request)\n+\n+            # Check whether user has any perm for this module.\n+            # If so, add the module to the model_list.\n+            if True not in perms.values():\n+                continue\n+\n+            info = (app_label, model._meta.model_name)\n+\n+            model_dict = {\n+                'name': capfirst(model._meta.verbose_name_plural),\n+                'object_name': model._meta.object_name,\n+                'perms': perms,\n+                'admin_url': None,\n+                'add_url': None,\n+                'model': model,\n+            }\n+            if perms.get('change') or perms.get('view'):\n+                model_dict['view_only'] = not perms.get('change')\n+                try:\n+                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+            if perms.get('add'):\n+                try:\n+                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+\n+            if app_label in app_dict:\n+                app_dict[app_label]['models'].append(model_dict)\n+            else:\n+                app_dict[app_label] = {\n+                    'name': apps.get_app_config(app_label).verbose_name,\n+                    'app_label': app_label,\n+                    'app_url': reverse(\n+                        'admin:app_list',\n+                        kwargs={'app_label': app_label},\n+                        current_app=self.name,\n+                    ),\n+                    'has_module_perms': has_module_perms,\n+                    'models': [model_dict],\n+                }\n+\n+        if label:\n+            return app_dict.get(label)\n+        return app_dict\n \n     def get_app_list(self, request):\n         \"\"\"\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +605,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_5": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..fa1055506a 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -463,6 +464,7 @@ class AdminSite:\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n+                'model': model,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n@@ -497,13 +499,82 @@ class AdminSite:\n         if label:\n             return app_dict.get(label)\n         return app_dict\n+        \"\"\"\n+        Build the app dictionary. The optional `label` parameter filters models\n+        of a specific app.\n+        \"\"\"\n+        app_dict = {}\n+\n+        if label:\n+            models = {\n+                m: m_a for m, m_a in self._registry.items()\n+                if m._meta.app_label == label\n+            }\n+        else:\n+            models = self._registry\n+\n+        for model, model_admin in models.items():\n+            app_label = model._meta.app_label\n+\n+            has_module_perms = model_admin.has_module_permission(request)\n+            if not has_module_perms:\n+                continue\n+\n+            perms = model_admin.get_model_perms(request)\n+\n+            # Check whether user has any perm for this module.\n+            # If so, add the module to the model_list.\n+            if True not in perms.values():\n+                continue\n+\n+            info = (app_label, model._meta.model_name)\n+\n+            model_dict = {\n+                'name': capfirst(model._meta.verbose_name_plural),\n+                'object_name': model._meta.object_name,\n+                'perms': perms,\n+                'admin_url': None,\n+                'add_url': None,\n+                'model': model,\n+            }\n+            if perms.get('change') or perms.get('view'):\n+                model_dict['view_only'] = not perms.get('change')\n+                try:\n+                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+            if perms.get('add'):\n+                try:\n+                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+\n+            if app_label in app_dict:\n+                app_dict[app_label]['models'].append(model_dict)\n+            else:\n+                app_dict[app_label] = {\n+                    'name': apps.get_app_config(app_label).verbose_name,\n+                    'app_label': app_label,\n+                    'app_url': reverse(\n+                        'admin:app_list',\n+                        kwargs={'app_label': app_label},\n+                        current_app=self.name,\n+                    ),\n+                    'has_module_perms': has_module_perms,\n+                    'models': [model_dict],\n+                }\n+\n+        if label:\n+            return app_dict.get(label)\n+        return app_dict\n \n     def get_app_list(self, request):\n         \"\"\"\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +605,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_6": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..fa1055506a 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -463,6 +464,7 @@ class AdminSite:\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n+                'model': model,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n@@ -497,13 +499,82 @@ class AdminSite:\n         if label:\n             return app_dict.get(label)\n         return app_dict\n+        \"\"\"\n+        Build the app dictionary. The optional `label` parameter filters models\n+        of a specific app.\n+        \"\"\"\n+        app_dict = {}\n+\n+        if label:\n+            models = {\n+                m: m_a for m, m_a in self._registry.items()\n+                if m._meta.app_label == label\n+            }\n+        else:\n+            models = self._registry\n+\n+        for model, model_admin in models.items():\n+            app_label = model._meta.app_label\n+\n+            has_module_perms = model_admin.has_module_permission(request)\n+            if not has_module_perms:\n+                continue\n+\n+            perms = model_admin.get_model_perms(request)\n+\n+            # Check whether user has any perm for this module.\n+            # If so, add the module to the model_list.\n+            if True not in perms.values():\n+                continue\n+\n+            info = (app_label, model._meta.model_name)\n+\n+            model_dict = {\n+                'name': capfirst(model._meta.verbose_name_plural),\n+                'object_name': model._meta.object_name,\n+                'perms': perms,\n+                'admin_url': None,\n+                'add_url': None,\n+                'model': model,\n+            }\n+            if perms.get('change') or perms.get('view'):\n+                model_dict['view_only'] = not perms.get('change')\n+                try:\n+                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+            if perms.get('add'):\n+                try:\n+                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+\n+            if app_label in app_dict:\n+                app_dict[app_label]['models'].append(model_dict)\n+            else:\n+                app_dict[app_label] = {\n+                    'name': apps.get_app_config(app_label).verbose_name,\n+                    'app_label': app_label,\n+                    'app_url': reverse(\n+                        'admin:app_list',\n+                        kwargs={'app_label': app_label},\n+                        current_app=self.name,\n+                    ),\n+                    'has_module_perms': has_module_perms,\n+                    'models': [model_dict],\n+                }\n+\n+        if label:\n+            return app_dict.get(label)\n+        return app_dict\n \n     def get_app_list(self, request):\n         \"\"\"\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +605,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_7": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..fa1055506a 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -463,6 +464,7 @@ class AdminSite:\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n+                'model': model,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n@@ -497,13 +499,82 @@ class AdminSite:\n         if label:\n             return app_dict.get(label)\n         return app_dict\n+        \"\"\"\n+        Build the app dictionary. The optional `label` parameter filters models\n+        of a specific app.\n+        \"\"\"\n+        app_dict = {}\n+\n+        if label:\n+            models = {\n+                m: m_a for m, m_a in self._registry.items()\n+                if m._meta.app_label == label\n+            }\n+        else:\n+            models = self._registry\n+\n+        for model, model_admin in models.items():\n+            app_label = model._meta.app_label\n+\n+            has_module_perms = model_admin.has_module_permission(request)\n+            if not has_module_perms:\n+                continue\n+\n+            perms = model_admin.get_model_perms(request)\n+\n+            # Check whether user has any perm for this module.\n+            # If so, add the module to the model_list.\n+            if True not in perms.values():\n+                continue\n+\n+            info = (app_label, model._meta.model_name)\n+\n+            model_dict = {\n+                'name': capfirst(model._meta.verbose_name_plural),\n+                'object_name': model._meta.object_name,\n+                'perms': perms,\n+                'admin_url': None,\n+                'add_url': None,\n+                'model': model,\n+            }\n+            if perms.get('change') or perms.get('view'):\n+                model_dict['view_only'] = not perms.get('change')\n+                try:\n+                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+            if perms.get('add'):\n+                try:\n+                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n+                except NoReverseMatch:\n+                    pass\n+\n+            if app_label in app_dict:\n+                app_dict[app_label]['models'].append(model_dict)\n+            else:\n+                app_dict[app_label] = {\n+                    'name': apps.get_app_config(app_label).verbose_name,\n+                    'app_label': app_label,\n+                    'app_url': reverse(\n+                        'admin:app_list',\n+                        kwargs={'app_label': app_label},\n+                        current_app=self.name,\n+                    ),\n+                    'has_module_perms': has_module_perms,\n+                    'models': [model_dict],\n+                }\n+\n+        if label:\n+            return app_dict.get(label)\n+        return app_dict\n \n     def get_app_list(self, request):\n         \"\"\"\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +605,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n",
    "variant_8": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..640b514379 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,8 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+\n+def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -460,12 +461,14 @@ class AdminSite:\n                 continue\n \n             info = (app_label, model._meta.model_name)\n+\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +506,8 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +538,19 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+\n+    def app_index(self, request, app_label, extra_context=None):\n+        app_dict = self.build_app_dict(request, app_label)\n+        if not app_dict:\n+            raise Http404('The requested admin page does not exist.')\n+        # Sort the models alphabetically within each app.\n+        app_dict['models'].sort(key=lambda x: x['name'])\n+        context = {\n+            **self.each_context(request),\n+            'title': _('%(app)s administration') % {'app': app_dict['name']},\n+            'subtitle': None,\n+            'app_list': [app_dict],\n+            'app_label': app_label,\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n"
  }
}