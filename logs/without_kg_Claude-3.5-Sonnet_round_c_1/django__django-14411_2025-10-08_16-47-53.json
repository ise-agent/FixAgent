{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/auth/forms.py lines 33-36)": "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/django/django/contrib/auth/forms.py lines 33-36)": [
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n",
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n",
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n",
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n",
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n",
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n",
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n",
      "\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = 'auth/widgets/read_only_password_hash.html'\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({'label': gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({'label': gettext(key), 'value': value_})\n        context['summary'] = summary\n        return context\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return None to prevent labels from having 'for' attributes\n        since this widget renders non-labelable elements.\n        \"\"\"\n        return None\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_0": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_1": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_2": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_3": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_4": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_5": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_6": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_7": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
    "variant_8": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..3dae844f34 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -30,6 +30,7 @@ def _unicode_ci_compare(s1, s2):\n     return unicodedata.normalize('NFKC', s1).casefold() == unicodedata.normalize('NFKC', s2).casefold()\n \n \n+\n class ReadOnlyPasswordHashWidget(forms.Widget):\n     template_name = 'auth/widgets/read_only_password_hash.html'\n     read_only = True\n@@ -50,6 +51,28 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        \"\"\"\n+        Return None to prevent labels from having 'for' attributes\n+        since this widget renders non-labelable elements.\n+        \"\"\"\n+        return None\n+    def get_context(self, name, value, attrs):\n+        context = super().get_context(name, value, attrs)\n+        summary = []\n+        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n+            summary.append({'label': gettext(\"No password set.\")})\n+        else:\n+            try:\n+                hasher = identify_hasher(value)\n+            except ValueError:\n+                summary.append({'label': gettext(\"Invalid password format or unknown hashing algorithm.\")})\n+            else:\n+                for key, value_ in hasher.safe_summary(value).items():\n+                    summary.append({'label': gettext(key), 'value': value_})\n+        context['summary'] = summary\n+        return context\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n"
  }
}