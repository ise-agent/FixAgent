{
  "zero_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/calibration.py lines 763-763)": "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_1/scikit-learn/sklearn/calibration.py lines 763-763)": [
      "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n",
      "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n",
      "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n",
      "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n",
      "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n",
      "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n",
      "\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_result = calibrator.predict(this_pred)\n            proba[:, class_idx] = np.asarray(pred_result).ravel()\n",
      "\n            proba[:, class_idx] = np.asarray(calibrator.predict(this_pred)).ravel()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..36c8e3648 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,9 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_0": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_1": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_2": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_3": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_4": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_5": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_6": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_7": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..8cd1cc479 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,17 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+        proba = np.zeros((_num_samples(X), n_classes))\n+        for class_idx, this_pred, calibrator in zip(\n+            pos_class_indices, predictions.T, self.calibrators\n+        ):\n+            if n_classes == 2:\n+                # When binary, `predictions` consists only of predictions for\n+                # clf.classes_[1] but `pos_class_indices` = 0\n+                class_idx += 1\n+            pred_result = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(pred_result).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "variant_8": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..4ee764049 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,8 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+\n+            proba[:, class_idx] = np.asarray(calibrator.predict(this_pred)).ravel()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n"
  }
}