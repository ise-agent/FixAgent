{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/assertion/rewrite.py lines 675-682)": "\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n",
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/assertion/rewrite.py lines 744-746)": "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
    "Location 3 (/root/hy/projects_3/pytest/src/_pytest/assertion/rewrite.py lines 668-671)": "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/assertion/rewrite.py lines 675-682)": [
      "\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n",
      "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n",
      "\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                return\n",
      "\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n",
      "\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n"
    ],
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/assertion/rewrite.py lines 744-746)": [
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n",
      "\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        if not isinstance(docstring, str):\n            return False\n        return \"PYTEST_DONT_REWRITE\" in docstring\n"
    ],
    "Location 3 (/root/hy/projects_3/pytest/src/_pytest/assertion/rewrite.py lines 668-671)": [
      "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        if (\n            expect_docstring\n            and isinstance(item, ast.Expr)\n            and isinstance(item.value, ast.Constant)\n        ):\n            doc = item.value.value\n            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n",
      "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n",
      "\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n            return\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..b141ca9ec 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -665,20 +665,22 @@ class AssertionRewriter(ast.NodeVisitor):\n \n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n+\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n         for item in mod.body:\n+\n             if (\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -741,8 +743,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_0": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..ddbee571b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -663,14 +663,19 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Nothing to do.\n             return\n \n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n+        for item in mod.body:\n+\n         for item in mod.body:\n             if (\n                 expect_docstring\n@@ -678,9 +683,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n+                expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,8 +747,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_1": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..ddbee571b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -663,14 +663,19 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Nothing to do.\n             return\n \n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n+        for item in mod.body:\n+\n         for item in mod.body:\n             if (\n                 expect_docstring\n@@ -678,9 +683,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n+                expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,8 +747,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_2": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..53e9f0518 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -663,6 +663,19 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Nothing to do.\n             return\n \n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+\n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+        doc = getattr(mod, \"docstring\", None)\n+        expect_docstring = doc is None\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+            return\n+        pos = 0\n+        item = None\n+        for item in mod.body:\n+\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n@@ -678,7 +691,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -690,6 +703,16 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n+                expect_docstring = False\n+            elif (\n+                isinstance(item, ast.ImportFrom)\n+                and item.level == 0\n+                and item.module == \"__future__\"\n+            ):\n+                pass\n+            else:\n+                break\n+            pos += 1\n         # Special case: for a decorated function, set the lineno to that of the\n         # first decorator, not the `def`. Issue #4984.\n         if isinstance(item, ast.FunctionDef) and item.decorator_list:\n@@ -741,8 +764,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_3": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..a91f91190 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -665,21 +665,26 @@ class AssertionRewriter(ast.NodeVisitor):\n \n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n-        doc = getattr(mod, \"docstring\", None)\n-        expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n-            return\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n                 expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n@@ -741,8 +746,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_4": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..f3a972df6 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -663,23 +663,27 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Nothing to do.\n             return\n \n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n                 expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n@@ -741,8 +745,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_5": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..ddbee571b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -663,14 +663,19 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Nothing to do.\n             return\n \n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n+        for item in mod.body:\n+\n         for item in mod.body:\n             if (\n                 expect_docstring\n@@ -678,9 +683,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n+                expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,8 +747,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_6": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..f3a972df6 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -663,23 +663,27 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Nothing to do.\n             return\n \n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if (\n-                expect_docstring\n-                and isinstance(item, ast.Expr)\n-                and isinstance(item.value, ast.Constant)\n-            ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n+\n+        if (\n+            expect_docstring\n+            and isinstance(item, ast.Expr)\n+            and isinstance(item.value, ast.Constant)\n+        ):\n+            doc = item.value.value\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n                 expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n@@ -741,8 +745,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_7": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..9d89fa80a 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -665,12 +665,15 @@ class AssertionRewriter(ast.NodeVisitor):\n \n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n+\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n+        for item in mod.body:\n+\n         for item in mod.body:\n             if (\n                 expect_docstring\n@@ -678,9 +681,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n+                expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,8 +745,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "variant_8": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..ddbee571b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -663,14 +663,19 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Nothing to do.\n             return\n \n+        # We'll insert some special imports at the top of the module, but after any\n+        # docstrings and __future__ imports, so first figure out where that is.\n+\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n+        for item in mod.body:\n+\n         for item in mod.body:\n             if (\n                 expect_docstring\n@@ -678,9 +683,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n+                expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n@@ -741,8 +747,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 ):\n                     nodes.append(field)\n \n+\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n"
  }
}