{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/linear_model/ridge.py lines 1335-1336)": "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/linear_model/ridge.py lines 1337-1339)": "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/linear_model/ridge.py lines 1335-1336)": [
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n"
    ],
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/linear_model/ridge.py lines 1337-1339)": [
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n",
      "\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..6ddb739ea 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,14 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_0": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_1": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_2": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_3": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_4": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_5": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_6": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_7": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "variant_8": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..0642afcf5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1332,11 +1332,22 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     a one-versus-all approach. Concretely, this is implemented by taking\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n+\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n+\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n+        super(RidgeClassifierCV, self).__init__(\n+            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n+        self.class_weight = class_weight\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n"
  }
}