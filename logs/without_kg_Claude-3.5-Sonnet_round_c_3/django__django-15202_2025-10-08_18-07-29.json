{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/validators.py lines 129-136)": "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # Invalid URL\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n",
    "Location 2 (/root/hy/projects_3/django/django/core/validators.py lines 138-143)": "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            if len(urlsplit(value).hostname) > 253:\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/validators.py lines 129-136)": [
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # urlsplit can raise ValueError for malformed URLs\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname_length = len(urlsplit(value).hostname) if urlsplit(value).hostname else 0\n        except ValueError:  # urlsplit can raise ValueError for malformed URLs\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname_length > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # invalid URL\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname_length = len(urlsplit(value).hostname) if urlsplit(value).hostname else 0\n        except ValueError:  # invalid URL\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname_length > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # for example, \"Invalid IPv6 URL\"\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname = urlsplit(value).hostname\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if len(hostname) > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # Invalid URL\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # invalid URL\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # Invalid URL\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n            # Now verify IPv6 in the netloc part\n            try:\n                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n            except ValueError:  # Invalid URL that can't be parsed\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n            if host_match:\n                potential_ip = host_match[1]\n                try:\n                    validate_ipv6_address(potential_ip)\n                except ValidationError:\n                    raise ValidationError(self.message, code=self.code, params={'value': value})\n\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname_length = len(urlsplit(value).hostname) if urlsplit(value).hostname else 0\n        except ValueError:  # Invalid URL that can't be parsed\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname_length > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/core/validators.py lines 138-143)": [
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname = urlsplit(value).hostname\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname and len(hostname) > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname = urlsplit(value).hostname\n        except ValueError:  # for example, \"Invalid IPv6 URL\"\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname and len(hostname) > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname = urlsplit(value).hostname\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname and len(hostname) > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname = urlsplit(value).hostname\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname and len(hostname) > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname = urlsplit(value).hostname\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname and len(hostname) > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            if len(urlsplit(value).hostname) > 253:\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            hostname = urlsplit(value).hostname\n        except ValueError:  # for example, \"Invalid IPv6 URL\"\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n        if hostname and len(hostname) > 253:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n",
      "\n        # The maximum length of a full host name is 253 characters per RFC 1034\n        # section 3.1. It's defined to be 255 bytes or less, but this includes\n        # one byte for the length of the name and one byte for the trailing dot\n        # that's used to indicate absolute names in DNS.\n        try:\n            if len(urlsplit(value).hostname) > 253:\n                raise ValidationError(self.message, code=self.code, params={'value': value})\n        except ValueError:\n            raise ValidationError(self.message, code=self.code, params={'value': value})\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..10b8904c72 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,13 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                netloc = urlsplit(value).netloc\n+            except ValueError:  # for example, \"Invalid IPv6 URL\"\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', netloc)\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -135,11 +140,16 @@ class URLValidator(RegexValidator):\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n \n+\n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:  # for example, \"Invalid IPv6 URL\"\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname and len(hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_0": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..4e068cd07e 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # Invalid URL\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -135,11 +139,15 @@ class URLValidator(RegexValidator):\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n \n+\n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            if len(urlsplit(value).hostname) > 253:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_1": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..999ba30a7e 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # urlsplit can raise ValueError for malformed URLs\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -139,7 +143,23 @@ class URLValidator(RegexValidator):\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname_length = len(urlsplit(value).hostname) if urlsplit(value).hostname else 0\n+        except ValueError:  # urlsplit can raise ValueError for malformed URLs\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname_length > 253:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n+\n+        # The maximum length of a full host name is 253 characters per RFC 1034\n+        # section 3.1. It's defined to be 255 bytes or less, but this includes\n+        # one byte for the length of the name and one byte for the trailing dot\n+        # that's used to indicate absolute names in DNS.\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname and len(hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_2": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..dea3c6f69a 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # invalid URL\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -139,7 +143,23 @@ class URLValidator(RegexValidator):\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname_length = len(urlsplit(value).hostname) if urlsplit(value).hostname else 0\n+        except ValueError:  # invalid URL\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname_length > 253:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n+\n+        # The maximum length of a full host name is 253 characters per RFC 1034\n+        # section 3.1. It's defined to be 255 bytes or less, but this includes\n+        # one byte for the length of the name and one byte for the trailing dot\n+        # that's used to indicate absolute names in DNS.\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:  # for example, \"Invalid IPv6 URL\"\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname and len(hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_3": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..a7616164f5 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # for example, \"Invalid IPv6 URL\"\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -135,11 +139,16 @@ class URLValidator(RegexValidator):\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n \n+\n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname and len(hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_4": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..f6accd1294 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -139,7 +143,23 @@ class URLValidator(RegexValidator):\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if len(hostname) > 253:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n+\n+        # The maximum length of a full host name is 253 characters per RFC 1034\n+        # section 3.1. It's defined to be 255 bytes or less, but this includes\n+        # one byte for the length of the name and one byte for the trailing dot\n+        # that's used to indicate absolute names in DNS.\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname and len(hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_5": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..57736b0abe 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # Invalid URL\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -135,11 +139,16 @@ class URLValidator(RegexValidator):\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n \n+\n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname and len(hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_6": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..7fc25da6b1 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # invalid URL\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -135,11 +139,15 @@ class URLValidator(RegexValidator):\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n \n+\n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            if len(urlsplit(value).hostname) > 253:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_7": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..71b78fadea 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # Invalid URL\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -135,11 +139,16 @@ class URLValidator(RegexValidator):\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n \n+\n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname = urlsplit(value).hostname\n+        except ValueError:  # for example, \"Invalid IPv6 URL\"\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname and len(hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n",
    "variant_8": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..51cae1c750 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -126,8 +126,12 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n+\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            except ValueError:  # Invalid URL that can't be parsed\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -139,7 +143,22 @@ class URLValidator(RegexValidator):\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            hostname_length = len(urlsplit(value).hostname) if urlsplit(value).hostname else 0\n+        except ValueError:  # Invalid URL that can't be parsed\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if hostname_length > 253:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n+\n+        # The maximum length of a full host name is 253 characters per RFC 1034\n+        # section 3.1. It's defined to be 255 bytes or less, but this includes\n+        # one byte for the length of the name and one byte for the trailing dot\n+        # that's used to indicate absolute names in DNS.\n+        try:\n+            if len(urlsplit(value).hostname) > 253:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n"
  }
}