{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/matplotlib/figure.py lines 2428-2434)": "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
    "Location 2 (/root/hy/projects_3/matplotlib/lib/matplotlib/figure.py lines 1314-1317)": "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n",
    "Location 3 (/root/hy/projects_3/matplotlib/lib/matplotlib/figure.py lines 2562-2563)": "\n        if layout is None:\n            if mpl.rcParams['figure.autolayout']:\n                layout = 'tight'\n            elif mpl.rcParams['figure.constrained_layout.use']:\n                layout = 'constrained'\n            else:\n                self._layout_engine = None\n                return\n        if layout == 'tight':\n            new_layout_engine = TightLayoutEngine(**kwargs)\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n        elif layout == 'compressed':\n            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                        **kwargs)\n        elif layout == 'none':\n            if self._layout_engine is not None:\n                new_layout_engine = PlaceHolderLayoutEngine(\n                    self._layout_engine.adjust_compatible,\n                    self._layout_engine.colorbar_gridspec\n                )\n            else:\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/matplotlib/figure.py lines 2428-2434)": [
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n",
      "\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n"
    ],
    "Location 2 (/root/hy/projects_3/matplotlib/lib/matplotlib/figure.py lines 1314-1317)": [
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n",
      "\n        if tight_layout is not None:\n            self.set_layout_engine(layout='tight')\n            if isinstance(tight_layout, dict):\n                self.get_layout_engine().set(**tight_layout)\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n",
      "\n        if tight_layout is not None:\n            _api.warn_deprecated(\"3.6\", name=\"tight_layout\",\n                                 addendum=\"Use layout='tight' instead.\")\n            if tight_layout:\n                self.set_layout_engine('tight')\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n",
      "\n        if tight_layout is not None:\n            _api.warn_deprecated(\"3.6\", name=\"tight_layout\", obj_type=\"parameter\",\n                                 alternative=\"layout='tight'\")\n            if tight_layout:\n                self.set_layout_engine(layout='tight')\n                if isinstance(tight_layout, dict):\n                    self.get_layout_engine().set(**tight_layout)\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n",
      "\n        if tight_layout is not None:\n            _api.warn_deprecated(\"3.6\", name=\"tight_layout\",\n                                 addendum=\"Pass it to 'layout' instead.\")\n            if tight_layout:\n                self.set_layout_engine('tight')\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n",
      "\n        if tight_layout is not None:\n            _api.warn_deprecated(\"3.6\", name=\"tight_layout\", removal=\"3.8\")\n            if tight_layout:\n                self.set_layout_engine(layout='tight')\n                if isinstance(tight_layout, dict):\n                    self.get_layout_engine().set(**tight_layout)\n        elif constrained_layout:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n",
      "\n        if (self.get_layout_engine() is not None and\n                not self.get_layout_engine().adjust_compatible):\n            _api.warn_external(\n                \"This figure was using a layout engine that is \"\n                \"incompatible with subplots_adjust and/or tight_layout; \"\n                \"not calling subplots_adjust.\")\n"
    ],
    "Location 3 (/root/hy/projects_3/matplotlib/lib/matplotlib/figure.py lines 2562-2563)": [
      "\n        if layout is None:\n            if mpl.rcParams['figure.autolayout']:\n                layout = 'tight'\n            elif mpl.rcParams['figure.constrained_layout.use']:\n                layout = 'constrained'\n            else:\n                self._layout_engine = None\n                return\n        if layout == 'tight':\n            new_layout_engine = TightLayoutEngine(**kwargs)\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        if layout is None:\n            if mpl.rcParams['figure.autolayout']:\n                layout = 'tight'\n            elif mpl.rcParams['figure.constrained_layout.use']:\n                layout = 'constrained'\n            else:\n                self._layout_engine = None\n                return\n        if layout == 'tight':\n            new_layout_engine = TightLayoutEngine(**kwargs)\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n        elif layout == 'compressed':\n            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                        **kwargs)\n        elif layout == 'none':\n            if self._layout_engine is not None:\n                new_layout_engine = PlaceHolderLayoutEngine(\n                    self._layout_engine.adjust_compatible,\n                    self._layout_engine.colorbar_gridspec\n                )\n            else:\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        if layout is None:\n            if mpl.rcParams['figure.autolayout']:\n                layout = 'tight'\n            elif mpl.rcParams['figure.constrained_layout.use']:\n                layout = 'constrained'\n            else:\n                self._layout_engine = None\n                return\n        if layout == 'tight':\n            new_layout_engine = TightLayoutEngine(**kwargs)\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n        elif layout == 'compressed':\n            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                        **kwargs)\n        elif layout == 'none':\n            if self._layout_engine is not None:\n                new_layout_engine = PlaceHolderLayoutEngine(\n                    self._layout_engine.adjust_compatible,\n                    self._layout_engine.colorbar_gridspec\n                )\n            else:\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n",
      "\n        if layout is None:\n            if mpl.rcParams['figure.autolayout']:\n                layout = 'tight'\n            elif mpl.rcParams['figure.constrained_layout.use']:\n                layout = 'constrained'\n            else:\n                self._layout_engine = None\n                return\n        if layout == 'tight':\n            new_layout_engine = TightLayoutEngine(**kwargs)\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n        elif layout == 'compressed':\n            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                        **kwargs)\n        elif layout == 'none':\n            if self._layout_engine is not None:\n                new_layout_engine = PlaceHolderLayoutEngine(\n                    self._layout_engine.adjust_compatible,\n                    self._layout_engine.colorbar_gridspec\n                )\n            else:\n",
      "\n        if layout is None:\n            if mpl.rcParams['figure.autolayout']:\n                layout = 'tight'\n            elif mpl.rcParams['figure.constrained_layout.use']:\n                layout = 'constrained'\n            else:\n                self._layout_engine = None\n                return\n        if layout == 'tight':\n            new_layout_engine = TightLayoutEngine(**kwargs)\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n        elif layout == 'compressed':\n            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                        **kwargs)\n        elif layout == 'none':\n            if self._layout_engine is not None:\n                new_layout_engine = PlaceHolderLayoutEngine(\n                    self._layout_engine.adjust_compatible,\n                    self._layout_engine.colorbar_gridspec\n                )\n            else:\n",
      "\n        elif layout == 'constrained':\n            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..b47907d57e 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1311,6 +1311,7 @@ default: %(va)s\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n+\n             _api.warn_external(\n                 \"This figure was using a layout engine that is \"\n                 \"incompatible with subplots_adjust and/or tight_layout; \"\n@@ -2425,7 +2426,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2559,6 +2561,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\n",
    "variant_0": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..ea5b415ae7 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,9 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+                not self.get_layout_engine().adjust_compatible):\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2425,7 +2428,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2549,6 +2553,17 @@ class Figure(FigureBase):\n             like padding and margin sizes.  Only used if *layout* is a string.\n \n         \"\"\"\n+        if layout is None:\n+            if mpl.rcParams['figure.autolayout']:\n+                layout = 'tight'\n+            elif mpl.rcParams['figure.constrained_layout.use']:\n+                layout = 'constrained'\n+            else:\n+                self._layout_engine = None\n+                return\n+        if layout == 'tight':\n+            new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         if layout is None:\n             if mpl.rcParams['figure.autolayout']:\n                 layout = 'tight'\n@@ -2564,6 +2579,16 @@ class Figure(FigureBase):\n         elif layout == 'compressed':\n             new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                         **kwargs)\n+        elif layout == 'none':\n+            if self._layout_engine is not None:\n+                new_layout_engine = PlaceHolderLayoutEngine(\n+                    self._layout_engine.adjust_compatible,\n+                    self._layout_engine.colorbar_gridspec\n+                )\n+            else:\n+        elif layout == 'compressed':\n+            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n+                                                        **kwargs)\n         elif layout == 'none':\n             if self._layout_engine is not None:\n                 new_layout_engine = PlaceHolderLayoutEngine(\n",
    "variant_1": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..59d69894d8 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,9 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+                not self.get_layout_engine().adjust_compatible):\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2425,7 +2428,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2549,6 +2553,17 @@ class Figure(FigureBase):\n             like padding and margin sizes.  Only used if *layout* is a string.\n \n         \"\"\"\n+        if layout is None:\n+            if mpl.rcParams['figure.autolayout']:\n+                layout = 'tight'\n+            elif mpl.rcParams['figure.constrained_layout.use']:\n+                layout = 'constrained'\n+            else:\n+                self._layout_engine = None\n+                return\n+        if layout == 'tight':\n+            new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         if layout is None:\n             if mpl.rcParams['figure.autolayout']:\n                 layout = 'tight'\n",
    "variant_2": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..e9efdd8acc 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1311,10 +1311,15 @@ default: %(va)s\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n+\n+        if tight_layout is not None:\n+            self.set_layout_engine(layout='tight')\n+            if isinstance(tight_layout, dict):\n+                self.get_layout_engine().set(**tight_layout)\n+        elif constrained_layout:\n+            self.set_layout_engine(layout='constrained')\n+            if isinstance(constrained_layout, dict):\n+                self.get_layout_engine().set(**constrained_layout)\n             return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n@@ -2425,7 +2430,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2549,6 +2555,17 @@ class Figure(FigureBase):\n             like padding and margin sizes.  Only used if *layout* is a string.\n \n         \"\"\"\n+        if layout is None:\n+            if mpl.rcParams['figure.autolayout']:\n+                layout = 'tight'\n+            elif mpl.rcParams['figure.constrained_layout.use']:\n+                layout = 'constrained'\n+            else:\n+                self._layout_engine = None\n+                return\n+        if layout == 'tight':\n+            new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         if layout is None:\n             if mpl.rcParams['figure.autolayout']:\n                 layout = 'tight'\n@@ -2564,6 +2581,16 @@ class Figure(FigureBase):\n         elif layout == 'compressed':\n             new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                         **kwargs)\n+        elif layout == 'none':\n+            if self._layout_engine is not None:\n+                new_layout_engine = PlaceHolderLayoutEngine(\n+                    self._layout_engine.adjust_compatible,\n+                    self._layout_engine.colorbar_gridspec\n+                )\n+            else:\n+        elif layout == 'compressed':\n+            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n+                                                        **kwargs)\n         elif layout == 'none':\n             if self._layout_engine is not None:\n                 new_layout_engine = PlaceHolderLayoutEngine(\n",
    "variant_3": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..ec97bf754b 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1311,10 +1311,16 @@ default: %(va)s\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n+\n+        if tight_layout is not None:\n+            _api.warn_deprecated(\"3.6\", name=\"tight_layout\",\n+                                 addendum=\"Use layout='tight' instead.\")\n+            if tight_layout:\n+                self.set_layout_engine('tight')\n+        elif constrained_layout:\n+            self.set_layout_engine(layout='constrained')\n+            if isinstance(constrained_layout, dict):\n+                self.get_layout_engine().set(**constrained_layout)\n             return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n@@ -2425,7 +2431,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2559,6 +2566,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\n",
    "variant_4": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..ea5b415ae7 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,9 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+                not self.get_layout_engine().adjust_compatible):\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2425,7 +2428,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2549,6 +2553,17 @@ class Figure(FigureBase):\n             like padding and margin sizes.  Only used if *layout* is a string.\n \n         \"\"\"\n+        if layout is None:\n+            if mpl.rcParams['figure.autolayout']:\n+                layout = 'tight'\n+            elif mpl.rcParams['figure.constrained_layout.use']:\n+                layout = 'constrained'\n+            else:\n+                self._layout_engine = None\n+                return\n+        if layout == 'tight':\n+            new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         if layout is None:\n             if mpl.rcParams['figure.autolayout']:\n                 layout = 'tight'\n@@ -2564,6 +2579,16 @@ class Figure(FigureBase):\n         elif layout == 'compressed':\n             new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                         **kwargs)\n+        elif layout == 'none':\n+            if self._layout_engine is not None:\n+                new_layout_engine = PlaceHolderLayoutEngine(\n+                    self._layout_engine.adjust_compatible,\n+                    self._layout_engine.colorbar_gridspec\n+                )\n+            else:\n+        elif layout == 'compressed':\n+            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n+                                                        **kwargs)\n         elif layout == 'none':\n             if self._layout_engine is not None:\n                 new_layout_engine = PlaceHolderLayoutEngine(\n",
    "variant_5": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..0d52aa28e0 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1311,10 +1311,18 @@ default: %(va)s\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n+\n+        if tight_layout is not None:\n+            _api.warn_deprecated(\"3.6\", name=\"tight_layout\", obj_type=\"parameter\",\n+                                 alternative=\"layout='tight'\")\n+            if tight_layout:\n+                self.set_layout_engine(layout='tight')\n+                if isinstance(tight_layout, dict):\n+                    self.get_layout_engine().set(**tight_layout)\n+        elif constrained_layout:\n+            self.set_layout_engine(layout='constrained')\n+            if isinstance(constrained_layout, dict):\n+                self.get_layout_engine().set(**constrained_layout)\n             return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n@@ -2425,7 +2433,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2559,6 +2568,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\n",
    "variant_6": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..2e8047d778 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1311,10 +1311,16 @@ default: %(va)s\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n+\n+        if tight_layout is not None:\n+            _api.warn_deprecated(\"3.6\", name=\"tight_layout\",\n+                                 addendum=\"Pass it to 'layout' instead.\")\n+            if tight_layout:\n+                self.set_layout_engine('tight')\n+        elif constrained_layout:\n+            self.set_layout_engine(layout='constrained')\n+            if isinstance(constrained_layout, dict):\n+                self.get_layout_engine().set(**constrained_layout)\n             return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n@@ -2425,7 +2431,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2549,6 +2556,17 @@ class Figure(FigureBase):\n             like padding and margin sizes.  Only used if *layout* is a string.\n \n         \"\"\"\n+        if layout is None:\n+            if mpl.rcParams['figure.autolayout']:\n+                layout = 'tight'\n+            elif mpl.rcParams['figure.constrained_layout.use']:\n+                layout = 'constrained'\n+            else:\n+                self._layout_engine = None\n+                return\n+        if layout == 'tight':\n+            new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         if layout is None:\n             if mpl.rcParams['figure.autolayout']:\n                 layout = 'tight'\n@@ -2564,6 +2582,16 @@ class Figure(FigureBase):\n         elif layout == 'compressed':\n             new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                         **kwargs)\n+        elif layout == 'none':\n+            if self._layout_engine is not None:\n+                new_layout_engine = PlaceHolderLayoutEngine(\n+                    self._layout_engine.adjust_compatible,\n+                    self._layout_engine.colorbar_gridspec\n+                )\n+            else:\n+        elif layout == 'compressed':\n+            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n+                                                        **kwargs)\n         elif layout == 'none':\n             if self._layout_engine is not None:\n                 new_layout_engine = PlaceHolderLayoutEngine(\n",
    "variant_7": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..ab99c85f2c 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1311,10 +1311,17 @@ default: %(va)s\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n+\n+        if tight_layout is not None:\n+            _api.warn_deprecated(\"3.6\", name=\"tight_layout\", removal=\"3.8\")\n+            if tight_layout:\n+                self.set_layout_engine(layout='tight')\n+                if isinstance(tight_layout, dict):\n+                    self.get_layout_engine().set(**tight_layout)\n+        elif constrained_layout:\n+            self.set_layout_engine(layout='constrained')\n+            if isinstance(constrained_layout, dict):\n+                self.get_layout_engine().set(**constrained_layout)\n             return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n@@ -2425,7 +2432,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2549,6 +2557,17 @@ class Figure(FigureBase):\n             like padding and margin sizes.  Only used if *layout* is a string.\n \n         \"\"\"\n+        if layout is None:\n+            if mpl.rcParams['figure.autolayout']:\n+                layout = 'tight'\n+            elif mpl.rcParams['figure.constrained_layout.use']:\n+                layout = 'constrained'\n+            else:\n+                self._layout_engine = None\n+                return\n+        if layout == 'tight':\n+            new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         if layout is None:\n             if mpl.rcParams['figure.autolayout']:\n                 layout = 'tight'\n@@ -2564,6 +2583,16 @@ class Figure(FigureBase):\n         elif layout == 'compressed':\n             new_layout_engine = ConstrainedLayoutEngine(compress=True,\n                                                         **kwargs)\n+        elif layout == 'none':\n+            if self._layout_engine is not None:\n+                new_layout_engine = PlaceHolderLayoutEngine(\n+                    self._layout_engine.adjust_compatible,\n+                    self._layout_engine.colorbar_gridspec\n+                )\n+            else:\n+        elif layout == 'compressed':\n+            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n+                                                        **kwargs)\n         elif layout == 'none':\n             if self._layout_engine is not None:\n                 new_layout_engine = PlaceHolderLayoutEngine(\n",
    "variant_8": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..2b7f638fff 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,6 +1309,9 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n+        if (self.get_layout_engine() is not None and\n+                not self.get_layout_engine().adjust_compatible):\n+\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n             _api.warn_external(\n@@ -2425,7 +2428,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n-        elif constrained_layout is not None:\n+\n+        elif constrained_layout:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n                 self.get_layout_engine().set(**constrained_layout)\n@@ -2559,6 +2563,7 @@ class Figure(FigureBase):\n                 return\n         if layout == 'tight':\n             new_layout_engine = TightLayoutEngine(**kwargs)\n+\n         elif layout == 'constrained':\n             new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n         elif layout == 'compressed':\n"
  }
}