{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/checks/templates.py lines 55-58)": "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
    "Location 2 (/root/hy/projects_3/django/django/core/checks/templates.py lines 60-61)": "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n    return errors\n",
    "Location 3 (/root/hy/projects_3/django/django/core/checks/templates.py lines 63-64)": "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
    "Location 4 (/root/hy/projects_3/django/django/core/checks/templates.py lines 65-73)": "\n    libraries = defaultdict(set)\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/checks/templates.py lines 55-58)": [
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/core/checks/templates.py lines 60-61)": [
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n    return errors\n",
      "\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n    return errors\n"
    ],
    "Location 3 (/root/hy/projects_3/django/django/core/checks/templates.py lines 63-64)": [
      "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n",
      "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n"
    ],
    "Location 4 (/root/hy/projects_3/django/django/core/checks/templates.py lines 65-73)": [
      "\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        items_list = list(items)\n        if len(items_list) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items_list),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        items_list = list(items)\n        if len(items_list) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items_list),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        items_list = list(items)\n        if len(items_list) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items_list),\n                    ),\n                    id=E003.id,\n                )\n            )\n",
      "\n    libraries = defaultdict(set)\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            libraries[module_name].add(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        libraries[module_name].add(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in sorted(items)),\n                    ),\n                    id=E003.id,\n                )\n            )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..0e5554d933 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,16 +52,20 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n+\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n+\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n+\n             errors.append(\n                 Error(\n                     E003.msg.format(\n",
    "variant_0": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..f040bf9ae7 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,71 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+    return errors\n+\n+\n+    libraries = defaultdict(set)\n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -72,4 +130,25 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 )\n             )\n \n+    libraries = defaultdict(set)\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n     return errors\n",
    "variant_1": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..d3baa29871 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,46 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -69,6 +102,48 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                         \", \".join(repr(item) for item in items),\n                     ),\n                     id=E003.id,\n+\n+\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        items_list = list(items)\n+        if len(items_list) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items_list),\n+                    ),\n+                    id=E003.id,\n                 )\n             )\n \n",
    "variant_2": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..930c43e07a 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,46 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -71,5 +104,51 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                     id=E003.id,\n                 )\n             )\n+    return errors\n+\n+\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    libraries = defaultdict(set)\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        items_list = list(items)\n+        if len(items_list) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items_list),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n \n     return errors\n",
    "variant_3": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..26c5b63eea 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,74 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -73,3 +134,25 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n             )\n \n     return errors\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n",
    "variant_4": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..cb42a6133c 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,93 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    libraries = defaultdict(set)\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
    "variant_5": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..34bb08e5f7 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,92 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
    "variant_6": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..79faae8b4e 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,89 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items),\n+                    ),\n+                    id=E003.id,\n+\n+\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    libraries = defaultdict(set)\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
    "variant_7": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..989a3bffc3 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,71 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+    return errors\n+\n+\n+    libraries = defaultdict(set)\n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -72,4 +130,25 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 )\n             )\n \n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        items_list = list(items)\n+        if len(items_list) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in items_list),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n     return errors\n",
    "variant_8": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..f040bf9ae7 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -52,13 +52,71 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n     libraries = defaultdict(list)\n \n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n+    return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(set)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+    return errors\n+\n+\n+    libraries = defaultdict(set)\n+\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -72,4 +130,25 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 )\n             )\n \n+    libraries = defaultdict(set)\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].add(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(\n+                Error(\n+                    E003.msg.format(\n+                        repr(library_name),\n+                        \", \".join(repr(item) for item in sorted(items)),\n+                    ),\n+                    id=E003.id,\n+                )\n+            )\n+\n     return errors\n"
  }
}