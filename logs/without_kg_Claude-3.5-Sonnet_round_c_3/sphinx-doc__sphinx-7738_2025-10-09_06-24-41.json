{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 320-329)": "\ndef _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n    if escape_trailing_underscore and name.endswith('_'):\n        name = name[:-1] + r'\\_'\n\n    if name[:2] == '**':\n        return r'\\*\\*' + name[2:]\n    elif name[:1] == '*':\n        return r'\\*' + name[1:]\n    else:\n        return name\n",
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 241-241)": "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=escape_trailing_underscore)\n",
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 578-600)": "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 228-248)": "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 320-329)": [
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n",
      "\n    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n        if escape_trailing_underscore and name.endswith('_'):\n            name = name[:-1] + r'\\_'\n\n        if name[:2] == '**':\n            return r'\\*\\*' + name[2:]\n        elif name[:1] == '*':\n            return r'\\*' + name[1:]\n        else:\n            return name\n"
    ],
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 241-241)": [
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=getattr(self, '_escape_trailing_underscore', True))\n",
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=getattr(self, '_escape_trailing_underscore', True))\n",
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=getattr(self, '_escape_trailing_underscore', True))\n",
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=getattr(self, '_escape_trailing_underscore', True))\n",
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=escape_trailing_underscore)\n",
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=getattr(self, '_escape_trailing_underscore', True))\n",
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=getattr(self, '_escape_trailing_underscore', True))\n",
      "\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore=getattr(self, '_escape_trailing_underscore', True))\n"
    ],
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 578-600)": [
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n",
      "\n    def _parse_attributes_section(self, section: str) -> List[str]:\n        lines = []\n        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n            if self._config.napoleon_use_ivar:\n                _name = self._qualify_name(_name, self._obj)\n                field = ':ivar %s: ' % _name\n                lines.extend(self._format_block(field, _desc))\n                if _type:\n                    lines.append(':vartype %s: %s' % (_name, _type))\n            else:\n                lines.append('.. attribute:: ' + _name)\n                if self._opt and 'noindex' in self._opt:\n                    lines.append('   :noindex:')\n                if _type:\n                    lines.extend(self._indent([':type: %s' % _type], 3))\n                lines.append('')\n\n                fields = self._format_field('', '', _desc)\n                lines.extend(self._indent(fields, 3))\n                lines.append('')\n        if self._config.napoleon_use_ivar:\n            lines.append('')\n        return lines\n"
    ],
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/ext/napoleon/docstring.py lines 228-248)": [
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n",
      "\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n                       escape_trailing_underscore: bool = True\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1)\n                _type = match.group(2)\n\n        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n        indent = self._get_indent(line) + 1\n        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n        _descs = self.__class__(_descs, self._config).lines()\n        return _name, _type, _descs\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_0": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..644172ec1 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,16 +320,17 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n-            name = name[:-1] + r'\\_'\n \n-        if name[:2] == '**':\n-            return r'\\*\\*' + name[2:]\n-        elif name[:1] == '*':\n-            return r'\\*' + name[1:]\n-        else:\n-            return name\n+def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+    if escape_trailing_underscore and name.endswith('_'):\n+        name = name[:-1] + r'\\_'\n+\n+    if name[:2] == '**':\n+        return r'\\*\\*' + name[2:]\n+    elif name[:1] == '*':\n+        return r'\\*' + name[1:]\n+    else:\n+        return name\n \n     def _fix_field_desc(self, desc: List[str]) -> List[str]:\n         if self._is_list(desc):\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_1": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_2": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_3": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_4": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_5": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_6": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_7": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n",
    "variant_8": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..3fc57ad3e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -225,7 +225,9 @@ class GoogleDocstring:\n             line = self._line_iter.peek()\n         return lines\n \n-    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n+\n+    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False,\n+                       escape_trailing_underscore: bool = True\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n \n@@ -238,7 +240,7 @@ class GoogleDocstring:\n                 _name = match.group(1)\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _name = self._escape_args_and_kwargs(_name, escape_trailing_underscore)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n@@ -246,6 +248,7 @@ class GoogleDocstring:\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n         return _name, _type, _descs\n+        return _name, _type, _descs\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -317,8 +320,9 @@ class GoogleDocstring:\n             min_indent = self._get_min_indent(lines)\n             return [line[min_indent:] for line in lines]\n \n-    def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+\n+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:\n+        if escape_trailing_underscore and name.endswith('_'):\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n@@ -575,9 +579,10 @@ class GoogleDocstring:\n             lines.extend(['', ':type: %s' % _type])\n         return lines\n \n+\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n-        for _name, _type, _desc in self._consume_fields():\n+        for _name, _type, _desc in self._consume_fields(escape_trailing_underscore=False):\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n"
  }
}