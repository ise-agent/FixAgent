{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/flask/src/flask/cli.py lines 1021-1021)": "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
    "Location 2 (/root/hy/projects_3/flask/src/flask/cli.py lines 1022-1026)": "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
    "Location 3 (/root/hy/projects_3/flask/src/flask/cli.py lines 1028-1028)": "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
    "Location 4 (/root/hy/projects_3/flask/src/flask/cli.py lines 1033-1034)": "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/flask/src/flask/cli.py lines 1021-1021)": [
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n"
    ],
    "Location 2 (/root/hy/projects_3/flask/src/flask/cli.py lines 1022-1026)": [
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n"
    ],
    "Location 3 (/root/hy/projects_3/flask/src/flask/cli.py lines 1028-1028)": [
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods in zip(rules, rule_methods):\n        domain = _get_domain_for_rule(rule)\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    \n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n    \n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods in zip(rules, rule_methods):\n        domain = _get_domain_for_rule(rule)\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n\n    for rule, methods in zip(rules, rule_methods):\n        domain = _get_domain_for_rule(rule)\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\n    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(_get_domain_for_rule(rule)) for rule in rules),\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    def _get_domain_for_rule(rule):\n        server_name = current_app.config.get('SERVER_NAME', '')\n        subdomain = getattr(rule, 'subdomain', None)\n        if subdomain:\n            return f\"{subdomain}.{server_name}\"\n        return server_name\n\n    for rule, methods in zip(rules, rule_methods):\n        domain = _get_domain_for_rule(rule)\n        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nheaders = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\nwidths = (\n    max(len(_get_domain_for_rule(rule)) for rule in rules),\n    max(len(rule.endpoint) for rule in rules),\n    max(len(methods) for methods in rule_methods),\n    max(len(rule.rule) for rule in rules),\n)\nwidths = [max(len(h), w) for h, w in zip(headers, widths)]\nrow = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n\nclick.echo(row.format(*headers).strip())\nclick.echo(row.format(*(\"-\" * width for width in widths)))\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n"
    ],
    "Location 4 (/root/hy/projects_3/flask/src/flask/cli.py lines 1033-1034)": [
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n",
      "\ndef _get_domain_for_rule(rule):\n    server_name = current_app.config.get('SERVER_NAME', '')\n    subdomain = getattr(rule, 'subdomain', None)\n    if subdomain:\n        return f\"{subdomain}.{server_name}\"\n    return server_name\n\nfor rule, methods in zip(rules, rule_methods):\n    domain = _get_domain_for_rule(rule)\n    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..097d09a0 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,33 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n+\n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        domain = _get_domain_for_rule(rule)\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_0": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..bd555e91 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,64 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_1": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..ebfe50ef 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,87 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n+    widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        domain = _get_domain_for_rule(rule)\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_2": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..4bf5feb4 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,87 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n+    widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        domain = _get_domain_for_rule(rule)\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_3": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..1d32e334 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,63 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_4": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..03de95ac 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,86 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n+    widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+\n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        domain = _get_domain_for_rule(rule)\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_5": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..c0a330f9 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,86 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_6": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..1d32e334 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,63 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_7": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..e13fcca2 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,78 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+\n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        domain = _get_domain_for_rule(rule)\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "variant_8": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..87d04e78 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,86 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    \n+    def _get_domain_for_rule(rule):\n+        server_name = current_app.config.get('SERVER_NAME', '')\n+        subdomain = getattr(rule, 'subdomain', None)\n+        if subdomain:\n+            return f\"{subdomain}.{server_name}\"\n+        return server_name\n+    \n     widths = (\n+        max(len(_get_domain_for_rule(rule)) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+widths = (\n+    max(len(_get_domain_for_rule(rule)) for rule in rules),\n+    max(len(rule.endpoint) for rule in rules),\n+    max(len(methods) for methods in rule_methods),\n+    max(len(rule.rule) for rule in rules),\n+)\n+widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+click.echo(row.format(*headers).strip())\n+click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+\n+def _get_domain_for_rule(rule):\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    subdomain = getattr(rule, 'subdomain', None)\n+    if subdomain:\n+        return f\"{subdomain}.{server_name}\"\n+    return server_name\n+\n+for rule, methods in zip(rules, rule_methods):\n+    domain = _get_domain_for_rule(rule)\n+    click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n"
  }
}