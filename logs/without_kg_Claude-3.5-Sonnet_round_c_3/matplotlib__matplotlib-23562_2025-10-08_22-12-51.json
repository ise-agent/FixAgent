{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 709-711)": "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
    "Location 2 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 814-820)": "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
    "Location 3 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 869-873)": "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of (N, 3) array-like\n            Each element describes a polygon as a sequence of ``N_i`` points\n            ``(x_i, y_i, z_i)``.\n        zsort : {'average', 'min', 'max'}, default: 'average'\n            The calculation method for the z-order.\n            See `~.Poly3DCollection.set_zsort` for details.\n        *args, **kwargs\n            All other parameters are forwarded to `.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n        self.set_verts_and_codes(verts, None)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 709-711)": [
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n"
    ],
    "Location 2 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 814-820)": [
      "\n    def __init__(self, verts, facecolors=None, edgecolors=None, **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of (N, 3) array-like\n            Each element describes a polygon as a sequence of ``N_i`` points\n            ``(x_i, y_i, z_i)``.\n        facecolors, edgecolors : color-like or list of color-like\n            Color for the collection. Can be a color (all patches have same\n            color), or a sequence of colors; if it is a sequence the patches\n            will cycle through the sequence.\n        **kwargs\n            All other parameters are forwarded to `.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        if isinstance(verts, np.ndarray):\n            if verts.ndim != 3:\n                raise ValueError('verts must be a list of (N, 3) array-like')\n        else:\n            if any(len(np.shape(vert)) != 2 for vert in verts):\n                raise ValueError('verts must be a list of (N, 3) array-like')\n        super().__init__([], **kwargs)\n        self.set_zsort('average')\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n\n        self.set_verts(verts, closed=kwargs.get('closed', True))\n        self.set_facecolors(facecolors)\n        self.set_edgecolors(edgecolors)\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Create a Poly3DCollection.\n\n        *verts* is a list of 3D polygons.\n\n        .. note::\n           Note that this class does a bit of magic with the _facecolors\n           and _edgecolors properties.\n        \"\"\"\n        super().__init__(verts, *args, **kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of (N, 3) array-like\n            Each element describes a polygon as a sequence of ``N_i`` points\n            ``(x, y, z)``.\n        zsort : {'average', 'min', 'max'}, default: 'average'\n            The calculation method for the z-order.\n            See `~.Poly3DCollection.set_zsort` for details.\n        *args, **kwargs\n            All other parameters are forwarded to `.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_verts(verts)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of array-like\n            Each element of the collection is a list of vertices in 3D space.\n        zsort : {'average', 'min', 'max'}, default: 'average'\n            The calculation method for the z-order.\n            See `~.Poly3DCollection.set_zsort` for details.\n        *args, **kwargs\n            All other parameters are passed on to\n            :class:`~matplotlib.collections.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_verts(verts)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n"
    ],
    "Location 3 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/art3d.py lines 869-873)": [
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Create a Poly3DCollection.\n\n        *verts* is a list of 3D polygons.\n\n        *zsort* determines the z-order sorting behavior:\n        - True (default): Perform z-order sorting\n        - False: Do not sort, use input order\n        - 'average' (or True): sort by mean z-coordinate\n        - 'min': sort by minimum z-coordinate\n        - 'max': sort by maximum z-coordinate\n\n        Note that *zsort* is ignored if *depthshade* is *False*.\n\n        The keyword arguments *alpha*, and *facecolor* etc. can be either\n        scalars or sequences of length len(verts).\n\n        This approach of taking the facecolors and edgecolors as\n        arguments to the PolyCollection base class is to ensure that the\n        new collections will know if their colors are changing. If we do\n        not pass this information, the collections would not properly be\n        invalidated.\n        \"\"\"\n        super().__init__(verts, *args, **kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of array-like\n            Each element describes a polygon as a 2D array of vertices, or a\n            3D array of multiple polygons.\n        zsort : {'average', 'min', 'max'}, default: 'average'\n            The calculation method for the z-order.\n            See `~.Poly3DCollection.set_zsort` for details.\n        *args, **kwargs\n            All other parameters are forwarded to `.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n        if isinstance(verts, np.ndarray):\n            if verts.ndim != 3:\n                raise ValueError('verts must be a list of (N, 3) array-like')\n        else:\n            if any(len(np.shape(vert)) != 2 for vert in verts):\n                raise ValueError('verts must be a list of (N, 3) array-like')\n        for i, vert in enumerate(verts):\n            vert = np.asarray(vert)\n            if vert.ndim != 2:\n                raise ValueError('verts must be a list of (N, 3) array-like')\n            if vert.shape[1] != 3:\n                raise ValueError('verts must be a list of (N, 3) array-like')\n        self.set_verts(verts, closed)\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of array-like\n            Each element describes a polygon as a 2D array of (x, y) coordinates.\n        zsort : {'average', 'min', 'max'}, default: 'average'\n            The calculation method for the z-order.\n            See `~.Poly3DCollection.set_zsort` for details.\n        *args, **kwargs\n            All other parameters are forwarded to `.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__(verts, *args, **kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n    def __init__(self, verts, facecolors=None, edgecolors=None,\n                 linewidths=None, linestyles='solid', alpha=None,\n                 norm=None, cmap=None, vmin=None, vmax=None,\n                 shading='flat', **kwargs):\n        if isinstance(verts, np.ndarray):\n            if verts.ndim != 3:\n                raise ValueError('verts must be a list of (N, 3) array-like')\n        else:\n            if any(len(np.shape(vert)) != 2 for vert in verts):\n                raise ValueError('verts must be a list of (N, 3) array-like')\n        super().__init__(**kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n        self.set_verts_and_codes(verts)\n        self.set_facecolor(facecolors)\n        self.set_edgecolor(edgecolors)\n        self.set_linewidth(linewidths)\n        self.set_linestyle(linestyles)\n        self.set_alpha(alpha)\n        self._in_draw = False\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Create a Poly3DCollection.\n\n        *verts* is a list of 3D polygons.\n\n        *zsort* determines the z-order of the polygons. See\n        `.get_depthshade` for more details.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n        if verts is not None:\n            self.set_verts(verts)\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of array-like\n            Each element describes a polygon as a 2D array of shape (N, 3).\n        zsort : {'average', 'min', 'max'}, default: 'average'\n            The calculation method for the z-order.\n            See `~.Poly3DCollection.set_zsort` for details.\n        *args, **kwargs\n            All other parameters are forwarded to `.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_verts(verts)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        verts : list of array-like\n            Each element describes a polygon as a 2D array of shape (M, 3).\n        zsort : {'average', 'min', 'max'}, default: 'average'\n            The calculation method for the z-order.\n            See `~.Poly3DCollection.set_zsort` for details.\n        *args, **kwargs\n            All other parameters are forwarded to `.PolyCollection`.\n\n        Note that this class does a bit of magic with the _facecolors\n        and _edgecolors properties.\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_verts(verts)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n",
      "\n    def __init__(self, verts, *args, zsort='average', **kwargs):\n        \"\"\"\n        Create a Poly3DCollection.\n\n        *verts* is a list of 3D polygons.\n\n        Note that the class ``Poly3DCollection`` is a\n        :class:`~matplotlib.collections.PolyCollection` that knows how to draw\n        3D polygons and applies a 3D transformation before drawing.\n        Keyword arguments are passed on to\n        :class:`~matplotlib.collections.PolyCollection`.\n\n        If *zsort* is not *None* then the draw order of the polygons is\n        determined by the z-component of the centroid of each polygon.\n        The centroid is projected onto the viewing plane, so polygons may\n        still be drawn in the wrong order if they overlap significantly in\n        the viewing plane.\n\n        *zsort* can be one of the following values:\n\n        - 'average': The average z-component of the vertices of the polygon.\n        - 'min': The minimum z-component of the vertices of the polygon.\n        - 'max': The maximum z-component of the vertices of the polygon.\n\n        .. versionadded:: 1.2.0\n           *zsort*\n        \"\"\"\n        super().__init__([], *args, **kwargs)\n        self.set_zsort(zsort)\n        self._codes3d = None\n        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n        self._facecolors2d = np.empty((0, 4))\n        self._edgecolors2d = np.empty((0, 4))\n        if verts is not None:\n            self.set_verts(verts)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..5908da9c3f 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,6 +814,7 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n+\n             _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n                 zip(*z_segments_2d)\n         else:\n@@ -866,6 +870,7 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n+\n     def get_facecolor(self):\n         return self._facecolors2d\n \n",
    "variant_0": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..a9436302fd 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,12 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +868,30 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of (N, 3) array-like\n+            Each element describes a polygon as a sequence of ``N_i`` points\n+            ``(x_i, y_i, z_i)``.\n+        zsort : {'average', 'min', 'max'}, default: 'average'\n+            The calculation method for the z-order.\n+            See `~.Poly3DCollection.set_zsort` for details.\n+        *args, **kwargs\n+            All other parameters are forwarded to `.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n+        self.set_verts_and_codes(verts, None)\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_1": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..e080ce287a 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,40 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n+\n+    def __init__(self, verts, facecolors=None, edgecolors=None, **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of (N, 3) array-like\n+            Each element describes a polygon as a sequence of ``N_i`` points\n+            ``(x_i, y_i, z_i)``.\n+        facecolors, edgecolors : color-like or list of color-like\n+            Color for the collection. Can be a color (all patches have same\n+            color), or a sequence of colors; if it is a sequence the patches\n+            will cycle through the sequence.\n+        **kwargs\n+            All other parameters are forwarded to `.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        if isinstance(verts, np.ndarray):\n+            if verts.ndim != 3:\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n         else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+            if any(len(np.shape(vert)) != 2 for vert in verts):\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n+        super().__init__([], **kwargs)\n+        self.set_zsort('average')\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n+\n+        self.set_verts(verts, closed=kwargs.get('closed', True))\n+        self.set_facecolors(facecolors)\n+        self.set_edgecolors(edgecolors)\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +896,37 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Create a Poly3DCollection.\n+\n+        *verts* is a list of 3D polygons.\n+\n+        *zsort* determines the z-order sorting behavior:\n+        - True (default): Perform z-order sorting\n+        - False: Do not sort, use input order\n+        - 'average' (or True): sort by mean z-coordinate\n+        - 'min': sort by minimum z-coordinate\n+        - 'max': sort by maximum z-coordinate\n+\n+        Note that *zsort* is ignored if *depthshade* is *False*.\n+\n+        The keyword arguments *alpha*, and *facecolor* etc. can be either\n+        scalars or sequences of length len(verts).\n+\n+        This approach of taking the facecolors and edgecolors as\n+        arguments to the PolyCollection base class is to ensure that the\n+        new collections will know if their colors are changing. If we do\n+        not pass this information, the collections would not properly be\n+        invalidated.\n+        \"\"\"\n+        super().__init__(verts, *args, **kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_2": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..e27214c0e3 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,12 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +868,42 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of array-like\n+            Each element describes a polygon as a 2D array of vertices, or a\n+            3D array of multiple polygons.\n+        zsort : {'average', 'min', 'max'}, default: 'average'\n+            The calculation method for the z-order.\n+            See `~.Poly3DCollection.set_zsort` for details.\n+        *args, **kwargs\n+            All other parameters are forwarded to `.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n+        if isinstance(verts, np.ndarray):\n+            if verts.ndim != 3:\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n+        else:\n+            if any(len(np.shape(vert)) != 2 for vert in verts):\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n+        for i, vert in enumerate(verts):\n+            vert = np.asarray(vert)\n+            if vert.ndim != 2:\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n+            if vert.shape[1] != 3:\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n+        self.set_verts(verts, closed)\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_3": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..9160c35a4c 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,23 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Create a Poly3DCollection.\n+\n+        *verts* is a list of 3D polygons.\n+\n+        .. note::\n+           Note that this class does a bit of magic with the _facecolors\n+           and _edgecolors properties.\n+        \"\"\"\n+        super().__init__(verts, *args, **kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +879,28 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of array-like\n+            Each element describes a polygon as a 2D array of (x, y) coordinates.\n+        zsort : {'average', 'min', 'max'}, default: 'average'\n+            The calculation method for the z-order.\n+            See `~.Poly3DCollection.set_zsort` for details.\n+        *args, **kwargs\n+            All other parameters are forwarded to `.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__(verts, *args, **kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_4": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..bf65910435 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,12 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +868,30 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, facecolors=None, edgecolors=None,\n+                 linewidths=None, linestyles='solid', alpha=None,\n+                 norm=None, cmap=None, vmin=None, vmax=None,\n+                 shading='flat', **kwargs):\n+        if isinstance(verts, np.ndarray):\n+            if verts.ndim != 3:\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n+        else:\n+            if any(len(np.shape(vert)) != 2 for vert in verts):\n+                raise ValueError('verts must be a list of (N, 3) array-like')\n+        super().__init__(**kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n+        self.set_verts_and_codes(verts)\n+        self.set_facecolor(facecolors)\n+        self.set_edgecolor(edgecolors)\n+        self.set_linewidth(linewidths)\n+        self.set_linestyle(linestyles)\n+        self.set_alpha(alpha)\n+        self._in_draw = False\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_5": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..c4c5dc847d 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,30 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of (N, 3) array-like\n+            Each element describes a polygon as a sequence of ``N_i`` points\n+            ``(x, y, z)``.\n+        zsort : {'average', 'min', 'max'}, default: 'average'\n+            The calculation method for the z-order.\n+            See `~.Poly3DCollection.set_zsort` for details.\n+        *args, **kwargs\n+            All other parameters are forwarded to `.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_verts(verts)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +886,27 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Create a Poly3DCollection.\n+\n+        *verts* is a list of 3D polygons.\n+\n+        *zsort* determines the z-order of the polygons. See\n+        `.get_depthshade` for more details.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n+        if verts is not None:\n+            self.set_verts(verts)\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_6": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..1fd0b1e4f8 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,30 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of array-like\n+            Each element of the collection is a list of vertices in 3D space.\n+        zsort : {'average', 'min', 'max'}, default: 'average'\n+            The calculation method for the z-order.\n+            See `~.Poly3DCollection.set_zsort` for details.\n+        *args, **kwargs\n+            All other parameters are passed on to\n+            :class:`~matplotlib.collections.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_verts(verts)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +886,29 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of array-like\n+            Each element describes a polygon as a 2D array of shape (N, 3).\n+        zsort : {'average', 'min', 'max'}, default: 'average'\n+            The calculation method for the z-order.\n+            See `~.Poly3DCollection.set_zsort` for details.\n+        *args, **kwargs\n+            All other parameters are forwarded to `.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_verts(verts)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_7": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..f2f1af9cd3 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,12 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +868,29 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        verts : list of array-like\n+            Each element describes a polygon as a 2D array of shape (M, 3).\n+        zsort : {'average', 'min', 'max'}, default: 'average'\n+            The calculation method for the z-order.\n+            See `~.Poly3DCollection.set_zsort` for details.\n+        *args, **kwargs\n+            All other parameters are forwarded to `.PolyCollection`.\n+\n+        Note that this class does a bit of magic with the _facecolors\n+        and _edgecolors properties.\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_verts(verts)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
    "variant_8": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..c0de83de7c 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -706,9 +706,12 @@ class Poly3DCollection(PolyCollection):\n         else:\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n+\n         self.set_zsort(zsort)\n         self._codes3d = None\n-\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n     _zsort_functions = {\n         'average': np.average,\n         'min': np.min,\n@@ -811,13 +814,12 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n-                zip(*z_segments_2d)\n-        else:\n-            segments_2d = []\n-            self._facecolors2d = np.empty((0, 4))\n-            self._edgecolors2d = np.empty((0, 4))\n-            idxs = []\n+\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n \n         if self._codes3d is not None:\n             codes = [self._codes3d[idx] for idx in idxs]\n@@ -866,11 +868,42 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n \n-    def get_edgecolor(self):\n-        return self._edgecolors2d\n+    def __init__(self, verts, *args, zsort='average', **kwargs):\n+        \"\"\"\n+        Create a Poly3DCollection.\n+\n+        *verts* is a list of 3D polygons.\n+\n+        Note that the class ``Poly3DCollection`` is a\n+        :class:`~matplotlib.collections.PolyCollection` that knows how to draw\n+        3D polygons and applies a 3D transformation before drawing.\n+        Keyword arguments are passed on to\n+        :class:`~matplotlib.collections.PolyCollection`.\n+\n+        If *zsort* is not *None* then the draw order of the polygons is\n+        determined by the z-component of the centroid of each polygon.\n+        The centroid is projected onto the viewing plane, so polygons may\n+        still be drawn in the wrong order if they overlap significantly in\n+        the viewing plane.\n+\n+        *zsort* can be one of the following values:\n+\n+        - 'average': The average z-component of the vertices of the polygon.\n+        - 'min': The minimum z-component of the vertices of the polygon.\n+        - 'max': The maximum z-component of the vertices of the polygon.\n+\n+        .. versionadded:: 1.2.0\n+           *zsort*\n+        \"\"\"\n+        super().__init__([], *args, **kwargs)\n+        self.set_zsort(zsort)\n+        self._codes3d = None\n+        # Initialize 2D color arrays to prevent AttributeError in get_facecolor()\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n+        if verts is not None:\n+            self.set_verts(verts)\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n"
  }
}