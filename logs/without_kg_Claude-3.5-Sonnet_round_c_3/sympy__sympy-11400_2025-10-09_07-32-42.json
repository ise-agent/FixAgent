{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 220-227)": "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
    "Location 2 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 216-219)": "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
    "Location 3 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 184-214)": "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
    "Location 4 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 25-46)": "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 220-227)": [
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n\n    def _print_Symbol(self, expr):\n\n        name = super(CCodePrinter, self)._print_Symbol(expr)\n"
    ],
    "Location 2 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 216-219)": [
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n"
    ],
    "Location 3 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 184-214)": [
      "\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_Piecewise(self, expr):\n        if expr.args[-1].cond != True:\n            # We need the last conditional to be a True, otherwise the resulting\n            # function may not return a result.\n            raise ValueError(\"All Piecewise expressions must contain an \"\n                             \"(expr, True) statement to be used as a default \"\n                             \"condition. Without one, the generated \"\n                             \"expression may not evaluate to anything under \"\n                             \"some condition.\")\n        lines = []\n        if expr.has(Assignment):\n            for i, (e, c) in enumerate(expr.args):\n                if i == 0:\n                    lines.append(\"if (%s) {\" % self._print(c))\n                elif i == len(expr.args) - 1 and c == True:\n                    lines.append(\"else {\")\n                else:\n                    lines.append(\"else if (%s) {\" % self._print(c))\n                code0 = self._print(e)\n                lines.append(code0)\n                lines.append(\"}\")\n            return \"\\n\".join(lines)\n        else:\n            # The piecewise was used in an expression, need to do inline\n            # operators. This has the downside that inline operators will\n            # not work for statements that span multiple lines (Matrix or\n            # Indexed expressions).\n            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n                    for e, c in expr.args[:-1]]\n            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n",
      "\n    def _print_ITE(self, expr):\n        from sympy.functions import Piecewise\n        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n        return self._print(_piecewise)\n\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n\n    def _print_MatrixElement(self, expr):\n        return \"{0}[{1}]\".format(expr.parent, expr.j +\n                expr.i*expr.parent.shape[1])\n"
    ],
    "Location 4 (/root/hy/projects_3/sympy/sympy/printing/ccode.py lines 25-46)": [
      "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n",
      "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n\nknown_functions = {\n    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n    \"gamma\": \"tgamma\",\n    \"sin\": \"sin\",\n    \"cos\": \"cos\",\n    \"tan\": \"tan\",\n    \"asin\": \"asin\",\n    \"acos\": \"acos\",\n    \"atan\": \"atan\",\n    \"atan2\": \"atan2\",\n    \"exp\": \"exp\",\n    \"log\": \"log\",\n    \"erf\": \"erf\",\n    \"sinh\": \"sinh\",\n    \"cosh\": \"cosh\",\n    \"tanh\": \"tanh\",\n    \"asinh\": \"asinh\",\n    \"acosh\": \"acosh\",\n    \"atanh\": \"atanh\",\n    \"floor\": \"floor\",\n    \"ceiling\": \"ceil\",\n}\n",
      "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n",
      "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n",
      "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n",
      "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n",
      "\n    def _print_sinc(self, expr):\n        from sympy.functions import Piecewise\n        from sympy.core.relational import Ne\n        from sympy.functions.elementary.trigonometric import sin\n        x = expr.args[0]\n        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n        return self._print(_piecewise)\n",
      "\ndef _print_sinc(self, expr):\n    from sympy.functions import Piecewise\n    from sympy.core.relational import Ne\n    from sympy.functions.elementary.trigonometric import sin\n    x = expr.args[0]\n    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n    return self._print(_piecewise)\n\nknown_functions = {\n    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n    \"gamma\": \"tgamma\",\n    \"sin\": \"sin\",\n    \"cos\": \"cos\",\n    \"tan\": \"tan\",\n    \"asin\": \"asin\",\n    \"acos\": \"acos\",\n    \"atan\": \"atan\",\n    \"atan2\": \"atan2\",\n    \"exp\": \"exp\",\n    \"log\": \"log\",\n    \"erf\": \"erf\",\n    \"sinh\": \"sinh\",\n    \"cosh\": \"cosh\",\n    \"tanh\": \"tanh\",\n    \"asinh\": \"asinh\",\n    \"acosh\": \"acosh\",\n    \"atanh\": \"atanh\",\n    \"floor\": \"floor\",\n    \"ceiling\": \"ceil\",\n}\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..7d041f42ae 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,6 +22,7 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n+\n known_functions = {\n     \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n     \"gamma\": \"tgamma\",\n@@ -181,6 +182,7 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n+\n     def _print_Piecewise(self, expr):\n         if expr.args[-1].cond != True:\n             # We need the last conditional to be a True, otherwise the resulting\n@@ -213,11 +215,21 @@ def _print_Piecewise(self, expr):\n             last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n             return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n+\n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_0": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..0ed7eaaecd 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,28 +22,14 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n-known_functions = {\n-    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n-    \"gamma\": \"tgamma\",\n-    \"sin\": \"sin\",\n-    \"cos\": \"cos\",\n-    \"tan\": \"tan\",\n-    \"asin\": \"asin\",\n-    \"acos\": \"acos\",\n-    \"atan\": \"atan\",\n-    \"atan2\": \"atan2\",\n-    \"exp\": \"exp\",\n-    \"log\": \"log\",\n-    \"erf\": \"erf\",\n-    \"sinh\": \"sinh\",\n-    \"cosh\": \"cosh\",\n-    \"tanh\": \"tanh\",\n-    \"asinh\": \"asinh\",\n-    \"acosh\": \"acosh\",\n-    \"atanh\": \"atanh\",\n-    \"floor\": \"floor\",\n-    \"ceiling\": \"ceil\",\n-}\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n \n # These are the core reserved words in the C language. Taken from:\n # http://crasseux.com/books/ctutorial/Reserved-words-in-C.html\n@@ -181,43 +167,47 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_1": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..64267b4edc 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,28 +22,14 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n-known_functions = {\n-    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n-    \"gamma\": \"tgamma\",\n-    \"sin\": \"sin\",\n-    \"cos\": \"cos\",\n-    \"tan\": \"tan\",\n-    \"asin\": \"asin\",\n-    \"acos\": \"acos\",\n-    \"atan\": \"atan\",\n-    \"atan2\": \"atan2\",\n-    \"exp\": \"exp\",\n-    \"log\": \"log\",\n-    \"erf\": \"erf\",\n-    \"sinh\": \"sinh\",\n-    \"cosh\": \"cosh\",\n-    \"tanh\": \"tanh\",\n-    \"asinh\": \"asinh\",\n-    \"acosh\": \"acosh\",\n-    \"atanh\": \"atanh\",\n-    \"floor\": \"floor\",\n-    \"ceiling\": \"ceil\",\n-}\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n \n # These are the core reserved words in the C language. Taken from:\n # http://crasseux.com/books/ctutorial/Reserved-words-in-C.html\n@@ -181,6 +167,15 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_Piecewise(self, expr):\n         if expr.args[-1].cond != True:\n             # We need the last conditional to be a True, otherwise the resulting\n@@ -213,11 +208,33 @@ def _print_Piecewise(self, expr):\n             last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n             return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n+\n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_2": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..2fac98e584 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,6 +22,15 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n+\n known_functions = {\n     \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n     \"gamma\": \"tgamma\",\n@@ -181,43 +190,51 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_MatrixElement(self, expr):\n+        return \"{0}[{1}]\".format(expr.parent, expr.j +\n+                expr.i*expr.parent.shape[1])\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_3": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..420915647f 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,28 +22,14 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n-known_functions = {\n-    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n-    \"gamma\": \"tgamma\",\n-    \"sin\": \"sin\",\n-    \"cos\": \"cos\",\n-    \"tan\": \"tan\",\n-    \"asin\": \"asin\",\n-    \"acos\": \"acos\",\n-    \"atan\": \"atan\",\n-    \"atan2\": \"atan2\",\n-    \"exp\": \"exp\",\n-    \"log\": \"log\",\n-    \"erf\": \"erf\",\n-    \"sinh\": \"sinh\",\n-    \"cosh\": \"cosh\",\n-    \"tanh\": \"tanh\",\n-    \"asinh\": \"asinh\",\n-    \"acosh\": \"acosh\",\n-    \"atanh\": \"atanh\",\n-    \"floor\": \"floor\",\n-    \"ceiling\": \"ceil\",\n-}\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n \n # These are the core reserved words in the C language. Taken from:\n # http://crasseux.com/books/ctutorial/Reserved-words-in-C.html\n@@ -181,43 +167,51 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_MatrixElement(self, expr):\n+        return \"{0}[{1}]\".format(expr.parent, expr.j +\n+                expr.i*expr.parent.shape[1])\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_4": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..420915647f 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,28 +22,14 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n-known_functions = {\n-    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n-    \"gamma\": \"tgamma\",\n-    \"sin\": \"sin\",\n-    \"cos\": \"cos\",\n-    \"tan\": \"tan\",\n-    \"asin\": \"asin\",\n-    \"acos\": \"acos\",\n-    \"atan\": \"atan\",\n-    \"atan2\": \"atan2\",\n-    \"exp\": \"exp\",\n-    \"log\": \"log\",\n-    \"erf\": \"erf\",\n-    \"sinh\": \"sinh\",\n-    \"cosh\": \"cosh\",\n-    \"tanh\": \"tanh\",\n-    \"asinh\": \"asinh\",\n-    \"acosh\": \"acosh\",\n-    \"atanh\": \"atanh\",\n-    \"floor\": \"floor\",\n-    \"ceiling\": \"ceil\",\n-}\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n \n # These are the core reserved words in the C language. Taken from:\n # http://crasseux.com/books/ctutorial/Reserved-words-in-C.html\n@@ -181,43 +167,51 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_MatrixElement(self, expr):\n+        return \"{0}[{1}]\".format(expr.parent, expr.j +\n+                expr.i*expr.parent.shape[1])\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_5": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..0ed7eaaecd 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,28 +22,14 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n-known_functions = {\n-    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n-    \"gamma\": \"tgamma\",\n-    \"sin\": \"sin\",\n-    \"cos\": \"cos\",\n-    \"tan\": \"tan\",\n-    \"asin\": \"asin\",\n-    \"acos\": \"acos\",\n-    \"atan\": \"atan\",\n-    \"atan2\": \"atan2\",\n-    \"exp\": \"exp\",\n-    \"log\": \"log\",\n-    \"erf\": \"erf\",\n-    \"sinh\": \"sinh\",\n-    \"cosh\": \"cosh\",\n-    \"tanh\": \"tanh\",\n-    \"asinh\": \"asinh\",\n-    \"acosh\": \"acosh\",\n-    \"atanh\": \"atanh\",\n-    \"floor\": \"floor\",\n-    \"ceiling\": \"ceil\",\n-}\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n \n # These are the core reserved words in the C language. Taken from:\n # http://crasseux.com/books/ctutorial/Reserved-words-in-C.html\n@@ -181,43 +167,47 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_6": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..420915647f 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,28 +22,14 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n-known_functions = {\n-    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n-    \"gamma\": \"tgamma\",\n-    \"sin\": \"sin\",\n-    \"cos\": \"cos\",\n-    \"tan\": \"tan\",\n-    \"asin\": \"asin\",\n-    \"acos\": \"acos\",\n-    \"atan\": \"atan\",\n-    \"atan2\": \"atan2\",\n-    \"exp\": \"exp\",\n-    \"log\": \"log\",\n-    \"erf\": \"erf\",\n-    \"sinh\": \"sinh\",\n-    \"cosh\": \"cosh\",\n-    \"tanh\": \"tanh\",\n-    \"asinh\": \"asinh\",\n-    \"acosh\": \"acosh\",\n-    \"atanh\": \"atanh\",\n-    \"floor\": \"floor\",\n-    \"ceiling\": \"ceil\",\n-}\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n \n # These are the core reserved words in the C language. Taken from:\n # http://crasseux.com/books/ctutorial/Reserved-words-in-C.html\n@@ -181,43 +167,51 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_MatrixElement(self, expr):\n+        return \"{0}[{1}]\".format(expr.parent, expr.j +\n+                expr.i*expr.parent.shape[1])\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_7": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..97eb57b20b 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,28 +22,14 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n-known_functions = {\n-    \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n-    \"gamma\": \"tgamma\",\n-    \"sin\": \"sin\",\n-    \"cos\": \"cos\",\n-    \"tan\": \"tan\",\n-    \"asin\": \"asin\",\n-    \"acos\": \"acos\",\n-    \"atan\": \"atan\",\n-    \"atan2\": \"atan2\",\n-    \"exp\": \"exp\",\n-    \"log\": \"log\",\n-    \"erf\": \"erf\",\n-    \"sinh\": \"sinh\",\n-    \"cosh\": \"cosh\",\n-    \"tanh\": \"tanh\",\n-    \"asinh\": \"asinh\",\n-    \"acosh\": \"acosh\",\n-    \"atanh\": \"atanh\",\n-    \"floor\": \"floor\",\n-    \"ceiling\": \"ceil\",\n-}\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n \n # These are the core reserved words in the C language. Taken from:\n # http://crasseux.com/books/ctutorial/Reserved-words-in-C.html\n@@ -181,43 +167,51 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_MatrixElement(self, expr):\n+        return \"{0}[{1}]\".format(expr.parent, expr.j +\n+                expr.i*expr.parent.shape[1])\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n",
    "variant_8": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..2fac98e584 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -22,6 +22,15 @@\n \n # dictionary mapping sympy function to (argument_conditions, C_function).\n # Used in CCodePrinter._print_Function(self)\n+\n+def _print_sinc(self, expr):\n+    from sympy.functions import Piecewise\n+    from sympy.core.relational import Ne\n+    from sympy.functions.elementary.trigonometric import sin\n+    x = expr.args[0]\n+    _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+    return self._print(_piecewise)\n+\n known_functions = {\n     \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n     \"gamma\": \"tgamma\",\n@@ -181,43 +190,51 @@ def _print_Infinity(self, expr):\n     def _print_NegativeInfinity(self, expr):\n         return '-HUGE_VAL'\n \n-    def _print_Piecewise(self, expr):\n-        if expr.args[-1].cond != True:\n-            # We need the last conditional to be a True, otherwise the resulting\n-            # function may not return a result.\n-            raise ValueError(\"All Piecewise expressions must contain an \"\n-                             \"(expr, True) statement to be used as a default \"\n-                             \"condition. Without one, the generated \"\n-                             \"expression may not evaluate to anything under \"\n-                             \"some condition.\")\n-        lines = []\n-        if expr.has(Assignment):\n-            for i, (e, c) in enumerate(expr.args):\n-                if i == 0:\n-                    lines.append(\"if (%s) {\" % self._print(c))\n-                elif i == len(expr.args) - 1 and c == True:\n-                    lines.append(\"else {\")\n-                else:\n-                    lines.append(\"else if (%s) {\" % self._print(c))\n-                code0 = self._print(e)\n-                lines.append(code0)\n-                lines.append(\"}\")\n-            return \"\\n\".join(lines)\n-        else:\n-            # The piecewise was used in an expression, need to do inline\n-            # operators. This has the downside that inline operators will\n-            # not work for statements that span multiple lines (Matrix or\n-            # Indexed expressions).\n-            ecpairs = [\"((%s) ? (\\n%s\\n)\\n\" % (self._print(c), self._print(e))\n-                    for e, c in expr.args[:-1]]\n-            last_line = \": (\\n%s\\n)\" % self._print(expr.args[-1].expr)\n-            return \": \".join(ecpairs) + last_line + \" \".join([\")\"*len(ecpairs)])\n \n     def _print_ITE(self, expr):\n         from sympy.functions import Piecewise\n         _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n         return self._print(_piecewise)\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_MatrixElement(self, expr):\n+        return \"{0}[{1}]\".format(expr.parent, expr.j +\n+                expr.i*expr.parent.shape[1])\n+\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n+    def _print_ITE(self, expr):\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise((expr.args[1], expr.args[0]), (expr.args[2], True))\n+        return self._print(_piecewise)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        from sympy.functions.elementary.trigonometric import sin\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_MatrixElement(self, expr):\n         return \"{0}[{1}]\".format(expr.parent, expr.j +\n                 expr.i*expr.parent.shape[1])\n"
  }
}