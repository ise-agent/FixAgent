{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/tmpdir.py lines 151-159)": "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username by replacing characters that are illegal in directory names\n            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/tmpdir.py lines 114-117)": "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The username is sanitized to remove characters that are invalid for\n    directory names on various filesystems.\n    \"\"\"\n    try:\n        user = getpass.getuser()\n        # Sanitize username for directory creation - replace invalid characters\n        # with underscores to ensure cross-platform compatibility\n        invalid_chars = r'[<>:\"/\\\\|?*\\x00-\\x1f]'\n        sanitized_user = re.sub(invalid_chars, '_', user)\n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/tmpdir.py lines 151-159)": [
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user is None:\n            return None\n        # Sanitize username for use in directory names by replacing\n        # characters that are illegal in directory names with underscores\n        sanitized = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username by replacing characters that are invalid in directory names\n            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username by replacing characters that are illegal in directory names\n            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username by replacing characters that are illegal in directory names\n            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username for directory creation by replacing illegal characters\n            # Replace backslashes, colons, quotes, and other problematic chars with underscores\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        username = getpass.getuser()\n        if username:\n            # Sanitize username by replacing illegal directory characters\n            # with underscores to ensure it's safe for directory creation\n            username = re.sub(r'[<>:\"/\\\\|?*]', '_', username)\n        return username\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        if user:\n            # Sanitize username by replacing characters that are illegal in directory names\n            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        # Sanitize username to remove characters illegal in directory names\n        # Replace backslashes, colons, quotes, and other problematic chars with underscores\n        if user:\n            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n"
    ],
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/tmpdir.py lines 114-117)": [
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username to be safe for directory names\n        # Replace characters that are illegal in directory names with underscores\n        import re\n        # Replace backslashes, colons, quotes, and other problematic characters\n        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n        return sanitized\n    except ImportError:\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \"\"\"\n    try:\n        user = getpass.getuser()\n        # Sanitize username for directory creation by replacing illegal characters\n        # Common illegal characters in directory names: \\ / : * ? \" < > |\n        illegal_chars = r'[\\\\/:*?\"<>|]'\n        sanitized_user = re.sub(illegal_chars, '_', user)\n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The username is sanitized to be safe for directory names by replacing\n    characters that are illegal in directory names with underscores.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory names by replacing illegal characters\n        # with underscores. This handles domain usernames like \"domain\\user\"\n        # and other problematic characters\n        sanitized = re.sub(r'[<>:\"/\\\\|?*]', '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \"\"\"\n    try:\n        user = getpass.getuser()\n        # Sanitize username for directory creation by replacing illegal characters\n        # Replace backslashes (common in domain usernames) and other illegal chars\n        sanitized_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The username is sanitized to be safe for use in directory names by\n    replacing characters that are illegal in file/directory names.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username for directory name usage\n        # Replace illegal characters with underscores\n        illegal_chars = r'[<>:\"/\\\\|?*]'\n        sanitized = re.sub(illegal_chars, '_', username)\n        return sanitized\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The returned username is sanitized to be safe for directory names.\n    \"\"\"\n    try:\n        user = getpass.getuser()\n        # Sanitize username for safe directory creation\n        # Replace characters that are illegal in directory names with underscores\n        user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n        return user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The username is sanitized to remove characters that are illegal in \n    directory names on Windows and other filesystems.\n    \"\"\"\n    try:\n        user = getpass.getuser()\n        # Sanitize username by replacing illegal directory characters\n        # with underscores to ensure cross-platform compatibility\n        illegal_chars = r'[<>:\"/\\\\|?*]'\n        sanitized_user = re.sub(illegal_chars, '_', user)\n        return sanitized_user\n    except (ImportError, KeyError):\n        return None\n",
      "\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\n    \n    The username is sanitized to remove characters that are invalid for\n    directory names on various filesystems.\n    \"\"\"\n    try:\n        username = getpass.getuser()\n        # Sanitize username by replacing invalid directory characters\n        # with underscores to ensure cross-platform compatibility\n        invalid_chars = r'[<>:\"/\\\\|?*\\x00-\\x1f]'\n        sanitized_username = re.sub(invalid_chars, '_', username)\n        return sanitized_username\n    except (ImportError, KeyError):\n        return None\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..47d905fcf 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,6 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n+\n             user = get_user() or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n@@ -148,13 +149,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        # Sanitize username by replacing illegal directory characters with underscores\n+        # This handles cases like domain usernames (e.g., \"contoso\\john_doe\")\n+        if user:\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_0": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..6faec36ef 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The username is sanitized to remove characters that are invalid for\n+    directory names on various filesystems.\n+    \"\"\"\n+    try:\n+        user = getpass.getuser()\n+        # Sanitize username for directory creation - replace invalid characters\n+        # with underscores to ensure cross-platform compatibility\n+        invalid_chars = r'[<>:\"/\\\\|?*\\x00-\\x1f]'\n+        sanitized_user = re.sub(invalid_chars, '_', user)\n+        return sanitized_user\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +161,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username by replacing characters that are illegal in directory names\n+            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_1": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..e0ce0406b 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,20 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username to be safe for directory names\n+        # Replace characters that are illegal in directory names with underscores\n+        import re\n+        # Replace backslashes, colons, quotes, and other problematic characters\n+        sanitized = re.sub(r'[\\\\/:*?\"<>|]', '_', username)\n+        return sanitized\n+    except ImportError:\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +158,20 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user is None:\n+            return None\n+        # Sanitize username for use in directory names by replacing\n+        # characters that are illegal in directory names with underscores\n+        sanitized = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n+        return sanitized\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_2": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..cf1d3d8a2 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,20 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \"\"\"\n+    try:\n+        user = getpass.getuser()\n+        # Sanitize username for directory creation by replacing illegal characters\n+        # Common illegal characters in directory names: \\ / : * ? \" < > |\n+        illegal_chars = r'[\\\\/:*?\"<>|]'\n+        sanitized_user = re.sub(illegal_chars, '_', user)\n+        return sanitized_user\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +158,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username by replacing characters that are invalid in directory names\n+            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_3": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..3ae861618 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The username is sanitized to be safe for directory names by replacing\n+    characters that are illegal in directory names with underscores.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory names by replacing illegal characters\n+        # with underscores. This handles domain usernames like \"domain\\user\"\n+        # and other problematic characters\n+        sanitized = re.sub(r'[<>:\"/\\\\|?*]', '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +161,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username by replacing characters that are illegal in directory names\n+            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_4": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..7e534d70d 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,19 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \"\"\"\n+    try:\n+        user = getpass.getuser()\n+        # Sanitize username for directory creation by replacing illegal characters\n+        # Replace backslashes (common in domain usernames) and other illegal chars\n+        sanitized_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n+        return sanitized_user\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +157,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username by replacing characters that are illegal in directory names\n+            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_5": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..f3ebf2f82 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The username is sanitized to be safe for use in directory names by\n+    replacing characters that are illegal in file/directory names.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username for directory name usage\n+        # Replace illegal characters with underscores\n+        illegal_chars = r'[<>:\"/\\\\|?*]'\n+        sanitized = re.sub(illegal_chars, '_', username)\n+        return sanitized\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +161,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username for directory creation by replacing illegal characters\n+            # Replace backslashes, colons, quotes, and other problematic chars with underscores\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_6": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..9603afca7 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,21 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The returned username is sanitized to be safe for directory names.\n+    \"\"\"\n+    try:\n+        user = getpass.getuser()\n+        # Sanitize username for safe directory creation\n+        # Replace characters that are illegal in directory names with underscores\n+        user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n+        return user\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +159,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        if username:\n+            # Sanitize username by replacing illegal directory characters\n+            # with underscores to ensure it's safe for directory creation\n+            username = re.sub(r'[<>:\"/\\\\|?*]', '_', username)\n+        return username\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_7": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..b2e872a93 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The username is sanitized to remove characters that are illegal in \n+    directory names on Windows and other filesystems.\n+    \"\"\"\n+    try:\n+        user = getpass.getuser()\n+        # Sanitize username by replacing illegal directory characters\n+        # with underscores to ensure cross-platform compatibility\n+        illegal_chars = r'[<>:\"/\\\\|?*]'\n+        sanitized_user = re.sub(illegal_chars, '_', user)\n+        return sanitized_user\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +161,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        if user:\n+            # Sanitize username by replacing characters that are illegal in directory names\n+            # Replace backslashes, colons, quotes, and other problematic characters with underscores\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n",
    "variant_8": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..41fe14200 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,10 +111,23 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n-            # use a sub-directory in the temproot to speed-up\n-            # make_numbered_dir() call\n-            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n+\n+def get_user() -> Optional[str]:\n+    \"\"\"Return the current user name, or None if getuser() does not work\n+    in the current environment (see #1010).\n+    \n+    The username is sanitized to remove characters that are invalid for\n+    directory names on various filesystems.\n+    \"\"\"\n+    try:\n+        username = getpass.getuser()\n+        # Sanitize username by replacing invalid directory characters\n+        # with underscores to ensure cross-platform compatibility\n+        invalid_chars = r'[<>:\"/\\\\|?*\\x00-\\x1f]'\n+        sanitized_username = re.sub(invalid_chars, '_', username)\n+        return sanitized_username\n+    except (ImportError, KeyError):\n+        return None\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(\n                 prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n@@ -148,13 +161,19 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n+\n def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        # Sanitize username to remove characters illegal in directory names\n+        # Replace backslashes, colons, quotes, and other problematic chars with underscores\n+        if user:\n+            user = re.sub(r'[\\\\/:*?\"<>|]', '_', user)\n+        return user\n     except (ImportError, KeyError):\n         return None\n \n"
  }
}