{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 865-872)": "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 394-395)": "\n            if self.verbose_feature_names_out:\n                # If all transformers are None, then feature names are unchanged\n                if all(trans is None for _, trans, _ in self.transformers_):\n                    return output\n\n                # Get the feature names from the transformers\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
    "Location 3 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 862-863)": "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers and their indices to ensure consistency\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names by finding indices\n                # of transformers that weren't filtered out by _iter\n                fitted_transformer_names = {t[0] for t in fitted_transformers}\n                filtered_Xs = []\n                for i, (name, trans, cols) in enumerate(self.transformers_):\n                    if name in fitted_transformer_names and i < len(Xs):\n                        filtered_Xs.append(Xs[i])\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
    "Location 4 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 917-920)": "\ndef _add_prefix_for_feature_names_out(self, transformers):\n    feature_names_outs = []\n    for name, feature_names_out in transformers:\n        if feature_names_out is None:\n            feature_names_outs.append(None)\n        else:\n            names = np.asarray(feature_names_out, dtype=object)\n            feature_names_outs.append([f\"{name}__{i}\" for i in names])\n    return feature_names_outs\n\ndef _hstack(self, Xs):\n    \"\"\"\n    Stacks Xs horizontally.\n\n    Supports input types (X): list of\n        - numpy arrays\n        - sparse matrices\n        - dataframes\n    \"\"\"\n    if self._n_features == 0:\n        # No columns were selected\n        if hasattr(Xs[0], \"iloc\"):\n            return Xs[0].iloc[:, :0]\n        else:\n            return np.empty((Xs[0].shape[0], 0))\n\n    config = _get_output_config(\"transform\", self)\n    if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n        pd = check_pandas_support(\"transform\")\n        output = pd.concat(Xs, axis=1)\n        # if all estimators define feature_names_out, then try to use them\n        if not self.verbose_feature_names_out:\n            return output\n        \n        # Get fitted transformers and their corresponding outputs\n        fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n        \n        # Filter Xs to match the fitted transformers that produced non-empty outputs\n        transformer_names = [name for name, _, _ in fitted_transformers]\n        non_empty_indices = [i for i, X in enumerate(Xs) if X.shape[1] > 0]\n        \n        if len(non_empty_indices) != len(transformer_names):\n            # Mismatch between non-empty outputs and fitted transformers\n            # This can happen when some transformers produce empty outputs\n            # In this case, we need to align them properly\n            filtered_Xs = [Xs[i] for i in non_empty_indices]\n            if len(filtered_Xs) == len(transformer_names):\n                feature_names_outs = [X.columns for X in filtered_Xs]\n            else:\n                # Fallback: use the original output without custom naming\n                return output\n        else:\n            feature_names_outs = [X.columns for X in Xs if X.shape[1] > 0]\n        \n        names_out = self._add_prefix_for_feature_names_out(\n            list(zip(transformer_names, feature_names_outs))\n        )\n        output.columns = list(chain.from_iterable(names_out))\n        return output\n    elif sparse.issparse(Xs[0]):\n        return sparse.hstack(Xs).tocsr()\n    else:\n        return np.hstack(Xs)\n",
    "Location 5 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 855-856)": "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                  if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 865-872)": [
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names to ensure consistency\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                  if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                  if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names from _iter\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                  if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names from _iter\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                  if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n"
    ],
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 394-395)": [
      "\n            if self.verbose_feature_names_out:\n                # If all transformers produce empty outputs, return early\n                if not any(X.shape[1] > 0 for X in Xs):\n                    return output\n                \n                # Get transformer names from _iter to ensure consistency\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n            if self.verbose_feature_names_out:\n                # If all transformers are dropped/empty, return early\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                if not transformer_names:\n                    return output\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                if self.verbose_feature_names_out:\n                    # Get the transformer names from _iter which filters out empty transformers\n                    transformer_names = [\n                        t[0] for t in self._iter(fitted=True, replace_strings=True)\n                    ]\n                    \n                    # Filter Xs to match the filtered transformer names\n                    fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                    fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                      if any(ft[0] == name for ft in fitted_transformers)]\n                    filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                    \n                    feature_names_outs = [X.columns for X in filtered_Xs]\n                    names_out = self._add_prefix_for_feature_names_out(\n                        list(zip(transformer_names, feature_names_outs))\n                    )\n                    output.columns = names_out\n",
      "\n                # List of tuples (name, feature_names_out)\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n",
      "\n            # Get names of transformers that actually produced output\n            transformer_names = [\n                t[0] for t in self._iter(fitted=True, replace_strings=True)\n            ]\n            \n            # Filter Xs to match the filtered transformer names\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            \n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n",
      "\n            if self.verbose_feature_names_out:\n                # If all transformers were strings (drop/passthrough) then\n                # verbose_feature_names_out=True is equivalent to\n                # verbose_feature_names_out=False\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n",
      "\n                # Get transformer names from _iter to ensure consistency\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n",
      "\n            if not self.verbose_feature_names_out:\n                return output\n\n            transformer_names = [\n                t[0] for t in self._iter(fitted=True, replace_strings=True)\n            ]\n            # Filter Xs to match the filtered transformer names\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n"
    ],
    "Location 3 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 862-863)": [
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers to ensure consistent filtering\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                  if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers to ensure consistent filtering\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers to ensure consistent filtering\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers and their indices to ensure consistency\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_indices = []\n                for i, (name, trans, cols) in enumerate(self.transformers_):\n                    if any(ft[0] == name for ft in fitted_transformers):\n                        fitted_indices.append(i)\n                \n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers to ensure consistent filtering\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers and their indices to ensure consistency\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Find indices of fitted transformers in the original transformers_ list\n                fitted_indices = []\n                for name, trans, cols in fitted_transformers:\n                    for i, (orig_name, orig_trans, orig_cols) in enumerate(self.transformers_):\n                        if orig_name == name:\n                            fitted_indices.append(i)\n                            break\n                \n                # Filter Xs to match the fitted transformers\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers to ensure consistent filtering\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                \n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n",
      "\n                if not self.verbose_feature_names_out:\n                    return output\n\n                # Get fitted transformers to ensure consistent filtering\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                transformer_names = [t[0] for t in fitted_transformers]\n                \n                # Filter Xs to match the filtered transformer names by finding indices\n                # of transformers that are included in fitted_transformers\n                fitted_indices = []\n                for i, (name, trans, cols) in enumerate(self.transformers_):\n                    if any(ft[0] == name for ft in fitted_transformers):\n                        fitted_indices.append(i)\n                \n                # Only include Xs that correspond to fitted transformers\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n                output.columns = names_out\n                return output\n"
    ],
    "Location 4 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 917-920)": [
      "\n        if self.verbose_feature_names_out:\n            # Get the fitted transformers that actually have features\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            transformer_names = [t[0] for t in fitted_transformers]\n            \n            # Filter Xs to match the filtered transformer names\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            \n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n            output.columns = names_out\n",
      "\n        if self.verbose_feature_names_out:\n            # Get the feature names from the transformers\n            transformer_names = [\n                t[0] for t in self._iter(fitted=True, replace_strings=True)\n            ]\n            # Filter Xs to match the filtered transformer names\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n            output.columns = names_out\n",
      "\n        if self.verbose_feature_names_out:\n            # Get the feature names from the transformers that actually produced output\n            transformer_names = [\n                t[0] for t in self._iter(fitted=True, replace_strings=True)\n            ]\n            # Filter Xs to match the filtered transformer names\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n            output.columns = names_out\n",
      "\n        if self.verbose_feature_names_out:\n            # Get the feature names from the transformers\n            transformer_names = [\n                t[0] for t in self._iter(fitted=True, replace_strings=True)\n            ]\n            # Filter Xs to match the filtered transformer names\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n            output.columns = names_out\n",
      "\n        if not self.verbose_feature_names_out:\n            return output\n\n        transformer_names = [\n            t[0] for t in self._iter(fitted=True, replace_strings=True)\n        ]\n        # Filter Xs to match the filtered transformer names\n        fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n        fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                         if any(ft[0] == name for ft in fitted_transformers)]\n        filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n        feature_names_outs = [X.columns for X in filtered_Xs]\n        names_out = self._add_prefix_for_feature_names_out(\n            list(zip(transformer_names, feature_names_outs))\n        )\n",
      "\n        if self.verbose_feature_names_out:\n            # Get the feature names from the transformers\n            transformer_names = [\n                t[0] for t in self._iter(fitted=True, replace_strings=True)\n            ]\n            # Filter Xs to match the filtered transformer names\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n            output.columns = names_out\n",
      "\n        if self.verbose_feature_names_out:\n            # Get the transformer names that were actually fitted and used\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            transformer_names = [t[0] for t in fitted_transformers]\n            \n            # Filter Xs to match the filtered transformer names\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            \n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n            output.columns = names_out\n",
      "\n        if self.verbose_feature_names_out:\n            transformer_names = [\n                t[0] for t in self._iter(fitted=True, replace_strings=True)\n            ]\n            # Filter Xs to match the filtered transformer names\n            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                             if any(ft[0] == name for ft in fitted_transformers)]\n            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n            feature_names_outs = [X.columns for X in filtered_Xs]\n            names_out = self._add_prefix_for_feature_names_out(\n                list(zip(transformer_names, feature_names_outs))\n            )\n"
    ],
    "Location 5 (/root/hy/projects_3/scikit-learn/sklearn/compose/_column_transformer.py lines 855-856)": [
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n",
      "\n                transformer_names = [\n                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n                ]\n                # Filter Xs to match the filtered transformer names\n                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n                                 if any(ft[0] == name for ft in fitted_transformers)]\n                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n                feature_names_outs = [X.columns for X in filtered_Xs]\n                names_out = self._add_prefix_for_feature_names_out(\n                    list(zip(transformer_names, feature_names_outs))\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..35bf01c9f 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,6 +391,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n+\n                 elif _is_empty_column_selection(columns):\n                     continue\n \n@@ -852,20 +853,33 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                output = pd.concat(Xs, axis=1)\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names from _iter\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_transformer_names = [ft[0] for ft in fitted_transformers]\n+                \n+                # Create a mapping from original transformer order to filtered order\n+                original_transformers = [t[0] for t in self.transformers_]\n+                filtered_Xs = []\n+                for i, transformer_name in enumerate(original_transformers):\n+                    if transformer_name in fitted_transformer_names and i < len(Xs):\n+                        filtered_Xs.append(Xs[i])\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,6 +928,7 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n+\n             len(column) == 0\n             or all(isinstance(col, bool) for col in column)\n             and not any(column)\n",
    "variant_0": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..e380ceedf 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,26 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+            if self.verbose_feature_names_out:\n+                # If all transformers are None, then feature names are unchanged\n+                if all(trans is None for _, trans, _ in self.transformers_):\n+                    return output\n+\n+                # Get the feature names from the transformers\n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +870,57 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                  if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers and their indices to ensure consistency\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names by finding indices\n+                # of transformers that weren't filtered out by _iter\n+                fitted_transformer_names = {t[0] for t in fitted_transformers}\n+                filtered_Xs = []\n+                for i, (name, trans, cols) in enumerate(self.transformers_):\n+                    if name in fitted_transformer_names and i < len(Xs):\n+                        filtered_Xs.append(Xs[i])\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +969,70 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n+\n+def _add_prefix_for_feature_names_out(self, transformers):\n+    feature_names_outs = []\n+    for name, feature_names_out in transformers:\n+        if feature_names_out is None:\n+            feature_names_outs.append(None)\n+        else:\n+            names = np.asarray(feature_names_out, dtype=object)\n+            feature_names_outs.append([f\"{name}__{i}\" for i in names])\n+    return feature_names_outs\n+\n+def _hstack(self, Xs):\n+    \"\"\"\n+    Stacks Xs horizontally.\n+\n+    Supports input types (X): list of\n+        - numpy arrays\n+        - sparse matrices\n+        - dataframes\n+    \"\"\"\n+    if self._n_features == 0:\n+        # No columns were selected\n+        if hasattr(Xs[0], \"iloc\"):\n+            return Xs[0].iloc[:, :0]\n+        else:\n+            return np.empty((Xs[0].shape[0], 0))\n+\n+    config = _get_output_config(\"transform\", self)\n+    if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n+        pd = check_pandas_support(\"transform\")\n+        output = pd.concat(Xs, axis=1)\n+        # if all estimators define feature_names_out, then try to use them\n+        if not self.verbose_feature_names_out:\n+            return output\n+        \n+        # Get fitted transformers and their corresponding outputs\n+        fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+        \n+        # Filter Xs to match the fitted transformers that produced non-empty outputs\n+        transformer_names = [name for name, _, _ in fitted_transformers]\n+        non_empty_indices = [i for i, X in enumerate(Xs) if X.shape[1] > 0]\n+        \n+        if len(non_empty_indices) != len(transformer_names):\n+            # Mismatch between non-empty outputs and fitted transformers\n+            # This can happen when some transformers produce empty outputs\n+            # In this case, we need to align them properly\n+            filtered_Xs = [Xs[i] for i in non_empty_indices]\n+            if len(filtered_Xs) == len(transformer_names):\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+            else:\n+                # Fallback: use the original output without custom naming\n+                return output\n+        else:\n+            feature_names_outs = [X.columns for X in Xs if X.shape[1] > 0]\n+        \n+        names_out = self._add_prefix_for_feature_names_out(\n+            list(zip(transformer_names, feature_names_outs))\n         )\n+        output.columns = list(chain.from_iterable(names_out))\n+        return output\n+    elif sparse.issparse(Xs[0]):\n+        return sparse.hstack(Xs).tocsr()\n+    else:\n+        return np.hstack(Xs)\n     else:\n         return False\n \n",
    "variant_1": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..756cf765c 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,28 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+            if self.verbose_feature_names_out:\n+                # If all transformers produce empty outputs, return early\n+                if not any(X.shape[1] > 0 for X in Xs):\n+                    return output\n+                \n+                # Get transformer names from _iter to ensure consistency\n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +872,51 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers to ensure consistent filtering\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                  if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +965,22 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n-        )\n+\n+        if self.verbose_feature_names_out:\n+            # Get the fitted transformers that actually have features\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            transformer_names = [t[0] for t in fitted_transformers]\n+            \n+            # Filter Xs to match the filtered transformer names\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            \n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n+            output.columns = names_out\n     else:\n         return False\n \n",
    "variant_2": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..54857f646 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,26 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+            if self.verbose_feature_names_out:\n+                # If all transformers are dropped/empty, return early\n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                if not transformer_names:\n+                    return output\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +870,54 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers to ensure consistent filtering\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names to ensure consistency\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +966,22 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n-        )\n+\n+        if self.verbose_feature_names_out:\n+            # Get the feature names from the transformers\n+            transformer_names = [\n+                t[0] for t in self._iter(fitted=True, replace_strings=True)\n+            ]\n+            # Filter Xs to match the filtered transformer names\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n+            output.columns = names_out\n     else:\n         return False\n \n",
    "variant_3": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..2f2834fb6 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,24 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+                if self.verbose_feature_names_out:\n+                    # Get the transformer names from _iter which filters out empty transformers\n+                    transformer_names = [\n+                        t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                    ]\n+                    \n+                    # Filter Xs to match the filtered transformer names\n+                    fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                    fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                      if any(ft[0] == name for ft in fitted_transformers)]\n+                    filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                    \n+                    feature_names_outs = [X.columns for X in filtered_Xs]\n+                    names_out = self._add_prefix_for_feature_names_out(\n+                        list(zip(transformer_names, feature_names_outs))\n+                    )\n+                    output.columns = names_out\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +868,54 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers to ensure consistent filtering\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +964,22 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n-        )\n+\n+        if self.verbose_feature_names_out:\n+            # Get the feature names from the transformers that actually produced output\n+            transformer_names = [\n+                t[0] for t in self._iter(fitted=True, replace_strings=True)\n+            ]\n+            # Filter Xs to match the filtered transformer names\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n+            output.columns = names_out\n     else:\n         return False\n \n",
    "variant_4": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..55a0deeb9 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,20 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+                # List of tuples (name, feature_names_out)\n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +864,56 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers and their indices to ensure consistency\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_indices = []\n+                for i, (name, trans, cols) in enumerate(self.transformers_):\n+                    if any(ft[0] == name for ft in fitted_transformers):\n+                        fitted_indices.append(i)\n+                \n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                  if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +962,22 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n-        )\n+\n+        if self.verbose_feature_names_out:\n+            # Get the feature names from the transformers\n+            transformer_names = [\n+                t[0] for t in self._iter(fitted=True, replace_strings=True)\n+            ]\n+            # Filter Xs to match the filtered transformer names\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n+            output.columns = names_out\n     else:\n         return False\n \n",
    "variant_5": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..bf568ec1b 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,22 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+            # Get names of transformers that actually produced output\n+            transformer_names = [\n+                t[0] for t in self._iter(fitted=True, replace_strings=True)\n+            ]\n+            \n+            # Filter Xs to match the filtered transformer names\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            \n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +866,54 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers to ensure consistent filtering\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                  if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,9 +962,21 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n+\n+        if not self.verbose_feature_names_out:\n+            return output\n+\n+        transformer_names = [\n+            t[0] for t in self._iter(fitted=True, replace_strings=True)\n+        ]\n+        # Filter Xs to match the filtered transformer names\n+        fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+        fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                         if any(ft[0] == name for ft in fitted_transformers)]\n+        filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+        feature_names_outs = [X.columns for X in filtered_Xs]\n+        names_out = self._add_prefix_for_feature_names_out(\n+            list(zip(transformer_names, feature_names_outs))\n         )\n     else:\n         return False\n",
    "variant_6": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..8460f13d3 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,24 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+            if self.verbose_feature_names_out:\n+                # If all transformers were strings (drop/passthrough) then\n+                # verbose_feature_names_out=True is equivalent to\n+                # verbose_feature_names_out=False\n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +868,56 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers and their indices to ensure consistency\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Find indices of fitted transformers in the original transformers_ list\n+                fitted_indices = []\n+                for name, trans, cols in fitted_transformers:\n+                    for i, (orig_name, orig_trans, orig_cols) in enumerate(self.transformers_):\n+                        if orig_name == name:\n+                            fitted_indices.append(i)\n+                            break\n+                \n+                # Filter Xs to match the fitted transformers\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +966,22 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n-        )\n+\n+        if self.verbose_feature_names_out:\n+            # Get the feature names from the transformers\n+            transformer_names = [\n+                t[0] for t in self._iter(fitted=True, replace_strings=True)\n+            ]\n+            # Filter Xs to match the filtered transformer names\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n+            output.columns = names_out\n     else:\n         return False\n \n",
    "variant_7": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..7e72e302e 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,22 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+                # Get transformer names from _iter to ensure consistency\n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +866,54 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers to ensure consistent filtering\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                \n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names from _iter\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                  if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +962,22 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n-        )\n+\n+        if self.verbose_feature_names_out:\n+            # Get the transformer names that were actually fitted and used\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            transformer_names = [t[0] for t in fitted_transformers]\n+            \n+            # Filter Xs to match the filtered transformer names\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            \n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n+            output.columns = names_out\n     else:\n         return False\n \n",
    "variant_8": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..a22994630 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,22 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n+\n+            if not self.verbose_feature_names_out:\n+                return output\n+\n+            transformer_names = [\n+                t[0] for t in self._iter(fitted=True, replace_strings=True)\n+            ]\n+            # Filter Xs to match the filtered transformer names\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n@@ -852,20 +866,58 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n \n+                transformer_names = [\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                ]\n+                # Filter Xs to match the filtered transformer names\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                 if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n+\n                 if not self.verbose_feature_names_out:\n                     return output\n \n+                # Get fitted transformers to ensure consistent filtering\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                transformer_names = [t[0] for t in fitted_transformers]\n+                \n+                # Filter Xs to match the filtered transformer names by finding indices\n+                # of transformers that are included in fitted_transformers\n+                fitted_indices = []\n+                for i, (name, trans, cols) in enumerate(self.transformers_):\n+                    if any(ft[0] == name for ft in fitted_transformers):\n+                        fitted_indices.append(i)\n+                \n+                # Only include Xs that correspond to fitted transformers\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n+                names_out = self._add_prefix_for_feature_names_out(\n+                    list(zip(transformer_names, feature_names_outs))\n+                )\n+                output.columns = names_out\n+                return output\n+\n+\n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Filter Xs to match the filtered transformer names from _iter\n+                fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+                fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                                  if any(ft[0] == name for ft in fitted_transformers)]\n+                filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+                feature_names_outs = [X.columns for X in filtered_Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n@@ -914,10 +966,20 @@ def _is_empty_column_selection(column):\n         return not column.any()\n     elif hasattr(column, \"__len__\"):\n         return (\n-            len(column) == 0\n-            or all(isinstance(col, bool) for col in column)\n-            and not any(column)\n-        )\n+\n+        if self.verbose_feature_names_out:\n+            transformer_names = [\n+                t[0] for t in self._iter(fitted=True, replace_strings=True)\n+            ]\n+            # Filter Xs to match the filtered transformer names\n+            fitted_transformers = list(self._iter(fitted=True, replace_strings=True))\n+            fitted_indices = [i for i, (name, trans, cols) in enumerate(self.transformers_) \n+                             if any(ft[0] == name for ft in fitted_transformers)]\n+            filtered_Xs = [Xs[i] for i in fitted_indices if i < len(Xs)]\n+            feature_names_outs = [X.columns for X in filtered_Xs]\n+            names_out = self._add_prefix_for_feature_names_out(\n+                list(zip(transformer_names, feature_names_outs))\n+            )\n     else:\n         return False\n \n"
  }
}