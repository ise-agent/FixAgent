{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/builders/manpage.py lines 83-87)": "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory for proper man page organization\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
    "Location 2 (/root/hy/projects_3/sphinx/tests/test_build_manpage.py lines 20-20)": "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
    "Location 3 (/root/hy/projects_3/sphinx/tests/test_build_manpage.py lines 36-36)": "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
    "Location 4 (/root/hy/projects_3/sphinx/tests/test_build_manpage.py lines 67-67)": "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/builders/manpage.py lines 83-87)": [
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory (e.g., man1/, man3/, etc.)\n            import os\n            section_dir = path.join(self.outdir, f'man{section}')\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory (e.g., man1, man3, etc.)\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory for proper man page organization\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory for proper man page organization\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory for proper man page organization\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory (e.g., man1, man3, etc.)\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n",
      "\n            targetname = '%s.%s' % (name, section)\n            logger.info(darkgreen(targetname) + ' { ', nonl=True)\n            \n            # Create section subdirectory for proper man page organization\n            section_dir = path.join(self.outdir, f'man{section}')\n            import os\n            os.makedirs(section_dir, exist_ok=True)\n            \n            destination = FileOutput(\n                destination_path=path.join(section_dir, targetname),\n                encoding='utf-8')\n"
    ],
    "Location 2 (/root/hy/projects_3/sphinx/tests/test_build_manpage.py lines 20-20)": [
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
      "\nassert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n",
      "\n    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n"
    ],
    "Location 3 (/root/hy/projects_3/sphinx/tests/test_build_manpage.py lines 36-36)": [
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\ncontent = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n"
    ],
    "Location 4 (/root/hy/projects_3/sphinx/tests/test_build_manpage.py lines 67-67)": [
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n",
      "\n    content = (app.outdir / 'man1' / 'python.1').read_text()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..7b1bd8d52 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,18 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n+            import os\n+            \n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_0": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..6be7d8ac3 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory for proper man page organization\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_1": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..f2056ffe0 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory (e.g., man1/, man3/, etc.)\n+            import os\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_2": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..915fa1bb0 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory (e.g., man1, man3, etc.)\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_3": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..6be7d8ac3 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory for proper man page organization\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_4": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..6be7d8ac3 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory for proper man page organization\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_5": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..7dc973e0c 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..47ef115ff 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_6": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..6be7d8ac3 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory for proper man page organization\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_7": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..915fa1bb0 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory (e.g., man1, man3, etc.)\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n",
    "variant_8": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..6be7d8ac3 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,17 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            \n+            # Create section subdirectory for proper man page organization\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            import os\n+            os.makedirs(section_dir, exist_ok=True)\n+            \n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\ndiff --git a/tests/test_build_manpage.py b/tests/test_build_manpage.py\nindex c3c41a2ae..ab0904695 100644\n--- a/tests/test_build_manpage.py\n+++ b/tests/test_build_manpage.py\n@@ -17,7 +17,8 @@ from sphinx.config import Config\n @pytest.mark.sphinx('man')\n def test_all(app, status, warning):\n     app.builder.build_all()\n-    assert (app.outdir / 'sphinxtests.1').exists()\n+\n+    assert (app.outdir / 'man1' / 'sphinxtests.1').exists()\n \n     content = (app.outdir / 'sphinxtests.1').read_text()\n     assert r'\\fBprint \\fP\\fIi\\fP\\fB\\en\\fP' in content\n@@ -33,7 +34,8 @@ def test_all(app, status, warning):\n @pytest.mark.sphinx('man', testroot='directive-code')\n def test_captioned_code_block(app, status, warning):\n     app.builder.build_all()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n \n     assert ('.sp\\n'\n             'caption \\\\fItest\\\\fP rb\\n'\n@@ -64,5 +66,6 @@ def test_default_man_pages():\n @pytest.mark.sphinx('man', testroot='markup-rubric')\n def test_rubric(app, status, warning):\n     app.build()\n-    content = (app.outdir / 'python.1').read_text()\n+\n+    content = (app.outdir / 'man1' / 'python.1').read_text()\n     assert 'This is a rubric\\n' in content\n"
  }
}