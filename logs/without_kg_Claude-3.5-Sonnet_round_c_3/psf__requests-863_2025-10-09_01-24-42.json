{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/requests/requests/models.py lines 149-152)": "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/requests/requests/models.py lines 149-152)": [
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n",
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n",
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n",
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n",
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n",
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n",
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n",
      "\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if hasattr(v, '__iter__') and not callable(v):\n                # v is a list/iterable of hook functions\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                # v is a single hook function\n                self.register_hook(event=k, hook=v)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_0": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_1": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_2": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_3": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_4": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_5": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_6": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_7": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "variant_8": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..25349c89 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -146,10 +146,17 @@ class Request(object):\n         for event in HOOKS:\n             self.hooks[event] = []\n \n+\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if hasattr(v, '__iter__') and not callable(v):\n+                # v is a list/iterable of hook functions\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                # v is a single hook function\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n"
  }
}