{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/utils/html.py lines 62-77)": "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, use it for JSON serialization. Otherwise, use\n    DjangoJSONEncoder as the default.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
    "Location 2 (/root/hy/projects_3/django/tests/utils_tests/test_html.py lines 214-219)": "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    \n    encoder_class = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, json_str)\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (json_str,)\n    return format_html(template, *args)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/utils/html.py lines 62-77)": [
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, use it as the JSON encoder class. Otherwise, use\n    DjangoJSONEncoder as the default.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, use it for JSON serialization. Otherwise, use\n    DjangoJSONEncoder as the default.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is None, DjangoJSONEncoder will be used. Otherwise, the provided\n    encoder class will be used for JSON serialization.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n    JSON serialization.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \n    If encoder is provided, use it for JSON serialization. Otherwise, use\n    DjangoJSONEncoder as the default.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n"
    ],
    "Location 2 (/root/hy/projects_3/django/tests/utils_tests/test_html.py lines 214-219)": [
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    \n    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, json_str)\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (json_str,)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    \n    encoder_class = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, json_str)\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (json_str,)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    \n    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, json_str)\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (json_str,)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Also\n    wrap the escaped JSON in a script tag.\n    \"\"\"\n    if encoder is None:\n        from django.core.serializers.json import DjangoJSONEncoder\n        encoder_class = DjangoJSONEncoder\n    else:\n        encoder_class = encoder\n    \n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    \n    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    if encoder is None:\n        encoder = DjangoJSONEncoder\n    \n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    \n    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, json_str)\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (json_str,)\n    return format_html(template, *args)\n",
      "\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    \n    encoder_class = encoder or DjangoJSONEncoder\n    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, json_str)\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (json_str,)\n    return format_html(template, *args)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..61a7b62fc0 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used for JSON serialization instead of\n+    the default DjangoJSONEncoder.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..2e35e1b07b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,44 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n+\n     def test_json_script_without_id(self):\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        \"\"\"Test json_script with custom encoder parameter.\"\"\"\n+        import json\n+        \n+        class CustomEncoder(json.JSONEncoder):\n+            def encode(self, obj):\n+                if isinstance(obj, dict) and \"custom\" in obj:\n+                    return '{\"custom\": \"CUSTOM_VALUE\"}'\n+                return super().encode(obj)\n+        \n+        # Test with element_id\n+        result_with_id = json_script(\n+            {\"custom\": \"test\"}, \n+            element_id=\"test_id\", \n+            encoder=CustomEncoder\n+        )\n+        expected_with_id = '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"CUSTOM_VALUE\"}</script>'\n+        self.assertHTMLEqual(result_with_id, expected_with_id)\n+        \n+        # Test without element_id\n+        result_without_id = json_script(\n+            {\"custom\": \"test\"}, \n+            encoder=CustomEncoder\n+        )\n+        expected_without_id = '<script type=\"application/json\">{\"custom\": \"CUSTOM_VALUE\"}</script>'\n+        self.assertHTMLEqual(result_without_id, expected_without_id)\n+        \n+        # Test that default behavior is preserved when encoder=None\n+        result_default = json_script({\"key\": \"value\"}, encoder=None)\n+        expected_default = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result_default, expected_default)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_0": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..a96e2de7a7 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,23 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, use it for JSON serialization. Otherwise, use\n+    DjangoJSONEncoder as the default.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..8067c5dcc1 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    \n+    encoder_class = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, json_str)\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (json_str,)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_1": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..a009908016 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,23 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, use it as the JSON encoder class. Otherwise, use\n+    DjangoJSONEncoder as the default.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..752e98fb6d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    \n+    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, json_str)\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (json_str,)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_2": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..d20b7a22bc 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, use it for JSON serialization. Otherwise, use\n+    DjangoJSONEncoder as the default.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..8067c5dcc1 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    \n+    encoder_class = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, json_str)\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (json_str,)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_3": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..8d8917168d 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,23 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is None, DjangoJSONEncoder will be used. Otherwise, the provided\n+    encoder class will be used for JSON serialization.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..752e98fb6d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    \n+    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, json_str)\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (json_str,)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_4": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..a2534728ad 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,23 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, it will be used instead of DjangoJSONEncoder for\n+    JSON serialization.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..c94858a815 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,27 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Also\n+    wrap the escaped JSON in a script tag.\n+    \"\"\"\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n+    \n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, mark_safe(json_str))\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (mark_safe(json_str),)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_5": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..426f9dd15a 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..7ad5133889 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    \n+    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, mark_safe(json_str))\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (mark_safe(json_str),)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_6": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..426f9dd15a 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..9de8fb273f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n+    \n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, mark_safe(json_str))\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (mark_safe(json_str),)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_7": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..426f9dd15a 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..752e98fb6d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    \n+    encoder_class = encoder if encoder is not None else DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, json_str)\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (json_str,)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n",
    "variant_8": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..a96e2de7a7 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,23 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+    \n+    If encoder is provided, use it for JSON serialization. Otherwise, use\n+    DjangoJSONEncoder as the default.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        from django.core.serializers.json import DjangoJSONEncoder\n+        encoder_class = DjangoJSONEncoder\n+    else:\n+        encoder_class = encoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 22a43fd4cd..8067c5dcc1 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -211,12 +211,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n-        self.assertHTMLEqual(\n-            json_script({\"key\": \"value\"}),\n-            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n-        )\n \n+def json_script(value, element_id=None, encoder=None):\n+    \"\"\"\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+    \"\"\"\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    \n+    encoder_class = encoder or DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder_class).translate(_json_script_escapes)\n+    if element_id:\n+        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n+        args = (element_id, json_str)\n+    else:\n+        template = '<script type=\"application/json\">{}</script>'\n+        args = (json_str,)\n+    return format_html(template, *args)\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://öäü.com/\", \"http://xn--4ca9at.com/\"),\n"
  }
}