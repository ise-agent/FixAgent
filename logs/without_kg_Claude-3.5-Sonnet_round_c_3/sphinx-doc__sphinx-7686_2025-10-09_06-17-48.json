{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 248-249)": "\n    if doc.objtype == 'module':\n        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[1]]\n",
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 195-220)": "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 250-255)": "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and\n                           (name in obj.__dict__ or \n                            getattr(getattr(obj, name, None), '__module__', None) == obj.__name__)]\n        \n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(all_members)\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and\n                           (name in obj.__dict__ or \n                            getattr(getattr(obj, name, None), '__module__', None) == obj.__name__)]\n        \n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n",
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 261-262)": "\n    elif doc.objtype == 'class':\n        ns['members'] = [member for member in dir(obj) \n                        if imported_members or getattr(getattr(obj, member, None), '__module__', None) == obj.__module__]\n",
    "Location 5 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 256-257)": "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if name.startswith('_') or \n                           getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 248-249)": [
      "\n    if doc.objtype == 'module':\n        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[1]]\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[1]]\n",
      "\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        ns['members'] = [x for x in all_members \n                        if imported_members or not _is_imported_member(obj, x)]\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'function', 'class', 'exception', 'data'}, imported=imported_members)[1]]\n",
      "\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported_members or not _is_imported_member(obj, name, all_members)]\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'function', 'class', 'exception'}, imported=imported_members)[1]]\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = [x for x in dir(obj) if imported_members or getattr(getattr(obj, x, None), '__module__', None) == obj.__name__]\n",
      "\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # Filter out imported members when imported_members is False\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and \n                           hasattr(obj, name) and\n                           getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n"
    ],
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 195-220)": [
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering out imported members.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering out imported ones.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering out imported ones.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering out imported ones.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n",
      "\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n        \"\"\"Get all members of an object, optionally filtering imported members.\"\"\"\n        members = []\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            # skip imported members if expected\n            if imported or getattr(value, '__module__', None) == obj.__name__:\n                members.append(name)\n        return members\n"
    ],
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 250-255)": [
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and\n                           hasattr(obj, name) and\n                           getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(all_members)\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and\n                           hasattr(obj, name) and\n                           getattr(getattr(obj, name, None), '__module__', None) == obj.__module__]\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        filtered_members = []\n        for name in all_members:\n            try:\n                value = getattr(obj, name)\n                if imported_members or getattr(value, '__module__', None) == obj.__name__:\n                    filtered_members.append(name)\n            except AttributeError:\n                # If we can't get the attribute, include it to be safe\n                filtered_members.append(name)\n        ns['members'] = filtered_members\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        filtered_members = []\n        for name in all_members:\n            try:\n                value = getattr(obj, name)\n                if imported_members or getattr(value, '__module__', None) == obj.__module__:\n                    filtered_members.append(name)\n            except AttributeError:\n                # If we can't get the attribute, include it to be safe\n                filtered_members.append(name)\n        ns['members'] = filtered_members\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            filtered_members = []\n            for member_name in all_members:\n                try:\n                    member_value = safe_getattr(obj, member_name, None)\n                    if member_value is not None:\n                        member_module = getattr(member_value, '__module__', None)\n                        if member_module == obj.__name__ or member_module is None:\n                            filtered_members.append(member_name)\n                        else:\n                            # Include if it's a built-in or special attribute\n                            if member_name.startswith('__') and member_name.endswith('__'):\n                                filtered_members.append(member_name)\n                    else:\n                        # Include if we can't determine the module (safer default)\n                        filtered_members.append(member_name)\n                except (AttributeError, ImportError):\n                    # Include if we can't safely get the attribute\n                    filtered_members.append(member_name)\n            ns['members'] = filtered_members\n        \n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # For classes, filter out inherited members when imported_members is False\n            ns['members'] = list(obj.__dict__.keys())\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and \n                           hasattr(obj, name) and\n                           getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(all_members)\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and \n                           hasattr(obj, name) and\n                           (name in obj.__dict__ or \n                            getattr(getattr(obj, name, None), '__module__', None) == obj.__module__)]\n        ns['inherited_members'] = \\\n            set(all_members) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported_members or not _is_imported_member(obj, name)]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # Filter out imported members using the same logic as get_members\n            filtered_members = []\n            for name in all_members:\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__name__:\n                        filtered_members.append(name)\n                    elif name in obj.__dict__:\n                        # Include items that are directly defined in the module\n                        filtered_members.append(name)\n                except (AttributeError, ImportError):\n                    # Include items that can't be inspected (likely module-level)\n                    if name in obj.__dict__:\n                        filtered_members.append(name)\n            ns['members'] = filtered_members\n        \n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting for classes too\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # For classes, filter out inherited members when imported_members is False\n            ns['members'] = [name for name in all_members if name in obj.__dict__]\n        \n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # Filter out imported members using the same logic as get_members\n            filtered_members = []\n            for name in all_members:\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__name__:\n                        filtered_members.append(name)\n                except (AttributeError, ImportError):\n                    # If we can't determine the module, include it to be safe\n                    filtered_members.append(name)\n            ns['members'] = filtered_members\n        \n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # For classes, filter based on whether the member is defined in this class\n            filtered_members = []\n            for name in all_members:\n                try:\n                    # Check if the member is defined in this class or its bases\n                    if hasattr(obj, '__dict__') and name in obj.__dict__:\n                        filtered_members.append(name)\n                    elif hasattr(obj, '__mro__'):\n                        # Check if defined in any base class (not imported)\n                        for base in obj.__mro__:\n                            if hasattr(base, '__dict__') and name in base.__dict__:\n                                filtered_members.append(name)\n                                break\n                except (AttributeError, ImportError):\n                    # If we can't determine, include it to be safe\n                    filtered_members.append(name)\n            ns['members'] = filtered_members\n        \n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n",
      "\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and\n                           (name in obj.__dict__ or \n                            getattr(getattr(obj, name, None), '__module__', None) == obj.__name__)]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(all_members)\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        # Filter members based on imported_members setting\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if not name.startswith('_') and\n                           (name in obj.__dict__ or \n                            hasattr(obj.__class__, name))]\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n"
    ],
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 261-262)": [
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'method', 'property'}, imported=imported_members)[0]]\n",
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [member for member in dir(obj) \n                        if imported_members or not _is_imported_member(obj, member)]\n",
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [m for m in dir(obj) if imported_members or getattr(getattr(obj, m, None), '__module__', None) == obj.__module__]\n",
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [member for member in dir(obj) \n                        if imported_members or not _is_imported_member(obj, member)]\n",
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [member for member in dir(obj) \n                        if imported_members or getattr(safe_getattr(obj, member, None), '__module__', None) == obj.__module__]\n",
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'method', 'property'}, imported=imported_members)[1]]\n",
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'method', 'property'}, imported=imported_members)[1]]\n",
      "\n    elif doc.objtype == 'class':\n        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[0]]\n"
    ],
    "Location 5 (/root/hy/projects_3/sphinx/sphinx/ext/autosummary/generate.py lines 256-257)": [
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # Filter out imported members, keeping only those defined in this module\n            ns['members'] = []\n            for name in all_members:\n                try:\n                    value = getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__name__:\n                        ns['members'].append(name)\n                except AttributeError:\n                    # Include attributes that don't have __module__ (like simple variables)\n                    ns['members'].append(name)\n        \n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            ns['members'] = [name for name in all_members \n                           if name.startswith('_') or \n                           getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # Filter out imported members\n            ns['members'] = []\n            for name in all_members:\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__name__:\n                        ns['members'].append(name)\n                except (AttributeError, ImportError):\n                    # Include members we can't inspect\n                    ns['members'].append(name)\n        \n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(all_members)\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__module__]\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n",
      "\n    if doc.objtype == 'module':\n        ns['members'] = [name for name in dir(obj) \n                        if imported_members or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n",
      "\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported or getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(all_members)\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported or getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n",
      "\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        all_members = dir(obj)\n        ns['members'] = [name for name in all_members \n                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n",
      "\n    if doc.objtype == 'module':\n        # Filter members based on imported_members setting\n        all_members = dir(obj)\n        if imported_members:\n            ns['members'] = all_members\n        else:\n            # Filter out imported members, keeping only those defined in this module\n            ns['members'] = []\n            for name in all_members:\n                try:\n                    value = safe_getattr(obj, name)\n                    if getattr(value, '__module__', None) == obj.__name__:\n                        ns['members'].append(name)\n                except AttributeError:\n                    # Include members that don't have __module__ attribute\n                    ns['members'].append(name)\n        \n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..7b5efe7a2 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -245,21 +246,45 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported_members or getattr(value, '__module__', None) == obj.__name__:\n+                all_members.append(name)\n+        ns['members'] = all_members\n+\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n             get_members(obj, {'class'}, imported=imported_members)\n         ns['exceptions'], ns['all_exceptions'] = \\\n             get_members(obj, {'exception'}, imported=imported_members)\n+\n         ns['attributes'], ns['all_attributes'] = \\\n             get_module_attrs(ns['members'])\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported_members or getattr(value, '__module__', None) == obj.__name__:\n+                all_members.append(name)\n+        ns['members'] = all_members\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_0": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..127b728a3 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,59 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[1]]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and\n+                           (name in obj.__dict__ or \n+                            getattr(getattr(obj, name, None), '__module__', None) == obj.__name__)]\n+        \n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(all_members)\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+    elif doc.objtype == 'class':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and\n+                           (name in obj.__dict__ or \n+                            getattr(getattr(obj, name, None), '__module__', None) == obj.__name__)]\n+        \n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+\n+    if doc.objtype == 'module':\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if name.startswith('_') or \n+                           getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +323,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [member for member in dir(obj) \n+                        if imported_members or getattr(getattr(obj, member, None), '__module__', None) == obj.__module__]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_1": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..cbab85ca1 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,64 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[1]]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and\n+                           hasattr(obj, name) and\n+                           getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(all_members)\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+    elif doc.objtype == 'class':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and\n+                           hasattr(obj, name) and\n+                           getattr(getattr(obj, name, None), '__module__', None) == obj.__module__]\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # Filter out imported members, keeping only those defined in this module\n+            ns['members'] = []\n+            for name in all_members:\n+                try:\n+                    value = getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__name__:\n+                        ns['members'].append(name)\n+                except AttributeError:\n+                    # Include attributes that don't have __module__ (like simple variables)\n+                    ns['members'].append(name)\n+        \n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +328,9 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'method', 'property'}, imported=imported_members)[0]]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_2": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..f71040a10 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering out imported members.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,61 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[1]]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        filtered_members = []\n+        for name in all_members:\n+            try:\n+                value = getattr(obj, name)\n+                if imported_members or getattr(value, '__module__', None) == obj.__name__:\n+                    filtered_members.append(name)\n+            except AttributeError:\n+                # If we can't get the attribute, include it to be safe\n+                filtered_members.append(name)\n+        ns['members'] = filtered_members\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+    elif doc.objtype == 'class':\n+        all_members = dir(obj)\n+        filtered_members = []\n+        for name in all_members:\n+            try:\n+                value = getattr(obj, name)\n+                if imported_members or getattr(value, '__module__', None) == obj.__module__:\n+                    filtered_members.append(name)\n+            except AttributeError:\n+                # If we can't get the attribute, include it to be safe\n+                filtered_members.append(name)\n+        ns['members'] = filtered_members\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if name.startswith('_') or \n+                           getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +325,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [member for member in dir(obj) \n+                        if imported_members or not _is_imported_member(obj, member)]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_3": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..c1ffdbecb 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering out imported ones.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,41 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        ns['members'] = [x for x in all_members \n+                        if imported_members or not _is_imported_member(obj, x)]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            filtered_members = []\n+            for member_name in all_members:\n+                try:\n+                    member_value = safe_getattr(obj, member_name, None)\n+                    if member_value is not None:\n+                        member_module = getattr(member_value, '__module__', None)\n+                        if member_module == obj.__name__ or member_module is None:\n+                            filtered_members.append(member_name)\n+                        else:\n+                            # Include if it's a built-in or special attribute\n+                            if member_name.startswith('__') and member_name.endswith('__'):\n+                                filtered_members.append(member_name)\n+                    else:\n+                        # Include if we can't determine the module (safer default)\n+                        filtered_members.append(member_name)\n+                except (AttributeError, ImportError):\n+                    # Include if we can't safely get the attribute\n+                    filtered_members.append(member_name)\n+            ns['members'] = filtered_members\n+        \n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -259,7 +306,48 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # For classes, filter out inherited members when imported_members is False\n+            ns['members'] = list(obj.__dict__.keys())\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+\n+    if doc.objtype == 'module':\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # Filter out imported members\n+            ns['members'] = []\n+            for name in all_members:\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__name__:\n+                        ns['members'].append(name)\n+                except (AttributeError, ImportError):\n+                    # Include members we can't inspect\n+                    ns['members'].append(name)\n+        \n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n+    elif doc.objtype == 'class':\n+        ns['members'] = [m for m in dir(obj) if imported_members or getattr(getattr(obj, m, None), '__module__', None) == obj.__module__]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_4": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..92b92c354 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering out imported ones.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,53 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'function', 'class', 'exception', 'data'}, imported=imported_members)[1]]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and \n+                           hasattr(obj, name) and\n+                           getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(all_members)\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+    elif doc.objtype == 'class':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and \n+                           hasattr(obj, name) and\n+                           (name in obj.__dict__ or \n+                            getattr(getattr(obj, name, None), '__module__', None) == obj.__module__)]\n+        ns['inherited_members'] = \\\n+            set(all_members) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -254,12 +313,26 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ns['exceptions'], ns['all_exceptions'] = \\\n             get_members(obj, {'exception'}, imported=imported_members)\n         ns['attributes'], ns['all_attributes'] = \\\n-            get_module_attrs(ns['members'])\n+            get_module_attrs(all_members)\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__module__]\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+            get_members(obj, {'method'}, ['__init__'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n+    elif doc.objtype == 'class':\n+        ns['members'] = [member for member in dir(obj) \n+                        if imported_members or not _is_imported_member(obj, member)]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_5": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..157d81517 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,29 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported_members or not _is_imported_member(obj, name, all_members)]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported_members or not _is_imported_member(obj, name)]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+\n+    if doc.objtype == 'module':\n+        ns['members'] = [name for name in dir(obj) \n+                        if imported_members or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +293,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [member for member in dir(obj) \n+                        if imported_members or getattr(safe_getattr(obj, member, None), '__module__', None) == obj.__module__]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_6": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..998e75828 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering imported ones.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,35 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'function', 'class', 'exception'}, imported=imported_members)[1]]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # Filter out imported members using the same logic as get_members\n+            filtered_members = []\n+            for name in all_members:\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__name__:\n+                        filtered_members.append(name)\n+                    elif name in obj.__dict__:\n+                        # Include items that are directly defined in the module\n+                        filtered_members.append(name)\n+                except (AttributeError, ImportError):\n+                    # Include items that can't be inspected (likely module-level)\n+                    if name in obj.__dict__:\n+                        filtered_members.append(name)\n+            ns['members'] = filtered_members\n+        \n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -259,7 +300,50 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting for classes too\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # For classes, filter out inherited members when imported_members is False\n+            ns['members'] = [name for name in all_members if name in obj.__dict__]\n+        \n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported or getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(all_members)\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+    elif doc.objtype == 'class':\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported or getattr(getattr(obj, name, None), '__module__', None) == obj.__name__]\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+            get_members(obj, {'method'}, ['__init__'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n+    elif doc.objtype == 'class':\n+        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'method', 'property'}, imported=imported_members)[1]]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_7": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..3a199e816 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering out imported ones.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,31 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        ns['members'] = [x for x in dir(obj) if imported_members or getattr(getattr(obj, x, None), '__module__', None) == obj.__name__]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # Filter out imported members using the same logic as get_members\n+            filtered_members = []\n+            for name in all_members:\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__name__:\n+                        filtered_members.append(name)\n+                except (AttributeError, ImportError):\n+                    # If we can't determine the module, include it to be safe\n+                    filtered_members.append(name)\n+            ns['members'] = filtered_members\n+        \n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -259,7 +296,64 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # For classes, filter based on whether the member is defined in this class\n+            filtered_members = []\n+            for name in all_members:\n+                try:\n+                    # Check if the member is defined in this class or its bases\n+                    if hasattr(obj, '__dict__') and name in obj.__dict__:\n+                        filtered_members.append(name)\n+                    elif hasattr(obj, '__mro__'):\n+                        # Check if defined in any base class (not imported)\n+                        for base in obj.__mro__:\n+                            if hasattr(base, '__dict__') and name in base.__dict__:\n+                                filtered_members.append(name)\n+                                break\n+                except (AttributeError, ImportError):\n+                    # If we can't determine, include it to be safe\n+                    filtered_members.append(name)\n+            ns['members'] = filtered_members\n+        \n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(ns['members'])\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+    elif doc.objtype == 'class':\n+        all_members = dir(obj)\n+        ns['members'] = [name for name in all_members \n+                        if imported or getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+            get_members(obj, {'method'}, ['__init__'])\n+        ns['attributes'], ns['all_attributes'] = \\\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n+    elif doc.objtype == 'class':\n+        ns['members'] = [name for name, value in get_members(obj, {'attribute', 'method', 'property'}, imported=imported_members)[1]]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n",
    "variant_8": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..424401dca 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -192,6 +192,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                            name, exc, type='autosummary')\n             return False\n \n+\n     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                     imported: bool = True) -> Tuple[List[str], List[str]]:\n         items = []  # type: List[str]\n@@ -219,6 +220,19 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                             public.append(name)\n         return public, items\n \n+    def get_all_members(obj: Any, imported: bool = True) -> List[str]:\n+        \"\"\"Get all members of an object, optionally filtering imported members.\"\"\"\n+        members = []\n+        for name in dir(obj):\n+            try:\n+                value = safe_getattr(obj, name)\n+            except AttributeError:\n+                continue\n+            # skip imported members if expected\n+            if imported or getattr(value, '__module__', None) == obj.__name__:\n+                members.append(name)\n+        return members\n+\n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n         attrs, public = [], []\n@@ -245,8 +259,73 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns = {}  # type: Dict[str, Any]\n     ns.update(context)\n \n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # Filter out imported members when imported_members is False\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and \n+                           hasattr(obj, name) and\n+                           getattr(safe_getattr(obj, name, None), '__module__', None) == obj.__name__]\n+\n+    ns = {}  # type: Dict[str, Any]\n+    ns.update(context)\n+\n+    if doc.objtype == 'module':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and\n+                           (name in obj.__dict__ or \n+                            getattr(getattr(obj, name, None), '__module__', None) == obj.__name__)]\n+        ns['functions'], ns['all_functions'] = \\\n+            get_members(obj, {'function'}, imported=imported_members)\n+        ns['classes'], ns['all_classes'] = \\\n+            get_members(obj, {'class'}, imported=imported_members)\n+        ns['exceptions'], ns['all_exceptions'] = \\\n+            get_members(obj, {'exception'}, imported=imported_members)\n+        ns['attributes'], ns['all_attributes'] = \\\n+            get_module_attrs(all_members)\n+        ispackage = hasattr(obj, '__path__')\n+        if ispackage and recursive:\n+            ns['modules'], ns['all_modules'] = get_modules(obj)\n+    elif doc.objtype == 'class':\n+        all_members = dir(obj)\n+        # Filter members based on imported_members setting\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            ns['members'] = [name for name in all_members \n+                           if not name.startswith('_') and\n+                           (name in obj.__dict__ or \n+                            hasattr(obj.__class__, name))]\n+        ns['inherited_members'] = \\\n+            set(dir(obj)) - set(obj.__dict__.keys())\n+        ns['methods'], ns['all_methods'] = \\\n+\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        # Filter members based on imported_members setting\n+        all_members = dir(obj)\n+        if imported_members:\n+            ns['members'] = all_members\n+        else:\n+            # Filter out imported members, keeping only those defined in this module\n+            ns['members'] = []\n+            for name in all_members:\n+                try:\n+                    value = safe_getattr(obj, name)\n+                    if getattr(value, '__module__', None) == obj.__name__:\n+                        ns['members'].append(name)\n+                except AttributeError:\n+                    # Include members that don't have __module__ attribute\n+                    ns['members'].append(name)\n+        \n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -258,8 +337,9 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         ispackage = hasattr(obj, '__path__')\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n+\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [name for name, value in get_members(obj, set(), imported=imported_members)[0]]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n"
  }
}