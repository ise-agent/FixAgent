{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/sql/compiler.py lines 730-747)": "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if (field.is_relation and opts.ordering and \n            getattr(field, 'attname', None) != name and \n            name != 'pk' and \n            not (pieces[-1] == getattr(field, 'attname', None))):\n            # Firstly, avoid infinite loops.\n            already_seen = already_seen or set()\n            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n            if join_tuple in already_seen:\n                raise FieldError('Infinite loop caused by ordering.')\n            already_seen.add(join_tuple)\n\n            results = []\n            for item in opts.ordering:\n                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                    item = item.desc() if descending else item.asc()\n                if isinstance(item, OrderBy):\n                    results.append((item, False))\n                    continue\n                results.extend(self.find_ordering_name(item, opts, alias,\n                                                       order, already_seen))\n            return results\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/sql/compiler.py lines 730-747)": [
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n            # Check if we're ordering by the foreign key field directly (e.g., 'record__root_id')\n            # In this case, we should not apply the related model's default ordering\n            field_name = pieces[-1]\n            if field_name == getattr(field, 'attname', None):\n                # We're ordering by the foreign key field directly, don't apply related model ordering\n                targets, alias, _ = self.query.trim_joins(targets, joins, path)\n                return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n            \n            # Firstly, avoid infinite loops.\n            already_seen = already_seen or set()\n            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n            if join_tuple in already_seen:\n                raise FieldError('Infinite loop caused by ordering.')\n            already_seen.add(join_tuple)\n\n            results = []\n            for item in opts.ordering:\n                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                    item = item.desc() if descending else item.asc()\n                if isinstance(item, OrderBy):\n                    results.append((item, False))\n                    continue\n                results.extend(self.find_ordering_name(item, opts, alias,\n                                                       order, already_seen))\n            return results\n",
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n            # Check if we're ordering by the foreign key field directly (e.g., \"record__root_id\")\n            # In this case, we should not apply the related model's default ordering\n            field_name = pieces[-1]\n            if field_name == getattr(field, 'attname', None):\n                # We're ordering by the foreign key field directly, don't apply related ordering\n                pass\n            else:\n                # Firstly, avoid infinite loops.\n                already_seen = already_seen or set()\n                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n                if join_tuple in already_seen:\n                    raise FieldError('Infinite loop caused by ordering.')\n                already_seen.add(join_tuple)\n\n                results = []\n                for item in opts.ordering:\n                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                        item = item.desc() if descending else item.asc()\n                    if isinstance(item, OrderBy):\n                        results.append((item, False))\n                        continue\n                    results.extend(self.find_ordering_name(item, opts, alias,\n                                                           order, already_seen))\n                return results\n",
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n            # Check if we're ordering by the foreign key field directly (e.g., 'record__root_id')\n            # In this case, we should not apply the related model's default ordering\n            field_name = pieces[-1]\n            if field_name == getattr(field, 'attname', None):\n                # We're ordering by the foreign key field directly, so don't apply related model ordering\n                pass\n            else:\n                # Firstly, avoid infinite loops.\n                already_seen = already_seen or set()\n                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n                if join_tuple in already_seen:\n                    raise FieldError('Infinite loop caused by ordering.')\n                already_seen.add(join_tuple)\n\n                results = []\n                for item in opts.ordering:\n                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                        item = item.desc() if descending else item.asc()\n                    if isinstance(item, OrderBy):\n                        results.append((item, False))\n                        continue\n                    results.extend(self.find_ordering_name(item, opts, alias,\n                                                           order, already_seen))\n                return results\n",
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        # Also check if we're ordering by the foreign key field directly (e.g., field__foreignkey_id)\n        is_fk_field_direct = (field.is_relation and \n                              pieces[-1] == getattr(field, 'attname', None) and \n                              pieces[-1].endswith('_id'))\n        if (field.is_relation and opts.ordering and \n            getattr(field, 'attname', None) != name and \n            name != 'pk' and \n            not is_fk_field_direct):\n            # Firstly, avoid infinite loops.\n            already_seen = already_seen or set()\n            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n            if join_tuple in already_seen:\n                raise FieldError('Infinite loop caused by ordering.')\n            already_seen.add(join_tuple)\n\n            results = []\n            for item in opts.ordering:\n                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                    item = item.desc() if descending else item.asc()\n                if isinstance(item, OrderBy):\n                    results.append((item, False))\n                    continue\n                results.extend(self.find_ordering_name(item, opts, alias,\n                                                       order, already_seen))\n            return results\n",
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n            # Check if we're ordering by the foreign key field directly (e.g., record__root_id)\n            # In this case, we should not apply the related model's default ordering\n            field_name = pieces[-1]\n            if field_name == getattr(field, 'attname', None):\n                # We're ordering by the foreign key field directly, skip default ordering\n                pass\n            else:\n                # Firstly, avoid infinite loops.\n                already_seen = already_seen or set()\n                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n                if join_tuple in already_seen:\n                    raise FieldError('Infinite loop caused by ordering.')\n                already_seen.add(join_tuple)\n\n                results = []\n                for item in opts.ordering:\n                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                        item = item.desc() if descending else item.asc()\n                    if isinstance(item, OrderBy):\n                        results.append((item, False))\n                        continue\n                    results.extend(self.find_ordering_name(item, opts, alias,\n                                                           order, already_seen))\n                return results\n",
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if (field.is_relation and opts.ordering and \n            getattr(field, 'attname', None) != pieces[-1] and \n            name != 'pk'):\n            # Firstly, avoid infinite loops.\n            already_seen = already_seen or set()\n            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n            if join_tuple in already_seen:\n                raise FieldError('Infinite loop caused by ordering.')\n            already_seen.add(join_tuple)\n\n            results = []\n            for item in opts.ordering:\n                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                    item = item.desc() if descending else item.asc()\n                if isinstance(item, OrderBy):\n                    results.append((item, False))\n                    continue\n                results.extend(self.find_ordering_name(item, opts, alias,\n                                                       order, already_seen))\n            return results\n",
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n            # Check if we're ordering by the foreign key field directly (e.g., 'record__root_id')\n            # In this case, we should not apply the related model's default ordering\n            field_name = pieces[-1]\n            if field_name == getattr(field, 'attname', None):\n                # We're ordering by the foreign key field directly, skip default ordering\n                pass\n            else:\n                # Firstly, avoid infinite loops.\n                already_seen = already_seen or set()\n                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n                if join_tuple in already_seen:\n                    raise FieldError('Infinite loop caused by ordering.')\n                already_seen.add(join_tuple)\n\n                results = []\n                for item in opts.ordering:\n                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                        item = item.desc() if descending else item.asc()\n                    if isinstance(item, OrderBy):\n                        results.append((item, False))\n                        continue\n                    results.extend(self.find_ordering_name(item, opts, alias,\n                                                           order, already_seen))\n                return results\n",
      "\n        # If we get to this point and the field is a relation to another model,\n        # append the default ordering for that model unless it is the pk\n        # shortcut or the attribute name of the field that is specified.\n        if (field.is_relation and opts.ordering and \n            getattr(field, 'attname', None) != name and \n            name != 'pk' and \n            not (pieces and pieces[-1] == getattr(field, 'attname', None))):\n            # Firstly, avoid infinite loops.\n            already_seen = already_seen or set()\n            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n            if join_tuple in already_seen:\n                raise FieldError('Infinite loop caused by ordering.')\n            already_seen.add(join_tuple)\n\n            results = []\n            for item in opts.ordering:\n                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n                    item = item.desc() if descending else item.asc()\n                if isinstance(item, OrderBy):\n                    results.append((item, False))\n                    continue\n                results.extend(self.find_ordering_name(item, opts, alias,\n                                                       order, already_seen))\n            return results\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..0e70062af8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,13 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+\n+        # Check if we're ordering by a foreign key's _id field directly\n+        # by seeing if the lookup name ends with the field's attname\n+        field_attname = getattr(field, 'attname', None)\n+        is_direct_fk_field = (field_attname and name.endswith(LOOKUP_SEP + field_attname))\n+        \n+        if field.is_relation and opts.ordering and field_attname != name and name != 'pk' and not is_direct_fk_field:\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n",
    "variant_0": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..13782930ba 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,14 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+\n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+        if (field.is_relation and opts.ordering and \n+            getattr(field, 'attname', None) != name and \n+            name != 'pk' and \n+            not (pieces[-1] == getattr(field, 'attname', None))):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n",
    "variant_1": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..a930a53266 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -724,10 +724,22 @@ class SQLCompiler:\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n         if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+            # Check if we're ordering by the foreign key field directly (e.g., 'record__root_id')\n+            # In this case, we should not apply the related model's default ordering\n+            field_name = pieces[-1]\n+            if field_name == getattr(field, 'attname', None):\n+                # We're ordering by the foreign key field directly, don't apply related model ordering\n+                targets, alias, _ = self.query.trim_joins(targets, joins, path)\n+                return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n+            \n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n",
    "variant_2": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..3e75a158d3 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -724,27 +724,38 @@ class SQLCompiler:\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n         if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n-            # Firstly, avoid infinite loops.\n-            already_seen = already_seen or set()\n-            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n-            if join_tuple in already_seen:\n-                raise FieldError('Infinite loop caused by ordering.')\n-            already_seen.add(join_tuple)\n-\n-            results = []\n-            for item in opts.ordering:\n-                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n-                    item = item.desc() if descending else item.asc()\n-                if isinstance(item, OrderBy):\n-                    results.append((item, False))\n-                    continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n-            return results\n+            # Check if we're ordering by the foreign key field directly (e.g., \"record__root_id\")\n+            # In this case, we should not apply the related model's default ordering\n+            field_name = pieces[-1]\n+            if field_name == getattr(field, 'attname', None):\n+                # We're ordering by the foreign key field directly, don't apply related ordering\n+                pass\n+            else:\n+                # Firstly, avoid infinite loops.\n+                already_seen = already_seen or set()\n+                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n+                if join_tuple in already_seen:\n+                    raise FieldError('Infinite loop caused by ordering.')\n+                already_seen.add(join_tuple)\n+\n+                results = []\n+                for item in opts.ordering:\n+                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n+                        item = item.desc() if descending else item.asc()\n+                    if isinstance(item, OrderBy):\n+                        results.append((item, False))\n+                        continue\n+                    results.extend(self.find_ordering_name(item, opts, alias,\n+                                                           order, already_seen))\n+                return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n \n",
    "variant_3": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..abfb2772cd 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -724,27 +724,38 @@ class SQLCompiler:\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n         if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n-            # Firstly, avoid infinite loops.\n-            already_seen = already_seen or set()\n-            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n-            if join_tuple in already_seen:\n-                raise FieldError('Infinite loop caused by ordering.')\n-            already_seen.add(join_tuple)\n-\n-            results = []\n-            for item in opts.ordering:\n-                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n-                    item = item.desc() if descending else item.asc()\n-                if isinstance(item, OrderBy):\n-                    results.append((item, False))\n-                    continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n-            return results\n+            # Check if we're ordering by the foreign key field directly (e.g., 'record__root_id')\n+            # In this case, we should not apply the related model's default ordering\n+            field_name = pieces[-1]\n+            if field_name == getattr(field, 'attname', None):\n+                # We're ordering by the foreign key field directly, so don't apply related model ordering\n+                pass\n+            else:\n+                # Firstly, avoid infinite loops.\n+                already_seen = already_seen or set()\n+                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n+                if join_tuple in already_seen:\n+                    raise FieldError('Infinite loop caused by ordering.')\n+                already_seen.add(join_tuple)\n+\n+                results = []\n+                for item in opts.ordering:\n+                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n+                        item = item.desc() if descending else item.asc()\n+                    if isinstance(item, OrderBy):\n+                        results.append((item, False))\n+                        continue\n+                    results.extend(self.find_ordering_name(item, opts, alias,\n+                                                           order, already_seen))\n+                return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n \n",
    "variant_4": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..372b584ede 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,18 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+\n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+        # Also check if we're ordering by the foreign key field directly (e.g., field__foreignkey_id)\n+        is_fk_field_direct = (field.is_relation and \n+                              pieces[-1] == getattr(field, 'attname', None) and \n+                              pieces[-1].endswith('_id'))\n+        if (field.is_relation and opts.ordering and \n+            getattr(field, 'attname', None) != name and \n+            name != 'pk' and \n+            not is_fk_field_direct):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n",
    "variant_5": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..c6e8f4fa1a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -724,27 +724,38 @@ class SQLCompiler:\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n         if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n-            # Firstly, avoid infinite loops.\n-            already_seen = already_seen or set()\n-            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n-            if join_tuple in already_seen:\n-                raise FieldError('Infinite loop caused by ordering.')\n-            already_seen.add(join_tuple)\n-\n-            results = []\n-            for item in opts.ordering:\n-                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n-                    item = item.desc() if descending else item.asc()\n-                if isinstance(item, OrderBy):\n-                    results.append((item, False))\n-                    continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n-            return results\n+            # Check if we're ordering by the foreign key field directly (e.g., record__root_id)\n+            # In this case, we should not apply the related model's default ordering\n+            field_name = pieces[-1]\n+            if field_name == getattr(field, 'attname', None):\n+                # We're ordering by the foreign key field directly, skip default ordering\n+                pass\n+            else:\n+                # Firstly, avoid infinite loops.\n+                already_seen = already_seen or set()\n+                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n+                if join_tuple in already_seen:\n+                    raise FieldError('Infinite loop caused by ordering.')\n+                already_seen.add(join_tuple)\n+\n+                results = []\n+                for item in opts.ordering:\n+                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n+                        item = item.desc() if descending else item.asc()\n+                    if isinstance(item, OrderBy):\n+                        results.append((item, False))\n+                        continue\n+                    results.extend(self.find_ordering_name(item, opts, alias,\n+                                                           order, already_seen))\n+                return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n \n",
    "variant_6": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..267712abbf 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,13 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+\n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+        if (field.is_relation and opts.ordering and \n+            getattr(field, 'attname', None) != pieces[-1] and \n+            name != 'pk'):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n",
    "variant_7": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..9fa40cf4b4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -724,27 +724,38 @@ class SQLCompiler:\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n         if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n-            # Firstly, avoid infinite loops.\n-            already_seen = already_seen or set()\n-            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n-            if join_tuple in already_seen:\n-                raise FieldError('Infinite loop caused by ordering.')\n-            already_seen.add(join_tuple)\n-\n-            results = []\n-            for item in opts.ordering:\n-                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n-                    item = item.desc() if descending else item.asc()\n-                if isinstance(item, OrderBy):\n-                    results.append((item, False))\n-                    continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n-            return results\n+            # Check if we're ordering by the foreign key field directly (e.g., 'record__root_id')\n+            # In this case, we should not apply the related model's default ordering\n+            field_name = pieces[-1]\n+            if field_name == getattr(field, 'attname', None):\n+                # We're ordering by the foreign key field directly, skip default ordering\n+                pass\n+            else:\n+                # Firstly, avoid infinite loops.\n+                already_seen = already_seen or set()\n+                join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n+                if join_tuple in already_seen:\n+                    raise FieldError('Infinite loop caused by ordering.')\n+                already_seen.add(join_tuple)\n+\n+                results = []\n+                for item in opts.ordering:\n+                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n+                        item = item.desc() if descending else item.asc()\n+                    if isinstance(item, OrderBy):\n+                        results.append((item, False))\n+                        continue\n+                    results.extend(self.find_ordering_name(item, opts, alias,\n+                                                           order, already_seen))\n+                return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n \n",
    "variant_8": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..173b6dd321 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,14 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+\n+        # If we get to this point and the field is a relation to another model,\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+        if (field.is_relation and opts.ordering and \n+            getattr(field, 'attname', None) != name and \n+            name != 'pk' and \n+            not (pieces and pieces[-1] == getattr(field, 'attname', None))):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n"
  }
}