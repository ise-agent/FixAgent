{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 319-328)": "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the table name hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
    "Location 2 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 330-347)": "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
    "Location 3 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 349-368)": "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is custom and hasn't changed, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.real_models:\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.model_name,\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
    "Location 4 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 370-377)": "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the model has a custom db_table that doesn't change, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Rename the table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
    "Location 5 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 320-322)": "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the table names are the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 319-328)": [
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are identical (e.g., custom db_table), skip all operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table names are the same, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table name doesn't change, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are the same (custom db_table), no database operations needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 330-347)": [
      "\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the database table name doesn't change, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table is custom and hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is the same, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is the same, this is a no-op rename\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the database table name doesn't change, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table name doesn't change, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table name hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n"
    ],
    "Location 3 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 349-368)": [
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is explicitly set and hasn't changed, skip all operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts.app_label == app_label:\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.model_name,\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is custom and hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.get_models():\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.model_name,\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is custom and hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Rename the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.get_models():\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.model_name,\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are identical (e.g., custom db_table), skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.get_models():\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.model_name,\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are identical (e.g., custom db_table), skip all operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.get_models():\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.model_name,\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Rename the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.get_models():\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.model_name,\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is custom and unchanged, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Rename the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.get_models():\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.object_name.lower(),\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    schema_editor.alter_field(\n                        model,\n                        related_object.field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are the same, this is a no-op at the database level\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.opts in from_state.apps.get_models():\n                    related_key = (\n                        related_object.opts.app_label,\n                        related_object.opts.object_name.lower(),\n                    )\n                    to_field = to_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    # Use from_field to avoid foreign key constraint target errors\n                    from_field = from_state.apps.get_model(\n                        *related_key\n                    )._meta.get_field(related_object.field.name)\n                    from_field.remote_field.model = old_model\n                    to_field.remote_field.model = new_model\n                    schema_editor.alter_field(\n                        from_state.apps.get_model(*related_key),\n                        from_field,\n                        to_field,\n                    )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n"
    ],
    "Location 4 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 370-377)": [
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If both models have the same db_table, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    related_object.related_model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are the same, this is a no-op at the database level\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    related_object.related_model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table name doesn't change (custom db_table), skip all operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Rename the table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If both models have the same db_table, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n                \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    related_object.related_model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If both models have the same db_table, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    related_object.related_model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Rename the table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    related_object.related_model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table name hasn't changed (e.g., custom db_table), skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            \n            # If the table names are the same, this is a no-op for the database\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            \n            # Rename the table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Rename all references to the old model in other fields.\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n"
    ],
    "Location 5 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 320-322)": [
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the table name doesn't change, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the database table name hasn't changed, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the table name doesn't change, skip all database operations\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table names are the same, this is a no-op\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If the db_table is the same, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n",
      "\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # If both models use the same db_table, no database operations are needed\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..ceec7baf08 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,16 +316,23 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the db_table is the same, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n                 old_model._meta.db_table,\n                 new_model._meta.db_table,\n             )\n+            )\n+            # Alter the fields pointing to us\n+\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -346,6 +353,8 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,6 +376,7 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n         self.new_name, self.old_name = self.old_name, self.new_name\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..aff3d1d3a3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,44 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the table name hasn't changed, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the db_table is the same, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +380,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is custom and hasn't changed, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.real_models:\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.model_name,\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +433,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the model has a custom db_table that doesn't change, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Rename the table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..80d89a5dbb 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,45 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is the same, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the database table name doesn't change, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +381,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is explicitly set and hasn't changed, skip all operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts.app_label == app_label:\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.model_name,\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +434,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If both models have the same db_table, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    related_object.related_model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..dd575b3691 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,48 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are identical (e.g., custom db_table), skip all operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is the same, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +384,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is custom and hasn't changed, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.get_models():\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.model_name,\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +437,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are the same, this is a no-op at the database level\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    related_object.related_model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..d92cfbf56b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,46 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table names are the same, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the db_table is custom and hasn't changed, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +382,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is custom and hasn't changed, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Rename the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.get_models():\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.model_name,\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +435,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table name doesn't change (custom db_table), skip all operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Rename the table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..fd941bdd7f 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,46 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the db_table is the same, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is the same, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +382,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are identical (e.g., custom db_table), skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.get_models():\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.model_name,\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +435,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If both models have the same db_table, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    related_object.related_model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..d74dd109d4 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,46 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the db_table hasn't changed, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is the same, this is a no-op rename\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +382,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are identical (e.g., custom db_table), skip all operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.get_models():\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.model_name,\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +435,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If both models have the same db_table, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    related_object.related_model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..f712d0fd85 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,48 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table name doesn't change, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the database table name doesn't change, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +384,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are the same, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Rename the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.get_models():\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.model_name,\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +437,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is the same, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Rename the table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    related_object.related_model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..08844820c8 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,48 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are the same (custom db_table), no database operations needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table name doesn't change, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +384,38 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the db_table is custom and unchanged, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Rename the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.get_models():\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.object_name.lower(),\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    schema_editor.alter_field(\n+                        model,\n+                        related_object.field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +437,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table name hasn't changed (e.g., custom db_table), skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..7a0525c944 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -316,10 +316,46 @@ class RenameModel(ModelOperation):\n     def state_forwards(self, app_label, state):\n         state.rename_model(app_label, self.old_name, self.new_name)\n \n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the db_table is the same, no database operations are needed\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table name hasn't changed, skip all database operations\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n@@ -346,6 +382,44 @@ class RenameModel(ModelOperation):\n                     to_field,\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are the same, this is a no-op at the database level\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+                \n+            # Move the main table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Alter the fields pointing to us\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.opts in from_state.apps.get_models():\n+                    related_key = (\n+                        related_object.opts.app_label,\n+                        related_object.opts.object_name.lower(),\n+                    )\n+                    to_field = to_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    # Use from_field to avoid foreign key constraint target errors\n+                    from_field = from_state.apps.get_model(\n+                        *related_key\n+                    )._meta.get_field(related_object.field.name)\n+                    from_field.remote_field.model = old_model\n+                    to_field.remote_field.model = new_model\n+                    schema_editor.alter_field(\n+                        from_state.apps.get_model(*related_key),\n+                        from_field,\n+                        to_field,\n+                    )\n+            # Rename M2M fields whose name is based on this model's name.\n             fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n@@ -367,14 +441,62 @@ class RenameModel(ModelOperation):\n                     new_m2m_model._meta.get_field(new_model._meta.model_name),\n                 )\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.new_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.old_name)\n+            \n+            # If the table names are the same, this is a no-op for the database\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n+            \n+            # Rename the table\n+            schema_editor.alter_db_table(\n+                new_model,\n+                old_model._meta.db_table,\n+                new_model._meta.db_table,\n+            )\n+            # Rename all references to the old model in other fields.\n+            for related_object in old_model._meta.related_objects:\n+                if related_object.related_model == old_model:\n+                    model = new_model\n+                    related_key = (app_label, self.new_name_lower)\n+                else:\n+                    model = related_object.related_model\n+                    related_key = (\n+                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.model_name,\n+                    )\n+                to_field = to_state.apps.get_model(\n+                    *related_key\n+                )._meta.get_field(related_object.field.name)\n+                schema_editor.alter_field(\n+                    model,\n+                    related_object.field,\n+                    to_field,\n+                )\n+            # Rename M2M fields whose name is based on this model's name.\n+            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n+            for (old_field, new_field) in fields:\n+                # Skip self-referential fields as these are renamed above.\n+                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n+                    continue\n+                # Rename the M2M table that's based on this model's name.\n+                old_m2m_model = old_field.remote_field.through\n+                new_m2m_model = new_field.remote_field.through\n+                schema_editor.alter_db_table(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.db_table,\n+                    new_m2m_model._meta.db_table,\n+                )\n+                # Rename the column in the M2M table that's based on this\n+                # model's name.\n+                schema_editor.alter_field(\n+                    new_m2m_model,\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                )\n \n     def references_model(self, name, app_label):\n         return (\n"
  }
}