{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/utils/_pprint.py lines 97-101)": "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                # Both are array-like, use numpy array_equal for safe comparison\n                values_equal = np.array_equal(v, init_params[k])\n            else:\n                # At least one is scalar, use regular comparison\n                values_equal = (v == init_params[k])\n        except (ImportError, TypeError, ValueError):\n            # Fallback to regular comparison if numpy is not available or comparison fails\n            values_equal = (v == init_params[k])\n        \n        if (not values_equal and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/utils/_pprint.py lines 1-7)": "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\nfrom inspect import signature\nimport pprint\nimport numpy as np\nfrom collections import OrderedDict\nfrom ..base import BaseEstimator\nfrom .._config import get_config\nfrom . import is_scalar_nan\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/utils/_pprint.py lines 97-101)": [
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                values_equal = np.array_equal(v, init_params[k])\n            else:\n                values_equal = v == init_params[k]\n        except (ImportError, TypeError, ValueError):\n            # Fallback to regular comparison if numpy is not available or comparison fails\n            values_equal = v == init_params[k]\n        \n        if (not values_equal and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                # Both are array-like, use numpy.array_equal for safe comparison\n                values_equal = np.array_equal(v, init_params[k])\n            else:\n                # At least one is scalar, use regular comparison\n                values_equal = (v == init_params[k])\n        except (ImportError, TypeError, ValueError):\n            # Fallback to regular comparison if numpy not available or comparison fails\n            values_equal = (v == init_params[k])\n        \n        if (not values_equal and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                values_equal = np.array_equal(v, init_params[k])\n            else:\n                values_equal = v == init_params[k]\n        except (ImportError, TypeError, ValueError):\n            # Fallback to standard comparison if numpy is not available\n            # or if comparison fails\n            values_equal = v == init_params[k]\n        \n        if (not values_equal and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                values_equal = np.array_equal(v, init_params[k])\n            else:\n                values_equal = v == init_params[k]\n        except (ImportError, TypeError, ValueError):\n            # Fallback to regular comparison if numpy is not available or comparison fails\n            values_equal = v == init_params[k]\n        \n        if (not values_equal and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                values_equal = np.array_equal(v, init_params[k])\n            else:\n                values_equal = v == init_params[k]\n        except (ImportError, TypeError, ValueError):\n            # Fallback to original comparison for edge cases\n            values_equal = v == init_params[k]\n        \n        if (not values_equal and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                values_equal = np.array_equal(v, init_params[k])\n            else:\n                values_equal = v == init_params[k]\n        except (ImportError, TypeError, ValueError):\n            # Fallback to original comparison if numpy is not available or comparison fails\n            values_equal = v == init_params[k]\n        \n        if (not values_equal and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            # Check if both values are numpy arrays\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                values_different = not np.array_equal(v, init_params[k])\n            else:\n                values_different = v != init_params[k]\n        except ImportError:\n            # Fallback if numpy is not available\n            values_different = v != init_params[k]\n        \n        if (values_different and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n",
      "\ndef _changed_params(estimator):\n    \"\"\"Return dict (param_name: value) of parameters that were given to\n    estimator with non-default values.\"\"\"\n\n    params = estimator.get_params(deep=False)\n    filtered_params = {}\n    init_func = getattr(estimator.__init__, 'deprecated_original',\n                        estimator.__init__)\n    init_params = signature(init_func).parameters\n    init_params = {name: param.default for name, param in init_params.items()}\n    for k, v in params.items():\n        # Safe comparison that handles both scalars and arrays\n        try:\n            import numpy as np\n            # Check if both values are numpy arrays\n            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n                values_different = not np.array_equal(v, init_params[k])\n            else:\n                values_different = v != init_params[k]\n        except (ImportError, TypeError):\n            # Fallback to regular comparison if numpy is not available or comparison fails\n            values_different = v != init_params[k]\n            \n        if (values_different and\n                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n            filtered_params[k] = v\n    return filtered_params\n"
    ],
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/utils/_pprint.py lines 1-7)": [
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\n",
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\n",
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\n",
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\n",
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\n",
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\n",
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n\n",
      "\n\"\"\"This module contains the _EstimatorPrettyPrinter class used in\nBaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n\n# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n# 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n# All Rights Reserved\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..bfd258cef 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -94,8 +95,32 @@ def _changed_params(estimator):\n                         estimator.__init__)\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n+\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        try:\n+            # Try the normal comparison first (works for scalars)\n+            values_different = (v != init_params[k])\n+        except ValueError:\n+            # Handle numpy arrays and other objects that can't be compared with !=\n+            # For arrays, we need to check if they have the same shape and all elements are equal\n+            try:\n+                import numpy as np\n+                if hasattr(v, 'shape') and hasattr(init_params[k], 'shape'):\n+                    # Both are array-like, use numpy array_equal if available\n+                    values_different = not np.array_equal(v, init_params[k])\n+                else:\n+                    # Fallback: assume they're different if we can't compare them\n+                    values_different = True\n+            except ImportError:\n+                # If numpy is not available, use a basic comparison\n+                try:\n+                    # Try converting to lists for comparison\n+                    values_different = list(v) != list(init_params[k])\n+                except (TypeError, ValueError):\n+                    # If all else fails, assume they're different\n+                    values_different = True\n+        \n+        if (values_different and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_0": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..f32a058ec 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -5,6 +6,13 @@ BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n # 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n # All Rights Reserved\n \n+from inspect import signature\n+import pprint\n+import numpy as np\n+from collections import OrderedDict\n+from ..base import BaseEstimator\n+from .._config import get_config\n+from . import is_scalar_nan\n # Authors: Fred L. Drake, Jr. <fdrake@acm.org> (built-in CPython pprint module)\n #          Nicolas Hug (scikit-learn specific changes)\n \n@@ -84,6 +92,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +114,20 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                # Both are array-like, use numpy array_equal for safe comparison\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                # At least one is scalar, use regular comparison\n+                values_equal = (v == init_params[k])\n+        except (ImportError, TypeError, ValueError):\n+            # Fallback to regular comparison if numpy is not available or comparison fails\n+            values_equal = (v == init_params[k])\n+        \n+        if (not values_equal and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_1": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..cdc76c863 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -84,6 +85,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +107,18 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                values_equal = v == init_params[k]\n+        except (ImportError, TypeError, ValueError):\n+            # Fallback to regular comparison if numpy is not available or comparison fails\n+            values_equal = v == init_params[k]\n+        \n+        if (not values_equal and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_2": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..04f7ab764 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -84,6 +85,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +107,20 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                # Both are array-like, use numpy.array_equal for safe comparison\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                # At least one is scalar, use regular comparison\n+                values_equal = (v == init_params[k])\n+        except (ImportError, TypeError, ValueError):\n+            # Fallback to regular comparison if numpy not available or comparison fails\n+            values_equal = (v == init_params[k])\n+        \n+        if (not values_equal and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_3": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..cee7937ff 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -84,6 +85,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +107,19 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                values_equal = v == init_params[k]\n+        except (ImportError, TypeError, ValueError):\n+            # Fallback to standard comparison if numpy is not available\n+            # or if comparison fails\n+            values_equal = v == init_params[k]\n+        \n+        if (not values_equal and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_4": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..cdc76c863 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -84,6 +85,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +107,18 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                values_equal = v == init_params[k]\n+        except (ImportError, TypeError, ValueError):\n+            # Fallback to regular comparison if numpy is not available or comparison fails\n+            values_equal = v == init_params[k]\n+        \n+        if (not values_equal and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_5": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..9898058f3 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -84,6 +85,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +107,18 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                values_equal = v == init_params[k]\n+        except (ImportError, TypeError, ValueError):\n+            # Fallback to original comparison for edge cases\n+            values_equal = v == init_params[k]\n+        \n+        if (not values_equal and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_6": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..e5769198a 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -84,6 +85,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +107,18 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                values_equal = np.array_equal(v, init_params[k])\n+            else:\n+                values_equal = v == init_params[k]\n+        except (ImportError, TypeError, ValueError):\n+            # Fallback to original comparison if numpy is not available or comparison fails\n+            values_equal = v == init_params[k]\n+        \n+        if (not values_equal and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_7": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..9d7e65c68 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n@@ -84,6 +85,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +107,19 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            # Check if both values are numpy arrays\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                values_different = not np.array_equal(v, init_params[k])\n+            else:\n+                values_different = v != init_params[k]\n+        except ImportError:\n+            # Fallback if numpy is not available\n+            values_different = v != init_params[k]\n+        \n+        if (values_different and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n",
    "variant_8": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..2058a813e 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -1,10 +1,10 @@\n+\n \"\"\"This module contains the _EstimatorPrettyPrinter class used in\n BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n \n # Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n # 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation;\n # All Rights Reserved\n-\n # Authors: Fred L. Drake, Jr. <fdrake@acm.org> (built-in CPython pprint module)\n #          Nicolas Hug (scikit-learn specific changes)\n \n@@ -84,6 +84,17 @@ class KeyValTupleParam(KeyValTuple):\n     pass\n \n \n+def _changed_params(estimator):\n+    \"\"\"Return dict (param_name: value) of parameters that were given to\n+    estimator with non-default values.\"\"\"\n+\n+    params = estimator.get_params(deep=False)\n+    filtered_params = {}\n+    init_func = getattr(estimator.__init__, 'deprecated_original',\n+                        estimator.__init__)\n+    init_params = signature(init_func).parameters\n+    init_params = {name: param.default for name, param in init_params.items()}\n+\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n@@ -95,7 +106,19 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        # Safe comparison that handles both scalars and arrays\n+        try:\n+            import numpy as np\n+            # Check if both values are numpy arrays\n+            if hasattr(v, '__array__') and hasattr(init_params[k], '__array__'):\n+                values_different = not np.array_equal(v, init_params[k])\n+            else:\n+                values_different = v != init_params[k]\n+        except (ImportError, TypeError):\n+            # Fallback to regular comparison if numpy is not available or comparison fails\n+            values_different = v != init_params[k]\n+            \n+        if (values_different and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n"
  }
}