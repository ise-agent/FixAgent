{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/sql/query.py lines 1077-1083)": "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/sql/query.py lines 1077-1083)": [
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n",
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n",
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n",
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n",
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n",
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n",
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n",
      "\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            if hasattr(value, '_fields'):  # Named tuple\n                resolved_values = [\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                ]\n                return type(value)(*resolved_values)\n            else:  # Regular tuple or list\n                return type(value)(\n                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                    for sub_value in value\n                )\n        return value\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..3fa4c7dd1f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1074,13 +1074,21 @@ class Query(BaseExpression):\n             value = value.resolve_expression(\n                 self, reuse=can_reuse, allow_joins=allow_joins,\n             )\n+\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_0": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_1": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_2": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_3": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_4": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_5": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_6": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_7": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
    "variant_8": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c649a5603f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1069,6 +1069,12 @@ class Query(BaseExpression):\n             sql = '(%s)' % sql\n         return sql, params\n \n+    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if hasattr(value, 'resolve_expression'):\n+            value = value.resolve_expression(\n+                self, reuse=can_reuse, allow_joins=allow_joins,\n+            )\n+\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n@@ -1077,10 +1083,18 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Named tuple\n+                resolved_values = [\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ]\n+                return type(value)(*resolved_values)\n+            else:  # Regular tuple or list\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n+        return value\n         return value\n \n     def solve_lookup_type(self, lookup):\n"
  }
}