{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/base.py lines 1299-1320)": "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
    "Location 2 (/root/hy/projects_3/django/django/db/models/base.py lines 240-268)": "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
    "Location 3 (/root/hy/projects_3/django/django/db/models/options.py lines 271-287)": "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
    "Location 4 (/root/hy/projects_3/django/django/db/models/options.py lines 323-326)": "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
    "Location 5 (/root/hy/projects_3/django/django/db/models/fields/__init__.py lines 159-159)": "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/base.py lines 1299-1320)": [
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/db/models/base.py lines 240-268)": [
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n"
    ],
    "Location 3 (/root/hy/projects_3/django/django/db/models/options.py lines 271-287)": [
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n"
    ],
    "Location 4 (/root/hy/projects_3/django/django/db/models/options.py lines 323-326)": [
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n    @classmethod\n    def _check_default_pk(cls):\n        # Check if this model inherits from parents and any parent has a manually-defined PK\n        if cls._meta.parents:\n            for parent_model in cls._meta.parents:\n                if not parent_model._meta.pk.auto_created:\n                    # Parent had a manually-defined PK, so don't warn about inherited PK\n                    return []\n        \n        # Original logic for non-inherited cases or when all parents have auto-created PKs\n        if (\n            cls._meta.pk.auto_created and\n            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n            not cls._meta.app_config._is_default_auto_field_overridden\n        ):\n            return [\n                checks.Warning(\n                    f\"Auto-created primary key used when not defining a \"\n                    f\"primary key type, by default \"\n                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                    hint=(\n                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                        f\"default_auto_field attribute to point to a subclass \"\n                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                    ),\n                    obj=cls,\n                    id='models.W042',\n                ),\n            ]\n        return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n"
    ],
    "Location 5 (/root/hy/projects_3/django/django/db/models/fields/__init__.py lines 159-159)": [
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n    @classmethod\n    def _check_default_pk(cls):\n        # Check if this model inherits from parents and any parent has a manually-defined PK\n        if cls._meta.parents:\n            for parent_model in cls._meta.parents:\n                if not parent_model._meta.pk.auto_created:\n                    # Parent had a manually-defined PK, so don't warn about inherited PK\n                    return []\n        \n        # Original logic for non-inherited cases or when all parents have auto-created PKs\n        if (\n            cls._meta.pk.auto_created and\n            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n            not cls._meta.app_config._is_default_auto_field_overridden\n        ):\n            return [\n                checks.Warning(\n                    f\"Auto-created primary key used when not defining a \"\n                    f\"primary key type, by default \"\n                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                    hint=(\n                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                        f\"default_auto_field attribute to point to a subclass \"\n                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                    ),\n                    obj=cls,\n                    id='models.W042',\n                ),\n            ]\n        return []\n",
      "\n    @classmethod\n    def _check_default_pk(cls):\n        # Check if this model inherits from parents and any parent has a manually-defined PK\n        if cls._meta.parents:\n            for parent_model in cls._meta.parents:\n                if not parent_model._meta.pk.auto_created:\n                    # Parent had a manually-defined PK, so don't warn about inherited PK\n                    return []\n        \n        # Original logic for non-inherited cases or when all parents have auto-created PKs\n        if (\n            cls._meta.pk.auto_created and\n            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n            not cls._meta.app_config._is_default_auto_field_overridden\n        ):\n            return [\n                checks.Warning(\n                    f\"Auto-created primary key used when not defining a \"\n                    f\"primary key type, by default \"\n                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                    hint=(\n                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                        f\"default_auto_field attribute to point to a subclass \"\n                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                    ),\n                    obj=cls,\n                    id='models.W042',\n                ),\n            ]\n        return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n",
      "\n@classmethod\ndef _check_default_pk(cls):\n    # Check if this model inherits from parents and any parent has a manually-defined PK\n    if cls._meta.parents:\n        for parent_model in cls._meta.parents:\n            if not parent_model._meta.pk.auto_created:\n                # Parent had a manually-defined PK, so don't warn about inherited PK\n                return []\n    \n    # Original logic for non-inherited cases or when all parents have auto-created PKs\n    if (\n        cls._meta.pk.auto_created and\n        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n        not cls._meta.app_config._is_default_auto_field_overridden\n    ):\n        return [\n            checks.Warning(\n                f\"Auto-created primary key used when not defining a \"\n                f\"primary key type, by default \"\n                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n                hint=(\n                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n                    f\"default_auto_field attribute to point to a subclass \"\n                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                ),\n                obj=cls,\n                id='models.W042',\n            ),\n        ]\n    return []\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..dd1f7c86cb 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,6 +237,7 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n+\n                     field = parent_links[base_key]\n                 elif not is_proxy:\n                     attr_name = '%s_ptr' % base._meta.model_name\n@@ -1295,8 +1296,18 @@ class Model(metaclass=ModelBase):\n \n         return errors\n \n+    @classmethod\n+\n     @classmethod\n     def _check_default_pk(cls):\n+        # Check if this model inherits from parents and any parent has a manually-defined PK\n+        if cls._meta.parents:\n+            for parent_model in cls._meta.parents:\n+                if not parent_model._meta.pk.auto_created:\n+                    # Parent had a manually-defined PK, so don't warn about inherited PK\n+                    return []\n+        \n+        # Original logic for non-inherited cases or when all parents have auto-created PKs\n         if (\n             cls._meta.pk.auto_created and\n             not settings.is_overridden('DEFAULT_AUTO_FIELD') and\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..2e231777e6 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,6 +156,7 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n+\n         self.auto_created = auto_created\n \n         # Adjust the appropriate creation counter, and save our local copy.\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..80ba051f36 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,6 +268,7 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n@@ -320,6 +321,7 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n+\n     def setup_pk(self, field):\n         if not self.pk and field.primary_key:\n             self.pk = field\n",
    "variant_0": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..d1d008ba68 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_1": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..d1d008ba68 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_2": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..d1d008ba68 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_3": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..94d50880f0 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+    @classmethod\n+    def _check_default_pk(cls):\n+        # Check if this model inherits from parents and any parent has a manually-defined PK\n+        if cls._meta.parents:\n+            for parent_model in cls._meta.parents:\n+                if not parent_model._meta.pk.auto_created:\n+                    # Parent had a manually-defined PK, so don't warn about inherited PK\n+                    return []\n+        \n+        # Original logic for non-inherited cases or when all parents have auto-created PKs\n+        if (\n+            cls._meta.pk.auto_created and\n+            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+            not cls._meta.app_config._is_default_auto_field_overridden\n+        ):\n+            return [\n+                checks.Warning(\n+                    f\"Auto-created primary key used when not defining a \"\n+                    f\"primary key type, by default \"\n+                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                    hint=(\n+                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                        f\"default_auto_field attribute to point to a subclass \"\n+                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                    ),\n+                    obj=cls,\n+                    id='models.W042',\n+                ),\n+            ]\n+        return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_4": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..94d50880f0 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+    @classmethod\n+    def _check_default_pk(cls):\n+        # Check if this model inherits from parents and any parent has a manually-defined PK\n+        if cls._meta.parents:\n+            for parent_model in cls._meta.parents:\n+                if not parent_model._meta.pk.auto_created:\n+                    # Parent had a manually-defined PK, so don't warn about inherited PK\n+                    return []\n+        \n+        # Original logic for non-inherited cases or when all parents have auto-created PKs\n+        if (\n+            cls._meta.pk.auto_created and\n+            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+            not cls._meta.app_config._is_default_auto_field_overridden\n+        ):\n+            return [\n+                checks.Warning(\n+                    f\"Auto-created primary key used when not defining a \"\n+                    f\"primary key type, by default \"\n+                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                    hint=(\n+                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                        f\"default_auto_field attribute to point to a subclass \"\n+                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                    ),\n+                    obj=cls,\n+                    id='models.W042',\n+                ),\n+            ]\n+        return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..41d8408b4b 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+    @classmethod\n+    def _check_default_pk(cls):\n+        # Check if this model inherits from parents and any parent has a manually-defined PK\n+        if cls._meta.parents:\n+            for parent_model in cls._meta.parents:\n+                if not parent_model._meta.pk.auto_created:\n+                    # Parent had a manually-defined PK, so don't warn about inherited PK\n+                    return []\n+        \n+        # Original logic for non-inherited cases or when all parents have auto-created PKs\n+        if (\n+            cls._meta.pk.auto_created and\n+            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+            not cls._meta.app_config._is_default_auto_field_overridden\n+        ):\n+            return [\n+                checks.Warning(\n+                    f\"Auto-created primary key used when not defining a \"\n+                    f\"primary key type, by default \"\n+                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                    hint=(\n+                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                        f\"default_auto_field attribute to point to a subclass \"\n+                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                    ),\n+                    obj=cls,\n+                    id='models.W042',\n+                ),\n+            ]\n+        return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_5": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..d1d008ba68 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_6": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..d1d008ba68 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_7": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..d1d008ba68 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
    "variant_8": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..7adcec6a8f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -237,35 +237,38 @@ class ModelBase(type):\n                 base = base._meta.concrete_model\n                 base_key = make_model_tuple(base)\n                 if base_key in parent_links:\n-                    field = parent_links[base_key]\n-                elif not is_proxy:\n-                    attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(\n-                        base,\n-                        on_delete=CASCADE,\n-                        name=attr_name,\n-                        auto_created=True,\n-                        parent_link=True,\n-                    )\n-\n-                    if attr_name in field_names:\n-                        raise FieldError(\n-                            \"Auto-generated field '%s' in class %r for \"\n-                            \"parent_link to base class %r clashes with \"\n-                            \"declared field of the same name.\" % (\n-                                attr_name,\n-                                name,\n-                                base.__name__,\n-                            )\n-                        )\n \n-                    # Only add the ptr field if it's not already present;\n-                    # e.g. migrations will already have it specified\n-                    if not hasattr(new_class, attr_name):\n-                        new_class.add_to_class(attr_name, field)\n-                else:\n-                    field = None\n-                new_class._meta.parents[base] = field\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n             else:\n                 base_parents = base._meta.parents.copy()\n \n@@ -1296,28 +1299,38 @@ class Model(metaclass=ModelBase):\n         return errors\n \n     @classmethod\n-    def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n-                    ),\n-                    obj=cls,\n-                    id='models.W042',\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n                 ),\n-            ]\n-        return []\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     @classmethod\n     def _check_swappable(cls):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..d1d008ba68 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,7 +156,38 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n-        self.auto_created = auto_created\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05b99..da8359dbcd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -268,23 +268,38 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -320,10 +335,38 @@ class Options:\n         else:\n             self._expire_cache(reverse=False)\n \n-    def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+\n+@classmethod\n+def _check_default_pk(cls):\n+    # Check if this model inherits from parents and any parent has a manually-defined PK\n+    if cls._meta.parents:\n+        for parent_model in cls._meta.parents:\n+            if not parent_model._meta.pk.auto_created:\n+                # Parent had a manually-defined PK, so don't warn about inherited PK\n+                return []\n+    \n+    # Original logic for non-inherited cases or when all parents have auto-created PKs\n+    if (\n+        cls._meta.pk.auto_created and\n+        not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+        not cls._meta.app_config._is_default_auto_field_overridden\n+    ):\n+        return [\n+            checks.Warning(\n+                f\"Auto-created primary key used when not defining a \"\n+                f\"primary key type, by default \"\n+                f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                hint=(\n+                    f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                    f\"default_auto_field attribute to point to a subclass \"\n+                    f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=cls,\n+                id='models.W042',\n+            ),\n+        ]\n+    return []\n \n     def setup_proxy(self, target):\n         \"\"\"\n"
  }
}