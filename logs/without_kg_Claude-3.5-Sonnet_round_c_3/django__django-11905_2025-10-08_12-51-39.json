{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/lookups.py lines 461-470)": "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/lookups.py lines 461-470)": [
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n",
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n",
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n",
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n",
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n",
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n",
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n",
      "\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def get_prep_lookup(self):\n        if not isinstance(self.rhs, bool):\n            raise ValueError(\n                \"The __isnull lookup only accepts boolean values (True or False), \"\n                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n            )\n        return self.rhs\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_0": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_1": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_2": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_3": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_4": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_5": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_6": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_7": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "variant_8": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..422810047b 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -457,11 +457,21 @@ class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         return \"BETWEEN %s AND %s\" % (rhs[0], rhs[1])\n \n \n+@Field.register_lookup\n+\n @Field.register_lookup\n class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def get_prep_lookup(self):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(\n+                \"The __isnull lookup only accepts boolean values (True or False), \"\n+                f\"got {type(self.rhs).__name__}: {self.rhs!r}\"\n+            )\n+        return self.rhs\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n"
  }
}