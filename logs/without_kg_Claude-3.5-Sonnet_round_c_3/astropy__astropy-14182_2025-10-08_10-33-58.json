{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/astropy/astropy/io/ascii/rst.py lines 60-61)": "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the position of the border line based on number of header rows\n        # Header rows + 1 for the border line itself\n        header_rows_count = len(self.header.names) if hasattr(self.header, 'names') and isinstance(self.header.names, list) else 1\n        if hasattr(self, 'header_rows') and self.header_rows is not None:\n            header_rows_count = len(self.header_rows)\n        border_line_index = header_rows_count\n        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n        return lines\n",
    "Location 2 (/root/hy/projects_3/astropy/astropy/io/ascii/rst.py lines 63-66)": "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the border line index based on number of header rows\n        # For single header: border is at index 1\n        # For multiple headers: border is at index (number of header rows)\n        if hasattr(self.header, 'header_rows') and self.header.header_rows:\n            border_idx = len(self.header.header_rows)\n        else:\n            border_idx = 1\n        lines = [lines[border_idx]] + lines + [lines[border_idx]]\n        return lines\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/astropy/astropy/io/ascii/rst.py lines 60-61)": [
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate border line index based on number of header rows\n        # Default is 1 header row, so border is at index 1\n        # With multiple header rows, border moves down accordingly\n        num_header_rows = len(self.header_rows) if self.header_rows else 1\n        border_line_idx = num_header_rows\n        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the border line index based on number of header rows\n        # Default is 1 header row, but could be more if header_rows is specified\n        num_header_rows = 1 if self.header_rows is None else len(self.header_rows)\n        border_line_idx = num_header_rows\n        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the border line index based on number of header rows\n        # Default is 1 header row, but can be more with header_rows parameter\n        num_header_rows = 1\n        if hasattr(self, 'header_rows') and self.header_rows:\n            num_header_rows = len(self.header_rows)\n        \n        border_line_index = num_header_rows\n        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate border line position based on number of header rows\n        # For single header: border at index 1\n        # For multiple headers: border at index (number of header rows)\n        header_count = len(self.header.names) if hasattr(self.header, 'names') else 1\n        if hasattr(self, 'header_rows') and self.header_rows:\n            header_count = len([row for row in self.header_rows if row])\n        border_index = header_count\n        lines = [lines[border_index]] + lines + [lines[border_index]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the index of the border line based on number of header rows\n        # Default is 1 header row, so border is at index 1\n        # With multiple header rows, border moves down accordingly\n        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') and hasattr(self.header, 'header_rows') and self.header.header_rows else 1\n        border_index = num_header_rows\n        lines = [lines[border_index]] + lines + [lines[border_index]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the correct border line index based on number of header rows\n        # For single header: border at index 1, for multiple headers: border at last header index\n        if hasattr(self.header, 'header_rows') and self.header.header_rows:\n            border_index = len(self.header.header_rows)\n        else:\n            border_index = 1\n        lines = [lines[border_index]] + lines + [lines[border_index]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the correct border line index based on number of header rows\n        # The border line is after all header rows (including column names and any additional header rows)\n        num_header_rows = len(self.header.str_vals()) if hasattr(self.header, 'str_vals') else 1\n        border_line_index = num_header_rows\n        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the index of the border line based on number of header rows\n        # For single header: border is at index 1\n        # For multiple headers: border is at index (number of header rows)\n        if hasattr(self.header, 'names') and hasattr(self.header, 'header_rows') and self.header.header_rows:\n            num_header_rows = len(self.header.header_rows)\n        else:\n            num_header_rows = 1\n        border_line_index = num_header_rows\n        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n        return lines\n"
    ],
    "Location 2 (/root/hy/projects_3/astropy/astropy/io/ascii/rst.py lines 63-66)": [
      "\ndef __init__(self, header_rows=None):\n    super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\ndef write(self, lines):\n    lines = super().write(lines)\n    # Calculate the border line index based on number of header rows\n    # For single header: border at index 1\n    # For multiple headers: border at index equal to number of header rows\n    if hasattr(self.header, 'names') and hasattr(self.header, 'header_rows') and self.header.header_rows:\n        num_header_rows = len(self.header.header_rows)\n        border_idx = num_header_rows\n    else:\n        border_idx = 1\n    \n    lines = [lines[border_idx]] + lines + [lines[border_idx]]\n    return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the index of the separator line based on number of header rows\n        # With header_rows=None (default), there's 1 header row, separator at index 1\n        # With header_rows=[\"name\", \"unit\"], there are 2 header rows, separator at index 2\n        num_header_rows = len(self.header.header_rows) if hasattr(self.header, 'header_rows') and self.header.header_rows else 1\n        separator_index = num_header_rows\n        lines = [lines[separator_index]] + lines + [lines[separator_index]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate border line index based on number of header rows\n        # If header_rows is specified, there are len(header_rows) + 1 lines before data\n        # (header rows + column names), otherwise just 1 line (column names only)\n        if hasattr(self.header, 'header_rows') and self.header.header_rows:\n            border_line_idx = len(self.header.header_rows)\n        else:\n            border_line_idx = 1\n        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the border line index based on number of header rows\n        # Default is 1 header row, but can be more with header_rows parameter\n        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') else 1\n        if hasattr(self, 'header_rows') and self.header_rows:\n            num_header_rows = len(self.header_rows)\n        border_line_idx = num_header_rows\n        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the border line index based on number of header rows\n        # Default is 1 header row, but can be more with header_rows parameter\n        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') else 1\n        if hasattr(self, 'header_rows') and self.header_rows is not None:\n            num_header_rows = len(self.header_rows)\n        border_line_idx = num_header_rows\n        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the index of the border line based on number of header rows\n        # For RST format, the border line is after all header rows\n        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') and isinstance(self.header.names, list) else 1\n        border_line_idx = num_header_rows\n        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the index of the border line based on number of header rows\n        # For RST format, the border line is after all header rows\n        header_rows = getattr(self.header, 'names', ['name'])\n        if hasattr(self.header, 'header_rows') and self.header.header_rows is not None:\n            if isinstance(self.header.header_rows, (list, tuple)):\n                num_header_rows = len(self.header.header_rows)\n            else:\n                num_header_rows = 1\n        else:\n            num_header_rows = 1\n        \n        border_line_index = num_header_rows\n        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n        return lines\n",
      "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # Calculate the index of the border line based on number of header rows\n        # With header_rows, the structure is: border, header1, header2, ..., border, data...\n        # So the border line is at index equal to the number of header rows\n        header_rows_count = len(self.header.names) if hasattr(self.header, 'names') and self.header.names else 1\n        if hasattr(self, 'header_rows') and self.header_rows:\n            header_rows_count = len(self.header_rows)\n        border_line_index = header_rows_count\n        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n        return lines\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..a8ac28f05b 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,15 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Get header_rows to determine the correct border line position\n+        header_rows = getattr(self, \"header_rows\", [\"name\"])\n+        border_line_idx = len(header_rows) - 1\n+        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n         return lines\n",
    "variant_0": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..f6b2649381 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,33 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate the position of the border line based on number of header rows\n+        # Header rows + 1 for the border line itself\n+        header_rows_count = len(self.header.names) if hasattr(self.header, 'names') and isinstance(self.header.names, list) else 1\n+        if hasattr(self, 'header_rows') and self.header_rows is not None:\n+            header_rows_count = len(self.header_rows)\n+        border_line_index = header_rows_count\n+        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate the border line index based on number of header rows\n+        # For single header: border is at index 1\n+        # For multiple headers: border is at index (number of header rows)\n+        if hasattr(self.header, 'header_rows') and self.header.header_rows:\n+            border_idx = len(self.header.header_rows)\n+        else:\n+            border_idx = 1\n+        lines = [lines[border_idx]] + lines + [lines[border_idx]]\n         return lines\n",
    "variant_1": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..58626fc4aa 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,34 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate border line index based on number of header rows\n+        # Default is 1 header row, so border is at index 1\n+        # With multiple header rows, border moves down accordingly\n+        num_header_rows = len(self.header_rows) if self.header_rows else 1\n+        border_line_idx = num_header_rows\n+        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n         return lines\n+\n+\n+def __init__(self, header_rows=None):\n+    super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+def write(self, lines):\n+    lines = super().write(lines)\n+    # Calculate the border line index based on number of header rows\n+    # For single header: border at index 1\n+    # For multiple headers: border at index equal to number of header rows\n+    if hasattr(self.header, 'names') and hasattr(self.header, 'header_rows') and self.header.header_rows:\n+        num_header_rows = len(self.header.header_rows)\n+        border_idx = num_header_rows\n+    else:\n+        border_idx = 1\n+    \n+    lines = [lines[border_idx]] + lines + [lines[border_idx]]\n+    return lines\n",
    "variant_2": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..1a0bf4619c 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,29 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate the border line index based on number of header rows\n+        # Default is 1 header row, but could be more if header_rows is specified\n+        num_header_rows = 1 if self.header_rows is None else len(self.header_rows)\n+        border_line_idx = num_header_rows\n+        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate the index of the separator line based on number of header rows\n+        # With header_rows=None (default), there's 1 header row, separator at index 1\n+        # With header_rows=[\"name\", \"unit\"], there are 2 header rows, separator at index 2\n+        num_header_rows = len(self.header.header_rows) if hasattr(self.header, 'header_rows') and self.header.header_rows else 1\n+        separator_index = num_header_rows\n+        lines = [lines[separator_index]] + lines + [lines[separator_index]]\n         return lines\n",
    "variant_3": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..ffb87dbca4 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,34 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate the border line index based on number of header rows\n+        # Default is 1 header row, but can be more with header_rows parameter\n+        num_header_rows = 1\n+        if hasattr(self, 'header_rows') and self.header_rows:\n+            num_header_rows = len(self.header_rows)\n+        \n+        border_line_index = num_header_rows\n+        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate border line index based on number of header rows\n+        # If header_rows is specified, there are len(header_rows) + 1 lines before data\n+        # (header rows + column names), otherwise just 1 line (column names only)\n+        if hasattr(self.header, 'header_rows') and self.header.header_rows:\n+            border_line_idx = len(self.header.header_rows)\n+        else:\n+            border_line_idx = 1\n+        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n         return lines\n",
    "variant_4": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..fb77c4b9f7 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,33 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate border line position based on number of header rows\n+        # For single header: border at index 1\n+        # For multiple headers: border at index (number of header rows)\n+        header_count = len(self.header.names) if hasattr(self.header, 'names') else 1\n+        if hasattr(self, 'header_rows') and self.header_rows:\n+            header_count = len([row for row in self.header_rows if row])\n+        border_index = header_count\n+        lines = [lines[border_index]] + lines + [lines[border_index]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate the border line index based on number of header rows\n+        # Default is 1 header row, but can be more with header_rows parameter\n+        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') else 1\n+        if hasattr(self, 'header_rows') and self.header_rows:\n+            num_header_rows = len(self.header_rows)\n+        border_line_idx = num_header_rows\n+        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n         return lines\n",
    "variant_5": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..7d01db6677 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,31 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate the index of the border line based on number of header rows\n+        # Default is 1 header row, so border is at index 1\n+        # With multiple header rows, border moves down accordingly\n+        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') and hasattr(self.header, 'header_rows') and self.header.header_rows else 1\n+        border_index = num_header_rows\n+        lines = [lines[border_index]] + lines + [lines[border_index]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate the border line index based on number of header rows\n+        # Default is 1 header row, but can be more with header_rows parameter\n+        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') else 1\n+        if hasattr(self, 'header_rows') and self.header_rows is not None:\n+            num_header_rows = len(self.header_rows)\n+        border_line_idx = num_header_rows\n+        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n         return lines\n",
    "variant_6": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..835adabf94 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,30 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate the correct border line index based on number of header rows\n+        # For single header: border at index 1, for multiple headers: border at last header index\n+        if hasattr(self.header, 'header_rows') and self.header.header_rows:\n+            border_index = len(self.header.header_rows)\n+        else:\n+            border_index = 1\n+        lines = [lines[border_index]] + lines + [lines[border_index]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate the index of the border line based on number of header rows\n+        # For RST format, the border line is after all header rows\n+        num_header_rows = len(self.header.names) if hasattr(self.header, 'names') and isinstance(self.header.names, list) else 1\n+        border_line_idx = num_header_rows\n+        lines = [lines[border_line_idx]] + lines + [lines[border_line_idx]]\n         return lines\n",
    "variant_7": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..037b561d5f 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,36 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate the correct border line index based on number of header rows\n+        # The border line is after all header rows (including column names and any additional header rows)\n+        num_header_rows = len(self.header.str_vals()) if hasattr(self.header, 'str_vals') else 1\n+        border_line_index = num_header_rows\n+        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate the index of the border line based on number of header rows\n+        # For RST format, the border line is after all header rows\n+        header_rows = getattr(self.header, 'names', ['name'])\n+        if hasattr(self.header, 'header_rows') and self.header.header_rows is not None:\n+            if isinstance(self.header.header_rows, (list, tuple)):\n+                num_header_rows = len(self.header.header_rows)\n+            else:\n+                num_header_rows = 1\n+        else:\n+            num_header_rows = 1\n+        \n+        border_line_index = num_header_rows\n+        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n         return lines\n",
    "variant_8": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..1bf80bde42 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,35 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        # Calculate the index of the border line based on number of header rows\n+        # For single header: border is at index 1\n+        # For multiple headers: border is at index (number of header rows)\n+        if hasattr(self.header, 'names') and hasattr(self.header, 'header_rows') and self.header.header_rows:\n+            num_header_rows = len(self.header.header_rows)\n+        else:\n+            num_header_rows = 1\n+        border_line_index = num_header_rows\n+        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n+        return lines\n+\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Calculate the index of the border line based on number of header rows\n+        # With header_rows, the structure is: border, header1, header2, ..., border, data...\n+        # So the border line is at index equal to the number of header rows\n+        header_rows_count = len(self.header.names) if hasattr(self.header, 'names') and self.header.names else 1\n+        if hasattr(self, 'header_rows') and self.header_rows:\n+            header_rows_count = len(self.header_rows)\n+        border_line_index = header_rows_count\n+        lines = [lines[border_line_index]] + lines + [lines[border_line_index]]\n         return lines\n"
  }
}