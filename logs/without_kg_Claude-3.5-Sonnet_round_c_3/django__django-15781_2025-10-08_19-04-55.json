{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/management/base.py lines 105-132)": "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
    "Location 2 (/root/hy/projects_3/django/django/core/management/base.py lines 284-296)": "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/management/base.py lines 105-132)": [
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/core/management/base.py lines 284-296)": [
      "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n",
      "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n",
      "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n",
      "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n",
      "\nclass DjangoHelpFormatter(HelpFormatter):\n    \"\"\"\n    Customized formatter so that command-line help can be formatted differently\n    for each argument. Called from BaseCommand.create_parser().\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        self.show_last = kwargs.pop(\"show_last\", True)\n        super().__init__(*args, **kwargs)\n\n    def _get_formatter(self, action):\n        return self._format_action_invocation(action)\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, actions, *args, **kwargs)\n\n    def add_arguments(self, actions):\n        actions = sorted(actions, key=self._get_formatter)\n        super().add_arguments(actions)\n\n    def _fill_text(self, text, width, indent):\n        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n        return text\n\n    def _split_lines(self, text, width):\n        \"\"\"Preserve original line breaks in text.\"\"\"\n        return text.splitlines()\n",
      "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n",
      "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n",
      "\n    def create_parser(self, prog_name, subcommand, **kwargs):\n        \"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"\n        parser = CommandParser(\n            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n            description=self.help or None,\n            formatter_class=DjangoHelpFormatter,\n            missing_args_message=getattr(self, \"missing_args_message\", None),\n            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n            **kwargs,\n        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_0": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_1": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_2": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_3": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_4": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_5": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..4a1b7a03ba 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,19 +285,34 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n-    def create_parser(self, prog_name, subcommand, **kwargs):\n-        \"\"\"\n-        Create and return the ``ArgumentParser`` which will be used to\n-        parse the arguments to this command.\n-        \"\"\"\n-        parser = CommandParser(\n-            prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n-            description=self.help or None,\n-            formatter_class=DjangoHelpFormatter,\n-            missing_args_message=getattr(self, \"missing_args_message\", None),\n-            called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n-            **kwargs,\n-        )\n+\n+class DjangoHelpFormatter(HelpFormatter):\n+    \"\"\"\n+    Customized formatter so that command-line help can be formatted differently\n+    for each argument. Called from BaseCommand.create_parser().\n+    \"\"\"\n+\n+    def __init__(self, *args, **kwargs):\n+        self.show_last = kwargs.pop(\"show_last\", True)\n+        super().__init__(*args, **kwargs)\n+\n+    def _get_formatter(self, action):\n+        return self._format_action_invocation(action)\n+\n+    def add_usage(self, usage, actions, *args, **kwargs):\n+        super().add_usage(usage, actions, *args, **kwargs)\n+\n+    def add_arguments(self, actions):\n+        actions = sorted(actions, key=self._get_formatter)\n+        super().add_arguments(actions)\n+\n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n+\n+    def _split_lines(self, text, width):\n+        \"\"\"Preserve original line breaks in text.\"\"\"\n+        return text.splitlines()\n         self.add_base_argument(\n             parser,\n             \"--version\",\n",
    "variant_6": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_7": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n",
    "variant_8": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..468b30b992 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -102,6 +102,7 @@ def no_translations(handle_func):\n     return wrapper\n \n \n+\n class DjangoHelpFormatter(HelpFormatter):\n     \"\"\"\n     Customized formatter so that command-specific arguments appear in the\n@@ -130,6 +131,9 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def _fill_text(self, text, width, indent):\n+        \"\"\"Preserve original formatting of help text including line breaks and indentation.\"\"\"\n+        return text\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n@@ -281,6 +285,7 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n"
  }
}