{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/seaborn/seaborn/_core/scales.py lines 350-351)": "\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n\n        new._pipeline = [\n            axis.convert_units,\n            forward,\n",
    "Location 2 (/root/hy/projects_3/seaborn/seaborn/_core/scales.py lines 345-354)": "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/seaborn/seaborn/_core/scales.py lines 350-351)": [
      "\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n\n        new._pipeline = [\n            axis.convert_units,\n            forward,\n",
      "\n        vmin, vmax = axis.convert_units((vmin, vmax))\n        \n        # Convert boolean values to numeric for arithmetic operations\n        if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n            vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n            a = forward(vmin_numeric)\n            b = forward(vmax_numeric) - forward(vmin_numeric)\n        else:\n            a = forward(vmin)\n            b = forward(vmax) - forward(vmin)\n",
      "\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n\n        new._pipeline = [\n            axis.convert_units,\n            forward,\n",
      "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n\n        new._pipeline = [\n            axis.convert_units,\n            forward,\n",
      "\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n"
    ],
    "Location 2 (/root/hy/projects_3/seaborn/seaborn/_core/scales.py lines 345-354)": [
      "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n",
      "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n\n        else:\n            normalize = vmin = vmax = None\n\n        new._pipeline = [\n            axis.convert_units,\n            forward,\n            normalize,\n            prop.get_mapping(new, data)\n        ]\n",
      "\n        if axis is None:\n            axis = PseudoAxis(mpl_scale)\n            axis.update_units(data)\n\n        mpl_scale.set_default_locators_and_formatters(axis)\n        new._matplotlib_scale = mpl_scale\n\n        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n        if prop.normed:\n            if new.norm is None:\n                vmin, vmax = data.min(), data.max()\n            else:\n                vmin, vmax = new.norm\n            vmin, vmax = axis.convert_units((vmin, vmax))\n            \n            # Convert boolean values to numeric for arithmetic operations\n            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n                a = forward(vmin_numeric)\n                b = forward(vmax_numeric) - forward(vmin_numeric)\n            else:\n                a = forward(vmin)\n                b = forward(vmax) - forward(vmin)\n\n            def normalize(x):\n                return (x - a) / b\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..52741b3b 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -342,13 +342,27 @@ class ContinuousBase(Scale):\n \n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n+\n             if new.norm is None:\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_0": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..5f52c849 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,8 +357,43 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n+\n+        new._pipeline = [\n+            axis.convert_units,\n+            forward,\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_1": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..5f52c849 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,8 +357,43 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n+\n+        new._pipeline = [\n+            axis.convert_units,\n+            forward,\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_2": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..1ce0a5ba 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,6 +357,22 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+            vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+            a = forward(vmin_numeric)\n+            b = forward(vmax_numeric) - forward(vmin_numeric)\n+        else:\n             a = forward(vmin)\n             b = forward(vmax) - forward(vmin)\n \n",
    "variant_3": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..5f52c849 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,8 +357,43 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n+\n+        new._pipeline = [\n+            axis.convert_units,\n+            forward,\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_4": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..f381d996 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,8 +357,33 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_5": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..31d146a7 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,8 +357,32 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_6": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..d762179e 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -341,14 +341,51 @@ class ContinuousBase(Scale):\n         new._matplotlib_scale = mpl_scale\n \n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if prop.normed:\n+            if new.norm is None:\n+                vmin, vmax = data.min(), data.max()\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n         if prop.normed:\n             if new.norm is None:\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n+\n+        new._pipeline = [\n+            axis.convert_units,\n+            forward,\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_7": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..4d8a25d8 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,8 +357,43 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+\n+        else:\n+            normalize = vmin = vmax = None\n+\n+        new._pipeline = [\n+            axis.convert_units,\n+            forward,\n+            normalize,\n+            prop.get_mapping(new, data)\n+        ]\n+            else:\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n",
    "variant_8": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..31d146a7 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -340,6 +340,16 @@ class ContinuousBase(Scale):\n         mpl_scale.set_default_locators_and_formatters(axis)\n         new._matplotlib_scale = mpl_scale\n \n+        normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if prop.normed:\n+\n+        if axis is None:\n+            axis = PseudoAxis(mpl_scale)\n+            axis.update_units(data)\n+\n+        mpl_scale.set_default_locators_and_formatters(axis)\n+        new._matplotlib_scale = mpl_scale\n+\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n@@ -347,8 +357,32 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n+                vmin, vmax = new.norm\n+            vmin, vmax = axis.convert_units((vmin, vmax))\n+            \n+            # Convert boolean values to numeric for arithmetic operations\n+            if isinstance(vmin, (bool, np.bool_)) and isinstance(vmax, (bool, np.bool_)):\n+                vmin_numeric, vmax_numeric = float(vmin), float(vmax)\n+                a = forward(vmin_numeric)\n+                b = forward(vmax_numeric) - forward(vmin_numeric)\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+            def normalize(x):\n+                return (x - a) / b\n \n             def normalize(x):\n                 return (x - a) / b\n"
  }
}