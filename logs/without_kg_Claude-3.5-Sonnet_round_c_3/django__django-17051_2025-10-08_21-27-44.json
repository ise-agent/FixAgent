{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/query.py lines 813-816)": "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
    "Location 2 (/root/hy/projects_3/django/django/db/models/query.py lines 1840-1840)": "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
    "Location 3 (/root/hy/projects_3/django/django/db/models/query.py lines 1849-1857)": "\n            else:\n                returned_rows = self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=(\n                        self.model._meta.db_returning_fields\n                        if bulk_return and on_conflict == OnConflict.UPDATE\n                        else None\n                    ),\n                )\n                if bulk_return and on_conflict == OnConflict.UPDATE:\n                    inserted_rows.extend(returned_rows)\n",
    "Location 4 (/root/hy/projects_3/django/django/db/models/query.py lines 817-817)": "\n                assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n",
    "Location 5 (/root/hy/projects_3/django/django/db/models/constants.py lines 10-12)": "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/query.py lines 813-816)": [
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n",
      "\n                if (\n                    connection.features.can_return_rows_from_bulk_insert\n                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                ):\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/db/models/query.py lines 1840-1840)": [
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n",
      "\n            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n"
    ],
    "Location 3 (/root/hy/projects_3/django/django/db/models/query.py lines 1849-1857)": [
      "\n            else:\n                returned_columns = self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                )\n                if on_conflict == OnConflict.UPDATE and returned_columns:\n                    inserted_rows.extend(returned_columns)\n",
      "\n            else:\n                returned_rows = self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                )\n                if on_conflict == OnConflict.UPDATE and returned_rows:\n                    inserted_rows.extend(returned_rows)\n",
      "\n            else:\n                returned_rows = self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                )\n                if on_conflict == OnConflict.UPDATE and bulk_return:\n                    inserted_rows.extend(returned_rows)\n",
      "\n            else:\n                returned_columns = self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                )\n                if on_conflict == OnConflict.UPDATE and returned_columns:\n                    inserted_rows.extend(returned_columns)\n",
      "\n            else:\n                if on_conflict == OnConflict.UPDATE and bulk_return:\n                    inserted_rows.extend(\n                        self._insert(\n                            item,\n                            fields=fields,\n                            using=self.db,\n                            on_conflict=on_conflict,\n                            update_fields=update_fields,\n                            unique_fields=unique_fields,\n                            returning_fields=self.model._meta.db_returning_fields,\n                        )\n                    )\n                else:\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n",
      "\n            else:\n                returned_rows = self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                )\n                if bulk_return and on_conflict == OnConflict.UPDATE and returned_rows:\n                    inserted_rows.extend(returned_rows)\n",
      "\n            else:\n                returned_columns = self._insert(\n                    item,\n                    fields=fields,\n                    using=self.db,\n                    on_conflict=on_conflict,\n                    update_fields=update_fields,\n                    unique_fields=unique_fields,\n                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                )\n                if on_conflict == OnConflict.UPDATE and returned_columns:\n                    inserted_rows.extend(returned_columns)\n",
      "\n            else:\n                if on_conflict == OnConflict.UPDATE and bulk_return:\n                    inserted_rows.extend(\n                        self._insert(\n                            item,\n                            fields=fields,\n                            using=self.db,\n                            on_conflict=on_conflict,\n                            update_fields=update_fields,\n                            unique_fields=unique_fields,\n                            returning_fields=self.model._meta.db_returning_fields,\n                        )\n                    )\n                else:\n                    self._insert(\n                        item,\n                        fields=fields,\n                        using=self.db,\n                        on_conflict=on_conflict,\n                        update_fields=update_fields,\n                        unique_fields=unique_fields,\n                    )\n"
    ],
    "Location 4 (/root/hy/projects_3/django/django/db/models/query.py lines 817-817)": [
      "\n                    assert len(returned_columns) == len(objs_without_pk) if on_conflict is None or on_conflict == OnConflict.UPDATE else True\n",
      "\n                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n",
      "\n                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n",
      "\n                    assert len(returned_columns) == len(objs_without_pk)\n",
      "\n                assert len(returned_columns) == len(objs_without_pk)\n",
      "\n                    assert len(returned_columns) == len(objs_without_pk)\n",
      "\n                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.UPDATE\n",
      "\n                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n"
    ],
    "Location 5 (/root/hy/projects_3/django/django/db/models/constants.py lines 10-12)": [
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n",
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n",
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n",
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n",
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n",
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n",
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n",
      "\nclass OnConflict(Enum):\n    IGNORE = \"ignore\"\n    UPDATE = \"update\"\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..1e406651bb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,10 +810,12 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n+\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,29 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n-                    item,\n-                    fields=fields,\n-                    using=self.db,\n-                    on_conflict=on_conflict,\n-                    update_fields=update_fields,\n-                    unique_fields=unique_fields,\n-                )\n+                if bulk_return and on_conflict == OnConflict.UPDATE:\n+                    inserted_rows.extend(\n+                        self._insert(\n+                            item,\n+                            fields=fields,\n+                            using=self.db,\n+                            on_conflict=on_conflict,\n+                            update_fields=update_fields,\n+                            unique_fields=unique_fields,\n+                            returning_fields=self.model._meta.db_returning_fields,\n+                        )\n+                    )\n+                else:\n+                    self._insert(\n+                        item,\n+                        fields=fields,\n+                        using=self.db,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n+                    )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_0": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..3fb64a619b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,13 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+\n+                assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,23 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n+                returned_rows = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=(\n+                        self.model._meta.db_returning_fields\n+                        if bulk_return and on_conflict == OnConflict.UPDATE\n+                        else None\n+                    ),\n                 )\n+                if bulk_return and on_conflict == OnConflict.UPDATE:\n+                    inserted_rows.extend(returned_rows)\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_1": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..3a4095490f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,13 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+\n+                    assert len(returned_columns) == len(objs_without_pk) if on_conflict is None or on_conflict == OnConflict.UPDATE else True\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,19 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n+                returned_columns = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if on_conflict == OnConflict.UPDATE and returned_columns:\n+                    inserted_rows.extend(returned_columns)\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_2": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..7c3e09a6a5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,13 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+\n+                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,19 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n+                returned_rows = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if on_conflict == OnConflict.UPDATE and returned_rows:\n+                    inserted_rows.extend(returned_rows)\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_3": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..3f6f811542 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,13 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+\n+                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,19 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n+                returned_rows = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if on_conflict == OnConflict.UPDATE and bulk_return:\n+                    inserted_rows.extend(returned_rows)\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_4": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..bac5456249 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,10 +810,12 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n+\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,19 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n+                returned_columns = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if on_conflict == OnConflict.UPDATE and returned_columns:\n+                    inserted_rows.extend(returned_columns)\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_5": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..04e57753b0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,13 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+\n+                assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,29 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n-                    item,\n-                    fields=fields,\n-                    using=self.db,\n-                    on_conflict=on_conflict,\n-                    update_fields=update_fields,\n-                    unique_fields=unique_fields,\n-                )\n+                if on_conflict == OnConflict.UPDATE and bulk_return:\n+                    inserted_rows.extend(\n+                        self._insert(\n+                            item,\n+                            fields=fields,\n+                            using=self.db,\n+                            on_conflict=on_conflict,\n+                            update_fields=update_fields,\n+                            unique_fields=unique_fields,\n+                            returning_fields=self.model._meta.db_returning_fields,\n+                        )\n+                    )\n+                else:\n+                    self._insert(\n+                        item,\n+                        fields=fields,\n+                        using=self.db,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n+                    )\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_6": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..bc9a811a20 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,10 +810,12 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n+\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,19 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n+                returned_rows = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if bulk_return and on_conflict == OnConflict.UPDATE and returned_rows:\n+                    inserted_rows.extend(returned_rows)\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_7": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..28caf8c880 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,13 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+\n+                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.UPDATE\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,19 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n+                returned_columns = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if on_conflict == OnConflict.UPDATE and returned_columns:\n+                    inserted_rows.extend(returned_columns)\n         return inserted_rows\n \n     def _chain(self):\n",
    "variant_8": "diff --git a/django/db/models/constants.py b/django/db/models/constants.py\nindex a0c99c95fc..121bdd92ca 100644\n--- a/django/db/models/constants.py\n+++ b/django/db/models/constants.py\n@@ -7,6 +7,7 @@ from enum import Enum\n LOOKUP_SEP = \"__\"\n \n \n+\n class OnConflict(Enum):\n     IGNORE = \"ignore\"\n     UPDATE = \"update\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..9c86ae4941 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,13 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n+\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+\n+                    assert len(returned_columns) == len(objs_without_pk) or on_conflict == OnConflict.IGNORE\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1839,8 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n@@ -1846,15 +1849,29 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+\n             else:\n-                self._insert(\n-                    item,\n-                    fields=fields,\n-                    using=self.db,\n-                    on_conflict=on_conflict,\n-                    update_fields=update_fields,\n-                    unique_fields=unique_fields,\n-                )\n+                if on_conflict == OnConflict.UPDATE and bulk_return:\n+                    inserted_rows.extend(\n+                        self._insert(\n+                            item,\n+                            fields=fields,\n+                            using=self.db,\n+                            on_conflict=on_conflict,\n+                            update_fields=update_fields,\n+                            unique_fields=unique_fields,\n+                            returning_fields=self.model._meta.db_returning_fields,\n+                        )\n+                    )\n+                else:\n+                    self._insert(\n+                        item,\n+                        fields=fields,\n+                        using=self.db,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n+                    )\n         return inserted_rows\n \n     def _chain(self):\n"
  }
}