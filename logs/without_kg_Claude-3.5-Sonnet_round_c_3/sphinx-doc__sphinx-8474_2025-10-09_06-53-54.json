{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/builders/singlehtml.py lines 114-123)": "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/domains/std.py lines 1072-1079)": "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/domains/std.py lines 829-857)": "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n",
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/builders/singlehtml.py lines 157-161)": "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
    "Location 5 (/root/hy/projects_3/sphinx/sphinx/domains/std.py lines 854-856)": "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/builders/singlehtml.py lines 114-123)": [
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    #\n    # Note: current Sphinx has refid confliction in singlehtml mode.\n    #       To avoid the problem, it prefixes IDs with docname when\n    #       different from master_doc.\n    #\n    #       There are related codes in inline_all_toctres() and\n    #       HTMLTranslter#add_fignumber().\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n",
      "\ndef assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n    # For singlehtml, all documents are merged into the master document,\n    # so we need to collect all figure numbers under the master document.\n    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n    \n    for docname, fignumlist in self.env.toc_fignumbers.items():\n        for figtype, fignums in fignumlist.items():\n            new_fignumbers.setdefault(figtype, {})\n            for id, fignum in fignums.items():\n                # Prefix IDs with docname to avoid conflicts in singlehtml\n                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n                new_fignumbers[figtype][prefixed_id] = fignum\n\n    return {self.config.master_doc: new_fignumbers}\n"
    ],
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/domains/std.py lines 1072-1079)": [
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n",
      "\n        else:\n            try:\n                figure_id = target_node['ids'][0]\n                # For singlehtml builder, try prefixed ID first, then fallback to original\n                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n                    prefixed_id = f\"{docname}#{figure_id}\"\n                    if (env.config.master_doc in env.toc_fignumbers and \n                        figtype in env.toc_fignumbers[env.config.master_doc] and\n                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n                \n                return env.toc_fignumbers[docname][figtype][figure_id]\n            except (KeyError, IndexError) as exc:\n                # target_node is found, but fignumber is not assigned.\n                # Maybe it is defined in orphaned document.\n                raise ValueError from exc\n"
    ],
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/domains/std.py lines 829-857)": [
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n",
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n",
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n",
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n",
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='missing_number')\n            return None\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                      location=node, type='numref', subtype='lookup_failed')\n        return None\n",
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n",
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n",
      "\ndef _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                         builder: \"Builder\", typ: str, target: str,\n                         node: pending_xref, contnode: Element) -> Element:\n    if target in self.labels:\n        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n    else:\n        docname, labelid = self.anonlabels.get(target, ('', ''))\n        figname = None\n\n    if not docname:\n        return None\n\n    target_node = env.get_doctree(docname).ids.get(labelid)\n    figtype = self.get_enumerable_node_type(target_node)\n    if figtype is None:\n        return None\n\n    if figtype != 'section' and env.config.numfig is False:\n        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n        return contnode\n\n    try:\n        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n        if fignumber is None:\n            return contnode\n    except ValueError:\n        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                       location=node)\n        return contnode\n"
    ],
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/builders/singlehtml.py lines 157-161)": [
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n",
      "\n        with progress_message(__('assembling single document')):\n            doctree = self.assemble_doctree()\n            self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n            self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n"
    ],
    "Location 5 (/root/hy/projects_3/sphinx/sphinx/domains/std.py lines 854-856)": [
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n",
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n",
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n",
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n",
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n",
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n",
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n",
      "\n        except ValueError:\n            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                          location=node, type='numref', subtype='lookup_failed')\n            return contnode\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..7de2b411d 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,14 +111,16 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n+\n         new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n         # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n+                new_fignumbers.setdefault(figtype, {})\n                 for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n+                    # Prefix IDs with docname to avoid conflicts in singlehtml\n+                    prefixed_id = \"%s#%s\" % (docname, id) if docname != self.config.master_doc else id\n+                    new_fignumbers[figtype][prefixed_id] = fignum\n \n         return {self.config.master_doc: new_fignumbers}\n \n@@ -154,11 +156,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..3702e9a36 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,6 +826,7 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n+\n     def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                              builder: \"Builder\", typ: str, target: str,\n                              node: pending_xref, contnode: Element) -> Element:\n@@ -855,6 +856,7 @@ class StandardDomain(Domain):\n             logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n                            location=node)\n             return contnode\n+            return contnode\n \n         try:\n             if node['refexplicit']:\n@@ -1069,9 +1071,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = \"%s#%s\" % (docname, figure_id)\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_0": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b4bfd699e 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,37 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1072,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_1": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b4bfd699e 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,37 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1072,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_2": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..a56bbdd07 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,29 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    #\n+    # Note: current Sphinx has refid confliction in singlehtml mode.\n+    #       To avoid the problem, it prefixes IDs with docname when\n+    #       different from master_doc.\n+    #\n+    #       There are related codes in inline_all_toctres() and\n+    #       HTMLTranslter#add_fignumber().\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +167,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..8d7ef099b 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,36 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1071,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_3": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b4bfd699e 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,37 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1072,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_4": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b4bfd699e 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,37 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1072,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_5": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..2d84c0517 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,39 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n             logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+                          location=node, type='numref', subtype='missing_number')\n+            return None\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                      location=node, type='numref', subtype='lookup_failed')\n+        return None\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1074,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_6": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b4bfd699e 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,37 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1072,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_7": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b4bfd699e 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,37 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1072,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n",
    "variant_8": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..d22450a1b 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -111,16 +111,22 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+    # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n+    # For singlehtml, all documents are merged into the master document,\n+    # so we need to collect all figure numbers under the master document.\n+    new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+    \n+    for docname, fignumlist in self.env.toc_fignumbers.items():\n+        for figtype, fignums in fignumlist.items():\n+            new_fignumbers.setdefault(figtype, {})\n+            for id, fignum in fignums.items():\n+                # Prefix IDs with docname to avoid conflicts in singlehtml\n+                prefixed_id = f\"{docname}#{id}\" if docname != self.config.master_doc else id\n+                new_fignumbers[figtype][prefixed_id] = fignum\n+\n+    return {self.config.master_doc: new_fignumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n@@ -154,11 +160,11 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         with progress_message(__('preparing documents')):\n             self.prepare_writing(docnames)  # type: ignore\n \n+\n         with progress_message(__('assembling single document')):\n             doctree = self.assemble_doctree()\n             self.env.toc_secnumbers = self.assemble_toc_secnumbers()\n             self.env.toc_fignumbers = self.assemble_toc_fignumbers()\n-\n         with progress_message(__('writing')):\n             self.write_doc_serialized(self.config.master_doc, doctree)\n             self.write_doc(self.config.master_doc, doctree)\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..b4bfd699e 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -826,34 +826,37 @@ class StandardDomain(Domain):\n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\n \n-    def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n-                             builder: \"Builder\", typ: str, target: str,\n-                             node: pending_xref, contnode: Element) -> Element:\n-        if target in self.labels:\n-            docname, labelid, figname = self.labels.get(target, ('', '', ''))\n-        else:\n-            docname, labelid = self.anonlabels.get(target, ('', ''))\n-            figname = None\n \n-        if not docname:\n-            return None\n+def _resolve_numref_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                         builder: \"Builder\", typ: str, target: str,\n+                         node: pending_xref, contnode: Element) -> Element:\n+    if target in self.labels:\n+        docname, labelid, figname = self.labels.get(target, ('', '', ''))\n+    else:\n+        docname, labelid = self.anonlabels.get(target, ('', ''))\n+        figname = None\n \n-        target_node = env.get_doctree(docname).ids.get(labelid)\n-        figtype = self.get_enumerable_node_type(target_node)\n-        if figtype is None:\n-            return None\n+    if not docname:\n+        return None\n \n-        if figtype != 'section' and env.config.numfig is False:\n-            logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n-            return contnode\n+    target_node = env.get_doctree(docname).ids.get(labelid)\n+    figtype = self.get_enumerable_node_type(target_node)\n+    if figtype is None:\n+        return None\n \n-        try:\n-            fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n-            if fignumber is None:\n-                return contnode\n-        except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+    if figtype != 'section' and env.config.numfig is False:\n+        logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n+        return contnode\n+\n+    try:\n+        fignumber = self.get_fignumber(env, builder, figtype, docname, target_node)\n+        if fignumber is None:\n+            return contnode\n+    except ValueError:\n+        logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n+                       location=node)\n+        return contnode\n+            return contnode\n             return contnode\n \n         try:\n@@ -1069,9 +1072,18 @@ class StandardDomain(Domain):\n                     return env.toc_secnumbers[docname].get('')\n                 else:\n                     return env.toc_secnumbers[docname].get(anchorname)\n+\n         else:\n             try:\n                 figure_id = target_node['ids'][0]\n+                # For singlehtml builder, try prefixed ID first, then fallback to original\n+                if builder.name == 'singlehtml' and docname != env.config.master_doc:\n+                    prefixed_id = f\"{docname}#{figure_id}\"\n+                    if (env.config.master_doc in env.toc_fignumbers and \n+                        figtype in env.toc_fignumbers[env.config.master_doc] and\n+                        prefixed_id in env.toc_fignumbers[env.config.master_doc][figtype]):\n+                        return env.toc_fignumbers[env.config.master_doc][figtype][prefixed_id]\n+                \n                 return env.toc_fignumbers[docname][figtype][figure_id]\n             except (KeyError, IndexError) as exc:\n                 # target_node is found, but fignumber is not assigned.\n"
  }
}