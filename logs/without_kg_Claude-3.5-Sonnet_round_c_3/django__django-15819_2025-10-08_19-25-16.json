{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/management/commands/inspectdb.py lines 134-136)": "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
    "Location 2 (/root/hy/projects_3/django/django/core/management/commands/inspectdb.py lines 165-188)": "\n                if is_relation:\n                    ref_db_column, ref_db_table = relations[column_name]\n                    if extra_params.pop(\"unique\", False) or extra_params.get(\n                        \"primary_key\"\n                    ):\n                        rel_type = \"OneToOneField\"\n                    else:\n                        rel_type = \"ForeignKey\"\n                        ref_pk_column = (\n                            connection.introspection.get_primary_key_column(\n                                cursor, ref_db_table\n                            )\n                        )\n                        if ref_pk_column and ref_pk_column != ref_db_column:\n                            extra_params[\"to_field\"] = ref_db_column\n                    rel_to = (\n                        \"self\"\n                        if ref_db_table == table_name\n                        else table2model(ref_db_table)\n                    )\n                    # Auto-generate related_name if multiple FKs point to same target\n                    if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                        # Generate unique related_name using field name\n                        extra_params['related_name'] = f'%(class)s_{att_name}_set'\n                    if rel_to in known_models:\n                        field_type = \"%s(%s\" % (rel_type, rel_to)\n                    else:\n                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
    "Location 3 (/root/hy/projects_3/django/django/core/management/commands/inspectdb.py lines 227-232)": "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/management/commands/inspectdb.py lines 134-136)": [
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n",
      "\n                used_column_names = []  # Holds column names used in the table so far\n                column_to_field_name = {}  # Maps column names to names of model fields\n                # Analyze relations to identify target models with multiple FK references\n                target_model_refs = {}  # Maps target_model -> [field_names]\n                for col_name, (ref_col, ref_table) in relations.items():\n                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n                    if target_model not in target_model_refs:\n                        target_model_refs[target_model] = []\n                    target_model_refs[target_model].append(col_name)\n                for row in table_description:\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/core/management/commands/inspectdb.py lines 165-188)": [
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Auto-generate related_name if multiple FKs point to same target\n                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                            # Generate unique related_name using field name\n                            extra_params['related_name'] = f'%(class)s_{att_name}_set'\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Auto-generate related_name if multiple FKs point to same target\n                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                            # Generate unique related_name using field name\n                            field_name = att_name  # att_name is available from normalize_col_name call\n                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Auto-generate related_name if multiple FKs point to same target\n                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                            # Generate unique related_name using field name\n                            field_name = att_name  # att_name is available from normalize_col_name call\n                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Auto-generate related_name if multiple FKs point to same target\n                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                            # Generate unique related_name using field name\n                            field_name = att_name  # att_name is available from normalize_col_name call\n                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Auto-generate related_name if multiple FKs point to same target\n                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                            # Generate unique related_name using field name\n                            field_name = att_name  # att_name is available from normalize_col_name call\n                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                if is_relation:\n                    ref_db_column, ref_db_table = relations[column_name]\n                    if extra_params.pop(\"unique\", False) or extra_params.get(\n                        \"primary_key\"\n                    ):\n                        rel_type = \"OneToOneField\"\n                    else:\n                        rel_type = \"ForeignKey\"\n                        ref_pk_column = (\n                            connection.introspection.get_primary_key_column(\n                                cursor, ref_db_table\n                            )\n                        )\n                        if ref_pk_column and ref_pk_column != ref_db_column:\n                            extra_params[\"to_field\"] = ref_db_column\n                    rel_to = (\n                        \"self\"\n                        if ref_db_table == table_name\n                        else table2model(ref_db_table)\n                    )\n                    # Auto-generate related_name if multiple FKs point to same target\n                    if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                        # Generate unique related_name using field name\n                        field_name = att_name  # att_name is available from normalize_col_name call\n                        extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                    if rel_to in known_models:\n                        field_type = \"%s(%s\" % (rel_type, rel_to)\n                    else:\n                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Auto-generate related_name if multiple FKs point to same target\n                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                            # Generate unique related_name using field name\n                            field_name = att_name  # att_name is available from normalize_col_name call\n                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n",
      "\n                    if is_relation:\n                        ref_db_column, ref_db_table = relations[column_name]\n                        if extra_params.pop(\"unique\", False) or extra_params.get(\n                            \"primary_key\"\n                        ):\n                            rel_type = \"OneToOneField\"\n                        else:\n                            rel_type = \"ForeignKey\"\n                            ref_pk_column = (\n                                connection.introspection.get_primary_key_column(\n                                    cursor, ref_db_table\n                                )\n                            )\n                            if ref_pk_column and ref_pk_column != ref_db_column:\n                                extra_params[\"to_field\"] = ref_db_column\n                        rel_to = (\n                            \"self\"\n                            if ref_db_table == table_name\n                            else table2model(ref_db_table)\n                        )\n                        # Auto-generate related_name if multiple FKs point to same target\n                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n                            extra_params['related_name'] = f'%(class)s_{att_name}_set'\n                        if rel_to in known_models:\n                            field_type = \"%s(%s\" % (rel_type, rel_to)\n                        else:\n                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n"
    ],
    "Location 3 (/root/hy/projects_3/django/django/core/management/commands/inspectdb.py lines 227-232)": [
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n",
      "\n                    if extra_params:\n                        if not field_desc.endswith(\"(\"):\n                            field_desc += \", \"\n                        field_desc += \", \".join(\n                            \"%s=%r\" % (k, v) for k, v in extra_params.items()\n                        )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..731196381a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            # Generate unique related_name using field name\n+                            field_name = att_name  # att_name is available from normalize_col_name call\n+                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +238,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_0": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..af2ec0b8ec 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,30 +170,35 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n-                    if is_relation:\n-                        ref_db_column, ref_db_table = relations[column_name]\n-                        if extra_params.pop(\"unique\", False) or extra_params.get(\n-                            \"primary_key\"\n-                        ):\n-                            rel_type = \"OneToOneField\"\n-                        else:\n-                            rel_type = \"ForeignKey\"\n-                            ref_pk_column = (\n-                                connection.introspection.get_primary_key_column(\n-                                    cursor, ref_db_table\n-                                )\n+\n+                if is_relation:\n+                    ref_db_column, ref_db_table = relations[column_name]\n+                    if extra_params.pop(\"unique\", False) or extra_params.get(\n+                        \"primary_key\"\n+                    ):\n+                        rel_type = \"OneToOneField\"\n+                    else:\n+                        rel_type = \"ForeignKey\"\n+                        ref_pk_column = (\n+                            connection.introspection.get_primary_key_column(\n+                                cursor, ref_db_table\n                             )\n-                            if ref_pk_column and ref_pk_column != ref_db_column:\n-                                extra_params[\"to_field\"] = ref_db_column\n-                        rel_to = (\n-                            \"self\"\n-                            if ref_db_table == table_name\n-                            else table2model(ref_db_table)\n                         )\n-                        if rel_to in known_models:\n-                            field_type = \"%s(%s\" % (rel_type, rel_to)\n-                        else:\n-                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        if ref_pk_column and ref_pk_column != ref_db_column:\n+                            extra_params[\"to_field\"] = ref_db_column\n+                    rel_to = (\n+                        \"self\"\n+                        if ref_db_table == table_name\n+                        else table2model(ref_db_table)\n+                    )\n+                    # Auto-generate related_name if multiple FKs point to same target\n+                    if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                        # Generate unique related_name using field name\n+                        extra_params['related_name'] = f'%(class)s_{att_name}_set'\n+                    if rel_to in known_models:\n+                        field_type = \"%s(%s\" % (rel_type, rel_to)\n+                    else:\n+                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n@@ -224,6 +237,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_1": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..bec14c5988 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,10 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            # Generate unique related_name using field name\n+                            extra_params['related_name'] = f'%(class)s_{att_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +237,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_2": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..731196381a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            # Generate unique related_name using field name\n+                            field_name = att_name  # att_name is available from normalize_col_name call\n+                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +238,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_3": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..731196381a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            # Generate unique related_name using field name\n+                            field_name = att_name  # att_name is available from normalize_col_name call\n+                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +238,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_4": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..731196381a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            # Generate unique related_name using field name\n+                            field_name = att_name  # att_name is available from normalize_col_name call\n+                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +238,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_5": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..731196381a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            # Generate unique related_name using field name\n+                            field_name = att_name  # att_name is available from normalize_col_name call\n+                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +238,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_6": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..3ea39bd656 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,30 +170,36 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n-                    if is_relation:\n-                        ref_db_column, ref_db_table = relations[column_name]\n-                        if extra_params.pop(\"unique\", False) or extra_params.get(\n-                            \"primary_key\"\n-                        ):\n-                            rel_type = \"OneToOneField\"\n-                        else:\n-                            rel_type = \"ForeignKey\"\n-                            ref_pk_column = (\n-                                connection.introspection.get_primary_key_column(\n-                                    cursor, ref_db_table\n-                                )\n+\n+                if is_relation:\n+                    ref_db_column, ref_db_table = relations[column_name]\n+                    if extra_params.pop(\"unique\", False) or extra_params.get(\n+                        \"primary_key\"\n+                    ):\n+                        rel_type = \"OneToOneField\"\n+                    else:\n+                        rel_type = \"ForeignKey\"\n+                        ref_pk_column = (\n+                            connection.introspection.get_primary_key_column(\n+                                cursor, ref_db_table\n                             )\n-                            if ref_pk_column and ref_pk_column != ref_db_column:\n-                                extra_params[\"to_field\"] = ref_db_column\n-                        rel_to = (\n-                            \"self\"\n-                            if ref_db_table == table_name\n-                            else table2model(ref_db_table)\n                         )\n-                        if rel_to in known_models:\n-                            field_type = \"%s(%s\" % (rel_type, rel_to)\n-                        else:\n-                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        if ref_pk_column and ref_pk_column != ref_db_column:\n+                            extra_params[\"to_field\"] = ref_db_column\n+                    rel_to = (\n+                        \"self\"\n+                        if ref_db_table == table_name\n+                        else table2model(ref_db_table)\n+                    )\n+                    # Auto-generate related_name if multiple FKs point to same target\n+                    if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                        # Generate unique related_name using field name\n+                        field_name = att_name  # att_name is available from normalize_col_name call\n+                        extra_params['related_name'] = f'%(class)s_{field_name}_set'\n+                    if rel_to in known_models:\n+                        field_type = \"%s(%s\" % (rel_type, rel_to)\n+                    else:\n+                        field_type = \"%s('%s'\" % (rel_type, rel_to)\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n@@ -224,6 +238,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_7": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..731196381a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            # Generate unique related_name using field name\n+                            field_name = att_name  # att_name is available from normalize_col_name call\n+                            extra_params['related_name'] = f'%(class)s_{field_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +238,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n",
    "variant_8": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..c5ce283966 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -131,8 +131,16 @@ class Command(BaseCommand):\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % table2model(table_name)\n                 known_models.append(table2model(table_name))\n+\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                # Analyze relations to identify target models with multiple FK references\n+                target_model_refs = {}  # Maps target_model -> [field_names]\n+                for col_name, (ref_col, ref_table) in relations.items():\n+                    target_model = \"self\" if ref_table == table_name else table2model(ref_table)\n+                    if target_model not in target_model_refs:\n+                        target_model_refs[target_model] = []\n+                    target_model_refs[target_model].append(col_name)\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -162,6 +170,7 @@ class Command(BaseCommand):\n                     elif column_name in unique_columns:\n                         extra_params[\"unique\"] = True\n \n+\n                     if is_relation:\n                         ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop(\"unique\", False) or extra_params.get(\n@@ -182,6 +191,9 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        # Auto-generate related_name if multiple FKs point to same target\n+                        if rel_to in target_model_refs and len(target_model_refs[rel_to]) > 1:\n+                            extra_params['related_name'] = f'%(class)s_{att_name}_set'\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n@@ -224,6 +236,7 @@ class Command(BaseCommand):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n"
  }
}