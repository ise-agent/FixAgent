{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/util/rst.py lines 28-28)": "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/util/rst.py lines 82-86)": "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
    "Location 3 (/root/hy/projects_3/sphinx/tests/test_util_rst.py lines 48-48)": "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'hello Sphinx world',\n                          'Sphinx is a document generator'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/util/rst.py lines 28-28)": [
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n",
      "\ndocinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n"
    ],
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/util/rst.py lines 82-86)": [
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n",
      "\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            else:\n                break\n\n        if pos > 0:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists)\n        for lineno, line in enumerate(prolog.splitlines()):\n            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n"
    ],
    "Location 3 (/root/hy/projects_3/sphinx/tests/test_util_rst.py lines 48-48)": [
      "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that prolog is correctly inserted before headings containing domain directives\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'hello Sphinx world',\n                          'Sphinx is a document generator'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n",
      "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'hello Sphinx world',\n                          'Sphinx is a document generator'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n",
      "\ndef test_prepend_prolog_with_domain_directive():\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'hello Sphinx world',\n                          'Sphinx is a document generator'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n",
      "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'hello Sphinx world',\n                          'Sphinx is a document generator'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n",
      "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'Content here'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'Content here')]\n",
      "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'hello Sphinx world',\n                          'Sphinx is a document generator'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n",
      "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'hello Sphinx world',\n                          'Sphinx is a document generator'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n",
      "\ndef test_prepend_prolog_with_domain_directive(app):\n    # Test that headings with domain directives are handled correctly\n    prolog = 'this is rst_prolog\\nhello reST!'\n    content = StringList([':mod:`mypackage2`',\n                          '=================',\n                          '',\n                          'Content here'],\n                         'dummy.rst')\n    prepend_prolog(content, prolog)\n\n    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n                                      ('<rst_prolog>', 1, 'hello reST!'),\n                                      ('<generated>', 0, ''),\n                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n                                      ('dummy.rst', 1, '================='),\n                                      ('dummy.rst', 2, ''),\n                                      ('dummy.rst', 3, 'Content here')]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..700223301 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -79,6 +80,7 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n         pos = 0\n+\n         for line in content:\n             if docinfo_re.match(line):\n                 pos += 1\ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..dcf4bfd22 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,9 +45,29 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n+def test_prepend_prolog_with_domain_directive():\n+    \"\"\"Test that prolog is inserted before headings containing domain directives.\"\"\"\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'Content'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'Content')]\n+\n+\n def test_prepend_prolog_with_CR(app):\n     # prolog having CR at tail\n     prolog = 'this is rst_prolog\\nhello reST!\\n'\n",
    "variant_0": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..d37ed458e 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,6 +45,25 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'hello Sphinx world',\n+                          'Sphinx is a document generator'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n",
    "variant_1": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..aa0391ac1 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,6 +45,25 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that prolog is correctly inserted before headings containing domain directives\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'hello Sphinx world',\n+                          'Sphinx is a document generator'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n",
    "variant_2": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..d37ed458e 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,6 +45,25 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'hello Sphinx world',\n+                          'Sphinx is a document generator'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n",
    "variant_3": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..29033f413 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,6 +45,25 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n+def test_prepend_prolog_with_domain_directive():\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'hello Sphinx world',\n+                          'Sphinx is a document generator'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n",
    "variant_4": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..d37ed458e 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,6 +45,25 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'hello Sphinx world',\n+                          'Sphinx is a document generator'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n",
    "variant_5": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..9e9657091 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,7 +45,24 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n-                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'Content here'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'Content here')]\n \n \n def test_prepend_prolog_with_CR(app):\n",
    "variant_6": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..d37ed458e 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,6 +45,25 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'hello Sphinx world',\n+                          'Sphinx is a document generator'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n",
    "variant_7": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..d37ed458e 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,6 +45,25 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'hello Sphinx world',\n+                          'Sphinx is a document generator'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello Sphinx world'),\n                                       ('dummy.rst', 4, 'Sphinx is a document generator')]\n \n \n",
    "variant_8": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..a13c08633 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,8 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+\n+docinfo_re = re.compile(r'^:([a-zA-Z][a-zA-Z0-9_-]*): ')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -75,6 +76,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+def prepend_prolog(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    if prolog:\n+        pos = 0\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n@@ -94,6 +100,15 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        if pos > 0:\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo if exists)\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b..9e9657091 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -45,7 +45,24 @@ def test_prepend_prolog(app):\n                                       ('<generated>', 0, ''),\n                                       ('dummy.rst', 2, ''),\n                                       ('dummy.rst', 3, 'hello Sphinx world'),\n-                                      ('dummy.rst', 4, 'Sphinx is a document generator')]\n+\n+def test_prepend_prolog_with_domain_directive(app):\n+    # Test that headings with domain directives are handled correctly\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`mypackage2`',\n+                          '=================',\n+                          '',\n+                          'Content here'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`mypackage2`'),\n+                                      ('dummy.rst', 1, '================='),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'Content here')]\n \n \n def test_prepend_prolog_with_CR(app):\n"
  }
}