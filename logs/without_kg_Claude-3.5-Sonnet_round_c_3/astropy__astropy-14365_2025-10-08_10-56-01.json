{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 63-63)": "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
    "Location 2 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 71-71)": "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
    "Location 3 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 295-297)": "\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n",
    "Location 4 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 298-306)": "\n                if len(command) < 3:\n                    continue\n                err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n            if colnames is None:\n                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n            if current_rows is None:\n                current_rows = []\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 63-63)": [
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n",
      "\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n"
    ],
    "Location 2 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 71-71)": [
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n",
      "\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n"
    ],
    "Location 3 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 295-297)": [
      "\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n",
      "\n            for cline in command_lines.strip().split(\"\\n\"):\n                command = cline.strip().split()\n                # This should never happen, but just in case.\n",
      "\n            for cline in command_lines.strip().split(\"\\n\"):\n                command = cline.strip().split()\n                # This should never happen, but just in case.\n",
      "\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n",
      "\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n",
      "\n            for cline in command_lines.strip().split(\"\\n\"):\n                command = cline.strip().split()\n                # This should never happen, but just in case.\n",
      "\n            for cline in command_lines.strip().split(\"\\n\"):\n                command = cline.strip().split()\n                # This should never happen, but just in case.\n",
      "\n        if datatype.startswith(\"data\"):\n            # The first time I find data, I define err_specs\n            if err_specs == {} and command_lines != \"\":\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n"
    ],
    "Location 4 (/root/hy/projects_3/astropy/astropy/io/ascii/qdp.py lines 298-306)": [
      "\n            if err_specs == {} and command_lines != \"\":\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n                    if len(command) < 3:\n                        continue\n                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n            if colnames is None:\n                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n            if current_rows is None:\n                current_rows = []\n",
      "\n            if err_specs == {} and command_lines != \"\":\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n                    if len(command) < 3:\n                        continue\n                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n            if colnames is None:\n                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n            if current_rows is None:\n                current_rows = []\n",
      "\n                # The first time I find data, I define err_specs\n                if err_specs == {} and command_lines != \"\":\n                    for cline in command_lines.strip().split(\"\\n\"):\n                        command = cline.strip().split()\n                        # This should never happen, but just in case.\n                        if len(command) < 3:\n                            continue\n                        err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n                if colnames is None:\n                    colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n                if current_rows is None:\n                    current_rows = []\n",
      "\n            if err_specs == {} and command_lines != \"\":\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n                    if len(command) < 3:\n                        continue\n                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n            if colnames is None:\n                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n            if current_rows is None:\n                current_rows = []\n",
      "\n            if err_specs == {} and command_lines != \"\":\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n                    if len(command) < 3:\n                        continue\n                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n            if colnames is None:\n                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n            if current_rows is None:\n                current_rows = []\n",
      "\n            if err_specs == {} and command_lines != \"\":\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n                    if len(command) < 3:\n                        continue\n                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n            if colnames is None:\n                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n            if current_rows is None:\n                current_rows = []\n",
      "\n            if err_specs == {} and command_lines != \"\":\n                for cline in command_lines.strip().split(\"\\n\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n                    if len(command) < 3:\n                        continue\n                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n            if colnames is None:\n                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n            if current_rows is None:\n                current_rows = []\n",
      "\n                # The first time I find data, I define err_specs\n                if err_specs == {} and command_lines != \"\":\n                    for cline in command_lines.strip().split(\"\\n\"):\n                        command = cline.strip().split()\n                        # This should never happen, but just in case.\n                        if len(command) < 3:\n                            continue\n                        err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n                if colnames is None:\n                    colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n\n                if current_rows is None:\n                    current_rows = []\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..7db414d3f7 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -292,9 +294,11 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n+\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n                     # This should never happen, but just in case.\n+\n                     if len(command) < 3:\n                         continue\n                     err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n@@ -303,7 +307,6 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_0": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..394e510d70 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -292,18 +294,19 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n+\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n                     # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+\n+                if len(command) < 3:\n+                    continue\n+                err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_1": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..21e1c0a912 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -291,6 +293,12 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n+            if err_specs == {} and command_lines != \"\":\n+\n+                for cline in command_lines.strip().split(\"\\n\"):\n+                    command = cline.strip().split()\n+                    # This should never happen, but just in case.\n+\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n@@ -303,7 +311,6 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_2": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..4f17f6e83b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -291,6 +293,12 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n+            if err_specs == {} and command_lines != \"\":\n+\n+            for cline in command_lines.strip().split(\"\\n\"):\n+                command = cline.strip().split()\n+                # This should never happen, but just in case.\n+\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n@@ -303,7 +311,6 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_3": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..7e3780722d 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -292,18 +294,24 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n-                    # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n-            if colnames is None:\n-                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n-\n-            if current_rows is None:\n-                current_rows = []\n \n+            for cline in command_lines.strip().split(\"\\n\"):\n+                command = cline.strip().split()\n+                # This should never happen, but just in case.\n+\n+                # The first time I find data, I define err_specs\n+                if err_specs == {} and command_lines != \"\":\n+                    for cline in command_lines.strip().split(\"\\n\"):\n+                        command = cline.strip().split()\n+                        # This should never happen, but just in case.\n+                        if len(command) < 3:\n+                            continue\n+                        err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+                if colnames is None:\n+                    colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n+\n+                if current_rows is None:\n+                    current_rows = []\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_4": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..21e1c0a912 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -291,6 +293,12 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n+            if err_specs == {} and command_lines != \"\":\n+\n+                for cline in command_lines.strip().split(\"\\n\"):\n+                    command = cline.strip().split()\n+                    # This should never happen, but just in case.\n+\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n@@ -303,7 +311,6 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_5": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..21e1c0a912 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -291,6 +293,12 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n+            if err_specs == {} and command_lines != \"\":\n+\n+                for cline in command_lines.strip().split(\"\\n\"):\n+                    command = cline.strip().split()\n+                    # This should never happen, but just in case.\n+\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n@@ -303,7 +311,6 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_6": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..4f17f6e83b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -291,6 +293,12 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n+            if err_specs == {} and command_lines != \"\":\n+\n+            for cline in command_lines.strip().split(\"\\n\"):\n+                command = cline.strip().split()\n+                # This should never happen, but just in case.\n+\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n@@ -303,7 +311,6 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_7": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..4f17f6e83b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -291,6 +293,12 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n+            if err_specs == {} and command_lines != \"\":\n+\n+            for cline in command_lines.strip().split(\"\\n\"):\n+                command = cline.strip().split()\n+                # This should never happen, but just in case.\n+\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n@@ -303,7 +311,6 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             if current_rows is None:\n                 current_rows = []\n-\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n",
    "variant_8": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..c294b32e5a 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,6 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n+\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n@@ -68,7 +69,8 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n@@ -289,21 +291,30 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n             command_lines += line + \"\\n\"\n             continue\n \n+        if datatype.startswith(\"data\"):\n+            # The first time I find data, I define err_specs\n+            if err_specs == {} and command_lines != \"\":\n+\n         if datatype.startswith(\"data\"):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n                     command = cline.strip().split()\n                     # This should never happen, but just in case.\n-                    if len(command) < 3:\n-                        continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n-            if colnames is None:\n-                colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n-\n-            if current_rows is None:\n-                current_rows = []\n \n+                # The first time I find data, I define err_specs\n+                if err_specs == {} and command_lines != \"\":\n+                    for cline in command_lines.strip().split(\"\\n\"):\n+                        command = cline.strip().split()\n+                        # This should never happen, but just in case.\n+                        if len(command) < 3:\n+                            continue\n+                        err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+                if colnames is None:\n+                    colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n+\n+                if current_rows is None:\n+                    current_rows = []\n             values = []\n             for v in line.split(delimiter):\n                 if v == \"NO\":\n"
  }
}