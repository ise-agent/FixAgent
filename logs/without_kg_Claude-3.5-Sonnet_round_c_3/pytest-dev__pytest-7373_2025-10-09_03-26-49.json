{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/mark/evaluate.py lines 18-18)": "\n# Remove this line - evalcache_key is no longer needed\n",
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/mark/evaluate.py lines 21-31)": "\ndef _evaluate_skip_marks(self) -> bool:\n    \"\"\"\n    Evaluate all skip marks on this test.\n\n    If any of them match the condition, skip the test.\n    \"\"\"\n    for mark in self._get_marks(\"skip\"):\n        if self._istrue(mark):\n            return True\n    return False\n\ndef _evaluate_skipif_marks(self) -> bool:\n    \"\"\"\n    Evaluate all skipif marks on this test.\n\n    If any of them match the condition, skip the test.\n    \"\"\"\n    for mark in self._get_marks(\"skipif\"):\n        if self._istrue(mark):\n            return True\n    return False\n\n\nevalcache_key = StoreKey[Dict[str, Any]]()\n\n\nclass MarkEvaluator:\n    def __init__(self, item: Item, name: str) -> None:\n        self.item = item\n        self._marks = None  # type: Optional[List[Mark]]\n        self._mark = None  # type: Optional[Mark]\n        self._mark_name = name\n\n    def __bool__(self) -> bool:\n",
    "Location 3 (/root/hy/projects_3/pytest/src/_pytest/mark/evaluate.py lines 100-101)": "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/mark/evaluate.py lines 18-18)": [
      "\n# Remove this line - evalcache_key is no longer needed\n",
      "\n# Remove this line - evalcache_key is no longer needed\n",
      "\n# Remove this line entirely - it's part of the caching mechanism we're eliminating\n",
      "\n# Remove this line - evalcache_key is no longer needed\n",
      "\n# Remove this line - evalcache_key is no longer needed\n",
      "\n# Remove this line - evalcache_key is no longer needed\n",
      "\n# Remove this line - it's part of the caching mechanism we're eliminating\n",
      "\n# Remove this line - evalcache_key is no longer needed\n"
    ],
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/mark/evaluate.py lines 21-31)": [
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    \n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n",
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    \n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n",
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    \n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n",
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    \n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n",
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n",
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n",
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n",
      "\ndef cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n    import _pytest._code\n    \n    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n    return eval(exprcode, d)\n"
    ],
    "Location 3 (/root/hy/projects_3/pytest/src/_pytest/mark/evaluate.py lines 100-101)": [
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n",
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n",
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n",
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n",
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n",
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n",
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n",
      "\n                for expr in args:\n                    self.expr = expr\n                    if isinstance(expr, str):\n                        d = self._getglobals()\n                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n                        result = eval(exprcode, d)\n                    else:\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..0851b41ac 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,12 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+\n+\n+\n \n \n class MarkEvaluator:\n@@ -97,8 +89,10 @@ class MarkEvaluator:\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n+\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_0": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..fc46983ca 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,45 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n+\n+# Remove this line - evalcache_key is no longer needed\n+\n+\n+\n+def _evaluate_skip_marks(self) -> bool:\n+    \"\"\"\n+    Evaluate all skip marks on this test.\n+\n+    If any of them match the condition, skip the test.\n+    \"\"\"\n+    for mark in self._get_marks(\"skip\"):\n+        if self._istrue(mark):\n+            return True\n+    return False\n+\n+def _evaluate_skipif_marks(self) -> bool:\n+    \"\"\"\n+    Evaluate all skipif marks on this test.\n+\n+    If any of them match the condition, skip the test.\n+    \"\"\"\n+    for mark in self._get_marks(\"skipif\"):\n+        if self._istrue(mark):\n+            return True\n+    return False\n+\n+\n evalcache_key = StoreKey[Dict[str, Any]]()\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n+class MarkEvaluator:\n+    def __init__(self, item: Item, name: str) -> None:\n+        self.item = item\n+        self._marks = None  # type: Optional[List[Mark]]\n+        self._mark = None  # type: Optional[Mark]\n+        self._mark_name = name\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+    def __bool__(self) -> bool:\n \n \n class MarkEvaluator:\n@@ -94,11 +119,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_1": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..d85c1f41d 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,16 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line - evalcache_key is no longer needed\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    \n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +90,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_2": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..d85c1f41d 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,16 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line - evalcache_key is no longer needed\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    \n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +90,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_3": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..ff92687d2 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,16 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line entirely - it's part of the caching mechanism we're eliminating\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    \n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +90,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_4": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..d85c1f41d 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,16 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line - evalcache_key is no longer needed\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    \n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +90,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_5": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..3212b5bad 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,15 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line - evalcache_key is no longer needed\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +89,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_6": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..3212b5bad 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,15 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line - evalcache_key is no longer needed\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +89,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_7": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..40945c1ce 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,15 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line - it's part of the caching mechanism we're eliminating\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +89,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n",
    "variant_8": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..d85c1f41d 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,16 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n+\n+# Remove this line - evalcache_key is no longer needed\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+    import _pytest._code\n+    \n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -94,11 +90,17 @@ class MarkEvaluator:\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n \n+                for expr in args:\n+                    self.expr = expr\n+                    if isinstance(expr, str):\n+\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n+                    else:\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n"
  }
}