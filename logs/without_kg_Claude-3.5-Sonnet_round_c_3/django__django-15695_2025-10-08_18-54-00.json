{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 968-971)": "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, remove the named index that was created during forward operation\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if self.allow_migrate_model(schema_editor.connection.alias, model):\n                # Create index object representing the named index to be removed\n                named_index = models.Index(\n                    fields=self.old_fields,\n                    name=self.new_name,\n                )\n                schema_editor.remove_index(model, named_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/migrations/operations/models.py lines 968-971)": [
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, remove the named index that was created during forward operation\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if self.allow_migrate_model(schema_editor.connection.alias, model):\n                # Create index object representing the named index to be removed\n                named_index = models.Index(\n                    fields=self.old_fields,\n                    name=self.new_name,\n                )\n                schema_editor.remove_index(model, named_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    if self.old_fields:\n        # For unnamed indexes, remove the named index that was created during forward operation\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, model):\n            # Create index object representing the named index to be removed\n            named_index = models.Index(\n                fields=self.old_fields,\n                name=self.new_name,\n            )\n            schema_editor.remove_index(model, named_index)\n        return\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n\n    self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    if self.old_fields:\n        # For unnamed indexes, remove the named index that was created during forward operation\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, model):\n            # Create index object representing the named index to be removed\n            named_index = models.Index(\n                fields=self.old_fields,\n                name=self.new_name,\n            )\n            schema_editor.remove_index(model, named_index)\n        return\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n\n    self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, remove the named index that was created during forward operation\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if self.allow_migrate_model(schema_editor.connection.alias, model):\n                # Create index object representing the named index to be removed\n                named_index = models.Index(\n                    fields=self.old_fields,\n                    name=self.new_name,\n                )\n                schema_editor.remove_index(model, named_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, remove the named index that was created during forward operation\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if self.allow_migrate_model(schema_editor.connection.alias, model):\n                # Create index object representing the named index to be removed\n                named_index = models.Index(\n                    fields=self.old_fields,\n                    name=self.new_name,\n                )\n                schema_editor.remove_index(model, named_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    if self.old_fields:\n        # For unnamed indexes, remove the named index that was created during forward operation\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, model):\n            # Create index object representing the named index to be removed\n            named_index = models.Index(\n                fields=self.old_fields,\n                name=self.new_name,\n            )\n            schema_editor.remove_index(model, named_index)\n        return\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n\n    self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        if self.old_fields:\n            # For unnamed indexes, remove the named index that was created during forward operation\n            model = from_state.apps.get_model(app_label, self.model_name)\n            if self.allow_migrate_model(schema_editor.connection.alias, model):\n                # Create index object representing the named index to be removed\n                named_index = models.Index(\n                    fields=self.old_fields,\n                    name=self.new_name,\n                )\n                schema_editor.remove_index(model, named_index)\n            return\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n\n        self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n        self.new_name_lower, self.old_name_lower = (\n            self.old_name_lower,\n            self.new_name_lower,\n        )\n        self.new_name, self.old_name = self.old_name, self.new_name\n",
      "\ndef database_backwards(self, app_label, schema_editor, from_state, to_state):\n    if self.old_fields:\n        # For unnamed indexes, remove the named index that was created during forward operation\n        model = from_state.apps.get_model(app_label, self.model_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, model):\n            # Create index object representing the named index to be removed\n            named_index = models.Index(\n                fields=self.old_fields,\n                name=self.new_name,\n            )\n            schema_editor.remove_index(model, named_index)\n        return\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n\n    self.database_forwards(app_label, schema_editor, from_state, to_state)\n\n    self.new_name_lower, self.old_name_lower = (\n        self.old_name_lower,\n        self.new_name_lower,\n    )\n    self.new_name, self.old_name = self.old_name, self.new_name\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..3717648b7c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,9 +965,18 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, remove the named index that was created during forward operation\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if self.allow_migrate_model(schema_editor.connection.alias, model):\n+                # Create index object representing the named index to be removed\n+                named_index = models.Index(\n+                    fields=self.old_fields,\n+                    name=self.new_name,\n+                )\n+                schema_editor.remove_index(model, named_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n",
    "variant_0": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..e2f93e0a1a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,9 +965,18 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, remove the named index that was created during forward operation\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if self.allow_migrate_model(schema_editor.connection.alias, model):\n+                # Create index object representing the named index to be removed\n+                named_index = models.Index(\n+                    fields=self.old_fields,\n+                    name=self.new_name,\n+                )\n+                schema_editor.remove_index(model, named_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -984,6 +993,20 @@ class RenameIndex(IndexOperation):\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_1": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..e2f93e0a1a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,9 +965,18 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, remove the named index that was created during forward operation\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if self.allow_migrate_model(schema_editor.connection.alias, model):\n+                # Create index object representing the named index to be removed\n+                named_index = models.Index(\n+                    fields=self.old_fields,\n+                    name=self.new_name,\n+                )\n+                schema_editor.remove_index(model, named_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -984,6 +993,20 @@ class RenameIndex(IndexOperation):\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_2": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..8ab665f7b5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,10 +965,33 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+\n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    if self.old_fields:\n+        # For unnamed indexes, remove the named index that was created during forward operation\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            # Create index object representing the named index to be removed\n+            named_index = models.Index(\n+                fields=self.old_fields,\n+                name=self.new_name,\n+            )\n+            schema_editor.remove_index(model, named_index)\n+        return\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n+\n+    self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n",
    "variant_3": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..8ab665f7b5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,10 +965,33 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+\n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    if self.old_fields:\n+        # For unnamed indexes, remove the named index that was created during forward operation\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            # Create index object representing the named index to be removed\n+            named_index = models.Index(\n+                fields=self.old_fields,\n+                name=self.new_name,\n+            )\n+            schema_editor.remove_index(model, named_index)\n+        return\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n+\n+    self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n",
    "variant_4": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..e2f93e0a1a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,9 +965,18 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, remove the named index that was created during forward operation\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if self.allow_migrate_model(schema_editor.connection.alias, model):\n+                # Create index object representing the named index to be removed\n+                named_index = models.Index(\n+                    fields=self.old_fields,\n+                    name=self.new_name,\n+                )\n+                schema_editor.remove_index(model, named_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -984,6 +993,20 @@ class RenameIndex(IndexOperation):\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_5": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..e2f93e0a1a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,9 +965,18 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, remove the named index that was created during forward operation\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if self.allow_migrate_model(schema_editor.connection.alias, model):\n+                # Create index object representing the named index to be removed\n+                named_index = models.Index(\n+                    fields=self.old_fields,\n+                    name=self.new_name,\n+                )\n+                schema_editor.remove_index(model, named_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -984,6 +993,20 @@ class RenameIndex(IndexOperation):\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_6": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..8ab665f7b5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,10 +965,33 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+\n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    if self.old_fields:\n+        # For unnamed indexes, remove the named index that was created during forward operation\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            # Create index object representing the named index to be removed\n+            named_index = models.Index(\n+                fields=self.old_fields,\n+                name=self.new_name,\n+            )\n+            schema_editor.remove_index(model, named_index)\n+        return\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n+\n+    self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n",
    "variant_7": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..e2f93e0a1a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,9 +965,18 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # For unnamed indexes, remove the named index that was created during forward operation\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if self.allow_migrate_model(schema_editor.connection.alias, model):\n+                # Create index object representing the named index to be removed\n+                named_index = models.Index(\n+                    fields=self.old_fields,\n+                    name=self.new_name,\n+                )\n+                schema_editor.remove_index(model, named_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n@@ -984,6 +993,20 @@ class RenameIndex(IndexOperation):\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+        self.new_name_lower, self.old_name_lower = (\n+            self.old_name_lower,\n+            self.new_name_lower,\n+        )\n+        self.new_name, self.old_name = self.old_name, self.new_name\n+\n     def describe(self):\n         if self.old_name:\n             return (\n",
    "variant_8": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..8ab665f7b5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -965,10 +965,33 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n \n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+\n+def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+    if self.old_fields:\n+        # For unnamed indexes, remove the named index that was created during forward operation\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            # Create index object representing the named index to be removed\n+            named_index = models.Index(\n+                fields=self.old_fields,\n+                name=self.new_name,\n+            )\n+            schema_editor.remove_index(model, named_index)\n+        return\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n+\n+    self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    self.new_name_lower, self.old_name_lower = (\n+        self.old_name_lower,\n+        self.new_name_lower,\n+    )\n+    self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n"
  }
}