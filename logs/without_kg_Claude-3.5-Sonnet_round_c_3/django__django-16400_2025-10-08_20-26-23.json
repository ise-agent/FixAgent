{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/contrib/contenttypes/management/__init__.py lines 96-96)": "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
    "Location 2 (/root/hy/projects_3/django/django/contrib/contenttypes/management/__init__.py lines 37-37)": "\n                with transaction.atomic(using=db):\n                    content_type.save(using=db, update_fields={\"model\"})\n            except IntegrityError:\n                # Gracefully fallback if a stale content type causes a\n                # conflict as remove_stale_contenttypes will take care of\n                # asking the user what should be done next.\n                content_type.model = old_model\n            else:\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/contrib/contenttypes/management/__init__.py lines 96-96)": [
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n",
      "\ndef get_contenttypes_and_models(app_config, using, ContentType):\n    if not router.allow_migrate_model(using, ContentType):\n        return None, None\n\n    ContentType.objects.db_manager(using).clear_cache()\n\n    content_types = {\n        ct.model: ct\n        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n    }\n    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n    return content_types, app_models\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/contrib/contenttypes/management/__init__.py lines 37-37)": [
      "\n                with transaction.atomic(using=db):\n                    content_type.save(using=db, update_fields={\"model\"})\n            except IntegrityError:\n                # Gracefully fallback if a stale content type causes a\n                # conflict as remove_stale_contenttypes will take care of\n                # asking the user what should be done next.\n                content_type.model = old_model\n            else:\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n",
      "\n                with transaction.atomic(using=db):\n                    content_type.save(using=db, update_fields={\"model\"})\n            except IntegrityError:\n                # Gracefully fallback if a stale content type causes a\n                # conflict as remove_stale_contenttypes will take care of\n                # asking the user what should be done next.\n                content_type.model = old_model\n            else:\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n",
      "\n                with transaction.atomic(using=db):\n                    content_type.save(using=db, update_fields={\"model\"})\n            except IntegrityError:\n                # Gracefully fallback if a stale content type causes a\n                # conflict as remove_stale_contenttypes will take care of\n                # asking the user what should be done next.\n                content_type.model = old_model\n            else:\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n",
      "\n                with transaction.atomic(using=db):\n                    content_type.save(using=db, update_fields={\"model\"})\n            except IntegrityError:\n                # Gracefully fallback if a stale content type causes a\n                # conflict as remove_stale_contenttypes will take care of\n                # asking the user what should be done next.\n                content_type.model = old_model\n            else:\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n",
      "\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n",
      "\n                with transaction.atomic(using=db):\n                    content_type.save(using=db, update_fields={\"model\"})\n            except IntegrityError:\n                # Gracefully fallback if a stale content type causes a\n                # conflict as remove_stale_contenttypes will take care of\n                # asking the user what should be done next.\n                content_type.model = old_model\n            else:\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n",
      "\n                with transaction.atomic(using=db):\n                    content_type.save(using=db, update_fields={\"model\"})\n            except IntegrityError:\n                # Gracefully fallback if a stale content type causes a\n                # conflict as remove_stale_contenttypes will take care of\n                # asking the user what should be done next.\n                content_type.model = old_model\n            else:\n                # Clear the cache as the `get_by_natural_key()` call will cache\n                # the renamed ContentType instance by its old model name.\n                ContentType.objects.db_manager(db).clear_cache()\n",
      "\n                ContentType.objects.db_manager(db).clear_cache()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..d0fc816a69 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,8 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +94,8 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n \n     content_types = {\n         ct.model: ct\n",
    "variant_0": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..afb8cc478d 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,18 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                with transaction.atomic(using=db):\n+                    content_type.save(using=db, update_fields={\"model\"})\n+            except IntegrityError:\n+                # Gracefully fallback if a stale content type causes a\n+                # conflict as remove_stale_contenttypes will take care of\n+                # asking the user what should be done next.\n+                content_type.model = old_model\n+            else:\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +104,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_1": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..afb8cc478d 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,18 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                with transaction.atomic(using=db):\n+                    content_type.save(using=db, update_fields={\"model\"})\n+            except IntegrityError:\n+                # Gracefully fallback if a stale content type causes a\n+                # conflict as remove_stale_contenttypes will take care of\n+                # asking the user what should be done next.\n+                content_type.model = old_model\n+            else:\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +104,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_2": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..afb8cc478d 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,18 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                with transaction.atomic(using=db):\n+                    content_type.save(using=db, update_fields={\"model\"})\n+            except IntegrityError:\n+                # Gracefully fallback if a stale content type causes a\n+                # conflict as remove_stale_contenttypes will take care of\n+                # asking the user what should be done next.\n+                content_type.model = old_model\n+            else:\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +104,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_3": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..afb8cc478d 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,18 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                with transaction.atomic(using=db):\n+                    content_type.save(using=db, update_fields={\"model\"})\n+            except IntegrityError:\n+                # Gracefully fallback if a stale content type causes a\n+                # conflict as remove_stale_contenttypes will take care of\n+                # asking the user what should be done next.\n+                content_type.model = old_model\n+            else:\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +104,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_4": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..afb8cc478d 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,18 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                with transaction.atomic(using=db):\n+                    content_type.save(using=db, update_fields={\"model\"})\n+            except IntegrityError:\n+                # Gracefully fallback if a stale content type causes a\n+                # conflict as remove_stale_contenttypes will take care of\n+                # asking the user what should be done next.\n+                content_type.model = old_model\n+            else:\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +104,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_5": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..cf86856f5e 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,10 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +96,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_6": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..afb8cc478d 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,18 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                with transaction.atomic(using=db):\n+                    content_type.save(using=db, update_fields={\"model\"})\n+            except IntegrityError:\n+                # Gracefully fallback if a stale content type causes a\n+                # conflict as remove_stale_contenttypes will take care of\n+                # asking the user what should be done next.\n+                content_type.model = old_model\n+            else:\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +104,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_7": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..afb8cc478d 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,18 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                with transaction.atomic(using=db):\n+                    content_type.save(using=db, update_fields={\"model\"})\n+            except IntegrityError:\n+                # Gracefully fallback if a stale content type causes a\n+                # conflict as remove_stale_contenttypes will take care of\n+                # asking the user what should be done next.\n+                content_type.model = old_model\n+            else:\n+                # Clear the cache as the `get_by_natural_key()` call will cache\n+                # the renamed ContentType instance by its old model name.\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +104,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n",
    "variant_8": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 903b9ab1a0..e47918273b 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -34,7 +34,8 @@ class RenameContentType(migrations.RunPython):\n             else:\n                 # Clear the cache as the `get_by_natural_key()` call will cache\n                 # the renamed ContentType instance by its old model name.\n-                ContentType.objects.clear_cache()\n+\n+                ContentType.objects.db_manager(db).clear_cache()\n \n     def rename_forward(self, apps, schema_editor):\n         self._rename(apps, schema_editor, self.old_model, self.new_model)\n@@ -93,7 +94,19 @@ def get_contenttypes_and_models(app_config, using, ContentType):\n     if not router.allow_migrate_model(using, ContentType):\n         return None, None\n \n-    ContentType.objects.clear_cache()\n+\n+def get_contenttypes_and_models(app_config, using, ContentType):\n+    if not router.allow_migrate_model(using, ContentType):\n+        return None, None\n+\n+    ContentType.objects.db_manager(using).clear_cache()\n+\n+    content_types = {\n+        ct.model: ct\n+        for ct in ContentType.objects.using(using).filter(app_label=app_config.label)\n+    }\n+    app_models = {model._meta.model_name: model for model in app_config.get_models()}\n+    return content_types, app_models\n \n     content_types = {\n         ct.model: ct\n"
  }
}