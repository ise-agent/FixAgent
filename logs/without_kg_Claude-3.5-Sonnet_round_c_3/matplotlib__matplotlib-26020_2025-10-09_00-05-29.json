{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/axes_grid1/axes_grid.py lines 13-17)": [
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n",
      "\ndef _tick_only(ax, bottom_on, left_on):\n    bottom_off = not bottom_on\n    left_off = not left_on\n    \n    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n    try:\n        # Try to access axis as a subscriptable object\n        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n    except (TypeError, KeyError):\n        # Fallback for standard matplotlib axes (including GeoAxes)\n        # Use tick_params method which is available on all axes\n        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n        # Handle axis labels separately\n        if not bottom_on:\n            ax.set_xlabel(\"\")\n        if not left_on:\n            ax.set_ylabel(\"\")\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_0": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_1": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_2": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_3": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_4": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_5": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_6": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_7": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n",
    "variant_8": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..184041d43b 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -10,11 +10,25 @@ from .axes_divider import Size, SubplotDivider, Divider\n from .mpl_axes import Axes\n \n \n+\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable (custom mpl_axes.Axes class)\n+    try:\n+        # Try to access axis as a subscriptable object\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    except (TypeError, KeyError):\n+        # Fallback for standard matplotlib axes (including GeoAxes)\n+        # Use tick_params method which is available on all axes\n+        ax.tick_params(labelbottom=bottom_on, labelleft=left_on)\n+        # Handle axis labels separately\n+        if not bottom_on:\n+            ax.set_xlabel(\"\")\n+        if not left_on:\n+            ax.set_ylabel(\"\")\n \n \n class CbarAxesBase:\n"
  }
}