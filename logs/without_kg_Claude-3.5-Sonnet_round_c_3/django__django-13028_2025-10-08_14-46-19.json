{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/sql/query.py lines 1127-1132)": "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        from django.db.models.expressions import BaseExpression\n        \n        # Only check filterable attribute on actual database expressions\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/sql/query.py lines 1127-1132)": [
      "\ndef check_filterable(self, expression):\n    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n    from django.db.models.expressions import BaseExpression\n    \n    # Only check filterable attribute on actual database expressions\n    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n        raise NotSupportedError(\n            expression.__class__.__name__ + ' is disallowed in the filter '\n            'clause.'\n        )\n    if hasattr(expression, 'get_source_expressions'):\n        for expr in expression.get_source_expressions():\n            self.check_filterable(expr)\n",
      "\ndef check_filterable(self, expression):\n    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n    from django.db.models.expressions import BaseExpression\n    \n    # Only check filterable attribute on actual database expressions\n    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n        raise NotSupportedError(\n            expression.__class__.__name__ + ' is disallowed in the filter '\n            'clause.'\n        )\n    if hasattr(expression, 'get_source_expressions'):\n        for expr in expression.get_source_expressions():\n            self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        from django.db.models.expressions import BaseExpression\n        \n        # Only check filterable attribute on actual database expressions\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\ndef check_filterable(self, expression):\n    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n    from django.db.models.expressions import BaseExpression\n    \n    # Only check filterable attribute on actual database expressions\n    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n        raise NotSupportedError(\n            expression.__class__.__name__ + ' is disallowed in the filter '\n            'clause.'\n        )\n    if hasattr(expression, 'get_source_expressions'):\n        for expr in expression.get_source_expressions():\n            self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        from django.db.models.expressions import BaseExpression\n        \n        # Only check filterable attribute on actual database expressions\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\n    def check_filterable(self, expression):\n        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n        from django.db.models.expressions import BaseExpression\n        \n        # Only check filterable attribute on actual database expressions\n        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n            raise NotSupportedError(\n                expression.__class__.__name__ + ' is disallowed in the filter '\n                'clause.'\n            )\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                self.check_filterable(expr)\n",
      "\ndef check_filterable(self, expression):\n    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n    from django.db.models.expressions import BaseExpression\n    \n    # Only check filterable attribute on actual database expressions\n    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n        raise NotSupportedError(\n            expression.__class__.__name__ + ' is disallowed in the filter '\n            'clause.'\n        )\n    if hasattr(expression, 'get_source_expressions'):\n        for expr in expression.get_source_expressions():\n            self.check_filterable(expr)\n",
      "\ndef check_filterable(self, expression):\n    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n    from django.db.models.expressions import BaseExpression\n    \n    # Only check filterable attribute on actual database expressions\n    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n        raise NotSupportedError(\n            expression.__class__.__name__ + ' is disallowed in the filter '\n            'clause.'\n        )\n    if hasattr(expression, 'get_source_expressions'):\n        for expr in expression.get_source_expressions():\n            self.check_filterable(expr)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..c5fdf3ae83 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,11 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+\n+    def check_filterable(self, expression):\n+        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        # Only check filterable attribute on actual database expressions\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n",
    "variant_0": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..f1ea12d2da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,13 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+\n+    def check_filterable(self, expression):\n+        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        from django.db.models.expressions import BaseExpression\n+        \n+        # Only check filterable attribute on actual database expressions\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n@@ -1132,6 +1138,8 @@ class Query(BaseExpression):\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n+            for expr in expression.get_source_expressions():\n+                self.check_filterable(expr)\n \n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n",
    "variant_1": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..d62c2a234b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,12 +1124,20 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n-        if hasattr(expression, 'get_source_expressions'):\n+\n+def check_filterable(self, expression):\n+    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+    from django.db.models.expressions import BaseExpression\n+    \n+    # Only check filterable attribute on actual database expressions\n+    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n+        raise NotSupportedError(\n+            expression.__class__.__name__ + ' is disallowed in the filter '\n+            'clause.'\n+        )\n+    if hasattr(expression, 'get_source_expressions'):\n+        for expr in expression.get_source_expressions():\n+            self.check_filterable(expr)\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n \n",
    "variant_2": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..d62c2a234b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,12 +1124,20 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n-        if hasattr(expression, 'get_source_expressions'):\n+\n+def check_filterable(self, expression):\n+    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+    from django.db.models.expressions import BaseExpression\n+    \n+    # Only check filterable attribute on actual database expressions\n+    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n+        raise NotSupportedError(\n+            expression.__class__.__name__ + ' is disallowed in the filter '\n+            'clause.'\n+        )\n+    if hasattr(expression, 'get_source_expressions'):\n+        for expr in expression.get_source_expressions():\n+            self.check_filterable(expr)\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n \n",
    "variant_3": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..f1ea12d2da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,13 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+\n+    def check_filterable(self, expression):\n+        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        from django.db.models.expressions import BaseExpression\n+        \n+        # Only check filterable attribute on actual database expressions\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n@@ -1132,6 +1138,8 @@ class Query(BaseExpression):\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n+            for expr in expression.get_source_expressions():\n+                self.check_filterable(expr)\n \n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n",
    "variant_4": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..d62c2a234b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,12 +1124,20 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n-        if hasattr(expression, 'get_source_expressions'):\n+\n+def check_filterable(self, expression):\n+    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+    from django.db.models.expressions import BaseExpression\n+    \n+    # Only check filterable attribute on actual database expressions\n+    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n+        raise NotSupportedError(\n+            expression.__class__.__name__ + ' is disallowed in the filter '\n+            'clause.'\n+        )\n+    if hasattr(expression, 'get_source_expressions'):\n+        for expr in expression.get_source_expressions():\n+            self.check_filterable(expr)\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n \n",
    "variant_5": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..f1ea12d2da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,13 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+\n+    def check_filterable(self, expression):\n+        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        from django.db.models.expressions import BaseExpression\n+        \n+        # Only check filterable attribute on actual database expressions\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n@@ -1132,6 +1138,8 @@ class Query(BaseExpression):\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n+            for expr in expression.get_source_expressions():\n+                self.check_filterable(expr)\n \n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n",
    "variant_6": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..f1ea12d2da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,13 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+\n+    def check_filterable(self, expression):\n+        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        from django.db.models.expressions import BaseExpression\n+        \n+        # Only check filterable attribute on actual database expressions\n+        if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n@@ -1132,6 +1138,8 @@ class Query(BaseExpression):\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n+            for expr in expression.get_source_expressions():\n+                self.check_filterable(expr)\n \n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n",
    "variant_7": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..d62c2a234b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,12 +1124,20 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n-        if hasattr(expression, 'get_source_expressions'):\n+\n+def check_filterable(self, expression):\n+    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+    from django.db.models.expressions import BaseExpression\n+    \n+    # Only check filterable attribute on actual database expressions\n+    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n+        raise NotSupportedError(\n+            expression.__class__.__name__ + ' is disallowed in the filter '\n+            'clause.'\n+        )\n+    if hasattr(expression, 'get_source_expressions'):\n+        for expr in expression.get_source_expressions():\n+            self.check_filterable(expr)\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n \n",
    "variant_8": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..d62c2a234b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,12 +1124,20 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n-        if hasattr(expression, 'get_source_expressions'):\n+\n+def check_filterable(self, expression):\n+    \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+    from django.db.models.expressions import BaseExpression\n+    \n+    # Only check filterable attribute on actual database expressions\n+    if isinstance(expression, BaseExpression) and not getattr(expression, 'filterable', True):\n+        raise NotSupportedError(\n+            expression.__class__.__name__ + ' is disallowed in the filter '\n+            'clause.'\n+        )\n+    if hasattr(expression, 'get_source_expressions'):\n+        for expr in expression.get_source_expressions():\n+            self.check_filterable(expr)\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n \n"
  }
}