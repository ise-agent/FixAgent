{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/migrations/serializer.py lines 267-272)": "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/migrations/serializer.py lines 267-272)": [
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__qualname__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n",
      "\nclass TypeSerializer(BaseSerializer):\n    def serialize(self):\n        special_cases = [\n            (models.Model, \"models.Model\", []),\n            (type(None), 'type(None)', []),\n        ]\n        for case, string, imports in special_cases:\n            if case is self.value:\n                return string, set(imports)\n        if hasattr(self.value, \"__module__\"):\n            module = self.value.__module__\n            if module == builtins.__name__:\n                return self.value.__name__, set()\n            else:\n                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..b244e90472 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -264,12 +264,13 @@ class TypeSerializer(BaseSerializer):\n         for case, string, imports in special_cases:\n             if case is self.value:\n                 return string, set(imports)\n+\n         if hasattr(self.value, \"__module__\"):\n             module = self.value.__module__\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_0": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_1": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_2": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_3": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_4": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_5": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_6": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_7": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..0b5b0ec156 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -267,9 +277,9 @@ class TypeSerializer(BaseSerializer):\n         if hasattr(self.value, \"__module__\"):\n             module = self.value.__module__\n             if module == builtins.__name__:\n-                return self.value.__name__, set()\n+                return self.value.__qualname__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n",
    "variant_8": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..7d477f0d93 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -255,6 +255,16 @@ class TupleSerializer(BaseSequenceSerializer):\n         return \"(%s)\" if len(self.value) != 1 else \"(%s,)\"\n \n \n+class TypeSerializer(BaseSerializer):\n+    def serialize(self):\n+        special_cases = [\n+            (models.Model, \"models.Model\", []),\n+            (type(None), 'type(None)', []),\n+        ]\n+        for case, string, imports in special_cases:\n+            if case is self.value:\n+                return string, set(imports)\n+\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n@@ -269,7 +279,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n"
  }
}