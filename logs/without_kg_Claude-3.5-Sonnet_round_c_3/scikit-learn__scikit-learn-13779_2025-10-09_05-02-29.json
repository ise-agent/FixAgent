{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/ensemble/voting.py lines 79-83)": "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/utils/validation.py lines 808-808)": "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given\n    parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/ensemble/voting.py lines 79-83)": [
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n",
      "\n        if sample_weight is not None:\n            for name, step in self.estimators:\n                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                    raise ValueError('Underlying estimator \\'%s\\' does not'\n                                     ' support sample weights.' % name)\n"
    ],
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/utils/validation.py lines 808-808)": [
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n",
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given\n    parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n",
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given\n    parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n",
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n",
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n",
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n",
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n",
      "\ndef has_fit_parameter(estimator, parameter):\n    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n\n    Parameters\n    ----------\n    estimator : object\n        An estimator to inspect.\n\n    parameter : str\n        The searched parameter.\n\n    Returns\n    -------\n    is_parameter: bool\n        Whether the parameter was found to be a named parameter of the\n        estimator's fit method.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> has_fit_parameter(SVC(), \"sample_weight\")\n    True\n\n    \"\"\"\n    if estimator is None:\n        return False\n    return parameter in signature(estimator.fit).parameters\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..1739c1571 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,7 +805,8 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n-    return parameter in signature(estimator.fit).parameters\n+\n+    return estimator is not None and parameter in signature(estimator.fit).parameters\n \n \n def check_symmetric(array, tol=1E-10, raise_warning=True,\n",
    "variant_0": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..ea6a91814 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,34 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given\n+    parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_1": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..1967337fd 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,32 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_2": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..ea6a91814 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,34 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given\n+    parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_3": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..ea6a91814 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,34 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given\n+    parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_4": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..f7d58b2ac 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,33 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_5": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..f7d58b2ac 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,33 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_6": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..f7d58b2ac 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,33 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_7": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..f7d58b2ac 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,33 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "variant_8": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..e320f2c21 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -76,9 +76,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n+\n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..f7d58b2ac 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,33 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+\n+def has_fit_parameter(estimator, parameter):\n+    \"\"\"Return True if the given estimator's fit method supports the given parameter.\n+\n+    Parameters\n+    ----------\n+    estimator : object\n+        An estimator to inspect.\n+\n+    parameter : str\n+        The searched parameter.\n+\n+    Returns\n+    -------\n+    is_parameter: bool\n+        Whether the parameter was found to be a named parameter of the\n+        estimator's fit method.\n+\n+    Examples\n+    --------\n+    >>> from sklearn.svm import SVC\n+    >>> has_fit_parameter(SVC(), \"sample_weight\")\n+    True\n+\n+    \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n"
  }
}