{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 306-346)": "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
    "Location 2 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 540-541)": "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n",
    "Location 3 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 347-375)": "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
    "Location 4 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 1079-1111)": "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 306-346)": [
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,     # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n",
      "\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # whether the legend can be dragged with the mouse\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n"
    ],
    "Location 2 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 540-541)": [
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        \n        # Initialize draggable functionality if requested\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n",
      "\n        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        \n        if draggable:\n            self.set_draggable(True)\n"
    ],
    "Location 3 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 347-375)": [
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n        \n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n        \n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n            \n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n",
      "\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the smaller of both lengths.\n\n        Other Parameters\n        ----------------\n        draggable : bool, default: False\n            Whether the legend can be dragged with the mouse.\n\n        %(_legend_kw_doc)s\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n"
    ],
    "Location 4 (/root/hy/projects_3/matplotlib/lib/matplotlib/legend.py lines 1079-1111)": [
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n",
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n",
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n",
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n",
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n",
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n",
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n",
      "\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..20ed9c7b4a 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -303,6 +303,7 @@ class Legend(Artist):\n \n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n+\n     def __init__(\n         self, parent, handles, labels,\n         loc=None,\n@@ -341,9 +342,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +363,8 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +542,12 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self._draggable = None\n+        \n+        # Enable draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1085,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_0": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..789ae18236 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,8 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +544,11 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self.set_title(title, prop=title_prop_fp)\n+        self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1086,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_1": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..789ae18236 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,8 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +544,11 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self.set_title(title, prop=title_prop_fp)\n+        self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1086,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_2": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..789ae18236 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,8 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +544,11 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self.set_title(title, prop=title_prop_fp)\n+        self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1086,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_3": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..789ae18236 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,8 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +544,11 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self.set_title(title, prop=title_prop_fp)\n+        self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1086,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_4": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..3ea7129162 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,9 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n+        \n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +545,11 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self.set_title(title, prop=title_prop_fp)\n+        self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1087,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_5": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..3ea7129162 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,9 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n+        \n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +545,11 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self.set_title(title, prop=title_prop_fp)\n+        self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1087,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_6": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9d643f3319 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,     # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,8 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,10 +543,17 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        \n+        # Initialize draggable functionality if requested\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n+        # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n             'linecolor':       ['get_color',           'get_facecolor'],\n@@ -1076,6 +1090,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_7": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..efa6f4e517 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,9 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n+            \n         %(_legend_kw_doc)s\n \n         Notes\n@@ -536,8 +544,12 @@ class Legend(Artist):\n             title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n             title_prop_fp.set_size(title_fontsize)\n \n+        self.set_title(title, prop=title_prop_fp)\n+\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n@@ -1076,6 +1088,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n",
    "variant_8": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..497736b144 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -301,6 +301,9 @@ class Legend(Artist):\n     def __str__(self):\n         return \"Legend\"\n \n+    @_api.make_keyword_only(\"3.6\", \"loc\")\n+    @_docstring.dedent_interpd\n+\n     @_api.make_keyword_only(\"3.6\", \"loc\")\n     @_docstring.dedent_interpd\n     def __init__(\n@@ -341,9 +344,11 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # whether the legend can be dragged with the mouse\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n+\n         \"\"\"\n         Parameters\n         ----------\n@@ -360,6 +365,9 @@ class Legend(Artist):\n \n         Other Parameters\n         ----------------\n+        draggable : bool, default: False\n+            Whether the legend can be dragged with the mouse.\n+\n         %(_legend_kw_doc)s\n \n         Notes\n@@ -537,8 +545,12 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n \n+        self.set_title(title, prop=title_prop_fp)\n+        self._draggable = None\n+        \n+        if draggable:\n+            self.set_draggable(True)\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n@@ -1076,6 +1088,7 @@ class Legend(Artist):\n             return inside, info\n         return self.legendPatch.contains(event)\n \n+\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         \"\"\"\n         Enable or disable mouse dragging support of the legend.\n"
  }
}