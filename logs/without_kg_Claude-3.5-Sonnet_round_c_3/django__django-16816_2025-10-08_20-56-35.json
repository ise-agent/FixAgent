{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/contrib/admin/checks.py lines 893-918)": "\n    def _check_list_display_item(self, obj, item, label):\n        if callable(item):\n            return []\n        \n        # First try to get the field from the model\n        try:\n            field = obj.model._meta.get_field(item)\n        except FieldDoesNotExist:\n            # If not a model field, check if it's a model attribute\n            try:\n                field = getattr(obj.model, item)\n            except AttributeError:\n                # Finally check if it's a callable attribute on the admin class\n                if hasattr(obj, item) and callable(getattr(obj, item)):\n                    return []\n                else:\n                    return [\n                        checks.Error(\n                            \"The value of '%s' refers to '%s', which is not a \"\n                            \"callable, an attribute of '%s', or an attribute or \"\n                            \"method on '%s'.\"\n                            % (\n                                label,\n                                item,\n                                obj.__class__.__name__,\n                                obj.model._meta.label,\n                            ),\n                            obj=obj.__class__,\n                            id=\"admin.E108\",\n                        )\n                    ]\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/contrib/admin/checks.py lines 893-918)": [
      "\ndef _check_list_display_item(self, obj, item, label):\n    if callable(item):\n        return []\n    \n    # First try to get field from model\n    try:\n        field = obj.model._meta.get_field(item)\n    except FieldDoesNotExist:\n        # Then try to get attribute from model\n        try:\n            field = getattr(obj.model, item)\n        except AttributeError:\n            # Finally check if it's a valid attribute on the admin class\n            if hasattr(obj, item):\n                attr = getattr(obj, item)\n                # Only allow callable attributes or properties on admin class\n                if callable(attr) or isinstance(attr, property):\n                    return []\n            \n            return [\n                checks.Error(\n                    \"The value of '%s' refers to '%s', which is not a \"\n                    \"callable, an attribute of '%s', or an attribute or \"\n                    \"method on '%s'.\"\n                    % (\n                        label,\n                        item,\n                        obj.__class__.__name__,\n                        obj.model._meta.label,\n                    ),\n                    obj=obj.__class__,\n                    id=\"admin.E108\",\n                )\n            ]\n",
      "\ndef _check_list_display_item(self, obj, item, label):\n    if callable(item):\n        return []\n    try:\n        field = obj.model._meta.get_field(item)\n    except FieldDoesNotExist:\n        try:\n            field = getattr(obj.model, item)\n        except AttributeError:\n            # Check if it's a valid attribute on the admin class\n            if hasattr(obj, item):\n                attr = getattr(obj, item)\n                # Only allow callable attributes or properties on admin class\n                if callable(attr) or hasattr(attr, '__get__'):\n                    return []\n            return [\n                checks.Error(\n                    \"The value of '%s' refers to '%s', which is not a \"\n                    \"callable, an attribute of '%s', or an attribute or \"\n                    \"method on '%s'.\"\n                    % (\n                        label,\n                        item,\n                        obj.__class__.__name__,\n                        obj.model._meta.label,\n                    ),\n                    obj=obj.__class__,\n                    id=\"admin.E108\",\n                )\n            ]\n",
      "\n    def _check_list_display_item(self, obj, item, label):\n        if callable(item):\n            return []\n        try:\n            field = obj.model._meta.get_field(item)\n        except FieldDoesNotExist:\n            try:\n                field = getattr(obj.model, item)\n            except AttributeError:\n                # Check if it's a valid attribute on the admin class\n                if hasattr(obj, item):\n                    attr = getattr(obj, item)\n                    # Only allow callable attributes or properties on the admin class\n                    if callable(attr) or hasattr(attr, '__get__'):\n                        return []\n                return [\n                    checks.Error(\n                        \"The value of '%s' refers to '%s', which is not a \"\n                        \"callable, an attribute of '%s', or an attribute or \"\n                        \"method on '%s'.\"\n                        % (\n                            label,\n                            item,\n                            obj.__class__.__name__,\n                            obj.model._meta.label,\n                        ),\n                        obj=obj.__class__,\n                        id=\"admin.E108\",\n                    )\n                ]\n",
      "\n    def _check_list_display_item(self, obj, item, label):\n        if callable(item):\n            return []\n        try:\n            field = obj.model._meta.get_field(item)\n        except FieldDoesNotExist:\n            try:\n                field = getattr(obj.model, item)\n            except AttributeError:\n                # Check if it's a valid callable attribute on the admin class\n                if hasattr(obj, item) and callable(getattr(obj, item)):\n                    return []\n                return [\n                    checks.Error(\n                        \"The value of '%s' refers to '%s', which is not a \"\n                        \"callable, an attribute of '%s', or an attribute or \"\n                        \"method on '%s'.\"\n                        % (\n                            label,\n                            item,\n                            obj.__class__.__name__,\n                            obj.model._meta.label,\n                        ),\n                        obj=obj.__class__,\n                        id=\"admin.E108\",\n                    )\n                ]\n",
      "\n    def _check_list_display_item(self, obj, item, label):\n        if callable(item):\n            return []\n        try:\n            field = obj.model._meta.get_field(item)\n        except FieldDoesNotExist:\n            try:\n                field = getattr(obj.model, item)\n            except AttributeError:\n                # Check if it's a valid attribute on the admin class\n                if hasattr(obj, item):\n                    attr = getattr(obj, item)\n                    # Only allow callable attributes or properties on admin class\n                    if callable(attr) or hasattr(attr, '__get__'):\n                        return []\n                return [\n                    checks.Error(\n                        \"The value of '%s' refers to '%s', which is not a \"\n                        \"callable, an attribute of '%s', or an attribute or \"\n                        \"method on '%s'.\"\n                        % (\n                            label,\n                            item,\n                            obj.__class__.__name__,\n                            obj.model._meta.label,\n                        ),\n                        obj=obj.__class__,\n                        id=\"admin.E108\",\n                    )\n                ]\n",
      "\ndef _check_list_display_item(self, obj, item, label):\n    if callable(item):\n        return []\n    \n    # First, try to get the field from the model\n    try:\n        field = obj.model._meta.get_field(item)\n    except FieldDoesNotExist:\n        # If not a model field, check if it's an attribute on the model\n        try:\n            field = getattr(obj.model, item)\n        except AttributeError:\n            # Finally, check if it's a valid attribute on the admin class\n            if hasattr(obj, item):\n                admin_attr = getattr(obj, item)\n                # Only allow callable admin attributes or those with admin_order_field\n                if callable(admin_attr) or hasattr(admin_attr, 'admin_order_field') or hasattr(admin_attr, 'short_description'):\n                    return []\n            \n            return [\n                checks.Error(\n                    \"The value of '%s' refers to '%s', which is not a \"\n                    \"callable, an attribute of '%s', or an attribute or \"\n                    \"method on '%s'.\"\n                    % (\n                        label,\n                        item,\n                        obj.__class__.__name__,\n                        obj.model._meta.label,\n                    ),\n                    obj=obj.__class__,\n                    id=\"admin.E108\",\n                )\n            ]\n",
      "\n    def _check_list_display_item(self, obj, item, label):\n        if callable(item):\n            return []\n        try:\n            field = obj.model._meta.get_field(item)\n        except FieldDoesNotExist:\n            try:\n                field = getattr(obj.model, item)\n            except AttributeError:\n                # Check if it's a valid callable attribute on the admin class\n                if hasattr(obj, item):\n                    attr = getattr(obj, item)\n                    if callable(attr):\n                        return []\n                return [\n                    checks.Error(\n                        \"The value of '%s' refers to '%s', which is not a \"\n                        \"callable, an attribute of '%s', or an attribute or \"\n                        \"method on '%s'.\"\n                        % (\n                            label,\n                            item,\n                            obj.__class__.__name__,\n                            obj.model._meta.label,\n                        ),\n                        obj=obj.__class__,\n                        id=\"admin.E108\",\n                    )\n                ]\n",
      "\n    def _check_list_display_item(self, obj, item, label):\n        if callable(item):\n            return []\n        \n        # First, try to get the field from the model\n        try:\n            field = obj.model._meta.get_field(item)\n        except FieldDoesNotExist:\n            # If not a model field, check if it's an attribute on the model\n            try:\n                field = getattr(obj.model, item)\n            except AttributeError:\n                # If not on model, check if it's a callable attribute on the admin class\n                if hasattr(obj, item) and callable(getattr(obj, item)):\n                    return []\n                # If none of the above, it's an error\n                return [\n                    checks.Error(\n                        \"The value of '%s' refers to '%s', which is not a \"\n                        \"callable, an attribute of '%s', or an attribute or \"\n                        \"method on '%s'.\"\n                        % (\n                            label,\n                            item,\n                            obj.__class__.__name__,\n                            obj.model._meta.label,\n                        ),\n                        obj=obj.__class__,\n                        id=\"admin.E108\",\n                    )\n                ]\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..956542f397 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,32 +890,40 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n+\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n+        \n+        # First, try to get the field from the model\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n+            # If not a model field, check if it exists as an attribute on the model\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n-                return [\n-                    checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n-                        obj=obj.__class__,\n-                        id=\"admin.E108\",\n-                    )\n-                ]\n+                # If not on model, check if it exists as an attribute on the admin class\n+                try:\n+                    admin_attr = getattr(obj, item)\n+                    # Admin attribute exists, validation passes\n+                except AttributeError:\n+                    # Item doesn't exist anywhere - return E108 error\n+                    return [\n+                        checks.Error(\n+                            \"The value of '%s' refers to '%s', which is not a \"\n+                            \"callable, an attribute of '%s', or an attribute or \"\n+                            \"method on '%s'.\"\n+                            % (\n+                                label,\n+                                item,\n+                                obj.__class__.__name__,\n+                                obj.model._meta.label,\n+                            ),\n+                            obj=obj.__class__,\n+                            id=\"admin.E108\",\n+                        )\n+                    ]\n         if isinstance(field, models.ManyToManyField) or (\n             getattr(field, \"rel\", None) and field.rel.field.many_to_one\n         ):\n",
    "variant_0": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..f9a3e7d38b 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,32 +890,38 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n+\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n+        \n+        # First try to get the field from the model\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n+            # If not a model field, check if it's a model attribute\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n-                return [\n-                    checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n-                        obj=obj.__class__,\n-                        id=\"admin.E108\",\n-                    )\n-                ]\n+                # Finally check if it's a callable attribute on the admin class\n+                if hasattr(obj, item) and callable(getattr(obj, item)):\n+                    return []\n+                else:\n+                    return [\n+                        checks.Error(\n+                            \"The value of '%s' refers to '%s', which is not a \"\n+                            \"callable, an attribute of '%s', or an attribute or \"\n+                            \"method on '%s'.\"\n+                            % (\n+                                label,\n+                                item,\n+                                obj.__class__.__name__,\n+                                obj.model._meta.label,\n+                            ),\n+                            obj=obj.__class__,\n+                            id=\"admin.E108\",\n+                        )\n+                    ]\n         if isinstance(field, models.ManyToManyField) or (\n             getattr(field, \"rel\", None) and field.rel.field.many_to_one\n         ):\n",
    "variant_1": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..0562b67c25 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,32 +890,41 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n-    def _check_list_display_item(self, obj, item, label):\n-        if callable(item):\n-            return []\n-        elif hasattr(obj, item):\n-            return []\n+\n+def _check_list_display_item(self, obj, item, label):\n+    if callable(item):\n+        return []\n+    \n+    # First try to get field from model\n+    try:\n+        field = obj.model._meta.get_field(item)\n+    except FieldDoesNotExist:\n+        # Then try to get attribute from model\n         try:\n-            field = obj.model._meta.get_field(item)\n-        except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n-                return [\n-                    checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n-                        obj=obj.__class__,\n-                        id=\"admin.E108\",\n-                    )\n-                ]\n+            field = getattr(obj.model, item)\n+        except AttributeError:\n+            # Finally check if it's a valid attribute on the admin class\n+            if hasattr(obj, item):\n+                attr = getattr(obj, item)\n+                # Only allow callable attributes or properties on admin class\n+                if callable(attr) or isinstance(attr, property):\n+                    return []\n+            \n+            return [\n+                checks.Error(\n+                    \"The value of '%s' refers to '%s', which is not a \"\n+                    \"callable, an attribute of '%s', or an attribute or \"\n+                    \"method on '%s'.\"\n+                    % (\n+                        label,\n+                        item,\n+                        obj.__class__.__name__,\n+                        obj.model._meta.label,\n+                    ),\n+                    obj=obj.__class__,\n+                    id=\"admin.E108\",\n+                )\n+            ]\n         if isinstance(field, models.ManyToManyField) or (\n             getattr(field, \"rel\", None) and field.rel.field.many_to_one\n         ):\n",
    "variant_2": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..9d55132596 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,32 +890,37 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n-    def _check_list_display_item(self, obj, item, label):\n-        if callable(item):\n-            return []\n-        elif hasattr(obj, item):\n-            return []\n+\n+def _check_list_display_item(self, obj, item, label):\n+    if callable(item):\n+        return []\n+    try:\n+        field = obj.model._meta.get_field(item)\n+    except FieldDoesNotExist:\n         try:\n-            field = obj.model._meta.get_field(item)\n-        except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n-                return [\n-                    checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n-                        obj=obj.__class__,\n-                        id=\"admin.E108\",\n-                    )\n-                ]\n+            field = getattr(obj.model, item)\n+        except AttributeError:\n+            # Check if it's a valid attribute on the admin class\n+            if hasattr(obj, item):\n+                attr = getattr(obj, item)\n+                # Only allow callable attributes or properties on admin class\n+                if callable(attr) or hasattr(attr, '__get__'):\n+                    return []\n+            return [\n+                checks.Error(\n+                    \"The value of '%s' refers to '%s', which is not a \"\n+                    \"callable, an attribute of '%s', or an attribute or \"\n+                    \"method on '%s'.\"\n+                    % (\n+                        label,\n+                        item,\n+                        obj.__class__.__name__,\n+                        obj.model._meta.label,\n+                    ),\n+                    obj=obj.__class__,\n+                    id=\"admin.E108\",\n+                )\n+            ]\n         if isinstance(field, models.ManyToManyField) or (\n             getattr(field, \"rel\", None) and field.rel.field.many_to_one\n         ):\n",
    "variant_3": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..664e808ec8 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,17 +890,22 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n+\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n+                # Check if it's a valid attribute on the admin class\n+                if hasattr(obj, item):\n+                    attr = getattr(obj, item)\n+                    # Only allow callable attributes or properties on the admin class\n+                    if callable(attr) or hasattr(attr, '__get__'):\n+                        return []\n                 return [\n                     checks.Error(\n                         \"The value of '%s' refers to '%s', which is not a \"\n",
    "variant_4": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..b231692362 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,17 +890,19 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n+\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n+                # Check if it's a valid callable attribute on the admin class\n+                if hasattr(obj, item) and callable(getattr(obj, item)):\n+                    return []\n                 return [\n                     checks.Error(\n                         \"The value of '%s' refers to '%s', which is not a \"\n",
    "variant_5": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..4b582d3192 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,17 +890,22 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n+\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n+                # Check if it's a valid attribute on the admin class\n+                if hasattr(obj, item):\n+                    attr = getattr(obj, item)\n+                    # Only allow callable attributes or properties on admin class\n+                    if callable(attr) or hasattr(attr, '__get__'):\n+                        return []\n                 return [\n                     checks.Error(\n                         \"The value of '%s' refers to '%s', which is not a \"\n",
    "variant_6": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..8da55098a0 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,32 +890,41 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n-    def _check_list_display_item(self, obj, item, label):\n-        if callable(item):\n-            return []\n-        elif hasattr(obj, item):\n-            return []\n+\n+def _check_list_display_item(self, obj, item, label):\n+    if callable(item):\n+        return []\n+    \n+    # First, try to get the field from the model\n+    try:\n+        field = obj.model._meta.get_field(item)\n+    except FieldDoesNotExist:\n+        # If not a model field, check if it's an attribute on the model\n         try:\n-            field = obj.model._meta.get_field(item)\n-        except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n-                return [\n-                    checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n-                        obj=obj.__class__,\n-                        id=\"admin.E108\",\n-                    )\n-                ]\n+            field = getattr(obj.model, item)\n+        except AttributeError:\n+            # Finally, check if it's a valid attribute on the admin class\n+            if hasattr(obj, item):\n+                admin_attr = getattr(obj, item)\n+                # Only allow callable admin attributes or those with admin_order_field\n+                if callable(admin_attr) or hasattr(admin_attr, 'admin_order_field') or hasattr(admin_attr, 'short_description'):\n+                    return []\n+            \n+            return [\n+                checks.Error(\n+                    \"The value of '%s' refers to '%s', which is not a \"\n+                    \"callable, an attribute of '%s', or an attribute or \"\n+                    \"method on '%s'.\"\n+                    % (\n+                        label,\n+                        item,\n+                        obj.__class__.__name__,\n+                        obj.model._meta.label,\n+                    ),\n+                    obj=obj.__class__,\n+                    id=\"admin.E108\",\n+                )\n+            ]\n         if isinstance(field, models.ManyToManyField) or (\n             getattr(field, \"rel\", None) and field.rel.field.many_to_one\n         ):\n",
    "variant_7": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..9c70449b15 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,17 +890,21 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n+\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n+                # Check if it's a valid callable attribute on the admin class\n+                if hasattr(obj, item):\n+                    attr = getattr(obj, item)\n+                    if callable(attr):\n+                        return []\n                 return [\n                     checks.Error(\n                         \"The value of '%s' refers to '%s', which is not a \"\n",
    "variant_8": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..687fc34906 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -890,17 +890,23 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 )\n             )\n \n+\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n+        \n+        # First, try to get the field from the model\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n+            # If not a model field, check if it's an attribute on the model\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n+                # If not on model, check if it's a callable attribute on the admin class\n+                if hasattr(obj, item) and callable(getattr(obj, item)):\n+                    return []\n+                # If none of the above, it's an error\n                 return [\n                     checks.Error(\n                         \"The value of '%s' refers to '%s', which is not a \"\n"
  }
}